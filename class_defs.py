import datetime

class DbForeignKey(object):
    def __init__(self, name, columns, remote_table, remote_columns):
        self.name = name
        self.columns = columns
        self.remote_table = remote_table
        self.remote_columns = remote_columns

def parse_value(schema, value_map, column_name):
    if column_name not in schema:
        return None
    value_type = schema[column_name]

    if column_name not in value_map:
        return None
    value = value_map[column_name]

    if value is None:
        return None

    if value_type == "NUMBER":
        if "." in value:
            return float(value)
        else:
            return int(value)
    elif value_type == "DATE":
        return datetime.datetime.strptime(value, "%m/%d/%Y %H:%M:%S")
    else:
        return value

class SFWID_OPER_CREW_ALT:
    schema = {
        "OPER_CREW_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "USERID": "STRING",
        "SKILL_CATEGORY": "STRING",
        "TIME_STAMP": "STRING",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
        "ASGND_LABOR_HOURS": "NUMBER",
    }
    primary_key_columns = [
        "OPER_CREW_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_CREW_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_CREW_ALT_FK2", ["SKILL_CATEGORY"], "SFFND_SKILL_CATEGORY_DEF", ["SKILL_CATEGORY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_CREW_ALT = parse_value(self.schema, column_value_map, "OPER_CREW_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.SKILL_CATEGORY = parse_value(self.schema, column_value_map, "SKILL_CATEGORY")
        "A category to which the required skill belongs."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ASGND_LABOR_HOURS = parse_value(self.schema, column_value_map, "ASGND_LABOR_HOURS")
        "Number of labor hours the shopfloor worker is assigned to work on the manufacturing operation."

class SFWID_EXTERNAL_DAT_COL_DETAIL:
    schema = {
        "DC_DETAIL_ID": "STRING",
        "EXTERNAL_DAT_COL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ORDER_NO": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "DAT_COL_TITLE": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "DAT_COL_ID": "STRING",
        "SERIAL_ID": "STRING",
        "LOT_ID": "STRING",
        "DAT_COL_STATUS": "STRING",
        "PROCESSING_MSG": "STRING",
        "PROCESSING_DATE": "DATE",
    }
    primary_key_columns = [
        "DC_DETAIL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_EXTERNAL_DATCOL_DTL_FK1", ["EXTERNAL_DAT_COL_ID"], "SFWID_EXTERNAL_DAT_COL", ["EXTERNAL_DAT_COL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DC_DETAIL_ID = parse_value(self.schema, column_value_map, "DC_DETAIL_ID")
        "Unique, system-generated identifier."
        self.EXTERNAL_DAT_COL_ID = parse_value(self.schema, column_value_map, "EXTERNAL_DAT_COL_ID")
        "Foreign key to SFWID_EXTERNAL_DAT_COL table."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        "Unique, user-assigned identifier of a given work order."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.DAT_COL_TITLE = parse_value(self.schema, column_value_map, "DAT_COL_TITLE")
        "Title/name of the data collection point."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        "Unique, system-generated identifier of the data collection."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.DAT_COL_STATUS = parse_value(self.schema, column_value_map, "DAT_COL_STATUS")
        "State of the data collection (POSTED  value posted successfully to blank dat col; OVERRIDE  override existing value in data col;  ERROR  error during posting of the value)"
        self.PROCESSING_MSG = parse_value(self.schema, column_value_map, "PROCESSING_MSG")
        "Processing and error message from the posting of the value."
        self.PROCESSING_DATE = parse_value(self.schema, column_value_map, "PROCESSING_DATE")
        "Date the last posting of value is performed."

class SFWID_MFG_OPER_BUYOFFS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_NO": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "BUYOFF_ID": "STRING",
        "STEP_NO": "STRING",
        "BUYOFF_TYPE": "STRING",
        "BUYOFF_CERT": "STRING",
        "BUYOFF_TITLE": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_NO",
        "OPER_KEY",
        "STEP_KEY",
        "BUYOFF_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.BUYOFF_ID = parse_value(self.schema, column_value_map, "BUYOFF_ID")
        "Unique, system-generated identifier of the buyoff."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.BUYOFF_TYPE = parse_value(self.schema, column_value_map, "BUYOFF_TYPE")
        "Type or classification of buyoff, e.g., MFG, MFG2, QA."
        self.BUYOFF_CERT = parse_value(self.schema, column_value_map, "BUYOFF_CERT")
        "The required certification for the given buyoff."
        self.BUYOFF_TITLE = parse_value(self.schema, column_value_map, "BUYOFF_TITLE")

class SFPL_OPERATION_REV:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "OPER_KEY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OPER_UPDT_NO": "NUMBER",
        "REV_LOCK_STATE": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "OPER_NO": "STRING",
        "STDOPER_FLAG": "STRING",
        "STDOPER_PLAN_FLAG": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_VERSION",
        "PLAN_REVISION",
        "PLAN_ALTERATIONS",
        "OPER_KEY",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_OPERREV_PLANDESC_FK", ["PLAN_ID","OPER_KEY","OPER_UPDT_NO"], "SFPL_OPERATION_DESC", ["PLAN_ID","OPER_KEY","OPER_UPDT_NO"]),
        DbForeignKey("SFPL_OPERREV_PLANREV_FK", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
    ]
    refs = [
        "SFWID_USER_OPER_CHG_ACK_FK1",
        "SFPL_STEPREV_OPERREV_FK",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        "Unique, system-generated sequence number identifying a given version/revision/alteration of a given operation description."
        self.REV_LOCK_STATE = parse_value(self.schema, column_value_map, "REV_LOCK_STATE")
        "The work Plan Revision lock state. Used for creating multilevel user locks, GroupWare concept. Not in use."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        self.STDOPER_FLAG = parse_value(self.schema, column_value_map, "STDOPER_FLAG")
        self.STDOPER_PLAN_FLAG = parse_value(self.schema, column_value_map, "STDOPER_PLAN_FLAG")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.SFWID_USER_OPER_CHG_ACK_FK1 = []
        self.SFPL_STEPREV_OPERREV_FK = []

class SFCORE_PRINTER_DEF:
    schema = {
        "PRINTER_ID": "STRING",
        "OBSOLETE": "STRING",
        "STATUS": "STRING",
        "DOC_COUNT": "NUMBER",
        "PRINTER_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "PRINTER_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "FWPPDEF_FWPDEF_FK",
        "FWPEDEF_FWPDEF_FK",
        "FWPEDEF_FWPDEF_FK2",
        "FWCOPYREQ_PRINTER_FK",
        "FWPSXREF_FWPDEF_FK",
    ]
    def __init__(self, column_value_map):
        self.PRINTER_ID = parse_value(self.schema, column_value_map, "PRINTER_ID")
        "Unique system generated identifier for a given printer."
        self.OBSOLETE = parse_value(self.schema, column_value_map, "OBSOLETE")
        "Flag that indicates if the given record is obsolete."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The status of the disposition/rework task. For example: IN PROCESS, DISPOSITIONED, or COMPLETE."
        self.DOC_COUNT = parse_value(self.schema, column_value_map, "DOC_COUNT")
        "Count of the number of documents processed by a given printer."
        self.PRINTER_DESC = parse_value(self.schema, column_value_map, "PRINTER_DESC")
        "Description of the printer."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.FWPPDEF_FWPDEF_FK = []
        self.FWPEDEF_FWPDEF_FK = []
        self.FWPEDEF_FWPDEF_FK2 = []
        self.FWCOPYREQ_PRINTER_FK = []
        self.FWPSXREF_FWPDEF_FK = []

class SFCORE_MODULES:
    schema = {
        "GROUP_NAME": "STRING",
        "GROUP_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "GROUP_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFCORE_MM_OBJECT_STYPE_FK",
        "SFCORE_CFG_LIB_FK1",
        "SFCORE_MESSAGES_STYPE_FK",
        "SFCORE_ROLES_STYPE_FK",
        "SFMOBILE_WIZ_SCENES_STYPE_FK2",
        "SFCORE_PRIVS_STYPE_FK",
        "SFCORE_UDV_LIB_STYPE_FK",
        "SFCORE_SQL_LIB_STYPE_FK",
        "SFMOBILE_WIZARD_STYPE_FK1",
        "SFCORE_GUI_GRAPHICS_STYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.GROUP_NAME = parse_value(self.schema, column_value_map, "GROUP_NAME")
        "name of the group"
        self.GROUP_DESC = parse_value(self.schema, column_value_map, "GROUP_DESC")
        "description of the group"
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.SFCORE_MM_OBJECT_STYPE_FK = []
        self.SFCORE_CFG_LIB_FK1 = []
        self.SFCORE_MESSAGES_STYPE_FK = []
        self.SFCORE_ROLES_STYPE_FK = []
        self.SFMOBILE_WIZ_SCENES_STYPE_FK2 = []
        self.SFCORE_PRIVS_STYPE_FK = []
        self.SFCORE_UDV_LIB_STYPE_FK = []
        self.SFCORE_SQL_LIB_STYPE_FK = []
        self.SFMOBILE_WIZARD_STYPE_FK1 = []
        self.SFCORE_GUI_GRAPHICS_STYPE_FK = []

class SFPL_PLAN_DESC_SEC_GRP:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "SECURITY_GROUP": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_UPDT_NO",
        "SECURITY_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLAN_DESC_SEC_GRP_FK1", ["SECURITY_GROUP"], "SFFND_SECURITY_GROUP_DEF", ["SECURITY_GROUP"]),
        DbForeignKey("SFPL_PLAN_DESC_SEC_GRP_FK2", ["PLAN_ID","PLAN_UPDT_NO"], "SFPL_PLAN_DESC", ["PLAN_ID","PLAN_UPDT_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFCORE_CONFIG_MODULE_DEF:
    schema = {
        "CONFIG_MODULE_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "CONFIG_MODULE_DESC": "STRING",
    }
    primary_key_columns = [
        "CONFIG_MODULE_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFCORE_GLOBALCONF_CONFMOD_FK",
    ]
    def __init__(self, column_value_map):
        self.CONFIG_MODULE_NAME = parse_value(self.schema, column_value_map, "CONFIG_MODULE_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.CONFIG_MODULE_DESC = parse_value(self.schema, column_value_map, "CONFIG_MODULE_DESC")
        self.SFCORE_GLOBALCONF_CONFMOD_FK = []

class SFLTA_TRANSACTION_QUEUE:
    schema = {
        "SEQUENCE_ID": "NUMBER",
        "TRANSACTION_ID": "STRING",
        "PARAMS": "STRING",
        "USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "SEQUENCE_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SEQUENCE_ID = parse_value(self.schema, column_value_map, "SEQUENCE_ID")
        self.TRANSACTION_ID = parse_value(self.schema, column_value_map, "TRANSACTION_ID")
        self.PARAMS = parse_value(self.schema, column_value_map, "PARAMS")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")

class SFPL_MFG_BOM_REV:
    schema = {
        "BOM_ID": "STRING",
        "ITEM_ID": "STRING",
        "MFG_BOM_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "MFG_BOM_STATUS": "STRING",
        "COMMENTS": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "BOM_NO": "STRING",
        "MBOM_REV_DATE": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "BOM_TYPE": "STRING",
        "PROGRAM": "STRING",
        "VISUAL_FILE_LINK": "STRING",
        "UCF_MBOM_REV_VCH1": "STRING",
        "PROJECT": "STRING",
        "PLG_GROUP": "STRING",
        "UCF_MBOM_REV_VCH2": "STRING",
        "UCF_MBOM_REV_VCH3": "STRING",
        "ENG_GROUP": "STRING",
        "UCF_MBOM_REV_VCH4": "STRING",
        "UCF_MBOM_REV_VCH5": "STRING",
        "UCF_MBOM_REV_VCH6": "STRING",
        "UCF_MBOM_REV_VCH7": "STRING",
        "UCF_MBOM_REV_VCH8": "STRING",
        "UCF_MBOM_REV_VCH9": "STRING",
        "UCF_MBOM_REV_VCH10": "STRING",
        "UCF_MBOM_REV_VCH11": "STRING",
        "UCF_MBOM_REV_VCH12": "STRING",
        "UCF_MBOM_REV_VCH13": "STRING",
        "UCF_MBOM_REV_VCH14": "STRING",
        "UCF_MBOM_REV_VCH15": "STRING",
        "UCF_MBOM_REV_VCH255_1": "STRING",
        "UCF_MBOM_REV_VCH255_2": "STRING",
        "UCF_MBOM_REV_VCH255_3": "STRING",
        "UCF_MBOM_REV_VCH4000_1": "STRING",
        "UCF_MBOM_REV_VCH4000_2": "STRING",
        "UCF_MBOM_REV_NUM1": "NUMBER",
        "UCF_MBOM_REV_NUM2": "NUMBER",
        "UCF_MBOM_REV_NUM3": "NUMBER",
        "UCF_MBOM_REV_NUM4": "NUMBER",
        "UCF_MBOM_REV_NUM5": "NUMBER",
        "UCF_MBOM_REV_DATE1": "STRING",
        "UCF_MBOM_REV_DATE2": "STRING",
        "UCF_MBOM_REV_DATE3": "STRING",
        "UCF_MBOM_REV_DATE4": "STRING",
        "UCF_MBOM_REV_DATE5": "STRING",
        "UCF_MBOM_REV_FLAG1": "STRING",
        "UCF_MBOM_REV_FLAG2": "STRING",
        "UCF_MBOM_REV_FLAG3": "STRING",
        "UCF_MBOM_REV_FLAG4": "STRING",
        "UCF_MBOM_REV_FLAG5": "STRING",
        "SECURITY_GROUP": "STRING",
        "PHANTOM_KIT_FLAG": "STRING",
        "CREATED_FROM_BOM_ID": "STRING",
        "SOURCE": "STRING",
        "COMMODITY_JURISDICTION": "STRING",
        "COMMODITY_CLASSIFICATION": "STRING",
        "CREATED_FROM_EBOM_ID": "STRING",
        "LOCATION_ID": "STRING",
        "BOM_SUBTYPE": "STRING",
        "WORK_FLOW": "STRING",
        "SEARCH_COL": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFGBOMREV_ITEMMSTR_FK", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_REV_FK9", ["CREATED_FROM_EBOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_REV_FK6", ["PLG_GROUP"], "SFFND_PLG_GROUP_DEF", ["PLG_GROUP"]),
        DbForeignKey("SFPL_MFG_BOM_REV_FK7", ["PROJECT"], "SFFND_PROJECT_DEF", ["PROJECT"]),
        DbForeignKey("SFPL_MFG_BOM_REV_FK8", ["BOM_TYPE","BOM_SUBTYPE","WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
        DbForeignKey("SFPL_MFG_BOM_REV_FK3", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("SFPL_MFG_BOM_REV_FK4", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFPL_MFG_BOM_REV_FK5", ["ENG_GROUP"], "SFFND_ENG_GROUP_DEF", ["ENG_GROUP"]),
    ]
    refs = [
        "SFPL_MFG_BOM_REV_FK9",
        "SFPL_MFG_BOM_ALT_TRANSFORM_FK1",
        "SFPL_MFG_BOM_REV_EFF_FK1",
        "SFPL_PLAN_DESC_BOM_FK",
        "SFPL_MFG_BOM_TRANSFORM_FK1",
        "SFPL_IMPACTED_OBJECTS_FK3",
        "SFPL_MFG_BOM_MM_OBJECT_FK2",
        "SFPL_PLANNED_ACTIONS_FK3",
        "SFPL_MFG_BOM_CONFIG_TRANS_FK1",
        "SFPL_RESULTING_OBJECTS_FK3",
        "SFWID_ORDER_DESC_BOM_FK",
        "SFPL_MFG_TARGET_BOMS_FK1",
        "SFFND_BOM_TASK_FK2",
        "SFPL_MFG_BOM_TOOL_FK1",
        "SFPL_MFG_BOM_LINE_BOM_REV_FK",
        "SFPL_MFG_BOM_REF_DES_TRANS_FK1",
        "SFPL_AFFECTED_OBJECTS_FK3",
        "SFPL_MFG_BOM_REV_SEC_GRP_FK2",
        "SFWID_ORDER_DESC_ALT_FK2",
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.MFG_BOM_CHG = parse_value(self.schema, column_value_map, "MFG_BOM_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given BOM."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.MFG_BOM_STATUS = parse_value(self.schema, column_value_map, "MFG_BOM_STATUS")
        "Status of the revised BOM, i.e.., IN_PROCESS or COMPLETE."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Additional comments about a given BOM revision."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.BOM_NO = parse_value(self.schema, column_value_map, "BOM_NO")
        self.MBOM_REV_DATE = parse_value(self.schema, column_value_map, "MBOM_REV_DATE")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.BOM_TYPE = parse_value(self.schema, column_value_map, "BOM_TYPE")
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        self.VISUAL_FILE_LINK = parse_value(self.schema, column_value_map, "VISUAL_FILE_LINK")
        self.UCF_MBOM_REV_VCH1 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH1")
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        self.PLG_GROUP = parse_value(self.schema, column_value_map, "PLG_GROUP")
        self.UCF_MBOM_REV_VCH2 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH2")
        self.UCF_MBOM_REV_VCH3 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH3")
        self.ENG_GROUP = parse_value(self.schema, column_value_map, "ENG_GROUP")
        self.UCF_MBOM_REV_VCH4 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH4")
        self.UCF_MBOM_REV_VCH5 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH5")
        self.UCF_MBOM_REV_VCH6 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH6")
        self.UCF_MBOM_REV_VCH7 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH7")
        self.UCF_MBOM_REV_VCH8 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH8")
        self.UCF_MBOM_REV_VCH9 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH9")
        self.UCF_MBOM_REV_VCH10 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH10")
        self.UCF_MBOM_REV_VCH11 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH11")
        self.UCF_MBOM_REV_VCH12 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH12")
        self.UCF_MBOM_REV_VCH13 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH13")
        self.UCF_MBOM_REV_VCH14 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH14")
        self.UCF_MBOM_REV_VCH15 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH15")
        self.UCF_MBOM_REV_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH255_1")
        self.UCF_MBOM_REV_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH255_2")
        self.UCF_MBOM_REV_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH255_3")
        self.UCF_MBOM_REV_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH4000_1")
        self.UCF_MBOM_REV_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH4000_2")
        self.UCF_MBOM_REV_NUM1 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_NUM1")
        self.UCF_MBOM_REV_NUM2 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_NUM2")
        self.UCF_MBOM_REV_NUM3 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_NUM3")
        self.UCF_MBOM_REV_NUM4 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_NUM4")
        self.UCF_MBOM_REV_NUM5 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_NUM5")
        self.UCF_MBOM_REV_DATE1 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_DATE1")
        self.UCF_MBOM_REV_DATE2 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_DATE2")
        self.UCF_MBOM_REV_DATE3 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_DATE3")
        self.UCF_MBOM_REV_DATE4 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_DATE4")
        self.UCF_MBOM_REV_DATE5 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_DATE5")
        self.UCF_MBOM_REV_FLAG1 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_FLAG1")
        self.UCF_MBOM_REV_FLAG2 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_FLAG2")
        self.UCF_MBOM_REV_FLAG3 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_FLAG3")
        self.UCF_MBOM_REV_FLAG4 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_FLAG4")
        self.UCF_MBOM_REV_FLAG5 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_FLAG5")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.PHANTOM_KIT_FLAG = parse_value(self.schema, column_value_map, "PHANTOM_KIT_FLAG")
        "Determines if the item is phantom or not."
        self.CREATED_FROM_BOM_ID = parse_value(self.schema, column_value_map, "CREATED_FROM_BOM_ID")
        self.SOURCE = parse_value(self.schema, column_value_map, "SOURCE")
        "Value can be part of the SyncBom inbound message that would indicate the source of the BOM."
        self.COMMODITY_JURISDICTION = parse_value(self.schema, column_value_map, "COMMODITY_JURISDICTION")
        "Commodity Jurisdiction of BOM Revision."
        self.COMMODITY_CLASSIFICATION = parse_value(self.schema, column_value_map, "COMMODITY_CLASSIFICATION")
        "Commodity Classification of BOM Revision."
        self.CREATED_FROM_EBOM_ID = parse_value(self.schema, column_value_map, "CREATED_FROM_EBOM_ID")
        "Stores EBOMID to maintain link between EBOM to MBOM."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        self.BOM_SUBTYPE = parse_value(self.schema, column_value_map, "BOM_SUBTYPE")
        self.WORK_FLOW = parse_value(self.schema, column_value_map, "WORK_FLOW")
        self.SEARCH_COL = parse_value(self.schema, column_value_map, "SEARCH_COL")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        "ERP BOM No"
        self.SFPL_MFG_BOM_REV_FK9 = []
        self.SFPL_MFG_BOM_ALT_TRANSFORM_FK1 = []
        self.SFPL_MFG_BOM_REV_EFF_FK1 = []
        self.SFPL_PLAN_DESC_BOM_FK = []
        self.SFPL_MFG_BOM_TRANSFORM_FK1 = []
        self.SFPL_IMPACTED_OBJECTS_FK3 = []
        self.SFPL_MFG_BOM_MM_OBJECT_FK2 = []
        self.SFPL_PLANNED_ACTIONS_FK3 = []
        self.SFPL_MFG_BOM_CONFIG_TRANS_FK1 = []
        self.SFPL_RESULTING_OBJECTS_FK3 = []
        self.SFWID_ORDER_DESC_BOM_FK = []
        self.SFPL_MFG_TARGET_BOMS_FK1 = []
        self.SFFND_BOM_TASK_FK2 = []
        self.SFPL_MFG_BOM_TOOL_FK1 = []
        self.SFPL_MFG_BOM_LINE_BOM_REV_FK = []
        self.SFPL_MFG_BOM_REF_DES_TRANS_FK1 = []
        self.SFPL_AFFECTED_OBJECTS_FK3 = []
        self.SFPL_MFG_BOM_REV_SEC_GRP_FK2 = []
        self.SFWID_ORDER_DESC_ALT_FK2 = []

class SFQA_CA_AFFECTED_WORK_LDC_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "LOCATION_ID": "STRING",
        "DEPARTMENT_ID": "STRING",
        "CENTER_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        self.DEPARTMENT_ID = parse_value(self.schema, column_value_map, "DEPARTMENT_ID")
        self.CENTER_ID = parse_value(self.schema, column_value_map, "CENTER_ID")

class SFSQA_SUPPLIER_CERT_XREF:
    schema = {
        "SUPPLIER_CODE": "STRING",
        "CERT": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "NOTES": "STRING",
    }
    primary_key_columns = [
        "SUPPLIER_CODE",
        "CERT",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_SUPPLIER_CERT_XREF_FK1", ["SUPPLIER_CODE","CERT"], "SFSQA_SUPPLIER_CERT", ["SUPPLIER_CODE","CERT"]),
        DbForeignKey("SFSQA_SUPPLIER_CERT_XREF_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last Operation (UPDATE, INSERT, COPY, etc.) applied to the record."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "User certificate notes."

class SFFND_PROGRAM_DEF:
    schema = {
        "PROGRAM": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "PROGRAM_DESC": "STRING",
        "UCF_PROGRAM_VCH1": "STRING",
        "UCF_PROGRAM_VCH2": "STRING",
        "UCF_PROGRAM_FLAG1": "STRING",
        "UCF_PROGRAM_VCH3": "STRING",
        "UCF_PROGRAM_VCH4": "STRING",
        "UCF_PROGRAM_VCH5": "STRING",
        "UCF_PROGRAM_VCH6": "STRING",
        "UCF_PROGRAM_VCH7": "STRING",
        "UCF_PROGRAM_VCH8": "STRING",
        "UCF_PROGRAM_VCH9": "STRING",
        "UCF_PROGRAM_VCH10": "STRING",
        "UCF_PROGRAM_VCH11": "STRING",
        "UCF_PROGRAM_VCH12": "STRING",
        "UCF_PROGRAM_VCH13": "STRING",
        "UCF_PROGRAM_VCH14": "STRING",
        "UCF_PROGRAM_VCH15": "STRING",
        "UCF_PROGRAM_NUM1": "NUMBER",
        "UCF_PROGRAM_NUM2": "NUMBER",
        "UCF_PROGRAM_NUM3": "NUMBER",
        "UCF_PROGRAM_NUM4": "NUMBER",
        "UCF_PROGRAM_NUM5": "NUMBER",
        "UCF_PROGRAM_DATE1": "STRING",
        "UCF_PROGRAM_DATE2": "STRING",
        "UCF_PROGRAM_DATE3": "STRING",
        "UCF_PROGRAM_DATE4": "STRING",
        "UCF_PROGRAM_DATE5": "STRING",
        "UCF_PROGRAM_FLAG2": "STRING",
        "UCF_PROGRAM_FLAG3": "STRING",
        "UCF_PROGRAM_FLAG4": "STRING",
        "UCF_PROGRAM_FLAG5": "STRING",
        "UCF_PROGRAM_VCH255_1": "STRING",
        "UCF_PROGRAM_VCH255_2": "STRING",
        "UCF_PROGRAM_VCH255_3": "STRING",
        "UCF_PROGRAM_VCH4000_1": "STRING",
        "UCF_PROGRAM_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "PROGRAM",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_MFG_BOM_REV_FK3",
        "SFPL_MFG_BOM_COMP_PROGRAM_FK",
        "SFFND_USER_PROGRAM_PRGM_FK",
        "SFWID_OWP_DEF_FK2",
        "SFFND_USER_CERT_PRGM_PRGM_FK",
        "SFFND_MODEL_DEF_FK1",
        "SFPL_MFG_BOM_REV_ORIG_FK2",
        "SFWID_ORDER_DESC_PRGM_FK",
        "MOTT_TIME_MATERIAL_FK5",
        "SFPL_MFG_BOM_TOOL_ORIG_FK3",
        "SFQA_CA_REQUEST_FK4",
        "SFPL_MFG_BOM_COMP_ORIG_FK4",
        "SFPL_PLAN_MASTER_PRGM_FK",
        "SFQA_DISC_ITEM_PROG_FK",
        "SFPL_IA_PW_PROGRAM_FK",
        "SFPL_MFG_BOM_TOOL_FK3",
        "SFPL_ITEM_PROG_DETLS_PROG_FK",
        "SFWID_ORDER_DESC_ALT_FK6",
    ]
    def __init__(self, column_value_map):
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "A specific project or program."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.PROGRAM_DESC = parse_value(self.schema, column_value_map, "PROGRAM_DESC")
        "A description or name of the program."
        self.UCF_PROGRAM_VCH1 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_VCH2 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PROGRAM_VCH3 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_VCH4 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_VCH5 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_VCH6 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_VCH7 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_VCH8 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_VCH9 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_VCH10 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_VCH11 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_VCH12 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_VCH13 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_VCH14 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_VCH15 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROGRAM_NUM1 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PROGRAM_NUM2 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_PROGRAM_NUM3 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_PROGRAM_NUM4 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_PROGRAM_NUM5 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_PROGRAM_DATE1 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_PROGRAM_DATE2 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_PROGRAM_DATE3 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_PROGRAM_DATE4 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_PROGRAM_DATE5 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_PROGRAM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PROGRAM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PROGRAM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PROGRAM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PROGRAM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PROGRAM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PROGRAM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PROGRAM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_PROGRAM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PROGRAM_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.SFPL_MFG_BOM_REV_FK3 = []
        self.SFPL_MFG_BOM_COMP_PROGRAM_FK = []
        self.SFFND_USER_PROGRAM_PRGM_FK = []
        self.SFWID_OWP_DEF_FK2 = []
        self.SFFND_USER_CERT_PRGM_PRGM_FK = []
        self.SFFND_MODEL_DEF_FK1 = []
        self.SFPL_MFG_BOM_REV_ORIG_FK2 = []
        self.SFWID_ORDER_DESC_PRGM_FK = []
        self.MOTT_TIME_MATERIAL_FK5 = []
        self.SFPL_MFG_BOM_TOOL_ORIG_FK3 = []
        self.SFQA_CA_REQUEST_FK4 = []
        self.SFPL_MFG_BOM_COMP_ORIG_FK4 = []
        self.SFPL_PLAN_MASTER_PRGM_FK = []
        self.SFQA_DISC_ITEM_PROG_FK = []
        self.SFPL_IA_PW_PROGRAM_FK = []
        self.SFPL_MFG_BOM_TOOL_FK3 = []
        self.SFPL_ITEM_PROG_DETLS_PROG_FK = []
        self.SFWID_ORDER_DESC_ALT_FK6 = []

class SFWID_OPER_TEXT_SV_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFRPT_REPORT_MAINTENANCE:
    schema = {
        "REPORT_ID": "STRING",
        "REPORT_TYPE": "STRING",
        "REPORT_TITLE": "STRING",
        "ACTIVE_FLAG": "STRING",
        "INPUT_UDV_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "REPORT_ID",
        "REPORT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFRPT_REPORT_MAINTENANCE_FK2", ["REPORT_TYPE"], "SFRPT_REPORT_TYPE_DEF", ["REPORT_TYPE"]),
        DbForeignKey("SFRPT_REPORT_MAINTENANCE_FK1", ["REPORT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REPORT_ID = parse_value(self.schema, column_value_map, "REPORT_ID")
        "System generated unique identifier for a given report."
        self.REPORT_TYPE = parse_value(self.schema, column_value_map, "REPORT_TYPE")
        "Type of report."
        self.REPORT_TITLE = parse_value(self.schema, column_value_map, "REPORT_TITLE")
        "Report title."
        self.ACTIVE_FLAG = parse_value(self.schema, column_value_map, "ACTIVE_FLAG")
        "Determines if report is active or not."
        self.INPUT_UDV_ID = parse_value(self.schema, column_value_map, "INPUT_UDV_ID")
        "Unique system generated id of input UDV."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_MFG_BOM_COMP:
    schema = {
        "BOM_ID": "STRING",
        "BOM_COMP_ID": "STRING",
        "ITEM_ID": "STRING",
        "PARENT_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "SPOOL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "FIND_NO": "STRING",
        "QTY": "NUMBER",
        "DATASOURCE": "STRING",
        "ITEM_NOTES": "STRING",
        "OPT_DC1_FLAG": "STRING",
        "OPT_DC2_FLAG": "STRING",
        "OPT_DC3_FLAG": "STRING",
        "OPT_DC4_FLAG": "STRING",
        "UCF_MBOM_VCH1": "STRING",
        "UCF_MBOM_VCH2": "STRING",
        "UCF_MBOM_VCH3": "STRING",
        "UCF_MBOM_VCH4": "STRING",
        "UCF_MBOM_VCH5": "STRING",
        "UCF_MBOM_VCH6": "STRING",
        "UCF_MBOM_VCH7": "STRING",
        "UCF_MBOM_VCH8": "STRING",
        "UCF_MBOM_VCH9": "STRING",
        "UCF_MBOM_VCH10": "STRING",
        "UCF_MBOM_VCH11": "STRING",
        "UCF_MBOM_VCH12": "STRING",
        "UCF_MBOM_VCH13": "STRING",
        "UCF_MBOM_VCH14": "STRING",
        "UCF_MBOM_VCH15": "STRING",
        "UCF_MBOM_NUM1": "NUMBER",
        "UCF_MBOM_NUM2": "NUMBER",
        "UCF_MBOM_NUM3": "NUMBER",
        "UCF_MBOM_NUM4": "NUMBER",
        "UCF_MBOM_NUM5": "NUMBER",
        "UCF_MBOM_DATE1": "STRING",
        "UCF_MBOM_DATE2": "STRING",
        "UCF_MBOM_DATE3": "STRING",
        "UCF_MBOM_DATE4": "STRING",
        "UCF_MBOM_DATE5": "STRING",
        "UCF_MBOM_FLAG1": "STRING",
        "UCF_MBOM_FLAG2": "STRING",
        "UCF_MBOM_FLAG3": "STRING",
        "UCF_MBOM_FLAG4": "STRING",
        "UCF_MBOM_FLAG5": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "EFF_FROM": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "VISUAL_FILE_LINK": "STRING",
        "UCF_MBOM_VCH255_1": "STRING",
        "UCF_MBOM_VCH255_2": "STRING",
        "UCF_MBOM_VCH255_3": "STRING",
        "UCF_MBOM_VCH4000_1": "STRING",
        "UCF_MBOM_VCH4000_2": "STRING",
        "PHANTOM_FLAG": "STRING",
        "PHANTOM_KIT_FLAG": "STRING",
        "BOM_LINE_ID": "STRING",
        "PROGRAM": "STRING",
        "LATEST_COMP_BOM_ID": "STRING",
        "PROJECT": "STRING",
        "ALT_GROUP": "STRING",
        "QTY_UOM_OVERRIDE_FLAG": "STRING",
        "LOCATION_ID": "STRING",
        "UOM": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
        "LATEST_EFF_GRP_REV_FLAG": "STRING",
        "RAW_MATERIAL_LENGTH": "NUMBER",
        "RAW_MATERIAL_WIDTH": "NUMBER",
        "NO_OF_PCS": "NUMBER",
    }
    primary_key_columns = [
        "BOM_ID",
        "BOM_COMP_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_COMP_PARENT_FK", ["BOM_ID","BOM_LINE_ID"], "SFPL_MFG_BOM_REV_LINE_NO", ["BOM_ID","BOM_LINE_ID"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_ITEM_FK", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_EFF_FK", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_UNIT_FK", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_UOM_FK", ["UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_LOCATION_FK", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_PROGRAM_FK", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_PROJECT_FK", ["PROJECT"], "SFFND_PROJECT_DEF", ["PROJECT"]),
    ]
    refs = [
        "SFPL_MFG_BOM_COMP_CONFIG_FK2",
        "SFPL_MFG_BOM_COMP_ALT_XREF_FK1",
        "SFPL_MFG_BOM_REF_DES_FK1",
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Corresponding BOM for which BOM Component is added"
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.PARENT_ITEM_ID = parse_value(self.schema, column_value_map, "PARENT_ITEM_ID")
        "Unique, system-generated ID of the parent component/part."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.SPOOL_FLAG = parse_value(self.schema, column_value_map, "SPOOL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by a spool number."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by expiration date."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.QTY = parse_value(self.schema, column_value_map, "QTY")
        "The quantity of component item/parts required to fabricate/assemble the parent part."
        self.DATASOURCE = parse_value(self.schema, column_value_map, "DATASOURCE")
        "The source system from which data in this record has been originated."
        self.ITEM_NOTES = parse_value(self.schema, column_value_map, "ITEM_NOTES")
        "Additional information about a given component/part."
        self.OPT_DC1_FLAG = parse_value(self.schema, column_value_map, "OPT_DC1_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC2_FLAG = parse_value(self.schema, column_value_map, "OPT_DC2_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC3_FLAG = parse_value(self.schema, column_value_map, "OPT_DC3_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC4_FLAG = parse_value(self.schema, column_value_map, "OPT_DC4_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.UCF_MBOM_VCH1 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH1")
        self.UCF_MBOM_VCH2 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH2")
        self.UCF_MBOM_VCH3 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH3")
        self.UCF_MBOM_VCH4 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH4")
        self.UCF_MBOM_VCH5 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH5")
        self.UCF_MBOM_VCH6 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH6")
        self.UCF_MBOM_VCH7 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH7")
        self.UCF_MBOM_VCH8 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH8")
        self.UCF_MBOM_VCH9 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH9")
        self.UCF_MBOM_VCH10 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH10")
        self.UCF_MBOM_VCH11 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH11")
        self.UCF_MBOM_VCH12 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH12")
        self.UCF_MBOM_VCH13 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH13")
        self.UCF_MBOM_VCH14 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH14")
        self.UCF_MBOM_VCH15 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH15")
        self.UCF_MBOM_NUM1 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM1")
        self.UCF_MBOM_NUM2 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM2")
        self.UCF_MBOM_NUM3 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM3")
        self.UCF_MBOM_NUM4 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM4")
        self.UCF_MBOM_NUM5 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM5")
        self.UCF_MBOM_DATE1 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE1")
        self.UCF_MBOM_DATE2 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE2")
        self.UCF_MBOM_DATE3 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE3")
        self.UCF_MBOM_DATE4 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE4")
        self.UCF_MBOM_DATE5 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE5")
        self.UCF_MBOM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG1")
        self.UCF_MBOM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG2")
        self.UCF_MBOM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG3")
        self.UCF_MBOM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG4")
        self.UCF_MBOM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG5")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.VISUAL_FILE_LINK = parse_value(self.schema, column_value_map, "VISUAL_FILE_LINK")
        self.UCF_MBOM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH255_1")
        self.UCF_MBOM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH255_2")
        self.UCF_MBOM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH255_3")
        self.UCF_MBOM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH4000_1")
        self.UCF_MBOM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH4000_2")
        self.PHANTOM_FLAG = parse_value(self.schema, column_value_map, "PHANTOM_FLAG")
        self.PHANTOM_KIT_FLAG = parse_value(self.schema, column_value_map, "PHANTOM_KIT_FLAG")
        "Determines if the item is phantom or not."
        self.BOM_LINE_ID = parse_value(self.schema, column_value_map, "BOM_LINE_ID")
        "Reference of BOM Line of the BOM Component"
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.LATEST_COMP_BOM_ID = parse_value(self.schema, column_value_map, "LATEST_COMP_BOM_ID")
        "ID of latest BOM on this component"
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.ALT_GROUP = parse_value(self.schema, column_value_map, "ALT_GROUP")
        "It indicates Group Name of Component in BOM."
        self.QTY_UOM_OVERRIDE_FLAG = parse_value(self.schema, column_value_map, "QTY_UOM_OVERRIDE_FLAG")
        "Flag(Y/N) indicating whether Qty and UOM is override or not."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Unit of measure for bom component."
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        self.LATEST_EFF_GRP_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_EFF_GRP_REV_FLAG")
        self.RAW_MATERIAL_LENGTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_LENGTH")
        self.RAW_MATERIAL_WIDTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_WIDTH")
        self.NO_OF_PCS = parse_value(self.schema, column_value_map, "NO_OF_PCS")
        self.SFPL_MFG_BOM_COMP_CONFIG_FK2 = []
        self.SFPL_MFG_BOM_COMP_ALT_XREF_FK1 = []
        self.SFPL_MFG_BOM_REF_DES_FK1 = []

class SFFND_USER_WORK_CENTERS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "USERID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "WC_INFO": "STRING",
        "PKEY": "STRING",
        "ASGND_LOCATION_ID": "STRING",
        "ASGND_DEPARTMENT_ID": "STRING",
        "ASGND_CENTER_ID": "STRING",
        "SHIFT": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.WC_INFO = parse_value(self.schema, column_value_map, "WC_INFO")
        "Denormalized concatenated work center information used to greatly enhance certain dispatch list(s) performance."
        self.PKEY = parse_value(self.schema, column_value_map, "PKEY")
        "Primary Key column in table SFFND_USER_WORK."
        self.ASGND_LOCATION_ID = parse_value(self.schema, column_value_map, "ASGND_LOCATION_ID")
        self.ASGND_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "ASGND_DEPARTMENT_ID")
        self.ASGND_CENTER_ID = parse_value(self.schema, column_value_map, "ASGND_CENTER_ID")
        self.SHIFT = parse_value(self.schema, column_value_map, "SHIFT")

class SFFND_TEXT_OBJECT:
    schema = {
        "OBJECT_ID": "STRING",
        "LANGUAGE_CODE": "STRING",
        "TEXT": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PLAIN_TEXT": "STRING",
    }
    primary_key_columns = [
        "OBJECT_ID",
        "LANGUAGE_CODE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_TEXT_OBJECT_FK1", ["LANGUAGE_CODE"], "SFFND_LANGUAGE", ["LANGUAGE_CODE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique, system-generated identifier of a given text object."
        self.LANGUAGE_CODE = parse_value(self.schema, column_value_map, "LANGUAGE_CODE")
        "Language code as per ISO639 standard."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "Object text."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PLAIN_TEXT = parse_value(self.schema, column_value_map, "PLAIN_TEXT")
        "Used to store actual plain object text."

class SFPL_ITEM_HOLDS:
    schema = {
        "HOLD_ID": "STRING",
        "ITEM_ID": "STRING",
        "PROGRAM": "STRING",
        "SUPPLIER_CODE": "STRING",
        "HOLD_TYPE": "STRING",
        "HOLD_STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "HOLD_DESC": "STRING",
    }
    primary_key_columns = [
        "HOLD_ID",
        "ITEM_ID",
        "PROGRAM",
        "SUPPLIER_CODE",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_ITEM_HOLDS_ITEM_FK", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_ITEM_HOLDS_HOLDTYPE_FK", ["HOLD_TYPE"], "SFPL_ITEM_HOLD_TYPE_DEF", ["HOLD_TYPE"]),
        DbForeignKey("SFPL_ITEM_HOLDS_SUPP_CODE_FK", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HOLD_ID = parse_value(self.schema, column_value_map, "HOLD_ID")
        "Unique, system-generated identifier of the hold."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.HOLD_TYPE = parse_value(self.schema, column_value_map, "HOLD_TYPE")
        "Type or classification of hold."
        self.HOLD_STATUS = parse_value(self.schema, column_value_map, "HOLD_STATUS")
        "The status of the hold, OPEN or CLOSED."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which the manufacturing work for the work order is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which the manufacturing work for the work order is scheduled to complete."
        self.HOLD_DESC = parse_value(self.schema, column_value_map, "HOLD_DESC")
        "Description of the item hold."

class SFFND_PG_OPERATION:
    schema = {
        "PG_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "PRORATE_TAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PG_ID",
        "ORDER_ID",
        "OPER_KEY",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_PG_OPERATION_FK1", ["PG_ID"], "SFFND_PRORATE_GROUP", ["PG_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PG_ID = parse_value(self.schema, column_value_map, "PG_ID")
        "prorate Group Id"
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Order Id Of assigned Operation"
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Operation Key"
        self.PRORATE_TAG = parse_value(self.schema, column_value_map, "PRORATE_TAG")
        "prorate Tag Value (P / Y )"
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated"
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record"

class SFFND_PROJECT_DEF:
    schema = {
        "PROJECT": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "PROJECT_DESC": "STRING",
        "UCF_PROJECT_VCH1": "STRING",
        "UCF_PROJECT_VCH2": "STRING",
        "UCF_PROJECT_FLAG1": "STRING",
        "LTA_SEND_FLAG": "STRING",
        "UCF_PROJECT_VCH3": "STRING",
        "UCF_PROJECT_VCH4": "STRING",
        "UCF_PROJECT_VCH5": "STRING",
        "UCF_PROJECT_VCH6": "STRING",
        "UCF_PROJECT_VCH7": "STRING",
        "UCF_PROJECT_VCH8": "STRING",
        "UCF_PROJECT_VCH9": "STRING",
        "UCF_PROJECT_VCH10": "STRING",
        "UCF_PROJECT_VCH11": "STRING",
        "UCF_PROJECT_VCH12": "STRING",
        "UCF_PROJECT_VCH13": "STRING",
        "UCF_PROJECT_VCH14": "STRING",
        "UCF_PROJECT_VCH15": "STRING",
        "UCF_PROJECT_NUM1": "NUMBER",
        "UCF_PROJECT_NUM2": "NUMBER",
        "UCF_PROJECT_NUM3": "NUMBER",
        "UCF_PROJECT_NUM4": "NUMBER",
        "UCF_PROJECT_NUM5": "NUMBER",
        "UCF_PROJECT_DATE1": "STRING",
        "UCF_PROJECT_DATE2": "STRING",
        "UCF_PROJECT_DATE3": "STRING",
        "UCF_PROJECT_DATE4": "STRING",
        "UCF_PROJECT_DATE5": "STRING",
        "UCF_PROJECT_FLAG2": "STRING",
        "UCF_PROJECT_FLAG3": "STRING",
        "UCF_PROJECT_FLAG4": "STRING",
        "UCF_PROJECT_FLAG5": "STRING",
        "UCF_PROJECT_VCH255_1": "STRING",
        "UCF_PROJECT_VCH255_2": "STRING",
        "UCF_PROJECT_VCH255_3": "STRING",
        "UCF_PROJECT_VCH4000_1": "STRING",
        "UCF_PROJECT_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "PROJECT",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_MFG_BOM_REV_FK7",
        "SFPL_MFG_BOM_COMP_PROJECT_FK",
        "SFWID_OWP_DEF_FK3",
        "SFPL_PLAN_DESC_PROJECT_FK",
        "SFFND_PROJACT_XREF_PRJ_FK",
        "SFWID_ORDER_REQUEST_FK1",
        "SFPL_MFG_BOM_REV_ORIG_FK6",
        "SFWID_ORDER_DESC_PRJ_FK",
        "SFFND_USER_ACT_PROJ_FK",
        "SFPL_MFG_BOM_TOOL_ORIG_FK4",
        "SFPL_MFG_BOM_COMP_ORIG_FK5",
        "SFPL_MFG_BOM_TOOL_FK4",
        "SFWID_ORDER_DESC_ALT_FK7",
    ]
    def __init__(self, column_value_map):
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of a project."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.PROJECT_DESC = parse_value(self.schema, column_value_map, "PROJECT_DESC")
        "A more descriptive name and/or a detail description of the project."
        self.UCF_PROJECT_VCH1 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_VCH2 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PROJECT_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.LTA_SEND_FLAG = parse_value(self.schema, column_value_map, "LTA_SEND_FLAG")
        self.UCF_PROJECT_VCH3 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_VCH4 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_VCH5 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_VCH6 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_VCH7 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_VCH8 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_VCH9 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_VCH10 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_VCH11 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_VCH12 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_VCH13 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_VCH14 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_VCH15 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROJECT_NUM1 = parse_value(self.schema, column_value_map, "UCF_PROJECT_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PROJECT_NUM2 = parse_value(self.schema, column_value_map, "UCF_PROJECT_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_PROJECT_NUM3 = parse_value(self.schema, column_value_map, "UCF_PROJECT_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_PROJECT_NUM4 = parse_value(self.schema, column_value_map, "UCF_PROJECT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_PROJECT_NUM5 = parse_value(self.schema, column_value_map, "UCF_PROJECT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_PROJECT_DATE1 = parse_value(self.schema, column_value_map, "UCF_PROJECT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_PROJECT_DATE2 = parse_value(self.schema, column_value_map, "UCF_PROJECT_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_PROJECT_DATE3 = parse_value(self.schema, column_value_map, "UCF_PROJECT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_PROJECT_DATE4 = parse_value(self.schema, column_value_map, "UCF_PROJECT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_PROJECT_DATE5 = parse_value(self.schema, column_value_map, "UCF_PROJECT_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_PROJECT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PROJECT_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PROJECT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PROJECT_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PROJECT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PROJECT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PROJECT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PROJECT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PROJECT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PROJECT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PROJECT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PROJECT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_PROJECT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PROJECT_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.SFPL_MFG_BOM_REV_FK7 = []
        self.SFPL_MFG_BOM_COMP_PROJECT_FK = []
        self.SFWID_OWP_DEF_FK3 = []
        self.SFPL_PLAN_DESC_PROJECT_FK = []
        self.SFFND_PROJACT_XREF_PRJ_FK = []
        self.SFWID_ORDER_REQUEST_FK1 = []
        self.SFPL_MFG_BOM_REV_ORIG_FK6 = []
        self.SFWID_ORDER_DESC_PRJ_FK = []
        self.SFFND_USER_ACT_PROJ_FK = []
        self.SFPL_MFG_BOM_TOOL_ORIG_FK4 = []
        self.SFPL_MFG_BOM_COMP_ORIG_FK5 = []
        self.SFPL_MFG_BOM_TOOL_FK4 = []
        self.SFWID_ORDER_DESC_ALT_FK7 = []

class SFQA_CA_ACTION_ITEM_COMMENT:
    schema = {
        "CA_ID": "STRING",
        "CA_ACTION_ITEM_ID": "STRING",
        "COMMENT_ID": "STRING",
        "CA_ACTION_ITEM_SECTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "COMMENTS": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "CA_ACTION_ITEM_ID",
        "COMMENT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_ACTITEM_CMNT_FK", ["CA_ID","CA_ACTION_ITEM_ID"], "SFQA_CA_ACTION_ITEM_DESC", ["CA_ID","CA_ACTION_ITEM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.CA_ACTION_ITEM_ID = parse_value(self.schema, column_value_map, "CA_ACTION_ITEM_ID")
        "Unique, system-generated identifier of a given Action Item."
        self.COMMENT_ID = parse_value(self.schema, column_value_map, "COMMENT_ID")
        "System-generated sequential identifier of a comment for the Action Item section."
        self.CA_ACTION_ITEM_SECTION = parse_value(self.schema, column_value_map, "CA_ACTION_ITEM_SECTION")
        "Action Item section eg. AUTHORING, IMPLEMENTING, VERIFYING."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Comments added for a given Action Item section."

class SFPL_PLAN_NOTIFICATION_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_TAG": "STRING",
        "OBJECT_REV": "STRING",
        "PROPAGATION_ACTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "CURRENT_OBJECT_ID": "STRING",
        "CURRENT_REVISION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.OBJECT_TAG = parse_value(self.schema, column_value_map, "OBJECT_TAG")
        "User provided unique identifier of the multimedia object; can be NULL and can be modified."
        self.OBJECT_REV = parse_value(self.schema, column_value_map, "OBJECT_REV")
        "The system generated revision number of the multimedia object."
        self.PROPAGATION_ACTION = parse_value(self.schema, column_value_map, "PROPAGATION_ACTION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.CURRENT_OBJECT_ID = parse_value(self.schema, column_value_map, "CURRENT_OBJECT_ID")
        "Unique system generated identifier for a given multimedia object tht now has a more recent revision."
        self.CURRENT_REVISION = parse_value(self.schema, column_value_map, "CURRENT_REVISION")

class SFPL_CHANGE_IMPL_TYPE:
    schema = {
        "IMPL_ID": "STRING",
        "IMPL_TYPE": "STRING",
        "IMPL_TITLE": "STRING",
        "IMPL_NO": "STRING",
        "SOURCE": "STRING",
        "AFFECTED_OBJECT_ID": "STRING",
        "RESULTING_OBJECT_ID": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "CHANGE_REQUEST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "IMPL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_CHANGE_IMPL_TYPE_FK2", ["RESULTING_OBJECT_ID","CHANGE_REQUEST_ID"], "SFPL_RESULTING_OBJECTS", ["RESULTING_OBJECT_ID","CHANGE_REQUEST_ID"]),
        DbForeignKey("SFPL_CHANGE_IMPL_TYPE_FK1", ["AFFECTED_OBJECT_ID","CHANGE_REQUEST_ID"], "SFPL_AFFECTED_OBJECTS", ["AFFECTED_OBJECT_ID","CHANGE_REQUEST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.IMPL_ID = parse_value(self.schema, column_value_map, "IMPL_ID")
        "Unique, system-generated identifier."
        self.IMPL_TYPE = parse_value(self.schema, column_value_map, "IMPL_TYPE")
        "It will be Implementation Type for affected and resulting object."
        self.IMPL_TITLE = parse_value(self.schema, column_value_map, "IMPL_TITLE")
        "It will contains the description related to the implementation. For the particular affected or resulting object what we have implemented."
        self.IMPL_NO = parse_value(self.schema, column_value_map, "IMPL_NO")
        "It will be Implementation No related to affected or resulting object. We can have multiple IMPL_NO for the same affected or resulting object."
        self.SOURCE = parse_value(self.schema, column_value_map, "SOURCE")
        "This will be used to recognize whether the implementation belong to affected object or resulting object. Possible values are Affected or Resulting."
        self.AFFECTED_OBJECT_ID = parse_value(self.schema, column_value_map, "AFFECTED_OBJECT_ID")
        "Unique System Generated Identifier of affected object."
        self.RESULTING_OBJECT_ID = parse_value(self.schema, column_value_map, "RESULTING_OBJECT_ID")
        "Unique System Generated Identifier of resulting object."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.CHANGE_REQUEST_ID = parse_value(self.schema, column_value_map, "CHANGE_REQUEST_ID")
        "Unique System Generated Identifier of a Change Request."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_OPER_DC_FORMULA_VARS_ALT:
    schema = {
        "OPER_DC_VARS_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "DAT_COL_ID": "STRING",
        "USE_RANGE": "STRING",
        "EXECUTION_ORDER": "NUMBER",
        "UPDT_USERID": "STRING",
        "VARIABLE_NAME": "STRING",
        "VISIBILITY": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "TEST_VALUE": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "FORMAT": "STRING",
    }
    primary_key_columns = [
        "OPER_DC_VARS_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_DC_VARS_ALT_FK2", ["VARIABLE_NAME","VISIBILITY"], "SFFND_DC_VARIABLE_DEF", ["VARIABLE_NAME","VISIBILITY"]),
        DbForeignKey("SFWID_OPER_DC_VARS_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_DC_VARS_ALT = parse_value(self.schema, column_value_map, "OPER_DC_VARS_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        "Unique, system-generated identifier of the data collection."
        self.USE_RANGE = parse_value(self.schema, column_value_map, "USE_RANGE")
        self.EXECUTION_ORDER = parse_value(self.schema, column_value_map, "EXECUTION_ORDER")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.VARIABLE_NAME = parse_value(self.schema, column_value_map, "VARIABLE_NAME")
        self.VISIBILITY = parse_value(self.schema, column_value_map, "VISIBILITY")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEST_VALUE = parse_value(self.schema, column_value_map, "TEST_VALUE")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.FORMAT = parse_value(self.schema, column_value_map, "FORMAT")
        "The format in which the data/content is stored."

class SFBIS_FAILOVER:
    schema = {
        "TRANSACTION_ID": "STRING",
        "EXTERNAL_ENTITY": "STRING",
        "SERVICE_NAME": "STRING",
        "TRANSACTION_STATUS": "STRING",
        "MESSAGE_ID": "STRING",
        "MESSAGE_DATE": "STRING",
        "MESSAGE_TEXT": "STRING",
        "ERROR_TEXT": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "REF1": "STRING",
        "REF2": "STRING",
        "REF3": "STRING",
        "REF4": "STRING",
        "REF5": "STRING",
    }
    primary_key_columns = [
        "TRANSACTION_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFBIS_FAILOVER_FK1", ["SERVICE_NAME"], "SFBIS_SERVICE_DEF", ["SERVICE_NAME"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TRANSACTION_ID = parse_value(self.schema, column_value_map, "TRANSACTION_ID")
        self.EXTERNAL_ENTITY = parse_value(self.schema, column_value_map, "EXTERNAL_ENTITY")
        self.SERVICE_NAME = parse_value(self.schema, column_value_map, "SERVICE_NAME")
        self.TRANSACTION_STATUS = parse_value(self.schema, column_value_map, "TRANSACTION_STATUS")
        self.MESSAGE_ID = parse_value(self.schema, column_value_map, "MESSAGE_ID")
        self.MESSAGE_DATE = parse_value(self.schema, column_value_map, "MESSAGE_DATE")
        self.MESSAGE_TEXT = parse_value(self.schema, column_value_map, "MESSAGE_TEXT")
        self.ERROR_TEXT = parse_value(self.schema, column_value_map, "ERROR_TEXT")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.REF1 = parse_value(self.schema, column_value_map, "REF1")
        self.REF2 = parse_value(self.schema, column_value_map, "REF2")
        self.REF3 = parse_value(self.schema, column_value_map, "REF3")
        self.REF4 = parse_value(self.schema, column_value_map, "REF4")
        self.REF5 = parse_value(self.schema, column_value_map, "REF5")

class SFQA_DISP_TYPE_DEF:
    schema = {
        "DISC_TYPE": "STRING",
        "DISP_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "REJECT_FLAG": "STRING",
        "SCRAP_FLAG": "STRING",
        "DISP_INSTR_FLAG": "STRING",
        "DISP_DESC": "STRING",
        "SQA_ACTION_TYPE": "STRING",
        "INSP_ORDER_TYPE": "STRING",
        "RESERVED_FLAG": "STRING",
        "IS_VISIBLE": "STRING",
        "RETURN_TO_VENDOR": "STRING",
        "RETURN_TO_INVENTORY_FLAG": "STRING",
        "DI_WORKFLOW": "STRING",
        "ENABLE_VERIFY_REWORK_HOLD": "STRING",
    }
    primary_key_columns = [
        "DISC_TYPE",
        "DISP_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_DISC_ITEM_DISCDISP_FK",
        "SFQA_DISC_ITEM_FK35",
    ]
    def __init__(self, column_value_map):
        self.DISC_TYPE = parse_value(self.schema, column_value_map, "DISC_TYPE")
        self.DISP_TYPE = parse_value(self.schema, column_value_map, "DISP_TYPE")
        "Type or classification of disposition/rework."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.REJECT_FLAG = parse_value(self.schema, column_value_map, "REJECT_FLAG")
        "A flag (Y/N) indicating whether the component/part should be or has been rejected."
        self.SCRAP_FLAG = parse_value(self.schema, column_value_map, "SCRAP_FLAG")
        "A flag (Y/N) indicating whether the component/part should be or has been scrapped."
        self.DISP_INSTR_FLAG = parse_value(self.schema, column_value_map, "DISP_INSTR_FLAG")
        "A flag (Y/N) indication whether the component/part requires rework instructions."
        self.DISP_DESC = parse_value(self.schema, column_value_map, "DISP_DESC")
        "A detail description of the disposition type."
        self.SQA_ACTION_TYPE = parse_value(self.schema, column_value_map, "SQA_ACTION_TYPE")
        self.INSP_ORDER_TYPE = parse_value(self.schema, column_value_map, "INSP_ORDER_TYPE")
        self.RESERVED_FLAG = parse_value(self.schema, column_value_map, "RESERVED_FLAG")
        self.IS_VISIBLE = parse_value(self.schema, column_value_map, "IS_VISIBLE")
        self.RETURN_TO_VENDOR = parse_value(self.schema, column_value_map, "RETURN_TO_VENDOR")
        self.RETURN_TO_INVENTORY_FLAG = parse_value(self.schema, column_value_map, "RETURN_TO_INVENTORY_FLAG")
        self.DI_WORKFLOW = parse_value(self.schema, column_value_map, "DI_WORKFLOW")
        "Workflow for the selected disposition type."
        self.ENABLE_VERIFY_REWORK_HOLD = parse_value(self.schema, column_value_map, "ENABLE_VERIFY_REWORK_HOLD")
        "Determine if a Verify Rework Hold will be created or not."
        self.SFQA_DISC_ITEM_DISCDISP_FK = []
        self.SFQA_DISC_ITEM_FK35 = []

class SFCORE_USER_TYPE_DEF:
    schema = {
        "USER_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "USER_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFCORE_INPLACE_CFG_DATA_UT_FK",
        "SFFND_USER_USERTYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.USER_TYPE = parse_value(self.schema, column_value_map, "USER_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFCORE_INPLACE_CFG_DATA_UT_FK = []
        self.SFFND_USER_USERTYPE_FK = []

class SFSQA_SUPPLIER_HOLDS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HOLD_ID": "STRING",
        "SUPPLIER_CODE": "STRING",
        "HOLD_TYPE": "STRING",
        "HOLD_STATUS": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "NOTES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.HOLD_ID = parse_value(self.schema, column_value_map, "HOLD_ID")
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.HOLD_TYPE = parse_value(self.schema, column_value_map, "HOLD_TYPE")
        self.HOLD_STATUS = parse_value(self.schema, column_value_map, "HOLD_STATUS")
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFPL_ITEM_MANUFACTURER:
    schema = {
        "ITEM_ID": "STRING",
        "MANUFACTURER": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "MANUFACTURER",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_ITEM_MANUFACTURER_ITEM_FK", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_ITEM_MANUFACTURER_M_FK", ["MANUFACTURER"], "SFFND_MANUFACTURER", ["MANUFACTURER"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.MANUFACTURER = parse_value(self.schema, column_value_map, "MANUFACTURER")
        "A manufacturer of parts and/or tools."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQRTZ_CRON_TRIGGERS:
    schema = {
        "SCHED_NAME": "STRING",
        "TRIGGER_NAME": "STRING",
        "TRIGGER_GROUP": "STRING",
        "CRON_EXPRESSION": "STRING",
        "TIME_ZONE_ID": "STRING",
    }
    primary_key_columns = [
        "SCHED_NAME",
        "TRIGGER_NAME",
        "TRIGGER_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFQRTZ_CRON_TRIG_TO_TRIG_FK", ["SCHED_NAME","TRIGGER_NAME","TRIGGER_GROUP"], "SFQRTZ_TRIGGERS", ["SCHED_NAME","TRIGGER_NAME","TRIGGER_GROUP"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SCHED_NAME = parse_value(self.schema, column_value_map, "SCHED_NAME")
        self.TRIGGER_NAME = parse_value(self.schema, column_value_map, "TRIGGER_NAME")
        self.TRIGGER_GROUP = parse_value(self.schema, column_value_map, "TRIGGER_GROUP")
        self.CRON_EXPRESSION = parse_value(self.schema, column_value_map, "CRON_EXPRESSION")
        self.TIME_ZONE_ID = parse_value(self.schema, column_value_map, "TIME_ZONE_ID")

class SFWID_OPER_CREW_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "USERID": "STRING",
        "SKILL_CATEGORY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ASGND_LABOR_HOURS": "NUMBER",
        "HIST_ALT_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.SKILL_CATEGORY = parse_value(self.schema, column_value_map, "SKILL_CATEGORY")
        "A category to which the required skill belongs."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ASGND_LABOR_HOURS = parse_value(self.schema, column_value_map, "ASGND_LABOR_HOURS")
        "Number of labor hours the shopfloor worker is assigned to work on the manufacturing operation."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."

class SFWID_ORDER_MACHINE_ALT_XREF:
    schema = {
        "ORDER_MACHINE_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "ASSIGNED_MACHINE_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "ASGND_MACHINE_NO": "STRING",
        "ASGND_MACHINE_CHG": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH1": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH2": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH3": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH4": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH5": "STRING",
        "UCF_ORDER_MCHN_ALT_NUM1": "NUMBER",
        "UCF_ORDER_MCHN_ALT_NUM2": "NUMBER",
        "UCF_ORDER_MCHN_ALT_NUM3": "NUMBER",
        "UCF_ORDER_MCHN_ALT_FLAG1": "STRING",
        "UCF_ORDER_MCHN_ALT_FLAG2": "STRING",
        "UCF_ORDER_MCHN_ALT_FLAG3": "STRING",
        "UCF_ORDER_MCHN_ALT_DATE1": "STRING",
        "UCF_ORDER_MCHN_ALT_DATE2": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH255_1": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH255_2": "STRING",
        "PLND_MACHINE_NO": "STRING",
        "PLND_MACHINE_CHG": "STRING",
    }
    primary_key_columns = [
        "ORDER_MACHINE_ALT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_MACH_ALT_XREF_FK1", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_ORDER_MACH_ALT_XREF_FK3", ["ASGND_MACHINE_NO","ASGND_MACHINE_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
        DbForeignKey("SFWID_ORDER_MACH_ALT_XREF_FK2", ["PLND_MACHINE_NO","PLND_MACHINE_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_MACHINE_ALT_ID = parse_value(self.schema, column_value_map, "ORDER_MACHINE_ALT_ID")
        "Unique system generated machine identiifer that has been used as an alternate."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.ASSIGNED_MACHINE_FLAG = parse_value(self.schema, column_value_map, "ASSIGNED_MACHINE_FLAG")
        "Flag to check if Machine is assigned or not."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.ASGND_MACHINE_NO = parse_value(self.schema, column_value_map, "ASGND_MACHINE_NO")
        "The identifying number of the required Machine as actually assigned to the given operation."
        self.ASGND_MACHINE_CHG = parse_value(self.schema, column_value_map, "ASGND_MACHINE_CHG")
        "The change letter (revision) of the required Machine as actually assigned to the given operation."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_ORDER_MCHN_ALT_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_MCHN_ALT_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_MCHN_ALT_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_MCHN_ALT_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_MCHN_ALT_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_MCHN_ALT_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_ORDER_MCHN_ALT_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_ORDER_MCHN_ALT_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_ORDER_MCHN_ALT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_MCHN_ALT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_MCHN_ALT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_MCHN_ALT_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_MCHN_ALT_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_MCHN_ALT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH255_1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_MCHN_ALT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH255_2")
        "User-configurable field for VARCHAR data type."
        self.PLND_MACHINE_NO = parse_value(self.schema, column_value_map, "PLND_MACHINE_NO")
        "The identifying number of the required Machine as planned in the given operation."
        self.PLND_MACHINE_CHG = parse_value(self.schema, column_value_map, "PLND_MACHINE_CHG")
        "The change letter (revision) of the required Machine as planned in the given operation."

class SFSQA_SEVERITY_RULE_DESC:
    schema = {
        "SEVERITY_RULE_ID": "STRING",
        "SEVERITY_RULE_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "SEVERITY_RULE_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_S_RULE_SEV_RULE_FK",
        "SFSQA_SR_DETAILS_FK5",
    ]
    def __init__(self, column_value_map):
        self.SEVERITY_RULE_ID = parse_value(self.schema, column_value_map, "SEVERITY_RULE_ID")
        "System generated unique identifier for a given severity switching rule."
        self.SEVERITY_RULE_NAME = parse_value(self.schema, column_value_map, "SEVERITY_RULE_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFSQA_S_RULE_SEV_RULE_FK = []
        self.SFSQA_SR_DETAILS_FK5 = []

class SFQRTZ_PAUSED_TRIGGER_GRPS:
    schema = {
        "SCHED_NAME": "STRING",
        "TRIGGER_GROUP": "STRING",
    }
    primary_key_columns = [
        "SCHED_NAME",
        "TRIGGER_GROUP",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SCHED_NAME = parse_value(self.schema, column_value_map, "SCHED_NAME")
        self.TRIGGER_GROUP = parse_value(self.schema, column_value_map, "TRIGGER_GROUP")

class SFFND_CUSTOMER_CALENDAR_DEF:
    schema = {
        "CALENDAR_TYPE": "STRING",
        "CALENDAR_DATE": "DATE",
        "CYEAR": "NUMBER",
        "CMONTH": "NUMBER",
        "WEEK": "NUMBER",
        "DAY_NUMBER": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CALENDAR_TYPE",
        "CALENDAR_DATE",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CALENDAR_TYPE = parse_value(self.schema, column_value_map, "CALENDAR_TYPE")
        self.CALENDAR_DATE = parse_value(self.schema, column_value_map, "CALENDAR_DATE")
        self.CYEAR = parse_value(self.schema, column_value_map, "CYEAR")
        self.CMONTH = parse_value(self.schema, column_value_map, "CMONTH")
        self.WEEK = parse_value(self.schema, column_value_map, "WEEK")
        self.DAY_NUMBER = parse_value(self.schema, column_value_map, "DAY_NUMBER")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_DISCITM_RESP_PROCESS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "PROCESS_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
        "TIME_STAMP": "STRING",
        "RESP_LOCATION_ID": "STRING",
        "RESP_DEPARTMENT_ID": "STRING",
        "RESP_CENTER_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        "Class or type of the associated manufacturing process."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.RESP_LOCATION_ID = parse_value(self.schema, column_value_map, "RESP_LOCATION_ID")
        self.RESP_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "RESP_DEPARTMENT_ID")
        self.RESP_CENTER_ID = parse_value(self.schema, column_value_map, "RESP_CENTER_ID")

class SFLTA_JOB_DEF:
    schema = {
        "JOB_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "JOB_INTERVAL": "NUMBER",
        "JOB_TIMEOUT": "NUMBER",
        "ENABLED": "STRING",
        "LOGGING": "STRING",
        "FILTERED_BY_USER": "STRING",
        "DESTINATION_ID": "STRING",
        "CURRENT_JOB_NO": "NUMBER",
        "TRANSPORT_AVAILABLE": "STRING",
        "NEXT_JOB_TIME": "DATE",
    }
    primary_key_columns = [
        "JOB_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFLTA_JOB_ERROR_JOB_DEF_FK",
        "SFLTA_JOB_USER_FK",
        "SFLTA_JOB_TRANS_FK",
    ]
    def __init__(self, column_value_map):
        self.JOB_ID = parse_value(self.schema, column_value_map, "JOB_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.JOB_INTERVAL = parse_value(self.schema, column_value_map, "JOB_INTERVAL")
        self.JOB_TIMEOUT = parse_value(self.schema, column_value_map, "JOB_TIMEOUT")
        self.ENABLED = parse_value(self.schema, column_value_map, "ENABLED")
        self.LOGGING = parse_value(self.schema, column_value_map, "LOGGING")
        self.FILTERED_BY_USER = parse_value(self.schema, column_value_map, "FILTERED_BY_USER")
        self.DESTINATION_ID = parse_value(self.schema, column_value_map, "DESTINATION_ID")
        self.CURRENT_JOB_NO = parse_value(self.schema, column_value_map, "CURRENT_JOB_NO")
        self.TRANSPORT_AVAILABLE = parse_value(self.schema, column_value_map, "TRANSPORT_AVAILABLE")
        self.NEXT_JOB_TIME = parse_value(self.schema, column_value_map, "NEXT_JOB_TIME")
        self.SFLTA_JOB_ERROR_JOB_DEF_FK = []
        self.SFLTA_JOB_USER_FK = []
        self.SFLTA_JOB_TRANS_FK = []

class SFWID_ALTERATION_DESC:
    schema = {
        "ALT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ALT_REASON": "STRING",
        "ALT_STATUS": "STRING",
        "ALTER_TYPE": "STRING",
        "CHG_AUTH_TYPE": "STRING",
        "ALT_NO": "STRING",
        "UCF_ALT_VCH1": "STRING",
        "UCF_ALT_VCH2": "STRING",
        "UCF_ALT_VCH3": "STRING",
        "UCF_ALT_VCH4": "STRING",
        "UCF_ALT_VCH5": "STRING",
        "UCF_ALT_VCH6": "STRING",
        "UCF_ALT_VCH7": "STRING",
        "UCF_ALT_VCH8": "STRING",
        "UCF_ALT_VCH9": "STRING",
        "UCF_ALT_VCH10": "STRING",
        "UCF_ALT_VCH11": "STRING",
        "UCF_ALT_VCH12": "STRING",
        "UCF_ALT_VCH13": "STRING",
        "UCF_ALT_VCH14": "STRING",
        "UCF_ALT_VCH15": "STRING",
        "UCF_ALT_NUM1": "NUMBER",
        "UCF_ALT_NUM2": "NUMBER",
        "UCF_ALT_NUM3": "NUMBER",
        "UCF_ALT_NUM4": "NUMBER",
        "UCF_ALT_NUM5": "NUMBER",
        "UCF_ALT_DATE1": "STRING",
        "UCF_ALT_DATE2": "STRING",
        "UCF_ALT_DATE3": "STRING",
        "UCF_ALT_DATE4": "STRING",
        "UCF_ALT_DATE5": "STRING",
        "UCF_ALT_FLAG1": "STRING",
        "UCF_ALT_FLAG2": "STRING",
        "UCF_ALT_FLAG3": "STRING",
        "UCF_ALT_FLAG4": "STRING",
        "UCF_ALT_FLAG5": "STRING",
        "ALT_LEVEL_TYPE": "STRING",
        "DATE_COMPLETED": "STRING",
        "START_DATE": "STRING",
        "OBJECT_ID": "STRING",
        "HIDE_ALT_FLAG": "STRING",
        "WORK_FLOW": "STRING",
        "ALT_OUTSIDE_DISP_BLOCK_FLAG": "STRING",
        "UCF_ALT_VCH255_1": "STRING",
        "UCF_ALT_VCH255_2": "STRING",
        "UCF_ALT_VCH255_3": "STRING",
        "UCF_ALT_VCH4000_1": "STRING",
        "UCF_ALT_VCH4000_2": "STRING",
        "ALT_REV": "NUMBER",
    }
    primary_key_columns = [
        "ALT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ALTERATION_FK01", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
        "SFWID_OPER_CREW_ALT_FK1",
        "SFWID_OPER_DC_VARS_ALT_FK1",
        "SFWID_OPER_DAT_COL_ALT_FK",
        "SFWID_OPER_TOOL_ALT_FK",
        "SFWID_OPER_TEXT_ALT_FK1",
        "SFWID_ORDER_MM_OBJECTS_ALT_FK1",
        "SFWID_OPER_TEXT_ALT_FK",
        "SFWID_ALT_CHG_LOG_FK1",
        "SFWID_OPER_DESC_ALT_FK1",
        "SFWID_ORDER_NODE_ALT_FK",
        "SFWID_OPER_BUYOFF_ALT_FK",
        "SFFND_HTREF_WIDOPRTXT_ALT_FK",
        "SFWID_OPER_TOOL_ALT_FK1",
        "SFWID_ORDER_NODE_ALT_FK1",
        "SFWID_OPER_DESC_ALT_FK",
        "SFWID_OPER_BUYOFF_ALT_FK1",
        "SFWID_USER_OPER_DEV_ACK_FK1",
        "SFQA_DISC_ALT_ID_LINK_FK2",
        "SFWID_OPER_ITEMS_ALT_FK",
        "SFWID_OPER_SKILL_ALT_FK1",
        "SFFND_ALTTASK_ALTDESC_FK",
        "SFWID_OPER_DAT_COL_ALT_FK1",
        "SFWID_OPER_MATERIAL_FK1",
        "SFOR_SFWID_ORDER_SUB_ALT_FK1",
        "SFWID_ORDER_DESC_ALT_FK",
        "SFWID_ORDER_LINK_ALT_FK1",
        "SFWID_HOLDS_ALT_FK",
        "SFWID_OPER_ITEMS_ALT_FK1",
        "SFOR_SFWID_OPER_SUB_ALT_FK1",
        "SFWID_OPER_PRECEDENCE_FK3",
        "SFWID_OPER_DC_FORMULA_ALT_FK1",
        "SFWID_ALT_DISC_ITEM_ALT_FK",
        "SFQA_DISC_ITEM_ALT_ID_FK",
        "SFWID_OPER_PROCESS_ALT_FK1",
        "SFOR_SFWID_ORDER_SUB_ALT_FK",
        "SFWID_ORDER_TX_SUBVR_ALT_FK1",
        "SFWID_ORDER_LINK_ALT_FK",
        "SFWID_OPER_PRECEDENCE_ALT_FK1",
        "SFFND_HTREF_WID_OP_TX_ALT_FK1",
        "SFWID_ORDER_REV_FK2",
        "SFWID_OPER_SKILL_ALT_FK",
        "SFFND_HTREF_ORDER_TEXT_ALT_FK1",
        "SFWID_OPER_PROCESS_FK2",
        "SFFND_HTREF_ORDER_TEXT_ALT_FK",
        "SFWID_OPER_MM_OBJECTS_ALT_FK1",
        "SFOR_SFWID_OPER_SUB_ALT_FK",
        "SFWID_OPER_TEXT_SUBVAR_ALT_FK1",
        "SFWID_ORDER_TEXT_ALT_FK",
        "SFWID_ORDER_TEXT_ALT_FK1",
        "SFWID_ORDER_DESC_ALT_FK1",
    ]
    def __init__(self, column_value_map):
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ALT_REASON = parse_value(self.schema, column_value_map, "ALT_REASON")
        "Reason for the alteration."
        self.ALT_STATUS = parse_value(self.schema, column_value_map, "ALT_STATUS")
        "The status of the work order alteration . For example: ORDER_AUTHORING."
        self.ALTER_TYPE = parse_value(self.schema, column_value_map, "ALTER_TYPE")
        "Type or classification of alteration."
        self.CHG_AUTH_TYPE = parse_value(self.schema, column_value_map, "CHG_AUTH_TYPE")
        "Type or classification of change authorization."
        self.ALT_NO = parse_value(self.schema, column_value_map, "ALT_NO")
        "Unique identifier of the change authorization.."
        self.UCF_ALT_VCH1 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH2 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH3 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH4 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH5 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH6 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH7 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH8 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH9 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH10 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH11 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH12 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH13 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH14 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_VCH15 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ALT_NUM1 = parse_value(self.schema, column_value_map, "UCF_ALT_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ALT_NUM2 = parse_value(self.schema, column_value_map, "UCF_ALT_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ALT_NUM3 = parse_value(self.schema, column_value_map, "UCF_ALT_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ALT_NUM4 = parse_value(self.schema, column_value_map, "UCF_ALT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ALT_NUM5 = parse_value(self.schema, column_value_map, "UCF_ALT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ALT_DATE1 = parse_value(self.schema, column_value_map, "UCF_ALT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ALT_DATE2 = parse_value(self.schema, column_value_map, "UCF_ALT_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ALT_DATE3 = parse_value(self.schema, column_value_map, "UCF_ALT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ALT_DATE4 = parse_value(self.schema, column_value_map, "UCF_ALT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ALT_DATE5 = parse_value(self.schema, column_value_map, "UCF_ALT_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ALT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ALT_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ALT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ALT_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ALT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ALT_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ALT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ALT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ALT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ALT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.ALT_LEVEL_TYPE = parse_value(self.schema, column_value_map, "ALT_LEVEL_TYPE")
        self.DATE_COMPLETED = parse_value(self.schema, column_value_map, "DATE_COMPLETED")
        self.START_DATE = parse_value(self.schema, column_value_map, "START_DATE")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.HIDE_ALT_FLAG = parse_value(self.schema, column_value_map, "HIDE_ALT_FLAG")
        self.WORK_FLOW = parse_value(self.schema, column_value_map, "WORK_FLOW")
        self.ALT_OUTSIDE_DISP_BLOCK_FLAG = parse_value(self.schema, column_value_map, "ALT_OUTSIDE_DISP_BLOCK_FLAG")
        "If any change is done outside disposition block then it will be set to Y. Default value is N."
        self.UCF_ALT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ALT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ALT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ALT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ALT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ALT_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.ALT_REV = parse_value(self.schema, column_value_map, "ALT_REV")
        "This will be incremental number, each time user completes that particular alteration."
        self.SFWID_OPER_CREW_ALT_FK1 = []
        self.SFWID_OPER_DC_VARS_ALT_FK1 = []
        self.SFWID_OPER_DAT_COL_ALT_FK = []
        self.SFWID_OPER_TOOL_ALT_FK = []
        self.SFWID_OPER_TEXT_ALT_FK1 = []
        self.SFWID_ORDER_MM_OBJECTS_ALT_FK1 = []
        self.SFWID_OPER_TEXT_ALT_FK = []
        self.SFWID_ALT_CHG_LOG_FK1 = []
        self.SFWID_OPER_DESC_ALT_FK1 = []
        self.SFWID_ORDER_NODE_ALT_FK = []
        self.SFWID_OPER_BUYOFF_ALT_FK = []
        self.SFFND_HTREF_WIDOPRTXT_ALT_FK = []
        self.SFWID_OPER_TOOL_ALT_FK1 = []
        self.SFWID_ORDER_NODE_ALT_FK1 = []
        self.SFWID_OPER_DESC_ALT_FK = []
        self.SFWID_OPER_BUYOFF_ALT_FK1 = []
        self.SFWID_USER_OPER_DEV_ACK_FK1 = []
        self.SFQA_DISC_ALT_ID_LINK_FK2 = []
        self.SFWID_OPER_ITEMS_ALT_FK = []
        self.SFWID_OPER_SKILL_ALT_FK1 = []
        self.SFFND_ALTTASK_ALTDESC_FK = []
        self.SFWID_OPER_DAT_COL_ALT_FK1 = []
        self.SFWID_OPER_MATERIAL_FK1 = []
        self.SFOR_SFWID_ORDER_SUB_ALT_FK1 = []
        self.SFWID_ORDER_DESC_ALT_FK = []
        self.SFWID_ORDER_LINK_ALT_FK1 = []
        self.SFWID_HOLDS_ALT_FK = []
        self.SFWID_OPER_ITEMS_ALT_FK1 = []
        self.SFOR_SFWID_OPER_SUB_ALT_FK1 = []
        self.SFWID_OPER_PRECEDENCE_FK3 = []
        self.SFWID_OPER_DC_FORMULA_ALT_FK1 = []
        self.SFWID_ALT_DISC_ITEM_ALT_FK = []
        self.SFQA_DISC_ITEM_ALT_ID_FK = []
        self.SFWID_OPER_PROCESS_ALT_FK1 = []
        self.SFOR_SFWID_ORDER_SUB_ALT_FK = []
        self.SFWID_ORDER_TX_SUBVR_ALT_FK1 = []
        self.SFWID_ORDER_LINK_ALT_FK = []
        self.SFWID_OPER_PRECEDENCE_ALT_FK1 = []
        self.SFFND_HTREF_WID_OP_TX_ALT_FK1 = []
        self.SFWID_ORDER_REV_FK2 = []
        self.SFWID_OPER_SKILL_ALT_FK = []
        self.SFFND_HTREF_ORDER_TEXT_ALT_FK1 = []
        self.SFWID_OPER_PROCESS_FK2 = []
        self.SFFND_HTREF_ORDER_TEXT_ALT_FK = []
        self.SFWID_OPER_MM_OBJECTS_ALT_FK1 = []
        self.SFOR_SFWID_OPER_SUB_ALT_FK = []
        self.SFWID_OPER_TEXT_SUBVAR_ALT_FK1 = []
        self.SFWID_ORDER_TEXT_ALT_FK = []
        self.SFWID_ORDER_TEXT_ALT_FK1 = []
        self.SFWID_ORDER_DESC_ALT_FK1 = []

class SFOR_SFPL_PLAN_SUBJECT_OPER:
    schema = {
        "SUBJECT_NO": "NUMBER",
        "OPER_KEY": "NUMBER",
        "OPER_UPDT_NO": "NUMBER",
        "SUBJECT_REV": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_UPDT_NO",
        "SUBJECT_NO",
        "OPER_KEY",
        "OPER_UPDT_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFOR_PLAN_SUBJOPER_PLANSUBJ_FK", ["PLAN_ID","PLAN_UPDT_NO","SUBJECT_NO"], "SFOR_SFPL_PLAN_SUBJECT", ["PLAN_ID","PLAN_UPDT_NO","SUBJECT_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SUBJECT_NO = parse_value(self.schema, column_value_map, "SUBJECT_NO")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        "The sequence number of a particular copy/description of the work plan operation."
        self.SUBJECT_REV = parse_value(self.schema, column_value_map, "SUBJECT_REV")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."

class SFCORE_USER_PRIVS_HIST:
    schema = {
        "HIST_ID": "STRING",
        "HIST_TIME_STAMP": "STRING",
        "HIST_USERID": "STRING",
        "USERID": "STRING",
        "PRIV": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "HIST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.PRIV = parse_value(self.schema, column_value_map, "PRIV")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")

class SFFND_USER_PROGRAM:
    schema = {
        "USERID": "STRING",
        "PROGRAM": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "USERID",
        "PROGRAM",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_USER_PROGRAM_USER_FK", ["USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFFND_USER_PROGRAM_PRGM_FK", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
    ]
    refs = [
        "SFFND_USRCRTPROG_USR_PROG_FK",
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFFND_USRCRTPROG_USR_PROG_FK = []

class SFCORE_BOOT_LIB_HIST:
    schema = {
        "HIST_ID": "STRING",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "BOOT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "DESCRIPTION": "STRING",
        "BOOT_TEXT": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.BOOT_ID = parse_value(self.schema, column_value_map, "BOOT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.BOOT_TEXT = parse_value(self.schema, column_value_map, "BOOT_TEXT")

class SFQA_DISC_PROCESS:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "PROCESS_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DEFECT_TYPE": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "PROCESS_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISCITEM_PROCLDTWCS_FK1", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
        DbForeignKey("SFQA_DI_PROCLDTWCS_FK2", ["PROCESS_TYPE"], "SFFND_PROCESS_TYPE_DEF", ["PROCESS_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.DEFECT_TYPE = parse_value(self.schema, column_value_map, "DEFECT_TYPE")
        "Type or classification of defect."

class SFFND_CA_ACTION_ITEM_TASK:
    schema = {
        "TASK_ID": "STRING",
        "CA_ID": "STRING",
        "CA_ACTION_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "CA_ACTION_ITEM_ID",
        "TASK_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_CA_ACTION_ITEM_TASK_FK1", ["CA_ID","CA_ACTION_ITEM_ID"], "SFQA_CA_ACTION_ITEM_DESC", ["CA_ID","CA_ACTION_ITEM_ID"]),
        DbForeignKey("SFFND_CA_ACTION_ITEM_TASK_FK3", ["TASK_ID"], "SFFND_TASK", ["TASK_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TASK_ID = parse_value(self.schema, column_value_map, "TASK_ID")
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.CA_ACTION_ITEM_ID = parse_value(self.schema, column_value_map, "CA_ACTION_ITEM_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFWID_HOLDS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HOLD_ID": "STRING",
        "ORDER_ID": "STRING",
        "HOLD_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "OPER_NO": "STRING",
        "STOP_TYPE": "STRING",
        "HOLD_STATUS": "STRING",
        "ITEM_ID": "STRING",
        "QTY_SHORT": "NUMBER",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "NOTES": "STRING",
        "HOLD_REF1": "STRING",
        "HOLD_REF2": "STRING",
        "HOLD_REF3": "STRING",
        "HIST_ALT_ID": "STRING",
        "HOLD_REF4": "STRING",
        "HOLD_REF5": "STRING",
        "UCF_HOLD_VCH1": "STRING",
        "UCF_HOLD_VCH2": "STRING",
        "UCF_HOLD_VCH3": "STRING",
        "UCF_HOLD_VCH4": "STRING",
        "UCF_HOLD_VCH5": "STRING",
        "UCF_HOLD_VCH6": "STRING",
        "UCF_HOLD_VCH7": "STRING",
        "UCF_HOLD_VCH8": "STRING",
        "UCF_HOLD_VCH9": "STRING",
        "UCF_HOLD_VCH10": "STRING",
        "UCF_HOLD_VCH11": "STRING",
        "UCF_HOLD_VCH12": "STRING",
        "UCF_HOLD_VCH13": "STRING",
        "UCF_HOLD_VCH14": "STRING",
        "UCF_HOLD_VCH15": "STRING",
        "UCF_HOLD_NUM1": "NUMBER",
        "UCF_HOLD_NUM2": "NUMBER",
        "UCF_HOLD_NUM3": "NUMBER",
        "UCF_HOLD_NUM4": "NUMBER",
        "UCF_HOLD_NUM5": "NUMBER",
        "UCF_HOLD_DATE1": "STRING",
        "UCF_HOLD_DATE2": "STRING",
        "UCF_HOLD_DATE3": "STRING",
        "UCF_HOLD_DATE4": "STRING",
        "UCF_HOLD_DATE5": "STRING",
        "UCF_HOLD_FLAG1": "STRING",
        "UCF_HOLD_FLAG2": "STRING",
        "UCF_HOLD_FLAG3": "STRING",
        "UCF_HOLD_FLAG4": "STRING",
        "UCF_HOLD_FLAG5": "STRING",
        "UCF_HOLD_VCH255_1": "STRING",
        "UCF_HOLD_VCH255_2": "STRING",
        "UCF_HOLD_VCH255_3": "STRING",
        "UCF_HOLD_VCH4000_1": "STRING",
        "UCF_HOLD_VCH4000_2": "STRING",
        "IS_ALTERED_FLAG": "STRING",
        "IS_WORKED_FLAG": "STRING",
        "IS_DISPOSITIONED_FLAG": "STRING",
        "SECURITY_GROUP": "STRING",
        "GROUP_JOB_NO": "STRING",
        "SOURCE": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.HOLD_ID = parse_value(self.schema, column_value_map, "HOLD_ID")
        "Unique, system-generated identifier of the hold."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.HOLD_TYPE = parse_value(self.schema, column_value_map, "HOLD_TYPE")
        "Type or classification of hold."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STOP_TYPE = parse_value(self.schema, column_value_map, "STOP_TYPE")
        "Type or classification of stop."
        self.HOLD_STATUS = parse_value(self.schema, column_value_map, "HOLD_STATUS")
        "The status of the hold, OPEN or CLOSED."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.QTY_SHORT = parse_value(self.schema, column_value_map, "QTY_SHORT")
        "Number of components short."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which work for the operation was actually started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which work for the operation was actually completed."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which work for the operation is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which work for the operation is scheduled to complete."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about the hold."
        self.HOLD_REF1 = parse_value(self.schema, column_value_map, "HOLD_REF1")
        "First part of additional information about the hold."
        self.HOLD_REF2 = parse_value(self.schema, column_value_map, "HOLD_REF2")
        "Second part of additional information about the hold."
        self.HOLD_REF3 = parse_value(self.schema, column_value_map, "HOLD_REF3")
        "Third part of additional information about the hold."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.HOLD_REF4 = parse_value(self.schema, column_value_map, "HOLD_REF4")
        self.HOLD_REF5 = parse_value(self.schema, column_value_map, "HOLD_REF5")
        self.UCF_HOLD_VCH1 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH1")
        self.UCF_HOLD_VCH2 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH2")
        self.UCF_HOLD_VCH3 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH3")
        self.UCF_HOLD_VCH4 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH4")
        self.UCF_HOLD_VCH5 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH5")
        self.UCF_HOLD_VCH6 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH6")
        self.UCF_HOLD_VCH7 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH7")
        self.UCF_HOLD_VCH8 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH8")
        self.UCF_HOLD_VCH9 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH9")
        self.UCF_HOLD_VCH10 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH10")
        self.UCF_HOLD_VCH11 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH11")
        self.UCF_HOLD_VCH12 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH12")
        self.UCF_HOLD_VCH13 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH13")
        self.UCF_HOLD_VCH14 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH14")
        self.UCF_HOLD_VCH15 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH15")
        self.UCF_HOLD_NUM1 = parse_value(self.schema, column_value_map, "UCF_HOLD_NUM1")
        self.UCF_HOLD_NUM2 = parse_value(self.schema, column_value_map, "UCF_HOLD_NUM2")
        self.UCF_HOLD_NUM3 = parse_value(self.schema, column_value_map, "UCF_HOLD_NUM3")
        self.UCF_HOLD_NUM4 = parse_value(self.schema, column_value_map, "UCF_HOLD_NUM4")
        self.UCF_HOLD_NUM5 = parse_value(self.schema, column_value_map, "UCF_HOLD_NUM5")
        self.UCF_HOLD_DATE1 = parse_value(self.schema, column_value_map, "UCF_HOLD_DATE1")
        self.UCF_HOLD_DATE2 = parse_value(self.schema, column_value_map, "UCF_HOLD_DATE2")
        self.UCF_HOLD_DATE3 = parse_value(self.schema, column_value_map, "UCF_HOLD_DATE3")
        self.UCF_HOLD_DATE4 = parse_value(self.schema, column_value_map, "UCF_HOLD_DATE4")
        self.UCF_HOLD_DATE5 = parse_value(self.schema, column_value_map, "UCF_HOLD_DATE5")
        self.UCF_HOLD_FLAG1 = parse_value(self.schema, column_value_map, "UCF_HOLD_FLAG1")
        self.UCF_HOLD_FLAG2 = parse_value(self.schema, column_value_map, "UCF_HOLD_FLAG2")
        self.UCF_HOLD_FLAG3 = parse_value(self.schema, column_value_map, "UCF_HOLD_FLAG3")
        self.UCF_HOLD_FLAG4 = parse_value(self.schema, column_value_map, "UCF_HOLD_FLAG4")
        self.UCF_HOLD_FLAG5 = parse_value(self.schema, column_value_map, "UCF_HOLD_FLAG5")
        self.UCF_HOLD_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH255_1")
        self.UCF_HOLD_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH255_2")
        self.UCF_HOLD_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH255_3")
        self.UCF_HOLD_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH4000_1")
        self.UCF_HOLD_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH4000_2")
        self.IS_ALTERED_FLAG = parse_value(self.schema, column_value_map, "IS_ALTERED_FLAG")
        self.IS_WORKED_FLAG = parse_value(self.schema, column_value_map, "IS_WORKED_FLAG")
        self.IS_DISPOSITIONED_FLAG = parse_value(self.schema, column_value_map, "IS_DISPOSITIONED_FLAG")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.GROUP_JOB_NO = parse_value(self.schema, column_value_map, "GROUP_JOB_NO")
        "Link Order Hold to group job to identify hold is created from Group Job."
        self.SOURCE = parse_value(self.schema, column_value_map, "SOURCE")

class SFOR_SFPL_SUBJECT_HOLD_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "SUBJECT_NO": "NUMBER",
        "SUBJECT_REV": "NUMBER",
        "SUBJECT_STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.SUBJECT_NO = parse_value(self.schema, column_value_map, "SUBJECT_NO")
        self.SUBJECT_REV = parse_value(self.schema, column_value_map, "SUBJECT_REV")
        self.SUBJECT_STATUS = parse_value(self.schema, column_value_map, "SUBJECT_STATUS")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_STEP_TOOL:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "TOOL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SERIAL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "QTY": "NUMBER",
        "TOOL_TITLE": "STRING",
        "TOOL_NOTES": "STRING",
        "TOOL_MODEL": "STRING",
        "UCF_PLAN_TOOL_VCH1": "STRING",
        "MANUFACTURER": "STRING",
        "UCF_PLAN_TOOL_VCH2": "STRING",
        "UCF_PLAN_TOOL_VCH3": "STRING",
        "UCF_PLAN_TOOL_FLAG1": "STRING",
        "UCF_PLAN_TOOL_DATE1": "STRING",
        "UCF_PLAN_TOOL_NUM1": "NUMBER",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "SUSPECT_FLAG": "STRING",
        "UCF_PLAN_TOOL_VCH4": "STRING",
        "UCF_PLAN_TOOL_VCH5": "STRING",
        "UCF_PLAN_TOOL_VCH6": "STRING",
        "UCF_PLAN_TOOL_VCH7": "STRING",
        "UCF_PLAN_TOOL_VCH8": "STRING",
        "UCF_PLAN_TOOL_VCH9": "STRING",
        "UCF_PLAN_TOOL_VCH10": "STRING",
        "UCF_PLAN_TOOL_VCH11": "STRING",
        "UCF_PLAN_TOOL_VCH12": "STRING",
        "UCF_PLAN_TOOL_VCH13": "STRING",
        "UCF_PLAN_TOOL_VCH14": "STRING",
        "UCF_PLAN_TOOL_VCH15": "STRING",
        "UCF_PLAN_TOOL_NUM2": "NUMBER",
        "UCF_PLAN_TOOL_NUM3": "NUMBER",
        "UCF_PLAN_TOOL_NUM4": "NUMBER",
        "UCF_PLAN_TOOL_NUM5": "NUMBER",
        "UCF_PLAN_TOOL_DATE2": "STRING",
        "UCF_PLAN_TOOL_DATE3": "STRING",
        "UCF_PLAN_TOOL_DATE4": "STRING",
        "UCF_PLAN_TOOL_DATE5": "STRING",
        "UCF_PLAN_TOOL_FLAG2": "STRING",
        "UCF_PLAN_TOOL_FLAG3": "STRING",
        "UCF_PLAN_TOOL_FLAG4": "STRING",
        "UCF_PLAN_TOOL_FLAG5": "STRING",
        "UCF_PLAN_TOOL_VCH255_1": "STRING",
        "UCF_PLAN_TOOL_VCH255_2": "STRING",
        "UCF_PLAN_TOOL_VCH255_3": "STRING",
        "UCF_PLAN_TOOL_VCH4000_1": "STRING",
        "UCF_PLAN_TOOL_VCH4000_2": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "SECURITY_GROUP": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "OVERUSE_FLAG": "STRING",
        "BOM_COMP_TOOL_ID": "STRING",
        "AUTHORED_FROM_FLAG": "STRING",
        "BOM_LINE_NO": "STRING",
        "EXTERNAL_FLAG": "STRING",
        "TEMPLATE_NO": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
        "LATEST_EFF_GRP_REV_FLAG": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "TOOL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEPTOOL_STEPDESC_FK", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"], "SFPL_STEP_DESC", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"]),
        DbForeignKey("SFPL_STEP_TOOL_FK1", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFPL_STEP_TOOL_ITYPE_FK", ["ITEM_TYPE","ITEM_SUBTYPE"], "SFPL_ITEM_TYPE_DEF", ["ITEM_TYPE","ITEM_SUBTYPE"]),
        DbForeignKey("SFPL_STEP_TOOL_TOOL_FK", ["TOOL_NO","TOOL_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
        DbForeignKey("SFPL_STEP_TOOL_FK2", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
        DbForeignKey("SFPL_STEP_TOOL_TMNFTR_FK", ["TOOL_NO","TOOL_CHG","MANUFACTURER"], "SFFND_TOOL_MANUFACTURER", ["TOOL_NO","TOOL_CHG","MANUFACTURER"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.TOOL_ID = parse_value(self.schema, column_value_map, "TOOL_ID")
        "Unique, system-generated identifier of the tool."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "Identifying number of the tool required for the given operation."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The secondary identifier, change number/letter, of the tool number."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the tool is or should be tracked by serial number."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the tool is or should be tracked by expiration date."
        self.QTY = parse_value(self.schema, column_value_map, "QTY")
        "Number of units of the tool required for performing the manufacturing operation."
        self.TOOL_TITLE = parse_value(self.schema, column_value_map, "TOOL_TITLE")
        "A descriptive title or name of the tool."
        self.TOOL_NOTES = parse_value(self.schema, column_value_map, "TOOL_NOTES")
        "Additional information about the tool."
        self.TOOL_MODEL = parse_value(self.schema, column_value_map, "TOOL_MODEL")
        "The maker's model of the tool."
        self.UCF_PLAN_TOOL_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH1")
        "User-configurable field for VARCHAR data type."
        self.MANUFACTURER = parse_value(self.schema, column_value_map, "MANUFACTURER")
        "The manufacturer of the tool."
        self.UCF_PLAN_TOOL_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_TOOL_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_TOOL_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM1")
        "User-configurable field for NUM data type."
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.UCF_PLAN_TOOL_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH4")
        self.UCF_PLAN_TOOL_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH5")
        self.UCF_PLAN_TOOL_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH6")
        self.UCF_PLAN_TOOL_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH7")
        self.UCF_PLAN_TOOL_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH8")
        self.UCF_PLAN_TOOL_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH9")
        self.UCF_PLAN_TOOL_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH10")
        self.UCF_PLAN_TOOL_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH11")
        self.UCF_PLAN_TOOL_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH12")
        self.UCF_PLAN_TOOL_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH13")
        self.UCF_PLAN_TOOL_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH14")
        self.UCF_PLAN_TOOL_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH15")
        self.UCF_PLAN_TOOL_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM2")
        self.UCF_PLAN_TOOL_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM3")
        self.UCF_PLAN_TOOL_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM4")
        self.UCF_PLAN_TOOL_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM5")
        self.UCF_PLAN_TOOL_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE2")
        self.UCF_PLAN_TOOL_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE3")
        self.UCF_PLAN_TOOL_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE4")
        self.UCF_PLAN_TOOL_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE5")
        self.UCF_PLAN_TOOL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG2")
        self.UCF_PLAN_TOOL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG3")
        self.UCF_PLAN_TOOL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG4")
        self.UCF_PLAN_TOOL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG5")
        self.UCF_PLAN_TOOL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH255_1")
        self.UCF_PLAN_TOOL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH255_2")
        self.UCF_PLAN_TOOL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH255_3")
        self.UCF_PLAN_TOOL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH4000_1")
        self.UCF_PLAN_TOOL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH4000_2")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.OVERUSE_FLAG = parse_value(self.schema, column_value_map, "OVERUSE_FLAG")
        self.BOM_COMP_TOOL_ID = parse_value(self.schema, column_value_map, "BOM_COMP_TOOL_ID")
        "Determines if tool is authored from BOM or not. Contains value if tool is authored from BOM."
        self.AUTHORED_FROM_FLAG = parse_value(self.schema, column_value_map, "AUTHORED_FROM_FLAG")
        "Indicates sources from where tool is authored viz BOM, Line, Items Library."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        "A unique sequential number that is assigned to BOM."
        self.EXTERNAL_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_FLAG")
        self.TEMPLATE_NO = parse_value(self.schema, column_value_map, "TEMPLATE_NO")
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        "EFF Group Id"
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        "Next Higher Assembly given by User"
        self.LATEST_EFF_GRP_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_EFF_GRP_REV_FLAG")
        "Latest Eff Group Rev Flag"

class SFPL_OPER_SKILL:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "OPER_UPDT_NO": "NUMBER",
        "SKILL_CATEGORY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "CREW_QTY": "NUMBER",
        "LABOR_HOURS": "NUMBER",
        "MAIN_SKILL_FLAG": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "OPER_UPDT_NO",
        "SKILL_CATEGORY",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_OPER_SKILL_OPER_FK", ["PLAN_ID","OPER_KEY","OPER_UPDT_NO"], "SFPL_OPERATION_DESC", ["PLAN_ID","OPER_KEY","OPER_UPDT_NO"]),
        DbForeignKey("SFPL_OPER_SKILL_SCATG_FK", ["SKILL_CATEGORY"], "SFFND_SKILL_CATEGORY_DEF", ["SKILL_CATEGORY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        "Unique, system-generated identifier of a given operation."
        self.SKILL_CATEGORY = parse_value(self.schema, column_value_map, "SKILL_CATEGORY")
        "A category to which the required skill belongs."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.CREW_QTY = parse_value(self.schema, column_value_map, "CREW_QTY")
        "Number of workers as the required resource for executing the manufacturing operation."
        self.LABOR_HOURS = parse_value(self.schema, column_value_map, "LABOR_HOURS")
        "Number of labor hours required by the manufacturing operation."
        self.MAIN_SKILL_FLAG = parse_value(self.schema, column_value_map, "MAIN_SKILL_FLAG")
        "Value Y means the Skill is Main Skill. Only one Skill can have MAIN_SKILL_FLAG=Y for a particular Operation."

class SFPL_STEP_TEXT_SUBVAR:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "TEXT_TYPE",
        "TAG",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEP_TEXT_SV_FK1", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO","TEXT_TYPE"], "SFPL_STEP_TEXT", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO","TEXT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFWID_OWP_DEF:
    schema = {
        "OWP_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OWP_DESC": "STRING",
        "OWP_NOTE": "STRING",
        "OWP_STATUS": "STRING",
        "CUST_ID": "STRING",
        "CUSTOMER_ORDER_NO": "STRING",
        "MODEL": "STRING",
        "PROGRAM": "STRING",
        "CONTRACT_NO": "STRING",
        "UNIT_NO": "STRING",
        "PROJECT": "STRING",
        "LOCATION_ID": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "ACTIVITY_NAME": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "UNIT_TYPE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "UCF_OWP_VCH1": "STRING",
        "UCF_OWP_VCH2": "STRING",
        "UCF_OWP_VCH3": "STRING",
        "UCF_OWP_VCH4": "STRING",
        "UCF_OWP_VCH5": "STRING",
        "UCF_OWP_VCH6": "STRING",
        "UCF_OWP_VCH7": "STRING",
        "UCF_OWP_VCH8": "STRING",
        "UCF_OWP_VCH9": "STRING",
        "UCF_OWP_VCH10": "STRING",
        "UCF_OWP_VCH11": "STRING",
        "UCF_OWP_VCH12": "STRING",
        "UCF_OWP_VCH13": "STRING",
        "UCF_OWP_VCH14": "STRING",
        "UCF_OWP_VCH15": "STRING",
        "UCF_OWP_NUM1": "NUMBER",
        "UCF_OWP_NUM2": "NUMBER",
        "UCF_OWP_NUM3": "NUMBER",
        "UCF_OWP_NUM4": "NUMBER",
        "UCF_OWP_NUM5": "NUMBER",
        "UCF_OWP_DATE1": "STRING",
        "UCF_OWP_DATE2": "STRING",
        "UCF_OWP_DATE3": "STRING",
        "UCF_OWP_DATE4": "STRING",
        "UCF_OWP_DATE5": "STRING",
        "UCF_OWP_FLAG1": "STRING",
        "UCF_OWP_FLAG2": "STRING",
        "UCF_OWP_FLAG3": "STRING",
        "UCF_OWP_FLAG4": "STRING",
        "UCF_OWP_FLAG5": "STRING",
        "UCF_OWP_VCH255_1": "STRING",
        "UCF_OWP_VCH255_2": "STRING",
        "UCF_OWP_VCH255_3": "STRING",
        "UCF_OWP_VCH4000_1": "STRING",
        "UCF_OWP_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "OWP_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OWP_DEF_FK1", ["MODEL"], "SFFND_MODEL_DEF", ["MODEL"]),
        DbForeignKey("SFWID_OWP_DEF_FK2", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("SFWID_OWP_DEF_FK3", ["PROJECT"], "SFFND_PROJECT_DEF", ["PROJECT"]),
        DbForeignKey("SFWID_OWP_DEF_FK6", ["ACTIVITY_NAME"], "SFFND_ACTIVITY_DEF", ["ACTIVITY_NAME"]),
        DbForeignKey("SFWID_OWP_DEF_FK4", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFWID_OWP_DEF_FK5", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
    ]
    refs = [
        "SFWID_ORDER_REQUEST_FK2",
        "SFWID_ORDER_OWP_XREF_FK1",
    ]
    def __init__(self, column_value_map):
        self.OWP_ID = parse_value(self.schema, column_value_map, "OWP_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OWP_DESC = parse_value(self.schema, column_value_map, "OWP_DESC")
        self.OWP_NOTE = parse_value(self.schema, column_value_map, "OWP_NOTE")
        self.OWP_STATUS = parse_value(self.schema, column_value_map, "OWP_STATUS")
        self.CUST_ID = parse_value(self.schema, column_value_map, "CUST_ID")
        "The customer receiving the completed work"
        self.CUSTOMER_ORDER_NO = parse_value(self.schema, column_value_map, "CUSTOMER_ORDER_NO")
        "The customer purchase order number associated"
        self.MODEL = parse_value(self.schema, column_value_map, "MODEL")
        "Unique identifier of the associated model/product line."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.CONTRACT_NO = parse_value(self.schema, column_value_map, "CONTRACT_NO")
        "The contract number the work order is related to."
        self.UNIT_NO = parse_value(self.schema, column_value_map, "UNIT_NO")
        "The unit number of the shipping product (e.g. airplane tail #) the work order is related to."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        "The associated Work Location"
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which the work for the work order is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which the work for the work order is scheduled to complete."
        self.ACTIVITY_NAME = parse_value(self.schema, column_value_map, "ACTIVITY_NAME")
        "A specific Activity Name."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised work start date."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised work complete date."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which the work for the work order has been started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which the work order has been completed."
        self.UCF_OWP_VCH1 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_OWP_VCH2 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_OWP_VCH3 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_OWP_VCH4 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_OWP_VCH5 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_OWP_VCH6 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_OWP_VCH7 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_OWP_VCH8 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_OWP_VCH9 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_OWP_VCH10 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH10")
        self.UCF_OWP_VCH11 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH11")
        self.UCF_OWP_VCH12 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH12")
        self.UCF_OWP_VCH13 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH13")
        self.UCF_OWP_VCH14 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH14")
        self.UCF_OWP_VCH15 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH15")
        self.UCF_OWP_NUM1 = parse_value(self.schema, column_value_map, "UCF_OWP_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_OWP_NUM2 = parse_value(self.schema, column_value_map, "UCF_OWP_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_OWP_NUM3 = parse_value(self.schema, column_value_map, "UCF_OWP_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_OWP_NUM4 = parse_value(self.schema, column_value_map, "UCF_OWP_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_OWP_NUM5 = parse_value(self.schema, column_value_map, "UCF_OWP_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_OWP_DATE1 = parse_value(self.schema, column_value_map, "UCF_OWP_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_OWP_DATE2 = parse_value(self.schema, column_value_map, "UCF_OWP_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_OWP_DATE3 = parse_value(self.schema, column_value_map, "UCF_OWP_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_OWP_DATE4 = parse_value(self.schema, column_value_map, "UCF_OWP_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_OWP_DATE5 = parse_value(self.schema, column_value_map, "UCF_OWP_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_OWP_FLAG1 = parse_value(self.schema, column_value_map, "UCF_OWP_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OWP_FLAG2 = parse_value(self.schema, column_value_map, "UCF_OWP_FLAG2")
        "	User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OWP_FLAG3 = parse_value(self.schema, column_value_map, "UCF_OWP_FLAG3")
        "	User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OWP_FLAG4 = parse_value(self.schema, column_value_map, "UCF_OWP_FLAG4")
        "	User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OWP_FLAG5 = parse_value(self.schema, column_value_map, "UCF_OWP_FLAG5")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OWP_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_OWP_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_OWP_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_OWP_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_OWP_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_OWP_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.SFWID_ORDER_REQUEST_FK2 = []
        self.SFWID_ORDER_OWP_XREF_FK1 = []

class SFSQA_VALID_RESULT_TYPE_DEF:
    schema = {
        "RESULT_ID": "STRING",
        "VALID_RESULT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "SQL_ID": "STRING",
        "VALID_RESULT_TYPE_DESC": "STRING",
        "API_URL": "STRING",
    }
    primary_key_columns = [
        "RESULT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFWID_OPER_DAT_COL_FK2",
        "SFPL_STEP_DAT_COL_FK3",
        "SFWID_OPER_DAT_COL_ALT_FK4",
        "SFFND_STD_DATCOL_TYPE_DEF_FK5",
        "SFSQA_INSP_ORDER_ISII_FK2",
        "SFSQA_INSP_ITEMS_FK16",
        "SFSQA_CLIST_IIFK14",
    ]
    def __init__(self, column_value_map):
        self.RESULT_ID = parse_value(self.schema, column_value_map, "RESULT_ID")
        self.VALID_RESULT_TYPE = parse_value(self.schema, column_value_map, "VALID_RESULT_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.SQL_ID = parse_value(self.schema, column_value_map, "SQL_ID")
        self.VALID_RESULT_TYPE_DESC = parse_value(self.schema, column_value_map, "VALID_RESULT_TYPE_DESC")
        self.API_URL = parse_value(self.schema, column_value_map, "API_URL")
        self.SFWID_OPER_DAT_COL_FK2 = []
        self.SFPL_STEP_DAT_COL_FK3 = []
        self.SFWID_OPER_DAT_COL_ALT_FK4 = []
        self.SFFND_STD_DATCOL_TYPE_DEF_FK5 = []
        self.SFSQA_INSP_ORDER_ISII_FK2 = []
        self.SFSQA_INSP_ITEMS_FK16 = []
        self.SFSQA_CLIST_IIFK14 = []

class SFFND_SECURITY_GROUP_TYPE_DEF:
    schema = {
        "SECURITY_GROUP_TYPE": "STRING",
        "SGTYPE_DESC": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "SECURITY_GROUP_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_SECURITY_GROUP_DEF_FK1",
    ]
    def __init__(self, column_value_map):
        self.SECURITY_GROUP_TYPE = parse_value(self.schema, column_value_map, "SECURITY_GROUP_TYPE")
        self.SGTYPE_DESC = parse_value(self.schema, column_value_map, "SGTYPE_DESC")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFFND_SECURITY_GROUP_DEF_FK1 = []

class SFSQA_SAMPLE_PLAN_DESC:
    schema = {
        "SAMPLE_PLAN_ID": "STRING",
        "SAMPLE_PLAN_NAME": "STRING",
        "SAMPLE_PLAN_DESC": "STRING",
        "STATUS": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UPDT_USERID": "STRING",
        "SP_PROCESS_TYPE": "STRING",
        "VIEW_NAME": "STRING",
        "REASON_FOR_CHANGE": "STRING",
    }
    primary_key_columns = [
        "SAMPLE_PLAN_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_SP_PROC_TYPE_FK", ["SP_PROCESS_TYPE"], "SFSQA_SAMPLE_PLAN_PROCESS_TYPE", ["SP_PROCESS_TYPE"]),
    ]
    refs = [
        "SFSQA_SAMPL_PLAN_DESC_FK",
        "SFSQA_SAMP_RULE_SPLAN_FK",
    ]
    def __init__(self, column_value_map):
        self.SAMPLE_PLAN_ID = parse_value(self.schema, column_value_map, "SAMPLE_PLAN_ID")
        "System generated unique identifier for a given sampling plan."
        self.SAMPLE_PLAN_NAME = parse_value(self.schema, column_value_map, "SAMPLE_PLAN_NAME")
        self.SAMPLE_PLAN_DESC = parse_value(self.schema, column_value_map, "SAMPLE_PLAN_DESC")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The status of the disposition/rework task. For example: IN PROCESS, DISPOSITIONED, or COMPLETE."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.SP_PROCESS_TYPE = parse_value(self.schema, column_value_map, "SP_PROCESS_TYPE")
        self.VIEW_NAME = parse_value(self.schema, column_value_map, "VIEW_NAME")
        "View that displays the given sample plan in tabular format."
        self.REASON_FOR_CHANGE = parse_value(self.schema, column_value_map, "REASON_FOR_CHANGE")
        self.SFSQA_SAMPL_PLAN_DESC_FK = []
        self.SFSQA_SAMP_RULE_SPLAN_FK = []

class SFSQA_INSP_ITEM_NAME_DEF:
    schema = {
        "INSP_ITEM_NAME_ID": "STRING",
        "INSP_ITEM_NAME": "STRING",
        "INSP_ITEM_DESC": "STRING",
        "INSP_ITEM_TYPE": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "INSP_ITEM_NAME_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_ITEM_NAME_DEF_FK1", ["INSP_ITEM_TYPE"], "SFSQA_INSP_ITEM_TYPE_DEF", ["INSP_ITEM_TYPE"]),
    ]
    refs = [
        "SFSQA_INSP_ORDER_ISII_FK3",
        "SFSQA_INSP_ITEMS_FK17",
    ]
    def __init__(self, column_value_map):
        self.INSP_ITEM_NAME_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_NAME_ID")
        self.INSP_ITEM_NAME = parse_value(self.schema, column_value_map, "INSP_ITEM_NAME")
        self.INSP_ITEM_DESC = parse_value(self.schema, column_value_map, "INSP_ITEM_DESC")
        self.INSP_ITEM_TYPE = parse_value(self.schema, column_value_map, "INSP_ITEM_TYPE")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFSQA_INSP_ORDER_ISII_FK3 = []
        self.SFSQA_INSP_ITEMS_FK17 = []

class SFFND_TEMPLATE_DEF:
    schema = {
        "TEMPLATE_NO": "STRING",
        "TEMPLATE_DESC": "STRING",
        "TEMPLATE_TYPE": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "TEMPLATE_NO",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFWID_OPER_DAT_COL_FK4",
        "SFPL_STEP_DAT_COL_FK5",
    ]
    def __init__(self, column_value_map):
        self.TEMPLATE_NO = parse_value(self.schema, column_value_map, "TEMPLATE_NO")
        self.TEMPLATE_DESC = parse_value(self.schema, column_value_map, "TEMPLATE_DESC")
        self.TEMPLATE_TYPE = parse_value(self.schema, column_value_map, "TEMPLATE_TYPE")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFWID_OPER_DAT_COL_FK4 = []
        self.SFPL_STEP_DAT_COL_FK5 = []

class SFFND_WORK_CENTER_DEF:
    schema = {
        "LOCATION_ID": "STRING",
        "DEPARTMENT_ID": "STRING",
        "CENTER_ID": "STRING",
        "WORK_CENTER": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "CENTER_TITLE": "STRING",
        "UCF_WORK_CENTER_VCH1": "STRING",
        "UCF_WORK_CENTER_NUM1": "NUMBER",
        "UCF_WORK_CENTER_FLAG1": "STRING",
        "BURDENED_RATE": "NUMBER",
        "UCF_WORK_CENTER_VCH2": "STRING",
        "UCF_WORK_CENTER_VCH3": "STRING",
        "UCF_WORK_CENTER_VCH4": "STRING",
        "UCF_WORK_CENTER_VCH5": "STRING",
        "UCF_WORK_CENTER_NUM2": "NUMBER",
        "UCF_WORK_CENTER_NUM3": "NUMBER",
        "UCF_WORK_CENTER_DATE1": "STRING",
        "UCF_WORK_CENTER_DATE2": "STRING",
        "UCF_WORK_CENTER_FLAG2": "STRING",
        "UCF_WORK_CENTER_FLAG3": "STRING",
        "UCF_WORK_CENTER_VCH255_1": "STRING",
        "UCF_WORK_CENTER_VCH255_2": "STRING",
        "WORK_CENTER_TYPE": "STRING",
        "AVG_LABOR_RATE_PER_HOUR": "NUMBER",
    }
    primary_key_columns = [
        "LOCATION_ID",
        "DEPARTMENT_ID",
        "CENTER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_WORK_CENTER_DEF_FK1", ["WORK_CENTER_TYPE"], "SFFND_WORK_CENTER_TYPE_DEF", ["WORK_CENTER_TYPE"]),
        DbForeignKey("SFFND_WORK_CNTR_DEF_DEPT_FK", ["LOCATION_ID","DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
    ]
    refs = [
        "SFWID_ORDER_CYCLES_FK3",
        "SFSQA_AUDIT_PLNPRO_SCHD_FK5",
        "SFWID_OPER_DESC_ALT_FK4",
        "SFQA_CA_REQ_AFFECTEDWKLDC_FK1",
        "SFWID_STAGING_LOCATION_FK1",
        "SFWID_OPER_DESC_CENTER_FK",
        "SFFND_TL_SRL_HOME_CENTER_FK",
        "SFFND_TL_SRL_CALIB_CENTER_FK",
        "SFFND_TL_SRL_ISSUED_CENTER_FK",
        "SFSQA_INSP_ORDER_DESC_FK12",
        "SFPL_OPER_DESC_CENTER_FK",
        "SFWID_OPERATIONS_CENTER_FK",
        "SFFND_USER_WORK_CENTERS_FK4",
        "SFWID_ORDER_DESC_FK13",
        "SFWID_ORDER_DESC_FK11",
        "SFWID_ORDER_DESC_FK12",
        "SFQA_CA_AFFECTED_WORK_LDC_FK2",
        "MOTT_FREEZER_FK1",
        "SFQA_DISC_ITEM_REJECT_CNTR_FK",
        "SFQA_DISC_ITEM_FK18",
        "SFSQA_INSP_ORDER_INSP_STEP_FK7",
        "SFSQA_INSP_PLAN_STEP_LOC_FK3",
        "SFFND_USER_CENTER_FK",
        "SFQA_CA_RESP_LDC_FK4",
    ]
    def __init__(self, column_value_map):
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.DEPARTMENT_ID = parse_value(self.schema, column_value_map, "DEPARTMENT_ID")
        "Unique, system-generated identifier of the given Work Department."
        self.CENTER_ID = parse_value(self.schema, column_value_map, "CENTER_ID")
        "Unique, system-generated identifier of the given Work Center."
        self.WORK_CENTER = parse_value(self.schema, column_value_map, "WORK_CENTER")
        "The identifier of a manufacturing work center/station operated by the work department."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.CENTER_TITLE = parse_value(self.schema, column_value_map, "CENTER_TITLE")
        "A descriptive title or name of the work center."
        self.UCF_WORK_CENTER_VCH1 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_WORK_CENTER_NUM1 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_WORK_CENTER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.BURDENED_RATE = parse_value(self.schema, column_value_map, "BURDENED_RATE")
        self.UCF_WORK_CENTER_VCH2 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_VCH2")
        self.UCF_WORK_CENTER_VCH3 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_VCH3")
        self.UCF_WORK_CENTER_VCH4 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_VCH4")
        self.UCF_WORK_CENTER_VCH5 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_VCH5")
        self.UCF_WORK_CENTER_NUM2 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_NUM2")
        self.UCF_WORK_CENTER_NUM3 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_NUM3")
        self.UCF_WORK_CENTER_DATE1 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_DATE1")
        self.UCF_WORK_CENTER_DATE2 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_DATE2")
        self.UCF_WORK_CENTER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_FLAG2")
        self.UCF_WORK_CENTER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_FLAG3")
        self.UCF_WORK_CENTER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_VCH255_1")
        self.UCF_WORK_CENTER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_WORK_CENTER_VCH255_2")
        self.WORK_CENTER_TYPE = parse_value(self.schema, column_value_map, "WORK_CENTER_TYPE")
        self.AVG_LABOR_RATE_PER_HOUR = parse_value(self.schema, column_value_map, "AVG_LABOR_RATE_PER_HOUR")
        "Average labor rate per hour for a given work center."
        self.SFWID_ORDER_CYCLES_FK3 = []
        self.SFSQA_AUDIT_PLNPRO_SCHD_FK5 = []
        self.SFWID_OPER_DESC_ALT_FK4 = []
        self.SFQA_CA_REQ_AFFECTEDWKLDC_FK1 = []
        self.SFWID_STAGING_LOCATION_FK1 = []
        self.SFWID_OPER_DESC_CENTER_FK = []
        self.SFFND_TL_SRL_HOME_CENTER_FK = []
        self.SFFND_TL_SRL_CALIB_CENTER_FK = []
        self.SFFND_TL_SRL_ISSUED_CENTER_FK = []
        self.SFSQA_INSP_ORDER_DESC_FK12 = []
        self.SFPL_OPER_DESC_CENTER_FK = []
        self.SFWID_OPERATIONS_CENTER_FK = []
        self.SFFND_USER_WORK_CENTERS_FK4 = []
        self.SFWID_ORDER_DESC_FK13 = []
        self.SFWID_ORDER_DESC_FK11 = []
        self.SFWID_ORDER_DESC_FK12 = []
        self.SFQA_CA_AFFECTED_WORK_LDC_FK2 = []
        self.MOTT_FREEZER_FK1 = []
        self.SFQA_DISC_ITEM_REJECT_CNTR_FK = []
        self.SFQA_DISC_ITEM_FK18 = []
        self.SFSQA_INSP_ORDER_INSP_STEP_FK7 = []
        self.SFSQA_INSP_PLAN_STEP_LOC_FK3 = []
        self.SFFND_USER_CENTER_FK = []
        self.SFQA_CA_RESP_LDC_FK4 = []

class SFFND_CERT_DEF:
    schema = {
        "CERT": "STRING",
        "CERT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "DESCRIPTION": "STRING",
        "CERT_GROUP": "STRING",
        "QUEUE_ID": "STRING",
        "QUEUE_TYPE": "STRING",
        "UCF_CERT_VCH1": "STRING",
        "UCF_CERT_VCH2": "STRING",
        "UCF_CERT_VCH3": "STRING",
        "UCF_CERT_VCH4": "STRING",
        "UCF_CERT_VCH5": "STRING",
        "UCF_CERT_VCH6": "STRING",
        "UCF_CERT_VCH7": "STRING",
        "UCF_CERT_VCH8": "STRING",
        "UCF_CERT_VCH9": "STRING",
        "UCF_CERT_VCH10": "STRING",
        "UCF_CERT_VCH11": "STRING",
        "UCF_CERT_VCH12": "STRING",
        "UCF_CERT_VCH13": "STRING",
        "UCF_CERT_VCH14": "STRING",
        "UCF_CERT_VCH15": "STRING",
        "UCF_CERT_NUM1": "NUMBER",
        "UCF_CERT_NUM2": "NUMBER",
        "UCF_CERT_NUM3": "NUMBER",
        "UCF_CERT_NUM4": "NUMBER",
        "UCF_CERT_NUM5": "NUMBER",
        "UCF_CERT_FLAG1": "STRING",
        "UCF_CERT_FLAG2": "STRING",
        "UCF_CERT_FLAG3": "STRING",
        "UCF_CERT_FLAG4": "STRING",
        "UCF_CERT_FLAG5": "STRING",
        "UCF_CERT_DATE1": "STRING",
        "UCF_CERT_DATE2": "STRING",
        "UCF_CERT_DATE3": "STRING",
        "UCF_CERT_DATE4": "STRING",
        "UCF_CERT_DATE5": "STRING",
        "UCF_CERT_VCH255_1": "STRING",
        "UCF_CERT_VCH255_2": "STRING",
        "UCF_CERT_VCH255_3": "STRING",
        "UCF_CERT_VCH4000_1": "STRING",
        "UCF_CERT_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "CERT",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFWID_OPER_DAT_COL_CERT_FK",
        "SFSQA_SUPPLIER_CERT_FK1",
        "SFFND_USRCRT_CRT_FK",
        "SFFND_USER_CERT_PRGM_CERT_FK",
        "SFWID_OPER_BUYOFF_CERT_FK",
        "SFPL_ITEM_CERT_FK1",
        "SFSQA_IPIS_FK1",
        "SFWID_OPER_BUYOFF_ALT_FK2",
        "SFPL_STEP_DAT_COL_CERT_FK",
        "SFWID_OPER_DAT_COL_ALT_FK2",
        "SFFND_CERT_ALTERNATE_CERT_FK",
        "SFFND_CERT_ALTERNATE_ALT_FK",
        "SFFND_STD_DATCOL_TYPE_DEF_FK2",
        "SFSQA_IDP_IC_CERT_FK",
        "SFSQA_IS_FK1",
        "SFSQA_INSP_ORDER_IS_FK2",
        "SFPL_STEP_BUYOFF_CERT_FK",
        "SFSQA_INSP_ITEMS_FK2",
        "SFSQA_CLIST_II_FK2",
    ]
    def __init__(self, column_value_map):
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        "The unique identifier of a certification."
        self.CERT_TYPE = parse_value(self.schema, column_value_map, "CERT_TYPE")
        "The particular certification type/class which the certification belongs to."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        "A detail description of the certification."
        self.CERT_GROUP = parse_value(self.schema, column_value_map, "CERT_GROUP")
        "The certification group (another way of classification and is used primarily for sorting) which the certification belongs to."
        self.QUEUE_ID = parse_value(self.schema, column_value_map, "QUEUE_ID")
        "Not in use."
        self.QUEUE_TYPE = parse_value(self.schema, column_value_map, "QUEUE_TYPE")
        "Not in use."
        self.UCF_CERT_VCH1 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH1")
        self.UCF_CERT_VCH2 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH2")
        self.UCF_CERT_VCH3 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH3")
        self.UCF_CERT_VCH4 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH4")
        self.UCF_CERT_VCH5 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH5")
        self.UCF_CERT_VCH6 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH6")
        self.UCF_CERT_VCH7 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH7")
        self.UCF_CERT_VCH8 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH8")
        self.UCF_CERT_VCH9 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH9")
        self.UCF_CERT_VCH10 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH10")
        self.UCF_CERT_VCH11 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH11")
        self.UCF_CERT_VCH12 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH12")
        self.UCF_CERT_VCH13 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH13")
        self.UCF_CERT_VCH14 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH14")
        self.UCF_CERT_VCH15 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH15")
        self.UCF_CERT_NUM1 = parse_value(self.schema, column_value_map, "UCF_CERT_NUM1")
        self.UCF_CERT_NUM2 = parse_value(self.schema, column_value_map, "UCF_CERT_NUM2")
        self.UCF_CERT_NUM3 = parse_value(self.schema, column_value_map, "UCF_CERT_NUM3")
        self.UCF_CERT_NUM4 = parse_value(self.schema, column_value_map, "UCF_CERT_NUM4")
        self.UCF_CERT_NUM5 = parse_value(self.schema, column_value_map, "UCF_CERT_NUM5")
        self.UCF_CERT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CERT_FLAG1")
        self.UCF_CERT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CERT_FLAG2")
        self.UCF_CERT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CERT_FLAG3")
        self.UCF_CERT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_CERT_FLAG4")
        self.UCF_CERT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_CERT_FLAG5")
        self.UCF_CERT_DATE1 = parse_value(self.schema, column_value_map, "UCF_CERT_DATE1")
        self.UCF_CERT_DATE2 = parse_value(self.schema, column_value_map, "UCF_CERT_DATE2")
        self.UCF_CERT_DATE3 = parse_value(self.schema, column_value_map, "UCF_CERT_DATE3")
        self.UCF_CERT_DATE4 = parse_value(self.schema, column_value_map, "UCF_CERT_DATE4")
        self.UCF_CERT_DATE5 = parse_value(self.schema, column_value_map, "UCF_CERT_DATE5")
        self.UCF_CERT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH255_1")
        self.UCF_CERT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH255_2")
        self.UCF_CERT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH255_3")
        self.UCF_CERT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH4000_1")
        self.UCF_CERT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_CERT_VCH4000_2")
        self.SFWID_OPER_DAT_COL_CERT_FK = []
        self.SFSQA_SUPPLIER_CERT_FK1 = []
        self.SFFND_USRCRT_CRT_FK = []
        self.SFFND_USER_CERT_PRGM_CERT_FK = []
        self.SFWID_OPER_BUYOFF_CERT_FK = []
        self.SFPL_ITEM_CERT_FK1 = []
        self.SFSQA_IPIS_FK1 = []
        self.SFWID_OPER_BUYOFF_ALT_FK2 = []
        self.SFPL_STEP_DAT_COL_CERT_FK = []
        self.SFWID_OPER_DAT_COL_ALT_FK2 = []
        self.SFFND_CERT_ALTERNATE_CERT_FK = []
        self.SFFND_CERT_ALTERNATE_ALT_FK = []
        self.SFFND_STD_DATCOL_TYPE_DEF_FK2 = []
        self.SFSQA_IDP_IC_CERT_FK = []
        self.SFSQA_IS_FK1 = []
        self.SFSQA_INSP_ORDER_IS_FK2 = []
        self.SFPL_STEP_BUYOFF_CERT_FK = []
        self.SFSQA_INSP_ITEMS_FK2 = []
        self.SFSQA_CLIST_II_FK2 = []

class SFWID_OPER_DAT_COL:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "DAT_COL_ID": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UPPER_LIMIT": "STRING",
        "LOWER_LIMIT": "STRING",
        "TARGET_VALUE": "STRING",
        "DAT_COL_TITLE": "STRING",
        "DAT_COL_CERT": "STRING",
        "ALT_ID": "STRING",
        "DAT_COL_UOM": "STRING",
        "ALT_COUNT": "NUMBER",
        "BLOCK_ID": "STRING",
        "REF_ID": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "NUM_DECIMAL_DIGITS": "NUMBER",
        "CALC_DC_FLAG": "STRING",
        "SUSPECT_FLAG": "STRING",
        "VARIABLE_NAME": "STRING",
        "VISIBILITY": "STRING",
        "UCF_OPER_DC_VCH1": "STRING",
        "UCF_OPER_DC_VCH2": "STRING",
        "UCF_OPER_DC_VCH3": "STRING",
        "UCF_OPER_DC_VCH4": "STRING",
        "UCF_OPER_DC_VCH5": "STRING",
        "UCF_OPER_DC_VCH6": "STRING",
        "UCF_OPER_DC_VCH7": "STRING",
        "UCF_OPER_DC_VCH8": "STRING",
        "UCF_OPER_DC_VCH9": "STRING",
        "UCF_OPER_DC_VCH10": "STRING",
        "UCF_OPER_DC_VCH11": "STRING",
        "UCF_OPER_DC_VCH12": "STRING",
        "UCF_OPER_DC_VCH13": "STRING",
        "UCF_OPER_DC_VCH14": "STRING",
        "UCF_OPER_DC_VCH15": "STRING",
        "UCF_OPER_DC_NUM1": "NUMBER",
        "UCF_OPER_DC_NUM2": "NUMBER",
        "UCF_OPER_DC_NUM3": "NUMBER",
        "UCF_OPER_DC_NUM4": "NUMBER",
        "UCF_OPER_DC_NUM5": "NUMBER",
        "UCF_OPER_DC_DATE1": "STRING",
        "UCF_OPER_DC_DATE2": "STRING",
        "UCF_OPER_DC_DATE3": "STRING",
        "UCF_OPER_DC_DATE4": "STRING",
        "UCF_OPER_DC_DATE5": "STRING",
        "UCF_OPER_DC_FLAG1": "STRING",
        "UCF_OPER_DC_FLAG2": "STRING",
        "UCF_OPER_DC_FLAG3": "STRING",
        "UCF_OPER_DC_FLAG4": "STRING",
        "UCF_OPER_DC_FLAG5": "STRING",
        "UCF_OPER_DC_VCH255_1": "STRING",
        "UCF_OPER_DC_VCH255_2": "STRING",
        "UCF_OPER_DC_VCH255_3": "STRING",
        "UCF_OPER_DC_VCH4000_1": "STRING",
        "UCF_OPER_DC_VCH4000_2": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "AUDIT_FLAG": "STRING",
        "TEMPLATE_UPDT_COUNT": "NUMBER",
        "STD_DATCOL_ID": "STRING",
        "RESULT_ID": "STRING",
        "TEMPLATE_FILE_ID": "STRING",
        "EXTERNAL_FLAG": "STRING",
        "MACHINE_ID": "STRING",
        "TEMPLATE_NO": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_DC_OPERDESC_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_OPER_DAT_COL_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_DAT_COL_FK1", ["STD_DATCOL_ID"], "SFFND_STD_DATCOL_TYPE_DEF", ["STD_DATCOL_ID"]),
        DbForeignKey("SFWID_OPER_DAT_COL_FK2", ["RESULT_ID"], "SFSQA_VALID_RESULT_TYPE_DEF", ["RESULT_ID"]),
        DbForeignKey("SFWID_OPER_DAT_COL_FK3", ["TEMPLATE_FILE_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_OPER_DAT_COL_UOM_FK", ["DAT_COL_UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFWID_OPER_DC_VAR_FK", ["VARIABLE_NAME","VISIBILITY"], "SFFND_DC_VARIABLE_DEF", ["VARIABLE_NAME","VISIBILITY"]),
        DbForeignKey("SFWID_OPER_DAT_COL_CERT_FK", ["DAT_COL_CERT"], "SFFND_CERT_DEF", ["CERT"]),
        DbForeignKey("SFWID_OPER_DAT_COL_FK4", ["TEMPLATE_NO"], "SFFND_TEMPLATE_DEF", ["TEMPLATE_NO"]),
    ]
    refs = [
        "SFWID_OPER_DC_FORMULA_DESC_FK1",
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        "Unique, system-generated identifier of the data collection."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UPPER_LIMIT = parse_value(self.schema, column_value_map, "UPPER_LIMIT")
        "The highest allowable data value for the given data collection."
        self.LOWER_LIMIT = parse_value(self.schema, column_value_map, "LOWER_LIMIT")
        "The lowest allowable data value for the given data collection."
        self.TARGET_VALUE = parse_value(self.schema, column_value_map, "TARGET_VALUE")
        "The optimal/expected value for the given data collection."
        self.DAT_COL_TITLE = parse_value(self.schema, column_value_map, "DAT_COL_TITLE")
        "Title/name of the data collection point."
        self.DAT_COL_CERT = parse_value(self.schema, column_value_map, "DAT_COL_CERT")
        "The required certification for the given data collection."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.DAT_COL_UOM = parse_value(self.schema, column_value_map, "DAT_COL_UOM")
        "The Unit of Measure associated with the data collection value."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Block type/Block id where object exists within the text. For a full list of BLOCK_IDs see SFFND_HTREF_BLOCKID_DEF for full list. Not currently implemented."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.NUM_DECIMAL_DIGITS = parse_value(self.schema, column_value_map, "NUM_DECIMAL_DIGITS")
        self.CALC_DC_FLAG = parse_value(self.schema, column_value_map, "CALC_DC_FLAG")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.VARIABLE_NAME = parse_value(self.schema, column_value_map, "VARIABLE_NAME")
        self.VISIBILITY = parse_value(self.schema, column_value_map, "VISIBILITY")
        self.UCF_OPER_DC_VCH1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH1")
        self.UCF_OPER_DC_VCH2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH2")
        self.UCF_OPER_DC_VCH3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH3")
        self.UCF_OPER_DC_VCH4 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH4")
        self.UCF_OPER_DC_VCH5 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH5")
        self.UCF_OPER_DC_VCH6 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH6")
        self.UCF_OPER_DC_VCH7 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH7")
        self.UCF_OPER_DC_VCH8 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH8")
        self.UCF_OPER_DC_VCH9 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH9")
        self.UCF_OPER_DC_VCH10 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH10")
        self.UCF_OPER_DC_VCH11 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH11")
        self.UCF_OPER_DC_VCH12 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH12")
        self.UCF_OPER_DC_VCH13 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH13")
        self.UCF_OPER_DC_VCH14 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH14")
        self.UCF_OPER_DC_VCH15 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH15")
        self.UCF_OPER_DC_NUM1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM1")
        self.UCF_OPER_DC_NUM2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM2")
        self.UCF_OPER_DC_NUM3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM3")
        self.UCF_OPER_DC_NUM4 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM4")
        self.UCF_OPER_DC_NUM5 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM5")
        self.UCF_OPER_DC_DATE1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE1")
        self.UCF_OPER_DC_DATE2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE2")
        self.UCF_OPER_DC_DATE3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE3")
        self.UCF_OPER_DC_DATE4 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE4")
        self.UCF_OPER_DC_DATE5 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE5")
        self.UCF_OPER_DC_FLAG1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG1")
        self.UCF_OPER_DC_FLAG2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG2")
        self.UCF_OPER_DC_FLAG3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG3")
        self.UCF_OPER_DC_FLAG4 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG4")
        self.UCF_OPER_DC_FLAG5 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG5")
        self.UCF_OPER_DC_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH255_1")
        self.UCF_OPER_DC_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH255_2")
        self.UCF_OPER_DC_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH255_3")
        self.UCF_OPER_DC_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH4000_1")
        self.UCF_OPER_DC_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH4000_2")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.AUDIT_FLAG = parse_value(self.schema, column_value_map, "AUDIT_FLAG")
        "If Y, the user audit process must be executed to see if an over-inspection is required or not."
        self.TEMPLATE_UPDT_COUNT = parse_value(self.schema, column_value_map, "TEMPLATE_UPDT_COUNT")
        "This counter will be used to track no of updates in File for different units and it will be used to save as new files on each update with different units."
        self.STD_DATCOL_ID = parse_value(self.schema, column_value_map, "STD_DATCOL_ID")
        self.RESULT_ID = parse_value(self.schema, column_value_map, "RESULT_ID")
        "The unique identifier of the Validation Result Type for given data collection."
        self.TEMPLATE_FILE_ID = parse_value(self.schema, column_value_map, "TEMPLATE_FILE_ID")
        "The unique identifier of the object being referenced."
        self.EXTERNAL_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_FLAG")
        self.MACHINE_ID = parse_value(self.schema, column_value_map, "MACHINE_ID")
        self.TEMPLATE_NO = parse_value(self.schema, column_value_map, "TEMPLATE_NO")
        self.SFWID_OPER_DC_FORMULA_DESC_FK1 = []

class SFFND_USER_PROGRAM_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "USERID": "STRING",
        "PROGRAM": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_ERROR_LOG:
    schema = {
        "ERRORID": "NUMBER",
        "USERID": "STRING",
        "TIME_STAMP": "DATE",
        "EXCEPTION_CLASS": "STRING",
        "ERROR_STACK": "STRING",
        "ACTIVITY_LOG": "STRING",
    }
    primary_key_columns = [
        "ERRORID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFCORE_PROCESS_LOG_FK1",
    ]
    def __init__(self, column_value_map):
        self.ERRORID = parse_value(self.schema, column_value_map, "ERRORID")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.EXCEPTION_CLASS = parse_value(self.schema, column_value_map, "EXCEPTION_CLASS")
        self.ERROR_STACK = parse_value(self.schema, column_value_map, "ERROR_STACK")
        self.ACTIVITY_LOG = parse_value(self.schema, column_value_map, "ACTIVITY_LOG")
        self.SFCORE_PROCESS_LOG_FK1 = []

class SFFND_TEST_TYPE_DEF:
    schema = {
        "TEST_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "TEST_TYPE_DESC": "STRING",
    }
    primary_key_columns = [
        "TEST_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFWID_OPER_DESC_TEST_TYPE_FK",
        "SFPL_OPER_DESC_TTYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.TEST_TYPE = parse_value(self.schema, column_value_map, "TEST_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.TEST_TYPE_DESC = parse_value(self.schema, column_value_map, "TEST_TYPE_DESC")
        self.SFWID_OPER_DESC_TEST_TYPE_FK = []
        self.SFPL_OPER_DESC_TTYPE_FK = []

class SFWID_SERIAL_OPER_BUYOFF_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "BUYOFF_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "COMMENTS": "STRING",
        "BUYOFF_STATUS": "STRING",
        "HIST_ALT_ID": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "UCF_SRLOPBUYOFF_VCH1": "STRING",
        "UCF_SRLOPBUYOFF_VCH2": "STRING",
        "UCF_SRLOPBUYOFF_VCH3": "STRING",
        "UCF_SRLOPBUYOFF_VCH4": "STRING",
        "UCF_SRLOPBUYOFF_VCH5": "STRING",
        "UCF_SRLOPBUYOFF_VCH6": "STRING",
        "UCF_SRLOPBUYOFF_VCH7": "STRING",
        "UCF_SRLOPBUYOFF_VCH8": "STRING",
        "UCF_SRLOPBUYOFF_VCH9": "STRING",
        "UCF_SRLOPBUYOFF_VCH10": "STRING",
        "UCF_SRLOPBUYOFF_NUM1": "NUMBER",
        "UCF_SRLOPBUYOFF_NUM2": "NUMBER",
        "UCF_SRLOPBUYOFF_NUM3": "NUMBER",
        "UCF_SRLOPBUYOFF_NUM4": "NUMBER",
        "UCF_SRLOPBUYOFF_NUM5": "NUMBER",
        "UCF_SRLOPBUYOFF_DATE1": "STRING",
        "UCF_SRLOPBUYOFF_DATE2": "STRING",
        "UCF_SRLOPBUYOFF_DATE3": "STRING",
        "UCF_SRLOPBUYOFF_DATE4": "STRING",
        "UCF_SRLOPBUYOFF_DATE5": "STRING",
        "UCF_SRLOPBUYOFF_FLAG1": "STRING",
        "UCF_SRLOPBUYOFF_FLAG2": "STRING",
        "UCF_SRLOPBUYOFF_FLAG3": "STRING",
        "UCF_SRLOPBUYOFF_FLAG4": "STRING",
        "UCF_SRLOPBUYOFF_FLAG5": "STRING",
        "UCF_SRLOPBUYOFF_VCH11": "STRING",
        "UCF_SRLOPBUYOFF_VCH12": "STRING",
        "UCF_SRLOPBUYOFF_VCH13": "STRING",
        "UCF_SRLOPBUYOFF_VCH14": "STRING",
        "UCF_SRLOPBUYOFF_VCH15": "STRING",
        "UCF_SRLOPBUYOFF_VCH255_1": "STRING",
        "UCF_SRLOPBUYOFF_VCH255_2": "STRING",
        "UCF_SRLOPBUYOFF_VCH255_3": "STRING",
        "UCF_SRLOPBUYOFF_VCH4000_1": "STRING",
        "UCF_SRLOPBUYOFF_VCH4000_2": "STRING",
        "PERCENT_COMPLETE": "NUMBER",
        "COMPLETE_QTY": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.BUYOFF_ID = parse_value(self.schema, column_value_map, "BUYOFF_ID")
        "Unique, system-generated identifier of the buyoff."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Additional comments."
        self.BUYOFF_STATUS = parse_value(self.schema, column_value_map, "BUYOFF_STATUS")
        "The status of the buyoff, e.g., ACCEPT, REOPEN, CANCEL, REJECT."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.UCF_SRLOPBUYOFF_VCH1 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH2 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH3 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH4 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH5 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH6 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH7 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH8 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH9 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH10 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_NUM1 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_SRLOPBUYOFF_NUM2 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_SRLOPBUYOFF_NUM3 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_SRLOPBUYOFF_NUM4 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_SRLOPBUYOFF_NUM5 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_SRLOPBUYOFF_DATE1 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SRLOPBUYOFF_DATE2 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SRLOPBUYOFF_DATE3 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_SRLOPBUYOFF_DATE4 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_SRLOPBUYOFF_DATE5 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_SRLOPBUYOFF_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRLOPBUYOFF_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRLOPBUYOFF_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRLOPBUYOFF_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRLOPBUYOFF_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRLOPBUYOFF_VCH11 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH12 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH13 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH14 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH15 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH255_1")
        self.UCF_SRLOPBUYOFF_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH255_2")
        self.UCF_SRLOPBUYOFF_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH255_3")
        self.UCF_SRLOPBUYOFF_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH4000_1")
        self.UCF_SRLOPBUYOFF_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH4000_2")
        self.PERCENT_COMPLETE = parse_value(self.schema, column_value_map, "PERCENT_COMPLETE")
        self.COMPLETE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_QTY")

class SFCORE_LOGIN_ATTEMPT:
    schema = {
        "ATTEMPT_ID": "STRING",
        "CONNECTION_ID": "STRING",
        "USERID": "STRING",
        "LOGIN_ATTEMPT_TIME": "DATE",
        "LOGIN_STATUS": "STRING",
        "FAILURE_REASON": "STRING",
        "CONNECTION_TYPE": "STRING",
        "IPADDRESS": "STRING",
        "APPINIID": "STRING",
        "APPVER": "STRING",
    }
    primary_key_columns = [
        "ATTEMPT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ATTEMPT_ID = parse_value(self.schema, column_value_map, "ATTEMPT_ID")
        self.CONNECTION_ID = parse_value(self.schema, column_value_map, "CONNECTION_ID")
        "Unique system generated identifier for a given application connection."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "System generated unique identifier of the user who made the associated connection."
        self.LOGIN_ATTEMPT_TIME = parse_value(self.schema, column_value_map, "LOGIN_ATTEMPT_TIME")
        "Date and time of the user attempted for login."
        self.LOGIN_STATUS = parse_value(self.schema, column_value_map, "LOGIN_STATUS")
        "Login status as SUCCESS/FAILURE."
        self.FAILURE_REASON = parse_value(self.schema, column_value_map, "FAILURE_REASON")
        "Reason for Failure if any."
        self.CONNECTION_TYPE = parse_value(self.schema, column_value_map, "CONNECTION_TYPE")
        "The type of client a user is running/using when making an application connection to the Solumina database."
        self.IPADDRESS = parse_value(self.schema, column_value_map, "IPADDRESS")
        "IP address from which the user is logging in."
        self.APPINIID = parse_value(self.schema, column_value_map, "APPINIID")
        "INI_LIB record when application connection was made."
        self.APPVER = parse_value(self.schema, column_value_map, "APPVER")
        "Version of Solumina client application the user is running."

class SFWID_OPER_TOOL:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TOOL_ID": "STRING",
        "STEP_NO": "STRING",
        "TOOL_NO": "STRING",
        "OPER_NO": "STRING",
        "TOOL_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TOOL_TITLE": "STRING",
        "TOOL_NOTES": "STRING",
        "SERIAL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "QTY": "NUMBER",
        "TOOL_MODEL": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "MANUFACTURER": "STRING",
        "UCF_PLAN_TOOL_VCH1": "STRING",
        "UCF_PLAN_TOOL_VCH2": "STRING",
        "UCF_PLAN_TOOL_VCH3": "STRING",
        "UCF_PLAN_TOOL_FLAG1": "STRING",
        "UCF_PLAN_TOOL_DATE1": "STRING",
        "UCF_PLAN_TOOL_NUM1": "NUMBER",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "SUSPECT_FLAG": "STRING",
        "UCF_PLAN_TOOL_VCH4": "STRING",
        "UCF_PLAN_TOOL_VCH5": "STRING",
        "UCF_PLAN_TOOL_VCH6": "STRING",
        "UCF_PLAN_TOOL_VCH7": "STRING",
        "UCF_PLAN_TOOL_VCH8": "STRING",
        "UCF_PLAN_TOOL_VCH9": "STRING",
        "UCF_PLAN_TOOL_VCH10": "STRING",
        "UCF_PLAN_TOOL_VCH11": "STRING",
        "UCF_PLAN_TOOL_VCH12": "STRING",
        "UCF_PLAN_TOOL_VCH13": "STRING",
        "UCF_PLAN_TOOL_VCH14": "STRING",
        "UCF_PLAN_TOOL_VCH15": "STRING",
        "UCF_PLAN_TOOL_NUM2": "NUMBER",
        "UCF_PLAN_TOOL_NUM3": "NUMBER",
        "UCF_PLAN_TOOL_NUM4": "NUMBER",
        "UCF_PLAN_TOOL_NUM5": "NUMBER",
        "UCF_PLAN_TOOL_DATE2": "STRING",
        "UCF_PLAN_TOOL_DATE3": "STRING",
        "UCF_PLAN_TOOL_DATE4": "STRING",
        "UCF_PLAN_TOOL_DATE5": "STRING",
        "UCF_PLAN_TOOL_FLAG2": "STRING",
        "UCF_PLAN_TOOL_FLAG3": "STRING",
        "UCF_PLAN_TOOL_FLAG4": "STRING",
        "UCF_PLAN_TOOL_FLAG5": "STRING",
        "UCF_PLAN_TOOL_VCH255_1": "STRING",
        "UCF_PLAN_TOOL_VCH255_2": "STRING",
        "UCF_PLAN_TOOL_VCH255_3": "STRING",
        "UCF_PLAN_TOOL_VCH4000_1": "STRING",
        "UCF_PLAN_TOOL_VCH4000_2": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "IS_TOOL_KITTED": "STRING",
        "SECURITY_GROUP": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "OVERUSE_FLAG": "STRING",
        "SERIAL_KITTED": "STRING",
        "BOM_COMP_TOOL_ID": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "EXTERNAL_FLAG": "STRING",
        "TEMPLATE_NO": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "BOM_LINE_NO": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "TOOL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_TOOL_FK02", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFWID_OPER_TOOL_ITYPE_FK", ["ITEM_TYPE","ITEM_SUBTYPE"], "SFPL_ITEM_TYPE_DEF", ["ITEM_TYPE","ITEM_SUBTYPE"]),
        DbForeignKey("SFWID_OPER_TOOL_OPERDESC_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_OPER_TOOL_TMNFTR_FK", ["TOOL_NO","TOOL_CHG","MANUFACTURER"], "SFFND_TOOL_MANUFACTURER", ["TOOL_NO","TOOL_CHG","MANUFACTURER"]),
        DbForeignKey("SFWID_OPER_TOOL_FK1", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
        DbForeignKey("SFWID_OPER_TOOL_FK01", ["TOOL_NO","TOOL_CHG","SERIAL_KITTED"], "SFFND_TOOL_SERIAL_DEF", ["TOOL_NO","TOOL_CHG","TOOL_SERIAL_NO"]),
        DbForeignKey("SFWID_OPER_TOOL_TOOL_FK", ["TOOL_NO","TOOL_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
        DbForeignKey("SFWID_OPER_TOOL_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TOOL_ID = parse_value(self.schema, column_value_map, "TOOL_ID")
        "Unique, system-generated identifier of the tool."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "Identifying number of the tool required for the given operation."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of the given tool."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TOOL_TITLE = parse_value(self.schema, column_value_map, "TOOL_TITLE")
        "Title or name of the given tool."
        self.TOOL_NOTES = parse_value(self.schema, column_value_map, "TOOL_NOTES")
        "Additional information about the tool."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the tool is or should be tracked by serial number."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the tool is or should be tracked by expiration date."
        self.QTY = parse_value(self.schema, column_value_map, "QTY")
        "The quantity of a given tool required for a given operation."
        self.TOOL_MODEL = parse_value(self.schema, column_value_map, "TOOL_MODEL")
        "The manufacturer's model of the given tool."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.MANUFACTURER = parse_value(self.schema, column_value_map, "MANUFACTURER")
        "The manufacturer/maker of the given tool."
        self.UCF_PLAN_TOOL_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_TOOL_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_TOOL_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM1")
        "User-configurable field for NUM data type."
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.UCF_PLAN_TOOL_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH4")
        self.UCF_PLAN_TOOL_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH5")
        self.UCF_PLAN_TOOL_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH6")
        self.UCF_PLAN_TOOL_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH7")
        self.UCF_PLAN_TOOL_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH8")
        self.UCF_PLAN_TOOL_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH9")
        self.UCF_PLAN_TOOL_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH10")
        self.UCF_PLAN_TOOL_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH11")
        self.UCF_PLAN_TOOL_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH12")
        self.UCF_PLAN_TOOL_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH13")
        self.UCF_PLAN_TOOL_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH14")
        self.UCF_PLAN_TOOL_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH15")
        self.UCF_PLAN_TOOL_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM2")
        self.UCF_PLAN_TOOL_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM3")
        self.UCF_PLAN_TOOL_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM4")
        self.UCF_PLAN_TOOL_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM5")
        self.UCF_PLAN_TOOL_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE2")
        self.UCF_PLAN_TOOL_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE3")
        self.UCF_PLAN_TOOL_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE4")
        self.UCF_PLAN_TOOL_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE5")
        self.UCF_PLAN_TOOL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG2")
        self.UCF_PLAN_TOOL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG3")
        self.UCF_PLAN_TOOL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG4")
        self.UCF_PLAN_TOOL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG5")
        self.UCF_PLAN_TOOL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH255_1")
        self.UCF_PLAN_TOOL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH255_2")
        self.UCF_PLAN_TOOL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH255_3")
        self.UCF_PLAN_TOOL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH4000_1")
        self.UCF_PLAN_TOOL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH4000_2")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.IS_TOOL_KITTED = parse_value(self.schema, column_value_map, "IS_TOOL_KITTED")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.OVERUSE_FLAG = parse_value(self.schema, column_value_map, "OVERUSE_FLAG")
        self.SERIAL_KITTED = parse_value(self.schema, column_value_map, "SERIAL_KITTED")
        self.BOM_COMP_TOOL_ID = parse_value(self.schema, column_value_map, "BOM_COMP_TOOL_ID")
        "Determines if tool is authored from BOM or not. Contains value if tool is authored from BOM."
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.EXTERNAL_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_FLAG")
        self.TEMPLATE_NO = parse_value(self.schema, column_value_map, "TEMPLATE_NO")
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        "EFF Group Id"
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        "Next Higher Assembly given by User"

class SFQA_CA_TEXT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
        "TEXT_TYPE": "STRING",
        "BLOCK_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolte (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Data and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., ISSUE_DISC."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The block Id where Text is authored."

class SFCORE_CONNECTION_PARAMS:
    schema = {
        "CONNECTION_ID": "STRING",
        "PARAM_NAME": "STRING",
        "PARAM_VALUE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "CONNECTION_ID",
        "PARAM_NAME",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_CONN_PARMS_CONN_FK", ["CONNECTION_ID"], "SFCORE_CONNECTION_DESC", ["CONNECTION_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONNECTION_ID = parse_value(self.schema, column_value_map, "CONNECTION_ID")
        self.PARAM_NAME = parse_value(self.schema, column_value_map, "PARAM_NAME")
        self.PARAM_VALUE = parse_value(self.schema, column_value_map, "PARAM_VALUE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")

class SFCORE_MM_OBJECT:
    schema = {
        "OBJECT_ID": "STRING",
        "OBJECT_TYPE": "STRING",
        "OBJECT_TAG": "STRING",
        "OBJECT_REV": "STRING",
        "OBJECT_DESC": "STRING",
        "BLOCKTYPE": "STRING",
        "FORMAT": "STRING",
        "LOCKED": "STRING",
        "OWNER_GROUP": "NUMBER",
        "OBJECT_REFERENCE": "STRING",
        "OBJECT_PARAMETERS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "CLASSIFICATION": "STRING",
        "CATEGORY": "STRING",
        "STATUS": "STRING",
        "UCF_MMOBJ_VCH1": "STRING",
        "UCF_MMOBJ_VCH2": "STRING",
        "UCF_MMOBJ_VCH3": "STRING",
        "UCF_MMOBJ_VCH4": "STRING",
        "UCF_MMOBJ_VCH5": "STRING",
        "UCF_MMOBJ_NUM1": "NUMBER",
        "UCF_MMOBJ_DATE1": "STRING",
        "UCF_MMOBJ_FLAG1": "STRING",
        "TEXT_DATA": "STRING",
        "BINARY_DATA": "STRING",
        "THUMBNAIL": "STRING",
        "IMAGE": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "BOOKMARK": "STRING",
        "SECURITY_GROUP": "STRING",
        "ACQUIRE_EXPRESS": "STRING",
        "STYPE": "STRING",
        "COMMODITY_JURISDICTION": "STRING",
        "PWP_ID": "STRING",
        "DOC_TYPE": "STRING",
        "COMMODITY_CLASSIFICATION": "STRING",
        "EXTERNAL_INCOMPLETE_FLAG": "STRING",
        "DOC_SUB_TYPE": "STRING",
        "WORK_FLOW": "STRING",
        "OBJECT_VER": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "NEEDS_CONVERSION": "STRING",
    }
    primary_key_columns = [
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_MM_OBJECT_FK1", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
        DbForeignKey("SFCORE_MM_OBJECT_PWP_FK", ["PWP_ID"], "SFPL_PWP_DESC", ["PWP_ID"]),
        DbForeignKey("SFCORE_MM_OBJECT_STYPE_FK", ["STYPE"], "SFCORE_MODULES", ["GROUP_NAME"]),
        DbForeignKey("SFCORE_MM_OBJECT_OBJ_TYPE_FK", ["OBJECT_TYPE"], "SFCORE_OBJECT_TYPE_DEF", ["OBJECT_TYPE"]),
    ]
    refs = [
        "SFSQA_SUPPLIER_CERT_XREF_FK2",
        "SFRPT_REPORT_MAINTENANCE_FK1",
        "SFWID_ALTERATION_FK01",
        "SFWID_OPER_DAT_COL_FK3",
        "SFPL_MFG_BOM_MM_OBJ_ORIG_FK2",
        "SFSQA_INSP_ORDER_ISII_DC_FK4",
        "SFWID_OPER_MM_OBJECTS_FK3",
        "SFWID_OPER_MM_OBJECTS_FK2",
        "SFWID_ORDER_MM_OBJECTS_ALT_FK3",
        "SFWID_ORDER_MM_OBJECTS_ALT_FK2",
        "SFCORE_MM_OBJFLDR_XREF_OBJ_FK",
        "SFRPT_PRINT_OPTION_FK1",
        "FWRDEF_FWMMOBJ_FK",
        "SFPL_ITEM_MM_OBJ_XREF_FK1",
        "SFPLPLAN_DESC_FK01",
        "SFFND_TOOL_SERIAL_DEF_XREF_FK1",
        "SFQA_CA_CAT_TEMP_ATTACH_FK2",
        "SFPL_IMPACTED_OBJECTS_FK4",
        "SFFND_COMM_MM_OBJECTS_FK1",
        "SFQA_DISC_ITEM_ATTACHMENTS_FK2",
        "SFFND_USER_CERTS_XREF_FK2",
        "SFQA_CA_ATTACH_FK2",
        "SFFND_REP_DESC_IMAGE_OBJECT_ID",
        "SFPL_MFG_BOM_MM_OBJECT_FK1",
        "SFWID_OPER_DESC_FK01",
        "SFPL_PLANNED_ACTIONS_FK4",
        "SFOR_SFPL_PLAN_SUBJECT_FK01",
        "SFQA_DISC_ITEM_MM_OBJECTS_FK1",
        "SFPL_OPERATION_DESC_FK02",
        "SFPL_OPERATION_DESC_FK01",
        "SFCORE_MM_HTREF_OBJECT_FK",
        "SFPL_RESULTING_OBJECTS_FK4",
        "SFQA_DISC_DESC_MM_OBJECTS_FK1",
        "SFQA_CA_TEMPLATE_DESC_FK4",
        "SFQA_CA_TEMPLATE_DESC_FK3",
        "SFPL_STEP_DAT_COL_FK4",
        "SFWID_OPER_DAT_COL_ALT_FK7",
        "SFRPT_REPORT_GRAPH_OBJECT_FK",
        "SFPL_STEP_MM_OBJECTS_FK2",
        "SFPL_STEP_MM_OBJECTS_FK3",
        "SFPL_CHANGE_MM_OBJECT_XREF_FK2",
        "SFFND_STD_DATCOL_TYPE_DEF_FK7",
        "SFWID_ORDER_NOTES_FK1",
        "SFSQA_INSP_ORDER_NOTES_FK4",
        "SFWID_SERIAL_OPER_DAT_COL_FK1",
        "SFFND_STDTEXT_MM_OBJECTS_FK1",
        "SFFND_STDTEXT_MM_OBJECTS_FK2",
        "SFSQA_INSP_PLAN_DESC_OBJID_FK",
        "SFWID_ORDER_MM_OBJECTS_FK3",
        "SFWID_ORDER_MM_OBJECTS_FK2",
        "SFSQA_INSP_ORDER_ISII_FK1",
        "SFSQA_INSP_ORDER_ISII_FK5",
        "SFSQA_INSP_ORDER_ATT_FK",
        "SFSQA_IO_ATTACHS_FK1",
        "SFPL_MATERIAL_NOTES_TEXT_FK2",
        "SFWID_GROUP_JOB_FK1",
        "SFFND_CUST_LOGO_XREF_FK2",
        "SFQA_CA_DESC_MM_OBJECTS_FK1",
        "SFFND_OBJECT_CLASS_FK1",
        "SFWID_OPER_NOTES_MM_OBJECTS_F2",
        "SFCORE_ATTACHMENT_OBJECT_FK1",
        "SFSQA_INSP_ITEMS_FK19",
        "SFSQA_INSP_ITEM_FK13",
        "SFQA_CA_REQUEST_MM_OBJECTS_FK1",
        "SFPL_AFFECTED_OBJECTS_FK4",
        "SFQA_CA_SECTION_ATTACHMENT_FK2",
        "SFWID_OPER_MM_OBJECTS_ALT_FK3",
        "SFWID_OPER_MM_OBJECTS_ALT_FK2",
        "SFSQA_CLIST_IIFK13",
        "SFSQA_CLIST_IIFK15",
        "SFCORE_MM_OBJECT_SEC_GRP_FK1",
        "SFPL_PLAN_MM_OBJECTS_FK3",
        "SFPL_PLAN_MM_OBJECTS_FK2",
    ]
    def __init__(self, column_value_map):
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The type of multimedia object."
        self.OBJECT_TAG = parse_value(self.schema, column_value_map, "OBJECT_TAG")
        "User provided unique identifier of the multimedia object; can be NULL and can be modified."
        self.OBJECT_REV = parse_value(self.schema, column_value_map, "OBJECT_REV")
        "The system generated revision number of the multimedia object."
        self.OBJECT_DESC = parse_value(self.schema, column_value_map, "OBJECT_DESC")
        "A detailed description of the multimedia object."
        self.BLOCKTYPE = parse_value(self.schema, column_value_map, "BLOCKTYPE")
        "Type of text block the standard text is associated with. For instance: PlanIEText, PlanOperText, PlanQAText, PlanStepText, PlanText, or PlanningText; not applicable to any other type of multimedia object."
        self.FORMAT = parse_value(self.schema, column_value_map, "FORMAT")
        "The format in which the data/content of the multimedia object is stored."
        self.LOCKED = parse_value(self.schema, column_value_map, "LOCKED")
        "Not in use."
        self.OWNER_GROUP = parse_value(self.schema, column_value_map, "OWNER_GROUP")
        "The functional group whose members can delete or modify the multimedia object."
        self.OBJECT_REFERENCE = parse_value(self.schema, column_value_map, "OBJECT_REFERENCE")
        "Location of the object outside the database."
        self.OBJECT_PARAMETERS = parse_value(self.schema, column_value_map, "OBJECT_PARAMETERS")
        "The parameters that identify the object itself or its use."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.CLASSIFICATION = parse_value(self.schema, column_value_map, "CLASSIFICATION")
        "The classification of a given multimedia object."
        self.CATEGORY = parse_value(self.schema, column_value_map, "CATEGORY")
        "The category of a given multimedia object."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The status of the disposition/rework task. For example: IN PROCESS, DISPOSITIONED, or COMPLETE."
        self.UCF_MMOBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_MMOBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_MMOBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_MMOBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_MMOBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_MMOBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_MMOBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_MMOBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_MMOBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_MMOBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_MMOBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_MMOBJ_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_MMOBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_MMOBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_MMOBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_MMOBJ_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.TEXT_DATA = parse_value(self.schema, column_value_map, "TEXT_DATA")
        "If applicable, the actual textual data of the object. Column in object-column SFCORE_MM_DATA_OBJ."
        self.BINARY_DATA = parse_value(self.schema, column_value_map, "BINARY_DATA")
        "If applicable, the actual binary data of the object. Column in object-column SFCORE_MM_DATA_OBJ."
        self.THUMBNAIL = parse_value(self.schema, column_value_map, "THUMBNAIL")
        "If applicable, a thumbnail representation of the object. Column in object-column SFCORE_MM_DATA_OBJ."
        self.IMAGE = parse_value(self.schema, column_value_map, "IMAGE")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.BOOKMARK = parse_value(self.schema, column_value_map, "BOOKMARK")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.ACQUIRE_EXPRESS = parse_value(self.schema, column_value_map, "ACQUIRE_EXPRESS")
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")
        self.COMMODITY_JURISDICTION = parse_value(self.schema, column_value_map, "COMMODITY_JURISDICTION")
        "Commodity Jurisdiction of Multimedia Object."
        self.PWP_ID = parse_value(self.schema, column_value_map, "PWP_ID")
        "Contains the specific Release Package of the object."
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        "Stored Document type for the corresponding multimedia object."
        self.COMMODITY_CLASSIFICATION = parse_value(self.schema, column_value_map, "COMMODITY_CLASSIFICATION")
        "Commodity Classification of Multimedia Object."
        self.EXTERNAL_INCOMPLETE_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_INCOMPLETE_FLAG")
        "A PART/MM OBJECT with value Y should not be visible at any place in the system. Such PART/MM OBJECT act as place holder until actual request is received from external request."
        self.DOC_SUB_TYPE = parse_value(self.schema, column_value_map, "DOC_SUB_TYPE")
        "Stored Document Sub type for the corresponding Doc Type."
        self.WORK_FLOW = parse_value(self.schema, column_value_map, "WORK_FLOW")
        "Store Work Flow for the Doc Type and Doc Sub Type."
        self.OBJECT_VER = parse_value(self.schema, column_value_map, "OBJECT_VER")
        "Store version of objects received from external system. For objects created internally, this will be blank."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.NEEDS_CONVERSION = parse_value(self.schema, column_value_map, "NEEDS_CONVERSION")
        self.SFSQA_SUPPLIER_CERT_XREF_FK2 = []
        self.SFRPT_REPORT_MAINTENANCE_FK1 = []
        self.SFWID_ALTERATION_FK01 = []
        self.SFWID_OPER_DAT_COL_FK3 = []
        self.SFPL_MFG_BOM_MM_OBJ_ORIG_FK2 = []
        self.SFSQA_INSP_ORDER_ISII_DC_FK4 = []
        self.SFWID_OPER_MM_OBJECTS_FK3 = []
        self.SFWID_OPER_MM_OBJECTS_FK2 = []
        self.SFWID_ORDER_MM_OBJECTS_ALT_FK3 = []
        self.SFWID_ORDER_MM_OBJECTS_ALT_FK2 = []
        self.SFCORE_MM_OBJFLDR_XREF_OBJ_FK = []
        self.SFRPT_PRINT_OPTION_FK1 = []
        self.FWRDEF_FWMMOBJ_FK = []
        self.SFPL_ITEM_MM_OBJ_XREF_FK1 = []
        self.SFPLPLAN_DESC_FK01 = []
        self.SFFND_TOOL_SERIAL_DEF_XREF_FK1 = []
        self.SFQA_CA_CAT_TEMP_ATTACH_FK2 = []
        self.SFPL_IMPACTED_OBJECTS_FK4 = []
        self.SFFND_COMM_MM_OBJECTS_FK1 = []
        self.SFQA_DISC_ITEM_ATTACHMENTS_FK2 = []
        self.SFFND_USER_CERTS_XREF_FK2 = []
        self.SFQA_CA_ATTACH_FK2 = []
        self.SFFND_REP_DESC_IMAGE_OBJECT_ID = []
        self.SFPL_MFG_BOM_MM_OBJECT_FK1 = []
        self.SFWID_OPER_DESC_FK01 = []
        self.SFPL_PLANNED_ACTIONS_FK4 = []
        self.SFOR_SFPL_PLAN_SUBJECT_FK01 = []
        self.SFQA_DISC_ITEM_MM_OBJECTS_FK1 = []
        self.SFPL_OPERATION_DESC_FK02 = []
        self.SFPL_OPERATION_DESC_FK01 = []
        self.SFCORE_MM_HTREF_OBJECT_FK = []
        self.SFPL_RESULTING_OBJECTS_FK4 = []
        self.SFQA_DISC_DESC_MM_OBJECTS_FK1 = []
        self.SFQA_CA_TEMPLATE_DESC_FK4 = []
        self.SFQA_CA_TEMPLATE_DESC_FK3 = []
        self.SFPL_STEP_DAT_COL_FK4 = []
        self.SFWID_OPER_DAT_COL_ALT_FK7 = []
        self.SFRPT_REPORT_GRAPH_OBJECT_FK = []
        self.SFPL_STEP_MM_OBJECTS_FK2 = []
        self.SFPL_STEP_MM_OBJECTS_FK3 = []
        self.SFPL_CHANGE_MM_OBJECT_XREF_FK2 = []
        self.SFFND_STD_DATCOL_TYPE_DEF_FK7 = []
        self.SFWID_ORDER_NOTES_FK1 = []
        self.SFSQA_INSP_ORDER_NOTES_FK4 = []
        self.SFWID_SERIAL_OPER_DAT_COL_FK1 = []
        self.SFFND_STDTEXT_MM_OBJECTS_FK1 = []
        self.SFFND_STDTEXT_MM_OBJECTS_FK2 = []
        self.SFSQA_INSP_PLAN_DESC_OBJID_FK = []
        self.SFWID_ORDER_MM_OBJECTS_FK3 = []
        self.SFWID_ORDER_MM_OBJECTS_FK2 = []
        self.SFSQA_INSP_ORDER_ISII_FK1 = []
        self.SFSQA_INSP_ORDER_ISII_FK5 = []
        self.SFSQA_INSP_ORDER_ATT_FK = []
        self.SFSQA_IO_ATTACHS_FK1 = []
        self.SFPL_MATERIAL_NOTES_TEXT_FK2 = []
        self.SFWID_GROUP_JOB_FK1 = []
        self.SFFND_CUST_LOGO_XREF_FK2 = []
        self.SFQA_CA_DESC_MM_OBJECTS_FK1 = []
        self.SFFND_OBJECT_CLASS_FK1 = []
        self.SFWID_OPER_NOTES_MM_OBJECTS_F2 = []
        self.SFCORE_ATTACHMENT_OBJECT_FK1 = []
        self.SFSQA_INSP_ITEMS_FK19 = []
        self.SFSQA_INSP_ITEM_FK13 = []
        self.SFQA_CA_REQUEST_MM_OBJECTS_FK1 = []
        self.SFPL_AFFECTED_OBJECTS_FK4 = []
        self.SFQA_CA_SECTION_ATTACHMENT_FK2 = []
        self.SFWID_OPER_MM_OBJECTS_ALT_FK3 = []
        self.SFWID_OPER_MM_OBJECTS_ALT_FK2 = []
        self.SFSQA_CLIST_IIFK13 = []
        self.SFSQA_CLIST_IIFK15 = []
        self.SFCORE_MM_OBJECT_SEC_GRP_FK1 = []
        self.SFPL_PLAN_MM_OBJECTS_FK3 = []
        self.SFPL_PLAN_MM_OBJECTS_FK2 = []

class SFCORE_INPLACE_CFG_DATA:
    schema = {
        "USER_TYPE": "STRING",
        "CFG_TYPE": "STRING",
        "TIME_STAMP": "DATE",
        "CONTEXT_DATA": "STRING",
        "CONTEXT_DATA_KEY": "STRING",
        "DESCRIPTION": "STRING",
        "CONTEXT_TEXT": "STRING",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "USER_TYPE",
        "CFG_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_INPLACE_CFG_DATA_UT_FK", ["USER_TYPE"], "SFCORE_USER_TYPE_DEF", ["USER_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USER_TYPE = parse_value(self.schema, column_value_map, "USER_TYPE")
        self.CFG_TYPE = parse_value(self.schema, column_value_map, "CFG_TYPE")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.CONTEXT_DATA = parse_value(self.schema, column_value_map, "CONTEXT_DATA")
        self.CONTEXT_DATA_KEY = parse_value(self.schema, column_value_map, "CONTEXT_DATA_KEY")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.CONTEXT_TEXT = parse_value(self.schema, column_value_map, "CONTEXT_TEXT")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFPL_MFG_BOM_ALT_TRANSFORM:
    schema = {
        "ALT_TRANSFORMATION_ID": "STRING",
        "BOM_ID": "STRING",
        "IMPORTED_BOM_COMP_ID": "STRING",
        "ALT_ITEM_ID": "STRING",
        "TRANSFORMED_BOM_COMP_ID": "STRING",
        "TRANSFORMATION_STATUS": "STRING",
        "NOTES": "STRING",
        "TRANSFORMED_ON": "STRING",
        "TRANSFORMED_BY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ALT_TRANSFORMATION_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_ALT_TRANSFORM_FK1", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_ALT_TRANSFORM_FK2", ["ALT_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ALT_TRANSFORMATION_ID = parse_value(self.schema, column_value_map, "ALT_TRANSFORMATION_ID")
        "Unique system generated id for BOM transformation."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "BOM_ID for which transformation is made."
        self.IMPORTED_BOM_COMP_ID = parse_value(self.schema, column_value_map, "IMPORTED_BOM_COMP_ID")
        "BOM_COMP_ID of Imported record. NULL in case of Transformation option ADD."
        self.ALT_ITEM_ID = parse_value(self.schema, column_value_map, "ALT_ITEM_ID")
        "The unique identifier of an item/part."
        self.TRANSFORMED_BOM_COMP_ID = parse_value(self.schema, column_value_map, "TRANSFORMED_BOM_COMP_ID")
        "BOM_COMP_ID of Transformed record. NULL in case of Transformation option DELETE."
        self.TRANSFORMATION_STATUS = parse_value(self.schema, column_value_map, "TRANSFORMATION_STATUS")
        "Transformation Status APPROVED or UNAPPROVED."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Notes provided during transformation."
        self.TRANSFORMED_ON = parse_value(self.schema, column_value_map, "TRANSFORMED_ON")
        "The date and time the record was last transformed."
        self.TRANSFORMED_BY = parse_value(self.schema, column_value_map, "TRANSFORMED_BY")
        "Last user who transformed the record."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_SUPPLIER_USERS:
    schema = {
        "USERID": "STRING",
        "SUPPLIER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "USERID",
        "SUPPLIER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_SUPPLIER_USERS_FK1", ["USERID"], "SFCORE_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.SUPPLIER_ID = parse_value(self.schema, column_value_map, "SUPPLIER_ID")
        "System generated unique identifier for a given supplier, used for supplier licensing."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFCORE_GLOBAL_CONFIGURATION:
    schema = {
        "CONFIG_MODULE_NAME": "STRING",
        "PARAMETER_NAME": "STRING",
        "PARAMETER_VALUE": "STRING",
        "PARAMETER_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CONFIG_MODULE_NAME",
        "PARAMETER_NAME",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_GLOBALCONF_CONFMOD_FK", ["CONFIG_MODULE_NAME"], "SFCORE_CONFIG_MODULE_DEF", ["CONFIG_MODULE_NAME"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONFIG_MODULE_NAME = parse_value(self.schema, column_value_map, "CONFIG_MODULE_NAME")
        self.PARAMETER_NAME = parse_value(self.schema, column_value_map, "PARAMETER_NAME")
        self.PARAMETER_VALUE = parse_value(self.schema, column_value_map, "PARAMETER_VALUE")
        self.PARAMETER_DESC = parse_value(self.schema, column_value_map, "PARAMETER_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFQA_DISC_NOTIFICATION:
    schema = {
        "DISC_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_TAG": "STRING",
        "OBJECT_REV": "STRING",
        "PROPAGATION_ACTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "CURRENT_OBJECT_ID": "STRING",
        "CURRENT_REVISION": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "REF_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_NOTIF_DISC_FK", ["DISC_ID"], "SFQA_DISC_DESC", ["DISC_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.OBJECT_TAG = parse_value(self.schema, column_value_map, "OBJECT_TAG")
        "User provided unique identifier of the multimedia object; can be NULL and can be modified."
        self.OBJECT_REV = parse_value(self.schema, column_value_map, "OBJECT_REV")
        "The system generated revision number of the multimedia object."
        self.PROPAGATION_ACTION = parse_value(self.schema, column_value_map, "PROPAGATION_ACTION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.CURRENT_OBJECT_ID = parse_value(self.schema, column_value_map, "CURRENT_OBJECT_ID")
        "Unique system generated identifier for a given multimedia object tht now has a more recent revision."
        self.CURRENT_REVISION = parse_value(self.schema, column_value_map, "CURRENT_REVISION")

class SFCORE_REPORT_PARAMETERS:
    schema = {
        "OBJECT_ID": "STRING",
        "REPORT_NAME": "STRING",
        "PARAM_NAME": "STRING",
        "PARAM_USE": "STRING",
        "DISPLAYED_NAME": "STRING",
        "PARAM_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "AUTOFILL": "STRING",
        "AUTOPROMPT": "STRING",
        "LOOKUP_SQL_ID": "STRING",
        "DEFAULT_VALUE": "STRING",
    }
    primary_key_columns = [
        "OBJECT_ID",
        "REPORT_NAME",
        "PARAM_NAME",
        "PARAM_USE",
    ]
    foreign_keys = [
        DbForeignKey("FWRPRM_FWRDEF_FK", ["OBJECT_ID","REPORT_NAME"], "SFCORE_REPORT_DEF", ["OBJECT_ID","REPORT_NAME"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.REPORT_NAME = parse_value(self.schema, column_value_map, "REPORT_NAME")
        "User defineable name for a given report."
        self.PARAM_NAME = parse_value(self.schema, column_value_map, "PARAM_NAME")
        "User defineable parameter name."
        self.PARAM_USE = parse_value(self.schema, column_value_map, "PARAM_USE")
        "Description of parameter use/meaning."
        self.DISPLAYED_NAME = parse_value(self.schema, column_value_map, "DISPLAYED_NAME")
        "Name to be displayed."
        self.PARAM_TYPE = parse_value(self.schema, column_value_map, "PARAM_TYPE")
        "Parameter type/classification."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.AUTOFILL = parse_value(self.schema, column_value_map, "AUTOFILL")
        "Flag that indicates if parameters should be automaitcally filled in."
        self.AUTOPROMPT = parse_value(self.schema, column_value_map, "AUTOPROMPT")
        "Flag that indicates if the user should be prompted automaitcally."
        self.LOOKUP_SQL_ID = parse_value(self.schema, column_value_map, "LOOKUP_SQL_ID")
        "The SQL_LIB entry to hanlde lookup parameters for a given report."
        self.DEFAULT_VALUE = parse_value(self.schema, column_value_map, "DEFAULT_VALUE")
        "A given parameters defined default value."

class SFFND_HTREF_STEP_TEXT:
    schema = {
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "OBJECT_TYPE": "STRING",
        "OBJECT_NAME": "STRING",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "UPDT_USERID": "STRING",
        "TEXT_TYPE": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_HTREF_STEP_TEXT_ST_FK", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO","TEXT_TYPE"], "SFPL_STEP_TEXT", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO","TEXT_TYPE"]),
        DbForeignKey("BLOCKID_FK13", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "The system generated unique identifier of an object link embedded in a work plan operation text block."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "The unique identifier of the object being referenced."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The object type/class which the object belongs to. For example: CAD drawing, still image, slide, UDV, standard text, audio, or video."
        self.OBJECT_NAME = parse_value(self.schema, column_value_map, "OBJECT_NAME")
        "A descriptive tag/name of the object."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "The protocol id of a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "The host id of a Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "The file location of a Universal Resource Locator."

class SFWID_OPER_ITEMS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "PLND_ITEM_ID": "STRING",
        "REF_DES": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "PLND_ITEM_QTY": "NUMBER",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "PART_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "UOM": "STRING",
        "UCF_PLAN_ITEM_VCH1": "STRING",
        "UCF_PLAN_ITEM_VCH2": "STRING",
        "UCF_PLAN_ITEM_VCH3": "STRING",
        "UCF_PLAN_ITEM_VCH4": "STRING",
        "UCF_PLAN_ITEM_VCH5": "STRING",
        "UCF_PLAN_ITEM_FLAG1": "STRING",
        "UCF_PLAN_ITEM_FLAG2": "STRING",
        "UCF_PLAN_ITEM_NUM1": "NUMBER",
        "UCF_PLAN_ITEM_NUM2": "NUMBER",
        "OVER_CONSUMPTION_FLAG": "STRING",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "ITEM_CATEGORY": "STRING",
        "STORE_LOC": "STRING",
        "UNLOADING_POINT": "STRING",
        "SERIAL_FLAG": "STRING",
        "SPOOL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "REF_DES_PREF_RANK": "NUMBER",
        "FIND_NO": "STRING",
        "ITEM_NOTES": "STRING",
        "OPT_DC1_FLAG": "STRING",
        "OPT_DC2_FLAG": "STRING",
        "OPT_DC3_FLAG": "STRING",
        "OPT_DC4_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "SUSPECT_FLAG": "STRING",
        "UCF_PLAN_ITEM_VCH6": "STRING",
        "UCF_PLAN_ITEM_VCH7": "STRING",
        "UCF_PLAN_ITEM_VCH8": "STRING",
        "UCF_PLAN_ITEM_VCH9": "STRING",
        "UCF_PLAN_ITEM_VCH10": "STRING",
        "UCF_PLAN_ITEM_VCH11": "STRING",
        "UCF_PLAN_ITEM_VCH12": "STRING",
        "UCF_PLAN_ITEM_VCH13": "STRING",
        "UCF_PLAN_ITEM_VCH14": "STRING",
        "UCF_PLAN_ITEM_VCH15": "STRING",
        "UCF_PLAN_ITEM_NUM3": "NUMBER",
        "UCF_PLAN_ITEM_NUM4": "NUMBER",
        "UCF_PLAN_ITEM_NUM5": "NUMBER",
        "UCF_PLAN_ITEM_DATE1": "STRING",
        "UCF_PLAN_ITEM_DATE2": "STRING",
        "UCF_PLAN_ITEM_DATE3": "STRING",
        "UCF_PLAN_ITEM_DATE4": "STRING",
        "UCF_PLAN_ITEM_DATE5": "STRING",
        "UCF_PLAN_ITEM_FLAG3": "STRING",
        "UCF_PLAN_ITEM_FLAG4": "STRING",
        "UCF_PLAN_ITEM_FLAG5": "STRING",
        "UCF_PLAN_ITEM_VCH255_1": "STRING",
        "UCF_PLAN_ITEM_VCH255_2": "STRING",
        "UCF_PLAN_ITEM_VCH255_3": "STRING",
        "UCF_PLAN_ITEM_VCH4000_1": "STRING",
        "UCF_PLAN_ITEM_VCH4000_2": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "REMOVE_ACTION": "STRING",
        "UTILIZATION_RULE": "STRING",
        "TRACKABLE_FLAG": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "PART_DAT_COL_ID": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "SECURITY_GROUP": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "DISP_PART_DAT_COL_ID": "STRING",
        "PART_LINE_NO": "NUMBER",
        "BOM_LINE_NO": "STRING",
        "PHANTOM_KIT_PART_NO": "STRING",
        "REPLACEMENT_PART_NO": "STRING",
        "REPLACEMENT_PART_CHG": "STRING",
        "BOM_COMP_ID": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
        "REF_DES_DESC": "STRING",
        "RAW_MATERIAL_LENGTH": "NUMBER",
        "RAW_MATERIAL_WIDTH": "NUMBER",
        "NO_OF_PCS": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.PLND_ITEM_ID = parse_value(self.schema, column_value_map, "PLND_ITEM_ID")
        "Unique, system-generated ID of the given component/part."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.PLND_ITEM_QTY = parse_value(self.schema, column_value_map, "PLND_ITEM_QTY")
        "The planned quantity associated with a given component/part."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.PART_ACTION = parse_value(self.schema, column_value_map, "PART_ACTION")
        "The intended action of the component/part, i.e., USE or REMOVE."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Denormalized UOM associated with the given object as derived from the specific order at the time the record was created."
        self.UCF_PLAN_ITEM_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PLAN_ITEM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PLAN_ITEM_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_ITEM_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM2")
        "User-configurable field for NUM data type."
        self.OVER_CONSUMPTION_FLAG = parse_value(self.schema, column_value_map, "OVER_CONSUMPTION_FLAG")
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.ITEM_CATEGORY = parse_value(self.schema, column_value_map, "ITEM_CATEGORY")
        self.STORE_LOC = parse_value(self.schema, column_value_map, "STORE_LOC")
        self.UNLOADING_POINT = parse_value(self.schema, column_value_map, "UNLOADING_POINT")
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.SPOOL_FLAG = parse_value(self.schema, column_value_map, "SPOOL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by a spool number."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by expiration date."
        self.REF_DES_PREF_RANK = parse_value(self.schema, column_value_map, "REF_DES_PREF_RANK")
        "Where multiple candidate components are associated with a given reference designator, the rank of a given candidate, where the lowest number shows the highest preference for use."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.ITEM_NOTES = parse_value(self.schema, column_value_map, "ITEM_NOTES")
        "Additional information about a given component/part."
        self.OPT_DC1_FLAG = parse_value(self.schema, column_value_map, "OPT_DC1_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC2_FLAG = parse_value(self.schema, column_value_map, "OPT_DC2_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC3_FLAG = parse_value(self.schema, column_value_map, "OPT_DC3_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC4_FLAG = parse_value(self.schema, column_value_map, "OPT_DC4_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.UCF_PLAN_ITEM_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH6")
        self.UCF_PLAN_ITEM_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH7")
        self.UCF_PLAN_ITEM_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH8")
        self.UCF_PLAN_ITEM_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH9")
        self.UCF_PLAN_ITEM_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH10")
        self.UCF_PLAN_ITEM_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH11")
        self.UCF_PLAN_ITEM_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH12")
        self.UCF_PLAN_ITEM_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH13")
        self.UCF_PLAN_ITEM_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH14")
        self.UCF_PLAN_ITEM_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH15")
        self.UCF_PLAN_ITEM_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM3")
        self.UCF_PLAN_ITEM_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM4")
        self.UCF_PLAN_ITEM_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM5")
        self.UCF_PLAN_ITEM_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE1")
        self.UCF_PLAN_ITEM_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE2")
        self.UCF_PLAN_ITEM_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE3")
        self.UCF_PLAN_ITEM_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE4")
        self.UCF_PLAN_ITEM_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE5")
        self.UCF_PLAN_ITEM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG3")
        self.UCF_PLAN_ITEM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG4")
        self.UCF_PLAN_ITEM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG5")
        self.UCF_PLAN_ITEM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH255_1")
        self.UCF_PLAN_ITEM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH255_2")
        self.UCF_PLAN_ITEM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH255_3")
        self.UCF_PLAN_ITEM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH4000_1")
        self.UCF_PLAN_ITEM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH4000_2")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.REMOVE_ACTION = parse_value(self.schema, column_value_map, "REMOVE_ACTION")
        self.UTILIZATION_RULE = parse_value(self.schema, column_value_map, "UTILIZATION_RULE")
        self.TRACKABLE_FLAG = parse_value(self.schema, column_value_map, "TRACKABLE_FLAG")
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.DISP_PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "DISP_PART_DAT_COL_ID")
        self.PART_LINE_NO = parse_value(self.schema, column_value_map, "PART_LINE_NO")
        "A unique sequential number that is assigned when the component part is authored in the order/plan."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        "A unique sequential number that is assigned to BOM component part."
        self.PHANTOM_KIT_PART_NO = parse_value(self.schema, column_value_map, "PHANTOM_KIT_PART_NO")
        "Parent phantom part no of component part."
        self.REPLACEMENT_PART_NO = parse_value(self.schema, column_value_map, "REPLACEMENT_PART_NO")
        "Contains replacement part number."
        self.REPLACEMENT_PART_CHG = parse_value(self.schema, column_value_map, "REPLACEMENT_PART_CHG")
        "Contains replacement part revision."
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        "Contains BOM Component id if part is authored from BOM."
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        self.REF_DES_DESC = parse_value(self.schema, column_value_map, "REF_DES_DESC")
        self.RAW_MATERIAL_LENGTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_LENGTH")
        self.RAW_MATERIAL_WIDTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_WIDTH")
        self.NO_OF_PCS = parse_value(self.schema, column_value_map, "NO_OF_PCS")

class SFPL_STEP_MATERIAL:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "MATERIAL_NAME": "STRING",
        "MATERIAL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "STATUS": "STRING",
        "UOM": "STRING",
        "QUANTITY": "NUMBER",
        "FREEZER_NAME": "STRING",
        "EXPIRATION_DATE": "STRING",
        "TIME_REMAINING": "NUMBER",
        "CLASSIFIED": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "SECURITY_GROUP": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "AUTHORED_MATERIAL_ID": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "AUTHORED_MATERIAL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEP_MATERIAL_FK01", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"], "SFPL_STEP_DESC", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"]),
        DbForeignKey("SFPL_STEP_MATERIAL_FK02", ["MATERIAL_ID"], "MOTT_TIME_MATERIAL", ["MATERIAL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.MATERIAL_NAME = parse_value(self.schema, column_value_map, "MATERIAL_NAME")
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        "Primary Key For Time sensitive material"
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        self.QUANTITY = parse_value(self.schema, column_value_map, "QUANTITY")
        self.FREEZER_NAME = parse_value(self.schema, column_value_map, "FREEZER_NAME")
        self.EXPIRATION_DATE = parse_value(self.schema, column_value_map, "EXPIRATION_DATE")
        self.TIME_REMAINING = parse_value(self.schema, column_value_map, "TIME_REMAINING")
        self.CLASSIFIED = parse_value(self.schema, column_value_map, "CLASSIFIED")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.AUTHORED_MATERIAL_ID = parse_value(self.schema, column_value_map, "AUTHORED_MATERIAL_ID")

class SFSQA_MEASUREMENT_INDEX_DEF:
    schema = {
        "MEASUREMENT_INDEX": "STRING",
        "MI_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "MEASUREMENT_INDEX",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.MEASUREMENT_INDEX = parse_value(self.schema, column_value_map, "MEASUREMENT_INDEX")
        self.MI_DESC = parse_value(self.schema, column_value_map, "MI_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_MFG_BOM_MM_OBJECT_ORIG:
    schema = {
        "BOM_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BOM_LINE_ID": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "EFF_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "DATE",
    }
    primary_key_columns = [
        "BOM_ID",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_MM_OBJECT_ORIG_FK4", ["EFF_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFPL_MFG_BOM_MM_OBJ_ORIG_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFPL_MFG_BOM_MM_OBJ_ORIG_FK3", ["BOM_ID","BOM_LINE_ID"], "SFPL_MFG_BOM_REV_LINE_NO_ORIG", ["BOM_ID","BOM_LINE_ID"]),
        DbForeignKey("SFPL_MFG_BOM_MM_OBJ_ORIG_FK1", ["BOM_ID"], "SFPL_MFG_BOM_REV_ORIG", ["BOM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Corresponding BOM for which multimedia object is added."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BOM_LINE_ID = parse_value(self.schema, column_value_map, "BOM_LINE_ID")
        "Reference of BOM Line of the BOM Document."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.EFF_TYPE = parse_value(self.schema, column_value_map, "EFF_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")

class SFSQA_INSP_ORDER_ISII_DC_DATA:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "ITEM_ID": "STRING",
        "INSP_ITEM_ID": "STRING",
        "INSP_ITEM_COUNT": "NUMBER",
        "SLOT_ID": "STRING",
        "STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "REC_SOURCE": "STRING",
        "SAMPLE_NO": "NUMBER",
        "OCCURANCE_NO": "NUMBER",
        "NO_RESPONSE_FLAG": "STRING",
        "SLOT_FLAG": "STRING",
        "MANUALLY_MARKED_AS_REJECT_FLAG": "STRING",
        "CDC_VALUE": "STRING",
        "NOTES": "STRING",
        "UNIT_ID": "STRING",
        "CDC_TEXT_VALUE": "STRING",
        "ACTUAL_INSP_METHOD": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH1": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH2": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH3": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH4": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH5": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH6": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH7": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH8": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH9": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH10": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH11": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH12": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH13": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH14": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH15": "STRING",
        "UCF_INSP_ORDERIIIDC_DATE1": "STRING",
        "UCF_INSP_ORDERIIIDC_DATE2": "STRING",
        "UCF_INSP_ORDERIIIDC_DATE3": "STRING",
        "UCF_INSP_ORDERIIIDC_DATE4": "STRING",
        "UCF_INSP_ORDERIIIDC_DATE5": "STRING",
        "UCF_INSP_ORDERIIIDC_FLAG1": "STRING",
        "UCF_INSP_ORDERIIIDC_FLAG2": "STRING",
        "UCF_INSP_ORDERIIIDC_FLAG3": "STRING",
        "UCF_INSP_ORDERIIIDC_FLAG4": "STRING",
        "UCF_INSP_ORDERIIIDC_FLAG5": "STRING",
        "UCF_INSP_ORDERIIIDC_NUM1": "NUMBER",
        "UCF_INSP_ORDERIIIDC_NUM2": "NUMBER",
        "UCF_INSP_ORDERIIIDC_NUM3": "NUMBER",
        "UCF_INSP_ORDERIIIDC_NUM4": "NUMBER",
        "UCF_INSP_ORDERIIIDC_NUM5": "NUMBER",
        "UCF_INSP_ORDERIIIDC_VCH255_1": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH255_2": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH255_3": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH4000_1": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH4000_2": "STRING",
        "CERT_STAMP_NO": "STRING",
        "COMP_UNIT_ID": "STRING",
        "COMP_SAMPLE_NO": "NUMBER",
        "COMP_OCCURANCE_NO": "NUMBER",
        "TEMPLATE_FILE_ID": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "INSP_STEP_ID",
        "ITEM_ID",
        "INSP_ITEM_ID",
        "INSP_ITEM_COUNT",
        "SLOT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_IDP_IC_CDCS_IC_FK", ["INSP_ORDER_ID","INSP_STEP_ID","ITEM_ID","INSP_ITEM_ID","INSP_ITEM_COUNT"], "SFSQA_INSP_ORDER_IS_INSP_ITEMS", ["INSP_ORDER_ID","INSP_STEP_ID","ITEM_ID","INSP_ITEM_ID","INSP_ITEM_COUNT"]),
        DbForeignKey("SFSQA_INSP_ORDER_ISII_DC_FK3", ["INSP_ORDER_ID","ITEM_ID","UNIT_ID"], "SFSQA_INSP_ORDER_UNITS", ["INSP_ORDER_ID","ITEM_ID","UNIT_ID"]),
        DbForeignKey("SFSQA_IDP_IC_CDCS_ACTUAL_INSP", ["ACTUAL_INSP_METHOD"], "SFSQA_INSP_METHOD_DEF", ["INSPECTION_METHOD"]),
        DbForeignKey("SFSQA_INSP_ORDER_ISII_DC_FK4", ["TEMPLATE_FILE_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
        "SFSQA_OVERIDE_RES_TRACKER_FK2",
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.INSP_ITEM_COUNT = parse_value(self.schema, column_value_map, "INSP_ITEM_COUNT")
        self.SLOT_ID = parse_value(self.schema, column_value_map, "SLOT_ID")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.REC_SOURCE = parse_value(self.schema, column_value_map, "REC_SOURCE")
        self.SAMPLE_NO = parse_value(self.schema, column_value_map, "SAMPLE_NO")
        self.OCCURANCE_NO = parse_value(self.schema, column_value_map, "OCCURANCE_NO")
        self.NO_RESPONSE_FLAG = parse_value(self.schema, column_value_map, "NO_RESPONSE_FLAG")
        self.SLOT_FLAG = parse_value(self.schema, column_value_map, "SLOT_FLAG")
        self.MANUALLY_MARKED_AS_REJECT_FLAG = parse_value(self.schema, column_value_map, "MANUALLY_MARKED_AS_REJECT_FLAG")
        self.CDC_VALUE = parse_value(self.schema, column_value_map, "CDC_VALUE")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.UNIT_ID = parse_value(self.schema, column_value_map, "UNIT_ID")
        self.CDC_TEXT_VALUE = parse_value(self.schema, column_value_map, "CDC_TEXT_VALUE")
        self.ACTUAL_INSP_METHOD = parse_value(self.schema, column_value_map, "ACTUAL_INSP_METHOD")
        self.UCF_INSP_ORDERIIIDC_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH1")
        self.UCF_INSP_ORDERIIIDC_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH2")
        self.UCF_INSP_ORDERIIIDC_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH3")
        self.UCF_INSP_ORDERIIIDC_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH4")
        self.UCF_INSP_ORDERIIIDC_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH5")
        self.UCF_INSP_ORDERIIIDC_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH6")
        self.UCF_INSP_ORDERIIIDC_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH7")
        self.UCF_INSP_ORDERIIIDC_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH8")
        self.UCF_INSP_ORDERIIIDC_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH9")
        self.UCF_INSP_ORDERIIIDC_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH10")
        self.UCF_INSP_ORDERIIIDC_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH11")
        self.UCF_INSP_ORDERIIIDC_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH12")
        self.UCF_INSP_ORDERIIIDC_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH13")
        self.UCF_INSP_ORDERIIIDC_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH14")
        self.UCF_INSP_ORDERIIIDC_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH15")
        self.UCF_INSP_ORDERIIIDC_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_DATE1")
        self.UCF_INSP_ORDERIIIDC_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_DATE2")
        self.UCF_INSP_ORDERIIIDC_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_DATE3")
        self.UCF_INSP_ORDERIIIDC_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_DATE4")
        self.UCF_INSP_ORDERIIIDC_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_DATE5")
        self.UCF_INSP_ORDERIIIDC_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_FLAG1")
        self.UCF_INSP_ORDERIIIDC_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_FLAG2")
        self.UCF_INSP_ORDERIIIDC_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_FLAG3")
        self.UCF_INSP_ORDERIIIDC_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_FLAG4")
        self.UCF_INSP_ORDERIIIDC_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_FLAG5")
        self.UCF_INSP_ORDERIIIDC_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_NUM1")
        self.UCF_INSP_ORDERIIIDC_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_NUM2")
        self.UCF_INSP_ORDERIIIDC_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_NUM3")
        self.UCF_INSP_ORDERIIIDC_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_NUM4")
        self.UCF_INSP_ORDERIIIDC_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_NUM5")
        self.UCF_INSP_ORDERIIIDC_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH255_1")
        self.UCF_INSP_ORDERIIIDC_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH255_2")
        self.UCF_INSP_ORDERIIIDC_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH255_3")
        self.UCF_INSP_ORDERIIIDC_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH4000_1")
        self.UCF_INSP_ORDERIIIDC_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH4000_2")
        self.CERT_STAMP_NO = parse_value(self.schema, column_value_map, "CERT_STAMP_NO")
        self.COMP_UNIT_ID = parse_value(self.schema, column_value_map, "COMP_UNIT_ID")
        "Component Unit ID."
        self.COMP_SAMPLE_NO = parse_value(self.schema, column_value_map, "COMP_SAMPLE_NO")
        "Component Unit Sample Number."
        self.COMP_OCCURANCE_NO = parse_value(self.schema, column_value_map, "COMP_OCCURANCE_NO")
        "Component Unit Sample Occurance Number."
        self.TEMPLATE_FILE_ID = parse_value(self.schema, column_value_map, "TEMPLATE_FILE_ID")
        "The unique identifier of the object being referenced."
        self.SFSQA_OVERIDE_RES_TRACKER_FK2 = []

class SFFND_ARCHIVE_BATCH:
    schema = {
        "ARCH_BATCH_NO": "STRING",
        "ARCH_BATCH_DESC": "STRING",
        "ARCHIVE_DATE": "STRING",
        "PURGE_DATE": "STRING",
        "SCHEDULED_PURGE_DATE": "STRING",
        "STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ARCH_BATCH_NO",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_ARCHIVE_DOCUMENT_FK1",
    ]
    def __init__(self, column_value_map):
        self.ARCH_BATCH_NO = parse_value(self.schema, column_value_map, "ARCH_BATCH_NO")
        "Stores batch no which is provided by user."
        self.ARCH_BATCH_DESC = parse_value(self.schema, column_value_map, "ARCH_BATCH_DESC")
        "Stores batch description."
        self.ARCHIVE_DATE = parse_value(self.schema, column_value_map, "ARCHIVE_DATE")
        "Stores archive date when batch is archived."
        self.PURGE_DATE = parse_value(self.schema, column_value_map, "PURGE_DATE")
        "Stores purged date when batch is purged."
        self.SCHEDULED_PURGE_DATE = parse_value(self.schema, column_value_map, "SCHEDULED_PURGE_DATE")
        "Stores scheduled purge date calculated from archive date."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Stores batch status."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFFND_ARCHIVE_DOCUMENT_FK1 = []

class SFWID_OPER_MM_OBJECTS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "ALT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "ALT_COUNT": "NUMBER",
        "LAST_ACTION": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH1": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH2": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH3": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH4": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH5": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_NUM1": "NUMBER",
        "UCF_SFWID_OPER_MM_OBJ_NUM2": "NUMBER",
        "UCF_SFWID_OPER_MM_OBJ_NUM3": "NUMBER",
        "UCF_SFWID_OPER_MM_OBJ_DATE1": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_DATE2": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_FLAG1": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_FLAG2": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_FLAG3": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH255_1": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH255_2": "STRING",
        "SOURCE_ID": "STRING",
        "SOURCE_TYPE": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "ORIG_OBJECT_ID": "STRING",
        "RTF_LINK_ID": "STRING",
        "BOM_LINE_NO": "STRING",
        "EFF_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "OBJECT_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_MM_OBJECTS_FK3", ["ORIG_OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_OPER_MM_OBJECTS_FK1", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_OPER_MM_OBJECTS_FK4", ["EFF_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFWID_OPER_MM_OBJECTS_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_OPER_MM_OBJECTS_FK5", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_SFWID_OPER_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_OPER_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_OPER_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_OPER_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SFWID_OPER_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SFWID_OPER_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_OPER_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_OPER_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_OPER_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SFWID_OPER_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.SOURCE_ID = parse_value(self.schema, column_value_map, "SOURCE_ID")
        "Unique identifier for source, when source is BOM then BOM_ID and ITEM_ID for other sources."
        self.SOURCE_TYPE = parse_value(self.schema, column_value_map, "SOURCE_TYPE")
        "Source type where illustration belongs. Like Bom, Component, Part, Tool, Process, Machine etc."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.ORIG_OBJECT_ID = parse_value(self.schema, column_value_map, "ORIG_OBJECT_ID")
        "ID of the object originaly authored from which the current one is created on-the-fly."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        self.EFF_TYPE = parse_value(self.schema, column_value_map, "EFF_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        "EFF Group Id"
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        "Next Higher Assembly given by User"

class SFFND_SKILL_CATEGORY_DEF:
    schema = {
        "SKILL_CATEGORY": "STRING",
        "SKILL_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "SKILL_CATEGORY_DESC": "STRING",
    }
    primary_key_columns = [
        "SKILL_CATEGORY",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_SKILL_CATG_TYP_FK", ["SKILL_TYPE"], "SFFND_SKILL_TYPE_DEF", ["SKILL_TYPE"]),
    ]
    refs = [
        "SFWID_OPER_CREW_ALT_FK2",
        "SFPL_OPER_SKILL_SCATG_FK",
        "SFFND_USER_SKILL_SCATG_FK",
        "SFWID_OPER_SKILL_ALT_FK2",
        "SFFND_SKILL_CATG_ALT_CATG_FK1",
        "SFFND_SKILL_CATG_ALT_CATG_FK",
        "SFWID_OPER_CREW_SCATG_FK",
        "SFSQA_INSP_ORDER_ISII_FK6",
        "SFWID_OPER_SKILL_SCATG_FK",
        "SFSQA_INSP_ITEMS_FK20",
        "SFSQA_CLIST_IIFK16",
    ]
    def __init__(self, column_value_map):
        self.SKILL_CATEGORY = parse_value(self.schema, column_value_map, "SKILL_CATEGORY")
        "A category to which the required skill belongs."
        self.SKILL_TYPE = parse_value(self.schema, column_value_map, "SKILL_TYPE")
        "The type/class of skills which the skill category falls in."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.SKILL_CATEGORY_DESC = parse_value(self.schema, column_value_map, "SKILL_CATEGORY_DESC")
        "A descriptive name and/or the description of the skill category."
        self.SFWID_OPER_CREW_ALT_FK2 = []
        self.SFPL_OPER_SKILL_SCATG_FK = []
        self.SFFND_USER_SKILL_SCATG_FK = []
        self.SFWID_OPER_SKILL_ALT_FK2 = []
        self.SFFND_SKILL_CATG_ALT_CATG_FK1 = []
        self.SFFND_SKILL_CATG_ALT_CATG_FK = []
        self.SFWID_OPER_CREW_SCATG_FK = []
        self.SFSQA_INSP_ORDER_ISII_FK6 = []
        self.SFWID_OPER_SKILL_SCATG_FK = []
        self.SFSQA_INSP_ITEMS_FK20 = []
        self.SFSQA_CLIST_IIFK16 = []

class SFFND_USER_OVER_INSP_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "USERID": "STRING",
        "OI_START_DATE": "STRING",
        "OI_STATUS": "STRING",
        "OI_NOTES": "STRING",
        "OI_UPDT_USERID": "STRING",
        "OI_TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.OI_START_DATE = parse_value(self.schema, column_value_map, "OI_START_DATE")
        "Date Inspector Auditing becomes effective."
        self.OI_STATUS = parse_value(self.schema, column_value_map, "OI_STATUS")
        "Over Inspection User Status."
        self.OI_NOTES = parse_value(self.schema, column_value_map, "OI_NOTES")
        "Over Inspection Notes."
        self.OI_UPDT_USERID = parse_value(self.schema, column_value_map, "OI_UPDT_USERID")
        "Over Inspection Update User ID."
        self.OI_TIME_STAMP = parse_value(self.schema, column_value_map, "OI_TIME_STAMP")
        "Over Inspection Update time stamp."

class SFFND_HTREF_DISC_ITEM_TEXT:
    schema = {
        "REF_ID": "STRING",
        "OBJECT_TYPE": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "OBJECT_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "OBJECT_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "DISC_ID",
        "DISC_LINE_NO",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_HTREF_DISC_ITEM_T_IT_FK", ["DISC_ID","DISC_LINE_NO","TEXT_TYPE"], "SFQA_DISC_ITEM_TEXT", ["DISC_ID","DISC_LINE_NO","TEXT_TYPE"]),
        DbForeignKey("BLOCKID_FK8", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "The system generated unique identifier of an object link embedded in a discrepancy description line item text block."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The object type/class which the object belongs to. For example: CAD drawing, still image, slide, UDV, standard text, audio, or video."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "The unique identifier of the object being referenced."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.OBJECT_NAME = parse_value(self.schema, column_value_map, "OBJECT_NAME")
        "A descriptive tag/name of the object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "The protocol id of a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "The host id of a Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "The file location of a Universal Resource Locator."

class SFFND_HTREF_DISC_TEXT:
    schema = {
        "REF_ID": "STRING",
        "OBJECT_TYPE": "STRING",
        "DISC_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "DISC_ID",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_HTREF_DISC_T_DT_FK", ["DISC_ID","TEXT_TYPE"], "SFQA_DISC_TEXT", ["DISC_ID","TEXT_TYPE"]),
        DbForeignKey("BLOCKID_FK9", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "The system generated unique identifier of an object link embedded in a discrepancy description text block."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The object type/class which the object belongs to. For example: CAD drawing, still image, slide, UDV, standard text, audio, or video."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "The unique identifier of the object being referenced."
        self.OBJECT_NAME = parse_value(self.schema, column_value_map, "OBJECT_NAME")
        "A descriptive tag/name of the object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "The protocol id of a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "The host id of a Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "The file location of a Universal Resource Locator."

class SFCORE_BOOT_LIB:
    schema = {
        "BOOT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DESCRIPTION": "STRING",
        "BOOT_TEXT": "STRING",
    }
    primary_key_columns = [
        "BOOT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BOOT_ID = parse_value(self.schema, column_value_map, "BOOT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.BOOT_TEXT = parse_value(self.schema, column_value_map, "BOOT_TEXT")

class SFQA_CA_AFFECTED_SUPPLIERS:
    schema = {
        "CA_ID": "STRING",
        "SUPPLIER_CODE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "SUPPLIER_CODE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_AFFECTED_SUPPLIERS_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CA_AFFECTED_SUPPLIERS_FK2", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFQA_CA_REQ_DESC_XREF_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "CA_REQUEST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_HTREF_CA_REQUEST_TEXT:
    schema = {
        "REF_ID": "STRING",
        "CA_REQUEST_ID": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_TYPE": "STRING",
        "OBJECT_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "CA_REQUEST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_HTREF_CA_REQ_T_REQ_T_FK", ["CA_REQUEST_ID"], "SFQA_CA_REQUEST_TEXT", ["CA_REQUEST_ID"]),
        DbForeignKey("BLOCKID_FK6", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "The system generated identifier of an object link embedded in the Corrective Action Request text block."
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Identifier of the core object being referenced."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The object type/class which the object belongs to. For example: CAD drawing, still image, slide, UDV, standard text, audio, or video."
        self.OBJECT_NAME = parse_value(self.schema, column_value_map, "OBJECT_NAME")
        "A descriptive tag/name of the object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The Corrective Action block type of the referencing text block. For instance: CAText, CAItemText, or CAImpVerifText."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "The protocol id of a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "The host id of a Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "The file location of a Universal Resource Locator."

class SFPL_MFG_BOM_COMP_ALT_XRF_ORIG:
    schema = {
        "BOM_ID": "STRING",
        "BOM_COMP_ID": "STRING",
        "ALT_ITEM_ID": "STRING",
        "PRIORITY": "NUMBER",
        "UNIT_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "UCF_MBOM_COMP_ALT_VCH1": "STRING",
        "UCF_MBOM_COMP_ALT_VCH2": "STRING",
        "UCF_MBOM_COMP_ALT_VCH3": "STRING",
        "UCF_MBOM_COMP_ALT_VCH4": "STRING",
        "UCF_MBOM_COMP_ALT_VCH5": "STRING",
        "UCF_MBOM_COMP_ALT_VCH6": "STRING",
        "UCF_MBOM_COMP_ALT_VCH7": "STRING",
        "UCF_MBOM_COMP_ALT_VCH8": "STRING",
        "UCF_MBOM_COMP_ALT_VCH9": "STRING",
        "UCF_MBOM_COMP_ALT_VCH10": "STRING",
        "UCF_MBOM_COMP_ALT_VCH11": "STRING",
        "UCF_MBOM_COMP_ALT_VCH12": "STRING",
        "UCF_MBOM_COMP_ALT_VCH13": "STRING",
        "UCF_MBOM_COMP_ALT_VCH14": "STRING",
        "UCF_MBOM_COMP_ALT_VCH15": "STRING",
        "UCF_MBOM_COMP_ALT_NUM1": "NUMBER",
        "UCF_MBOM_COMP_ALT_NUM2": "NUMBER",
        "UCF_MBOM_COMP_ALT_NUM3": "NUMBER",
        "UCF_MBOM_COMP_ALT_NUM4": "NUMBER",
        "UCF_MBOM_COMP_ALT_NUM5": "NUMBER",
        "UCF_MBOM_COMP_ALT_DATE1": "STRING",
        "UCF_MBOM_COMP_ALT_DATE2": "STRING",
        "UCF_MBOM_COMP_ALT_DATE3": "STRING",
        "UCF_MBOM_COMP_ALT_DATE4": "STRING",
        "UCF_MBOM_COMP_ALT_DATE5": "STRING",
        "UCF_MBOM_COMP_ALT_FLAG1": "STRING",
        "UCF_MBOM_COMP_ALT_FLAG2": "STRING",
        "UCF_MBOM_COMP_ALT_FLAG3": "STRING",
        "UCF_MBOM_COMP_ALT_FLAG4": "STRING",
        "UCF_MBOM_COMP_ALT_FLAG5": "STRING",
        "UCF_MBOM_COMP_ALT_VCH255_1": "STRING",
        "UCF_MBOM_COMP_ALT_VCH255_2": "STRING",
        "UCF_MBOM_COMP_ALT_VCH255_3": "STRING",
        "UCF_MBOM_COMP_ALT_VCH4000_1": "STRING",
        "UCF_MBOM_COMP_ALT_VCH4000_2": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "RAW_MATERIAL_LENGTH": "NUMBER",
        "RAW_MATERIAL_WIDTH": "NUMBER",
        "NO_OF_PCS": "NUMBER",
    }
    primary_key_columns = [
        "BOM_ID",
        "BOM_COMP_ID",
        "ALT_ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MBOM_COMP_ALT_XRF_ORG_F2", ["ALT_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_MBOM_COMP_ALT_XRF_ORG_F1", ["BOM_ID","BOM_COMP_ID"], "SFPL_MFG_BOM_COMP_ORIG", ["BOM_ID","BOM_COMP_ID"]),
        DbForeignKey("SFPL_MBOM_COMP_ALT_XRF_ORG_F3", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Corresponding BOM for which BOM Component is added."
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        "Unique, system-generated identifier of a given BOM component."
        self.ALT_ITEM_ID = parse_value(self.schema, column_value_map, "ALT_ITEM_ID")
        "Alternate part as identified by its unique system generated identifier."
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        "The priority of the task."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "The upper bound of the effectivity range for effectivity type other than time period."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "The lower bound of the effectivity range for effectivity type other than time period."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "The starting date of the time period for a time period effectivity."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "The ending date of the time period for a time period effectivity."
        self.UCF_MBOM_COMP_ALT_VCH1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH4 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH5 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH6 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH7 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH8 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH9 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH10 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH11 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH12 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH13 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH14 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH15 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_NUM1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_COMP_ALT_NUM2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_COMP_ALT_NUM3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_COMP_ALT_NUM4 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_COMP_ALT_NUM5 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_COMP_ALT_DATE1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_COMP_ALT_DATE2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_COMP_ALT_DATE3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_COMP_ALT_DATE4 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_COMP_ALT_DATE5 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_COMP_ALT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_COMP_ALT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_COMP_ALT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_COMP_ALT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_COMP_ALT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_COMP_ALT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_COMP_ALT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_COMP_ALT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_COMP_ALT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_MBOM_COMP_ALT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.RAW_MATERIAL_LENGTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_LENGTH")
        self.RAW_MATERIAL_WIDTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_WIDTH")
        self.NO_OF_PCS = parse_value(self.schema, column_value_map, "NO_OF_PCS")

class SFWID_ORDER_ITEM_ISSUED:
    schema = {
        "ORDER_PART_ISSUE_ID": "STRING",
        "ORDER_TYPE": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "PLND_PART_NO": "STRING",
        "PLND_PART_CHG": "STRING",
        "PLND_ITEM_ID": "STRING",
        "REF_DES": "STRING",
        "ISSUED_PART_NO": "STRING",
        "ISSUED_PART_CHG": "STRING",
        "ISSUED_ITEM_ID": "STRING",
        "ISSUED_QTY": "NUMBER",
        "ISSUED_SERIAL_NO": "STRING",
        "ISSUED_LOT_NO": "STRING",
        "ISSUED_SPOOL_NO": "STRING",
        "ISSUED_WORK_LOC": "STRING",
        "ISSUED_WORK_DEPT": "STRING",
        "ISSUED_WORK_CENTER": "STRING",
        "ISSUED_EXTERNAL_ERP_NO": "STRING",
        "ISSUED_CONSUMED": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "COMMENTS": "STRING",
        "STORE_LOC": "STRING",
        "PART_LINE_NO": "NUMBER",
        "BOM_LINE_NO": "STRING",
        "PHANTOM_KIT_PART_NO": "STRING",
        "PHANTOM_KIT_NO": "STRING",
        "UCF_ITEM_ISSUED_VCH1": "STRING",
        "UCF_ITEM_ISSUED_VCH2": "STRING",
        "UCF_ITEM_ISSUED_VCH3": "STRING",
        "UCF_ITEM_ISSUED_VCH4": "STRING",
        "UCF_ITEM_ISSUED_VCH5": "STRING",
        "UCF_ITEM_ISSUED_VCH6": "STRING",
        "UCF_ITEM_ISSUED_VCH7": "STRING",
        "UCF_ITEM_ISSUED_VCH8": "STRING",
        "UCF_ITEM_ISSUED_VCH9": "STRING",
        "UCF_ITEM_ISSUED_VCH10": "STRING",
        "UCF_ITEM_ISSUED_VCH11": "STRING",
        "UCF_ITEM_ISSUED_VCH12": "STRING",
        "UCF_ITEM_ISSUED_VCH13": "STRING",
        "UCF_ITEM_ISSUED_VCH14": "STRING",
        "UCF_ITEM_ISSUED_VCH15": "STRING",
        "UCF_ITEM_ISSUED_NUM1": "NUMBER",
        "UCF_ITEM_ISSUED_NUM2": "NUMBER",
        "UCF_ITEM_ISSUED_NUM3": "NUMBER",
        "UCF_ITEM_ISSUED_NUM4": "NUMBER",
        "UCF_ITEM_ISSUED_NUM5": "NUMBER",
        "UCF_ITEM_ISSUED_DATE1": "STRING",
        "UCF_ITEM_ISSUED_DATE2": "STRING",
        "UCF_ITEM_ISSUED_DATE3": "STRING",
        "UCF_ITEM_ISSUED_DATE4": "STRING",
        "UCF_ITEM_ISSUED_DATE5": "STRING",
        "UCF_ITEM_ISSUED_FLAG1": "STRING",
        "UCF_ITEM_ISSUED_FLAG2": "STRING",
        "UCF_ITEM_ISSUED_FLAG3": "STRING",
        "UCF_ITEM_ISSUED_FLAG4": "STRING",
        "UCF_ITEM_ISSUED_FLAG5": "STRING",
        "UCF_ITEM_ISSUED_VCH255_1": "STRING",
        "UCF_ITEM_ISSUED_VCH255_2": "STRING",
        "UCF_ITEM_ISSUED_VCH255_3": "STRING",
        "UCF_ITEM_ISSUED_VCH4000_1": "STRING",
        "UCF_ITEM_ISSUED_VCH4000_2": "STRING",
        "KIT_ID": "STRING",
        "WAIV_DEV_REJ_NO": "STRING",
        "ACTIVITY_SEQ": "NUMBER",
        "HANDLING_UNIT_ID": "NUMBER",
        "LOCATION_NO": "STRING",
        "ORD_REF4": "STRING",
        "ENG_CHG_LEVEL": "STRING",
        "KIT_ID_STATUS": "STRING",
        "MATERIAL_ID": "STRING",
        "DESIGN_AUTHORITY": "STRING",
        "MANUFACTURER_CODE": "STRING",
        "MANUFACTURER_PART_NO": "STRING",
        "MANUFACTURER_SERIAL_NO": "STRING",
        "MANUFACTURER_LOT_NO": "STRING",
        "UID_COMPOSITE": "STRING",
    }
    primary_key_columns = [
        "ORDER_PART_ISSUE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_ITEM_ISSUED_FK1", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_ITEM_ISSUED_FK2", ["MATERIAL_ID"], "MOTT_TIME_MATERIAL", ["MATERIAL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_PART_ISSUE_ID = parse_value(self.schema, column_value_map, "ORDER_PART_ISSUE_ID")
        self.ORDER_TYPE = parse_value(self.schema, column_value_map, "ORDER_TYPE")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.PLND_PART_NO = parse_value(self.schema, column_value_map, "PLND_PART_NO")
        self.PLND_PART_CHG = parse_value(self.schema, column_value_map, "PLND_PART_CHG")
        self.PLND_ITEM_ID = parse_value(self.schema, column_value_map, "PLND_ITEM_ID")
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        self.ISSUED_PART_NO = parse_value(self.schema, column_value_map, "ISSUED_PART_NO")
        self.ISSUED_PART_CHG = parse_value(self.schema, column_value_map, "ISSUED_PART_CHG")
        self.ISSUED_ITEM_ID = parse_value(self.schema, column_value_map, "ISSUED_ITEM_ID")
        self.ISSUED_QTY = parse_value(self.schema, column_value_map, "ISSUED_QTY")
        self.ISSUED_SERIAL_NO = parse_value(self.schema, column_value_map, "ISSUED_SERIAL_NO")
        self.ISSUED_LOT_NO = parse_value(self.schema, column_value_map, "ISSUED_LOT_NO")
        self.ISSUED_SPOOL_NO = parse_value(self.schema, column_value_map, "ISSUED_SPOOL_NO")
        self.ISSUED_WORK_LOC = parse_value(self.schema, column_value_map, "ISSUED_WORK_LOC")
        self.ISSUED_WORK_DEPT = parse_value(self.schema, column_value_map, "ISSUED_WORK_DEPT")
        self.ISSUED_WORK_CENTER = parse_value(self.schema, column_value_map, "ISSUED_WORK_CENTER")
        self.ISSUED_EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "ISSUED_EXTERNAL_ERP_NO")
        self.ISSUED_CONSUMED = parse_value(self.schema, column_value_map, "ISSUED_CONSUMED")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        self.STORE_LOC = parse_value(self.schema, column_value_map, "STORE_LOC")
        self.PART_LINE_NO = parse_value(self.schema, column_value_map, "PART_LINE_NO")
        "A unique sequential number that is assigned when the component part is authored in the order/plan."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        "A unique sequential number that is assigned to BOM component part."
        self.PHANTOM_KIT_PART_NO = parse_value(self.schema, column_value_map, "PHANTOM_KIT_PART_NO")
        "Parent phantom part no of component part."
        self.PHANTOM_KIT_NO = parse_value(self.schema, column_value_map, "PHANTOM_KIT_NO")
        "Unit Number of phantom."
        self.UCF_ITEM_ISSUED_VCH1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH4 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH5 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH6 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH7 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH8 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH9 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH10 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH11 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH12 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH13 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH14 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH15 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_NUM1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ISSUED_NUM2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ISSUED_NUM3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ISSUED_NUM4 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ISSUED_NUM5 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ISSUED_DATE1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ISSUED_DATE2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ISSUED_DATE3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ISSUED_DATE4 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ISSUED_DATE5 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ISSUED_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ISSUED_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ISSUED_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ISSUED_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ISSUED_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ISSUED_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_ISSUED_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_ISSUED_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_ISSUED_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ITEM_ISSUED_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.KIT_ID = parse_value(self.schema, column_value_map, "KIT_ID")
        "Unique KIT identifier"
        self.WAIV_DEV_REJ_NO = parse_value(self.schema, column_value_map, "WAIV_DEV_REJ_NO")
        "WAIV DEV REJ NO"
        self.ACTIVITY_SEQ = parse_value(self.schema, column_value_map, "ACTIVITY_SEQ")
        "ACTIVITY SEQUENCE"
        self.HANDLING_UNIT_ID = parse_value(self.schema, column_value_map, "HANDLING_UNIT_ID")
        "Handling unit ID"
        self.LOCATION_NO = parse_value(self.schema, column_value_map, "LOCATION_NO")
        "Location No"
        self.ORD_REF4 = parse_value(self.schema, column_value_map, "ORD_REF4")
        "Order Ref"
        self.ENG_CHG_LEVEL = parse_value(self.schema, column_value_map, "ENG_CHG_LEVEL")
        "Engineering Charge Level"
        self.KIT_ID_STATUS = parse_value(self.schema, column_value_map, "KIT_ID_STATUS")
        "maintain KIT ID status"
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        "Primary Key For Time sensitive material"
        self.DESIGN_AUTHORITY = parse_value(self.schema, column_value_map, "DESIGN_AUTHORITY")
        self.MANUFACTURER_CODE = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE")
        self.MANUFACTURER_PART_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_PART_NO")
        self.MANUFACTURER_SERIAL_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_SERIAL_NO")
        self.MANUFACTURER_LOT_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_LOT_NO")
        self.UID_COMPOSITE = parse_value(self.schema, column_value_map, "UID_COMPOSITE")

class SFFND_ALERT_DELIVERY_TYPE_DEF:
    schema = {
        "ALERT_DELIVERY_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "DESCRIPTION": "STRING",
    }
    primary_key_columns = [
        "ALERT_DELIVERY_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_ALERT_NAME_DEF_FK2",
    ]
    def __init__(self, column_value_map):
        self.ALERT_DELIVERY_TYPE = parse_value(self.schema, column_value_map, "ALERT_DELIVERY_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.SFFND_ALERT_NAME_DEF_FK2 = []

class SFWID_LOT_DESC:
    schema = {
        "ORDER_ID": "STRING",
        "LOT_ID": "STRING",
        "LOT_SCRAP_QTY": "NUMBER",
        "LOT_COMPLETE_QTY": "NUMBER",
        "LOT_STOP_QTY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "LOT_NO": "STRING",
        "SPLIT_FLAG": "STRING",
        "PARENT_LOT_ID": "STRING",
        "ORIG_LOT_ID": "STRING",
        "LOT_QTY": "NUMBER",
        "UCF_LOT_VCH1": "STRING",
        "UCF_LOT_VCH2": "STRING",
        "UCF_LOT_VCH3": "STRING",
        "UCF_LOT_VCH4": "STRING",
        "UCF_LOT_VCH5": "STRING",
        "UCF_LOT_VCH6": "STRING",
        "UCF_LOT_VCH7": "STRING",
        "UCF_LOT_VCH8": "STRING",
        "UCF_LOT_VCH9": "STRING",
        "UCF_LOT_VCH10": "STRING",
        "UCF_LOT_VCH11": "STRING",
        "UCF_LOT_VCH12": "STRING",
        "UCF_LOT_VCH13": "STRING",
        "UCF_LOT_VCH14": "STRING",
        "UCF_LOT_VCH15": "STRING",
        "UCF_LOT_NUM1": "NUMBER",
        "UCF_LOT_NUM2": "NUMBER",
        "UCF_LOT_NUM3": "NUMBER",
        "UCF_LOT_NUM4": "NUMBER",
        "UCF_LOT_NUM5": "NUMBER",
        "UCF_LOT_DATE1": "STRING",
        "UCF_LOT_DATE2": "STRING",
        "UCF_LOT_DATE3": "STRING",
        "UCF_LOT_DATE4": "STRING",
        "UCF_LOT_DATE5": "STRING",
        "UCF_LOT_FLAG1": "STRING",
        "UCF_LOT_FLAG2": "STRING",
        "UCF_LOT_FLAG3": "STRING",
        "UCF_LOT_FLAG4": "STRING",
        "UCF_LOT_FLAG5": "STRING",
        "UCF_LOT_VCH255_1": "STRING",
        "UCF_LOT_VCH255_2": "STRING",
        "UCF_LOT_VCH255_3": "STRING",
        "UCF_LOT_VCH4000_1": "STRING",
        "UCF_LOT_VCH4000_2": "STRING",
        "BATCH_NO": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "LOT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_LOT_DESC_O_LOT_FK", ["ORDER_ID","ORIG_LOT_ID"], "SFWID_LOT_DESC", ["ORDER_ID","LOT_ID"]),
        DbForeignKey("SFWID_LOT_DESC_P_LOT_FK", ["ORDER_ID","PARENT_LOT_ID"], "SFWID_LOT_DESC", ["ORDER_ID","LOT_ID"]),
        DbForeignKey("SFWID_LOT_DESC_ORDER_DESC_FK", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
    ]
    refs = [
        "SFWID_LOT_DESC_O_LOT_FK",
        "SFWID_LOT_DESC_P_LOT_FK",
        "SFWID_SERIAL_DESC_LOT_FK",
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the associated lot number."
        self.LOT_SCRAP_QTY = parse_value(self.schema, column_value_map, "LOT_SCRAP_QTY")
        "The number of scrapped components/parts in the lot."
        self.LOT_COMPLETE_QTY = parse_value(self.schema, column_value_map, "LOT_COMPLETE_QTY")
        "The number of completed components/parts in the lot."
        self.LOT_STOP_QTY = parse_value(self.schema, column_value_map, "LOT_STOP_QTY")
        "The number of stopped components/parts in the lot."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.SPLIT_FLAG = parse_value(self.schema, column_value_map, "SPLIT_FLAG")
        "A flag (Y/N) that indicates whether or not the work order is a split of another work order."
        self.PARENT_LOT_ID = parse_value(self.schema, column_value_map, "PARENT_LOT_ID")
        "Unique, system-generated identifier of a lot number assigned to the parent component/part."
        self.ORIG_LOT_ID = parse_value(self.schema, column_value_map, "ORIG_LOT_ID")
        "System-generated identifier of the original lot number assigned to a given component/part."
        self.LOT_QTY = parse_value(self.schema, column_value_map, "LOT_QTY")
        "The number of components/parts in the lot."
        self.UCF_LOT_VCH1 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH1")
        self.UCF_LOT_VCH2 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH2")
        self.UCF_LOT_VCH3 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH3")
        self.UCF_LOT_VCH4 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH4")
        self.UCF_LOT_VCH5 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH5")
        self.UCF_LOT_VCH6 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH6")
        self.UCF_LOT_VCH7 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH7")
        self.UCF_LOT_VCH8 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH8")
        self.UCF_LOT_VCH9 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH9")
        self.UCF_LOT_VCH10 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH10")
        self.UCF_LOT_VCH11 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH11")
        self.UCF_LOT_VCH12 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH12")
        self.UCF_LOT_VCH13 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH13")
        self.UCF_LOT_VCH14 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH14")
        self.UCF_LOT_VCH15 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH15")
        self.UCF_LOT_NUM1 = parse_value(self.schema, column_value_map, "UCF_LOT_NUM1")
        self.UCF_LOT_NUM2 = parse_value(self.schema, column_value_map, "UCF_LOT_NUM2")
        self.UCF_LOT_NUM3 = parse_value(self.schema, column_value_map, "UCF_LOT_NUM3")
        self.UCF_LOT_NUM4 = parse_value(self.schema, column_value_map, "UCF_LOT_NUM4")
        self.UCF_LOT_NUM5 = parse_value(self.schema, column_value_map, "UCF_LOT_NUM5")
        self.UCF_LOT_DATE1 = parse_value(self.schema, column_value_map, "UCF_LOT_DATE1")
        self.UCF_LOT_DATE2 = parse_value(self.schema, column_value_map, "UCF_LOT_DATE2")
        self.UCF_LOT_DATE3 = parse_value(self.schema, column_value_map, "UCF_LOT_DATE3")
        self.UCF_LOT_DATE4 = parse_value(self.schema, column_value_map, "UCF_LOT_DATE4")
        self.UCF_LOT_DATE5 = parse_value(self.schema, column_value_map, "UCF_LOT_DATE5")
        self.UCF_LOT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_LOT_FLAG1")
        self.UCF_LOT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_LOT_FLAG2")
        self.UCF_LOT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_LOT_FLAG3")
        self.UCF_LOT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_LOT_FLAG4")
        self.UCF_LOT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_LOT_FLAG5")
        self.UCF_LOT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH255_1")
        self.UCF_LOT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH255_2")
        self.UCF_LOT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH255_3")
        self.UCF_LOT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH4000_1")
        self.UCF_LOT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH4000_2")
        self.BATCH_NO = parse_value(self.schema, column_value_map, "BATCH_NO")
        "The Batch No from SAP provides a secondary tracking no for user reference in Solumina."
        self.SFWID_LOT_DESC_O_LOT_FK = []
        self.SFWID_LOT_DESC_P_LOT_FK = []
        self.SFWID_SERIAL_DESC_LOT_FK = []

class SFWID_OPER_TEXT_ALT:
    schema = {
        "OPER_TEXT_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "TEXT": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
    }
    primary_key_columns = [
        "OPER_TEXT_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_TEXT_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_TEXT_ALT = parse_value(self.schema, column_value_map, "OPER_TEXT_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."

class SFFND_BARCODE_DETAILS:
    schema = {
        "BARCODE_FORMAT": "STRING",
        "FIELD": "STRING",
        "IDENTIFIER": "STRING",
        "DATE_FORMAT": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_BARCODEDETAIL_VCH1": "STRING",
        "UCF_BARCODEDETAIL_VCH2": "STRING",
        "UCF_BARCODEDETAIL_VCH3": "STRING",
        "UCF_BARCODEDETAIL_VCH4": "STRING",
        "UCF_BARCODEDETAIL_VCH5": "STRING",
        "UCF_BARCODEDETAIL_VCH6": "STRING",
        "UCF_BARCODEDETAIL_VCH7": "STRING",
        "UCF_BARCODEDETAIL_VCH8": "STRING",
        "UCF_BARCODEDETAIL_VCH9": "STRING",
        "UCF_BARCODEDETAIL_VCH10": "STRING",
        "UCF_BARCODEDETAIL_VCH11": "STRING",
        "UCF_BARCODEDETAIL_VCH12": "STRING",
        "UCF_BARCODEDETAIL_VCH13": "STRING",
        "UCF_BARCODEDETAIL_VCH14": "STRING",
        "UCF_BARCODEDETAIL_VCH15": "STRING",
        "UCF_BARCODEDETAIL_NUM1": "NUMBER",
        "UCF_BARCODEDETAIL_NUM2": "NUMBER",
        "UCF_BARCODEDETAIL_NUM3": "NUMBER",
        "UCF_BARCODEDETAIL_NUM4": "NUMBER",
        "UCF_BARCODEDETAIL_NUM5": "NUMBER",
        "UCF_BARCODEDETAIL_FLAG1": "STRING",
        "UCF_BARCODEDETAIL_FLAG2": "STRING",
        "UCF_BARCODEDETAIL_FLAG3": "STRING",
        "UCF_BARCODEDETAIL_FLAG4": "STRING",
        "UCF_BARCODEDETAIL_FLAG5": "STRING",
        "UCF_BARCODEDETAIL_DATE1": "STRING",
        "UCF_BARCODEDETAIL_DATE2": "STRING",
        "UCF_BARCODEDETAIL_DATE3": "STRING",
        "UCF_BARCODEDETAIL_DATE4": "STRING",
        "UCF_BARCODEDETAIL_DATE5": "STRING",
        "UCF_BARCODEDETAIL_VCH255_1": "STRING",
        "UCF_BARCODEDETAIL_VCH255_2": "STRING",
        "UCF_BARCODEDETAIL_VCH255_3": "STRING",
        "UCF_BARCODEDETAIL_VCH4000_1": "STRING",
        "UCF_BARCODEDETAIL_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "BARCODE_FORMAT",
        "FIELD",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_BARCODE_DETAILS_FK1", ["BARCODE_FORMAT"], "SFFND_BARCODE_FORMATS", ["BARCODE_FORMAT"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BARCODE_FORMAT = parse_value(self.schema, column_value_map, "BARCODE_FORMAT")
        self.FIELD = parse_value(self.schema, column_value_map, "FIELD")
        self.IDENTIFIER = parse_value(self.schema, column_value_map, "IDENTIFIER")
        self.DATE_FORMAT = parse_value(self.schema, column_value_map, "DATE_FORMAT")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.UCF_BARCODEDETAIL_VCH1 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH1")
        self.UCF_BARCODEDETAIL_VCH2 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH2")
        self.UCF_BARCODEDETAIL_VCH3 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH3")
        self.UCF_BARCODEDETAIL_VCH4 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH4")
        self.UCF_BARCODEDETAIL_VCH5 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH5")
        self.UCF_BARCODEDETAIL_VCH6 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH6")
        self.UCF_BARCODEDETAIL_VCH7 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH7")
        self.UCF_BARCODEDETAIL_VCH8 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH8")
        self.UCF_BARCODEDETAIL_VCH9 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH9")
        self.UCF_BARCODEDETAIL_VCH10 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH10")
        self.UCF_BARCODEDETAIL_VCH11 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH11")
        self.UCF_BARCODEDETAIL_VCH12 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH12")
        self.UCF_BARCODEDETAIL_VCH13 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH13")
        self.UCF_BARCODEDETAIL_VCH14 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH14")
        self.UCF_BARCODEDETAIL_VCH15 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH15")
        self.UCF_BARCODEDETAIL_NUM1 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_NUM1")
        self.UCF_BARCODEDETAIL_NUM2 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_NUM2")
        self.UCF_BARCODEDETAIL_NUM3 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_NUM3")
        self.UCF_BARCODEDETAIL_NUM4 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_NUM4")
        self.UCF_BARCODEDETAIL_NUM5 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_NUM5")
        self.UCF_BARCODEDETAIL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_FLAG1")
        self.UCF_BARCODEDETAIL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_FLAG2")
        self.UCF_BARCODEDETAIL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_FLAG3")
        self.UCF_BARCODEDETAIL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_FLAG4")
        self.UCF_BARCODEDETAIL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_FLAG5")
        self.UCF_BARCODEDETAIL_DATE1 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_DATE1")
        self.UCF_BARCODEDETAIL_DATE2 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_DATE2")
        self.UCF_BARCODEDETAIL_DATE3 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_DATE3")
        self.UCF_BARCODEDETAIL_DATE4 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_DATE4")
        self.UCF_BARCODEDETAIL_DATE5 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_DATE5")
        self.UCF_BARCODEDETAIL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH255_1")
        self.UCF_BARCODEDETAIL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH255_2")
        self.UCF_BARCODEDETAIL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH255_3")
        self.UCF_BARCODEDETAIL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH4000_1")
        self.UCF_BARCODEDETAIL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_BARCODEDETAIL_VCH4000_2")

class SFFND_ALERT_USER_XREF:
    schema = {
        "ALERT_ID": "STRING",
        "USERID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ALERT_ID",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_ALERT_USER_XREF_FK1", ["USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ALERT_ID = parse_value(self.schema, column_value_map, "ALERT_ID")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFWID_ORDER_MM_OBJECTS_ALT:
    schema = {
        "ORDER_MM_OBJECT_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "OBJECT_DAT_COL_ID": "STRING",
        "OBJECT_ID": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH1": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH2": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH3": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH4": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH5": "STRING",
        "UCF_SFWID_WO_MM_OBJ_NUM1": "NUMBER",
        "UCF_SFWID_WO_MM_OBJ_NUM2": "NUMBER",
        "UCF_SFWID_WO_MM_OBJ_NUM3": "NUMBER",
        "UCF_SFWID_WO_MM_OBJ_DATE1": "STRING",
        "UCF_SFWID_WO_MM_OBJ_DATE2": "STRING",
        "UCF_SFWID_WO_MM_OBJ_FLAG1": "STRING",
        "UCF_SFWID_WO_MM_OBJ_FLAG2": "STRING",
        "UCF_SFWID_WO_MM_OBJ_FLAG3": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH255_1": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH255_2": "STRING",
        "SOURCE_ID": "STRING",
        "SOURCE_TYPE": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "ORIG_OBJECT_ID": "STRING",
        "RTF_LINK_ID": "STRING",
        "BOM_LINE_NO": "STRING",
        "EFF_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "DATE",
    }
    primary_key_columns = [
        "ORDER_MM_OBJECT_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_MM_OBJECTS_ALT_FK3", ["ORIG_OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_ORDER_MM_OBJECTS_ALT_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_ORDER_MM_OBJECTS_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_ORDER_MM_OBJECTS_ALT_FK4", ["EFF_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_MM_OBJECT_ALT = parse_value(self.schema, column_value_map, "ORDER_MM_OBJECT_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a work order."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_SFWID_WO_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_WO_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_WO_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_WO_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SFWID_WO_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SFWID_WO_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_WO_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_WO_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_WO_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SFWID_WO_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.SOURCE_ID = parse_value(self.schema, column_value_map, "SOURCE_ID")
        "Unique identifier for source, when source is BOM then BOM_ID and ITEM_ID for other sources."
        self.SOURCE_TYPE = parse_value(self.schema, column_value_map, "SOURCE_TYPE")
        "Source type where illustration belongs. Like Bom, Component, Part, Tool, Process, Machine etc."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.ORIG_OBJECT_ID = parse_value(self.schema, column_value_map, "ORIG_OBJECT_ID")
        "ID of the object originaly authored from which the current one is created on-the-fly."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        self.EFF_TYPE = parse_value(self.schema, column_value_map, "EFF_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")

class SFWID_OPER_MM_OBJECTS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "OBJECT_DAT_COL_ID": "STRING",
        "OBJECT_ID": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "ALT_ID": "STRING",
        "TIME_STAMP": "STRING",
        "UPDT_USERID": "STRING",
        "HIST_ALT_ID": "STRING",
        "LAST_ACTION": "STRING",
        "ALT_COUNT": "NUMBER",
        "UCF_SFWID_OPER_MM_OBJ_VCH1": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH2": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH3": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH4": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH5": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_NUM1": "NUMBER",
        "UCF_SFWID_OPER_MM_OBJ_NUM2": "NUMBER",
        "UCF_SFWID_OPER_MM_OBJ_NUM3": "NUMBER",
        "UCF_SFWID_OPER_MM_OBJ_DATE1": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_DATE2": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_FLAG1": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_FLAG2": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_FLAG3": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH255_1": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH255_2": "STRING",
        "SOURCE_ID": "STRING",
        "SOURCE_TYPE": "STRING",
        "ORIG_OBJECT_ID": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "RTF_LINK_ID": "STRING",
        "BOM_LINE_NO": "STRING",
        "EFF_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.UCF_SFWID_OPER_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_OPER_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_OPER_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_OPER_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SFWID_OPER_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SFWID_OPER_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_OPER_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_OPER_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_OPER_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SFWID_OPER_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.SOURCE_ID = parse_value(self.schema, column_value_map, "SOURCE_ID")
        "Unique identifier for source, when source is BOM then BOM_ID and ITEM_ID for other sources."
        self.SOURCE_TYPE = parse_value(self.schema, column_value_map, "SOURCE_TYPE")
        "Source type where illustration belongs. Like Bom, Component, Part, Tool, Process, Machine etc."
        self.ORIG_OBJECT_ID = parse_value(self.schema, column_value_map, "ORIG_OBJECT_ID")
        "ID of the object originaly authored from which the current one is created on-the-fly."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        self.EFF_TYPE = parse_value(self.schema, column_value_map, "EFF_TYPE")
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        "EFF Group Id"
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        "Next Higher Assembly given by User"

class SFWID_SERIAL_OPER_ITEMS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "PLND_ITEM_ID": "STRING",
        "REF_DES": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ITEM_DAT_COL_STATUS": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "PART_DAT_COL_ID": "STRING",
        "COMPLETE_QTY": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.PLND_ITEM_ID = parse_value(self.schema, column_value_map, "PLND_ITEM_ID")
        "Unique, system-generated ID of the given component/part."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ITEM_DAT_COL_STATUS = parse_value(self.schema, column_value_map, "ITEM_DAT_COL_STATUS")
        "Status of the data collection for the given serialized component/part at the given operation."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.COMPLETE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_QTY")
        "Determines the number of units completed. Applicable when Continuous Flow flag is Y."

class SFPL_EFF_GROUP_DEF:
    schema = {
        "EFF_GROUP_ID": "STRING",
        "EFF_GROUP_NO": "STRING",
        "EFF_GROUP_REV": "NUMBER",
        "EFF_GROUP_STATUS": "STRING",
        "EFF_GROUP_DESC": "STRING",
        "CHANGE_NO": "STRING",
        "CHANGE_NOTES": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "EFF_GROUP_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_MFG_BOM_COMP_EFF_FK",
        "SFPL_STEP_TOOL_FK2",
        "SFWID_OPER_TOOL_FK1",
        "SFWID_OPER_MM_OBJECTS_FK5",
        "SFPL_MFG_BOM_REV_EFF_FK3",
        "SFPL_STEP_DESC_GROUP_FK",
        "SFPL_MFG_BOM_MM_OBJECT_FK5",
        "SFWID_OPER_TOOL_ALT_FK7",
        "SFPL_PLAN_EFF_GROUP_FK",
        "SFWID_OPER_ITEMS_FK03",
        "SFPL_STEP_MM_OBJECTS_FK5",
        "SFWID_OPER_ITEMS_ALT_FK5",
        "SFPL_MFG_BOM_TOOL_FK8",
        "SFWID_OPER_MM_OBJECTS_ALT_FK5",
        "SFPL_EFF_GROUP_RANGE_FK1",
        "SFPL_STEP_ITEMS_FK03",
    ]
    def __init__(self, column_value_map):
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        self.EFF_GROUP_NO = parse_value(self.schema, column_value_map, "EFF_GROUP_NO")
        "Unique, Effectivity Group No given by User."
        self.EFF_GROUP_REV = parse_value(self.schema, column_value_map, "EFF_GROUP_REV")
        "Effectivity Group Rev."
        self.EFF_GROUP_STATUS = parse_value(self.schema, column_value_map, "EFF_GROUP_STATUS")
        "Effectivity Group Status."
        self.EFF_GROUP_DESC = parse_value(self.schema, column_value_map, "EFF_GROUP_DESC")
        "Effectivity Group Description given by User."
        self.CHANGE_NO = parse_value(self.schema, column_value_map, "CHANGE_NO")
        "Change No given by User."
        self.CHANGE_NOTES = parse_value(self.schema, column_value_map, "CHANGE_NOTES")
        "Change Notes given by User."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last Operation (UPDATE, INSERT, COPY, etc.) applied to the record."
        self.SFPL_MFG_BOM_COMP_EFF_FK = []
        self.SFPL_STEP_TOOL_FK2 = []
        self.SFWID_OPER_TOOL_FK1 = []
        self.SFWID_OPER_MM_OBJECTS_FK5 = []
        self.SFPL_MFG_BOM_REV_EFF_FK3 = []
        self.SFPL_STEP_DESC_GROUP_FK = []
        self.SFPL_MFG_BOM_MM_OBJECT_FK5 = []
        self.SFWID_OPER_TOOL_ALT_FK7 = []
        self.SFPL_PLAN_EFF_GROUP_FK = []
        self.SFWID_OPER_ITEMS_FK03 = []
        self.SFPL_STEP_MM_OBJECTS_FK5 = []
        self.SFWID_OPER_ITEMS_ALT_FK5 = []
        self.SFPL_MFG_BOM_TOOL_FK8 = []
        self.SFWID_OPER_MM_OBJECTS_ALT_FK5 = []
        self.SFPL_EFF_GROUP_RANGE_FK1 = []
        self.SFPL_STEP_ITEMS_FK03 = []

class SFFND_USER_CERTS_XREF_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "USER_ID": "STRING",
        "CERT": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "NOTES": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.USER_ID = parse_value(self.schema, column_value_map, "USER_ID")
        "Unique identifier of specific User."
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        "Certificate assigned."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of multimedia Object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last Operation (UPDATE, INSERT, COPY, etc.) applied to the record."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "User certificate notes."

class SFCORE_MM_OBJECT_FOLDER_XREF:
    schema = {
        "FOLDER_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "FOLDER_ID",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_MM_OBJFLDR_XREF_OBJ_FK", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFCORE_MM_OBJFLDR_XREF_FLDR_FK", ["FOLDER_ID"], "SFCORE_MM_FOLDER_DEF", ["FOLDER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.FOLDER_ID = parse_value(self.schema, column_value_map, "FOLDER_ID")
        "Unique, system generated identifier of the folder."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFSQA_INSP_ORDER_COMP_UNITS:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "ITEM_ID": "STRING",
        "UNIT_ID": "STRING",
        "COMP_ITEM_ID": "STRING",
        "COMP_UNIT_ID": "STRING",
        "COMP_SAMPLE_NO": "NUMBER",
        "COMP_SERIAL_NO": "STRING",
        "COMP_LOT_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "ITEM_ID",
        "UNIT_ID",
        "COMP_ITEM_ID",
        "COMP_UNIT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        "System generated unique id for inspection order."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "System generated unique id for Build Part No/Revision."
        self.UNIT_ID = parse_value(self.schema, column_value_map, "UNIT_ID")
        "System generated unique id for Build Part Unit."
        self.COMP_ITEM_ID = parse_value(self.schema, column_value_map, "COMP_ITEM_ID")
        "System generated unique id for Component Part No/Rev."
        self.COMP_UNIT_ID = parse_value(self.schema, column_value_map, "COMP_UNIT_ID")
        "System generated unique id for Component Part Unit."
        self.COMP_SAMPLE_NO = parse_value(self.schema, column_value_map, "COMP_SAMPLE_NO")
        "Component Unit Sample Number."
        self.COMP_SERIAL_NO = parse_value(self.schema, column_value_map, "COMP_SERIAL_NO")
        "Component Serial Number."
        self.COMP_LOT_NO = parse_value(self.schema, column_value_map, "COMP_LOT_NO")
        "Component Lot Number."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the Advancement record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated the advancement record."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "Last Action performed on Advancement level record."

class SFCORE_CONCURRENT_USERS:
    schema = {
        "CONCURRENT_USER_ID": "NUMBER",
        "UNIQUE_BY_IP_FLAG": "STRING",
        "TIME_STAMP": "DATE",
        "LICENSE_TYPE": "STRING",
        "MAX_LICENSE_TYPE_COUNT": "NUMBER",
        "ENCRYPTION": "STRING",
    }
    primary_key_columns = [
        "CONCURRENT_USER_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFCORE_CONCURRENT_USER_DTL_FK1",
    ]
    def __init__(self, column_value_map):
        self.CONCURRENT_USER_ID = parse_value(self.schema, column_value_map, "CONCURRENT_USER_ID")
        "Unique system generated identifier for the Concurrent User."
        self.UNIQUE_BY_IP_FLAG = parse_value(self.schema, column_value_map, "UNIQUE_BY_IP_FLAG")
        "Identifier for unique by IP/irrespective of IP for records."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LICENSE_TYPE = parse_value(self.schema, column_value_map, "LICENSE_TYPE")
        "The type (FULL USER/MACHINE_USER/SUPPLIER USER) of license."
        self.MAX_LICENSE_TYPE_COUNT = parse_value(self.schema, column_value_map, "MAX_LICENSE_TYPE_COUNT")
        "Count for perticular user type."
        self.ENCRYPTION = parse_value(self.schema, column_value_map, "ENCRYPTION")
        "Combination of MAX_LICENSE_TYPE_COUNT/TIME_STAMP/LICENSE_TYPE in encrypted form."
        self.SFCORE_CONCURRENT_USER_DTL_FK1 = []

class SFSQA_INSP_DEF_PPV_INFO:
    schema = {
        "PPV_REQ_FLAG": "STRING",
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "PPV_QTY": "NUMBER",
        "LOCATION_ID": "STRING",
        "PPV_TYPE": "STRING",
        "PPV_PENDING_QTY": "NUMBER",
        "PPV_INPROCESS_QTY": "NUMBER",
        "PPV_COMPLETE_QTY": "NUMBER",
        "LAST_PPV_COMPLETE_DATE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "OWNER_CODE",
        "INSP_DEF_REV",
        "LOCATION_ID",
        "ITEM_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PPV_REQ_FLAG = parse_value(self.schema, column_value_map, "PPV_REQ_FLAG")
        "Y/N, If Y indicates PPV Inspection Order require, otherwise not require."
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        "Key Field for Inspection Definition."
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        "Key Field for Inspection Definition."
        self.PPV_QTY = parse_value(self.schema, column_value_map, "PPV_QTY")
        "PPV Quantity for Inspection."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.PPV_TYPE = parse_value(self.schema, column_value_map, "PPV_TYPE")
        "Full/Partial,If Full then All PPV requires inspection steps/Items need to be inspected.If partial then all PPV require Inspection Steps/Items are optionaly inspected."
        self.PPV_PENDING_QTY = parse_value(self.schema, column_value_map, "PPV_PENDING_QTY")
        "Pending PPV quantities for PPV inspection."
        self.PPV_INPROCESS_QTY = parse_value(self.schema, column_value_map, "PPV_INPROCESS_QTY")
        "IN PROCESS PPV quantities for PPV inspection."
        self.PPV_COMPLETE_QTY = parse_value(self.schema, column_value_map, "PPV_COMPLETE_QTY")
        "Completed PPV quantities."
        self.LAST_PPV_COMPLETE_DATE = parse_value(self.schema, column_value_map, "LAST_PPV_COMPLETE_DATE")
        "Last PPV Inspection Order completion date."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."

class SFQA_DISC_DESC_MM_OBJ_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH1": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH2": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH3": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH4": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH5": "STRING",
        "UCF_DISC_DESC_MM_OBJ_NUM1": "NUMBER",
        "UCF_DISC_DESC_MM_OBJ_NUM2": "NUMBER",
        "UCF_DISC_DESC_MM_OBJ_NUM3": "NUMBER",
        "UCF_DISC_DESC_MM_OBJ_DATE1": "STRING",
        "UCF_DISC_DESC_MM_OBJ_DATE2": "STRING",
        "UCF_DISC_DESC_MM_OBJ_FLAG1": "STRING",
        "UCF_DISC_DESC_MM_OBJ_FLAG2": "STRING",
        "UCF_DISC_DESC_MM_OBJ_FLAG3": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH255_1": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH255_2": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "RTF_LINK_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "Identifier of the discrepancy, including line number."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_DISC_DESC_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_DESC_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_DESC_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_DESC_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_DESC_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_DESC_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_DISC_DESC_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_DISC_DESC_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_DISC_DESC_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_DISC_DESC_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_DISC_DESC_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_DESC_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_DESC_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_DESC_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_DISC_DESC_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."

class SFFND_DC_VARIABLE_DEF:
    schema = {
        "VARIABLE_NAME": "STRING",
        "VISIBILITY": "STRING",
        "CONSTANT_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "VARIABLE_DESC": "STRING",
        "VAR_VALUE": "STRING",
        "NUM_DECIMAL_DIGITS": "NUMBER",
        "FORMAT": "STRING",
    }
    primary_key_columns = [
        "VARIABLE_NAME",
        "VISIBILITY",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_DC_VARIABLE_DEF_FK2", ["FORMAT"], "SFFND_DC_FORMAT_TYPE_DEF", ["FORMAT"]),
        DbForeignKey("SFFND_DC_VARIABLE_DEF_FK1", ["VISIBILITY"], "SFFND_VARIABLE_VISIBILITY_DEF", ["VISIBILITY"]),
    ]
    refs = [
        "SFWID_OPER_DC_VARS_ALT_FK2",
        "SFWID_OPER_DC_VAR_FK",
        "SFPL_STEP_DC_FORMULA_VARS_FK2",
        "SFPL_STEP_DAT_COL_FK1",
        "SFWID_OPER_DAT_COL_ALT_FK6",
        "SFWID_OPER_DC_EXPRESS_VARS_FK1",
        "SFWID_VARIABLES_FK1",
    ]
    def __init__(self, column_value_map):
        self.VARIABLE_NAME = parse_value(self.schema, column_value_map, "VARIABLE_NAME")
        self.VISIBILITY = parse_value(self.schema, column_value_map, "VISIBILITY")
        self.CONSTANT_FLAG = parse_value(self.schema, column_value_map, "CONSTANT_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.VARIABLE_DESC = parse_value(self.schema, column_value_map, "VARIABLE_DESC")
        self.VAR_VALUE = parse_value(self.schema, column_value_map, "VAR_VALUE")
        self.NUM_DECIMAL_DIGITS = parse_value(self.schema, column_value_map, "NUM_DECIMAL_DIGITS")
        self.FORMAT = parse_value(self.schema, column_value_map, "FORMAT")
        self.SFWID_OPER_DC_VARS_ALT_FK2 = []
        self.SFWID_OPER_DC_VAR_FK = []
        self.SFPL_STEP_DC_FORMULA_VARS_FK2 = []
        self.SFPL_STEP_DAT_COL_FK1 = []
        self.SFWID_OPER_DAT_COL_ALT_FK6 = []
        self.SFWID_OPER_DC_EXPRESS_VARS_FK1 = []
        self.SFWID_VARIABLES_FK1 = []

class SFRPT_HOLD:
    schema = {
        "SNAPSHOT_ID": "NUMBER",
        "PART_NO": "STRING",
        "WORK_LOC": "STRING",
        "PROJECT": "STRING",
        "PROGRAM": "STRING",
        "HOLD_TYPE": "STRING",
        "HOLD_HOURS": "NUMBER",
    }
    primary_key_columns = [
        "SNAPSHOT_ID",
        "PART_NO",
        "WORK_LOC",
        "PROJECT",
        "PROGRAM",
        "HOLD_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFRPT_HOLD_SNAPSHOT_FK", ["SNAPSHOT_ID"], "SFRPT_SNAPSHOT", ["SNAPSHOT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SNAPSHOT_ID = parse_value(self.schema, column_value_map, "SNAPSHOT_ID")
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        self.WORK_LOC = parse_value(self.schema, column_value_map, "WORK_LOC")
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        self.HOLD_TYPE = parse_value(self.schema, column_value_map, "HOLD_TYPE")
        self.HOLD_HOURS = parse_value(self.schema, column_value_map, "HOLD_HOURS")

class SFSQA_SUPPLIER_CERT:
    schema = {
        "UPDT_USERID": "STRING",
        "SUPPLIER_CODE": "STRING",
        "CERT": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "EFF_DATE": "STRING",
        "EXP_DATE": "STRING",
        "CERT_STAMP_NO": "STRING",
        "UCF_SUPPLIER_CERT_VCH1": "STRING",
        "UCF_SUPPLIER_CERT_VCH2": "STRING",
        "UCF_SUPPLIER_CERT_VCH3": "STRING",
        "UCF_SUPPLIER_CERT_VCH4": "STRING",
        "UCF_SUPPLIER_CERT_VCH5": "STRING",
        "UCF_SUPPLIER_CERT_VCH6": "STRING",
        "UCF_SUPPLIER_CERT_VCH7": "STRING",
        "UCF_SUPPLIER_CERT_VCH8": "STRING",
        "UCF_SUPPLIER_CERT_VCH9": "STRING",
        "UCF_SUPPLIER_CERT_VCH10": "STRING",
        "UCF_SUPPLIER_CERT_VCH11": "STRING",
        "UCF_SUPPLIER_CERT_VCH12": "STRING",
        "UCF_SUPPLIER_CERT_VCH13": "STRING",
        "UCF_SUPPLIER_CERT_VCH14": "STRING",
        "UCF_SUPPLIER_CERT_VCH15": "STRING",
        "UCF_SUPPLIER_CERT_NUM1": "NUMBER",
        "UCF_SUPPLIER_CERT_NUM2": "NUMBER",
        "UCF_SUPPLIER_CERT_NUM3": "NUMBER",
        "UCF_SUPPLIER_CERT_NUM4": "NUMBER",
        "UCF_SUPPLIER_CERT_NUM5": "NUMBER",
        "UCF_SUPPLIER_CERT_DATE1": "STRING",
        "UCF_SUPPLIER_CERT_DATE2": "STRING",
        "UCF_SUPPLIER_CERT_DATE3": "STRING",
        "UCF_SUPPLIER_CERT_DATE4": "STRING",
        "UCF_SUPPLIER_CERT_DATE5": "STRING",
        "UCF_SUPPLIER_CERT_FLAG1": "STRING",
        "UCF_SUPPLIER_CERT_FLAG2": "STRING",
        "UCF_SUPPLIER_CERT_FLAG3": "STRING",
        "UCF_SUPPLIER_CERT_FLAG4": "STRING",
        "UCF_SUPPLIER_CERT_FLAG5": "STRING",
        "UCF_SUPPLIER_CERT_VCH255_1": "STRING",
        "UCF_SUPPLIER_CERT_VCH255_2": "STRING",
        "UCF_SUPPLIER_CERT_VCH255_3": "STRING",
        "UCF_SUPPLIER_CERT_VCH4000_1": "STRING",
        "UCF_SUPPLIER_CERT_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "SUPPLIER_CODE",
        "CERT",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_SUPPLIER_CERT_FK2", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFSQA_SUPPLIER_CERT_FK1", ["CERT"], "SFFND_CERT_DEF", ["CERT"]),
    ]
    refs = [
        "SFSQA_SUPPLIER_CERT_XREF_FK1",
    ]
    def __init__(self, column_value_map):
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.EFF_DATE = parse_value(self.schema, column_value_map, "EFF_DATE")
        self.EXP_DATE = parse_value(self.schema, column_value_map, "EXP_DATE")
        self.CERT_STAMP_NO = parse_value(self.schema, column_value_map, "CERT_STAMP_NO")
        self.UCF_SUPPLIER_CERT_VCH1 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH2 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH3 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH4 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH5 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH6 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH7 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH8 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH9 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH10 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH11 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH12 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH13 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH14 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH15 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_NUM1 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_SUPPLIER_CERT_NUM2 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_SUPPLIER_CERT_NUM3 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_SUPPLIER_CERT_NUM4 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_SUPPLIER_CERT_NUM5 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_SUPPLIER_CERT_DATE1 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SUPPLIER_CERT_DATE2 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SUPPLIER_CERT_DATE3 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_SUPPLIER_CERT_DATE4 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_SUPPLIER_CERT_DATE5 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_SUPPLIER_CERT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SUPPLIER_CERT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SUPPLIER_CERT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SUPPLIER_CERT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SUPPLIER_CERT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SUPPLIER_CERT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH255_1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH255_2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH255_3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH4000_1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_CERT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_CERT_VCH4000_2")
        "User-configurable field for VARCHAR data type."
        self.SFSQA_SUPPLIER_CERT_XREF_FK1 = []

class SFFND_QUEUE_TYPE_DEF:
    schema = {
        "QUEUE_TYPE": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "QUEUE_DESC": "STRING",
    }
    primary_key_columns = [
        "QUEUE_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_EDITMODE_STATUS_FK3",
        "SFFND_WORK_FLOW_SETUP_FK2",
        "SFFND_WORK_FLOW_SETUP_FK3",
        "SFFND_WORK_FLOW_SETUP_FK1",
        "SFFND_COMM_QUEUES_TO_Q_FK",
        "SFFND_COMM_QUEUES_FROM_Q_FK",
        "SFFND_WORK_FLOW_FK2",
        "SFFND_WORK_FLOW_FK1",
    ]
    def __init__(self, column_value_map):
        self.QUEUE_TYPE = parse_value(self.schema, column_value_map, "QUEUE_TYPE")
        "Not in use."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.QUEUE_DESC = parse_value(self.schema, column_value_map, "QUEUE_DESC")
        self.SFFND_EDITMODE_STATUS_FK3 = []
        self.SFFND_WORK_FLOW_SETUP_FK2 = []
        self.SFFND_WORK_FLOW_SETUP_FK3 = []
        self.SFFND_WORK_FLOW_SETUP_FK1 = []
        self.SFFND_COMM_QUEUES_TO_Q_FK = []
        self.SFFND_COMM_QUEUES_FROM_Q_FK = []
        self.SFFND_WORK_FLOW_FK2 = []
        self.SFFND_WORK_FLOW_FK1 = []

class SFWID_ORDER_NODE_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "NODE_ID": "STRING",
        "NODE_TYPE": "STRING",
        "NODE_NO": "STRING",
        "NODE_COLUMN": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STATUS": "STRING",
        "NODE_TITLE": "STRING",
        "NODE_ROW": "NUMBER",
        "NODE_DESC": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "DECISION_TYPE": "STRING",
        "ALTER_FLAG": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.NODE_ID = parse_value(self.schema, column_value_map, "NODE_ID")
        "The unique system-generated identifier of a node in a Operation Flow Diagram."
        self.NODE_TYPE = parse_value(self.schema, column_value_map, "NODE_TYPE")
        "Type or classification of node (Operation or Decision)."
        self.NODE_NO = parse_value(self.schema, column_value_map, "NODE_NO")
        "User-changeable sequence number identifying a node."
        self.NODE_COLUMN = parse_value(self.schema, column_value_map, "NODE_COLUMN")
        "The number of the grid column containing the node."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Status of the given node."
        self.NODE_TITLE = parse_value(self.schema, column_value_map, "NODE_TITLE")
        "A name/short description of a node."
        self.NODE_ROW = parse_value(self.schema, column_value_map, "NODE_ROW")
        "The number of the grid row containing the node."
        self.NODE_DESC = parse_value(self.schema, column_value_map, "NODE_DESC")
        "A description of the node."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.DECISION_TYPE = parse_value(self.schema, column_value_map, "DECISION_TYPE")
        "Type or classification of decision."
        self.ALTER_FLAG = parse_value(self.schema, column_value_map, "ALTER_FLAG")
        "Flag that indicates if the given node can be altered."

class SFQA_DISC_DESC_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_TYPE": "STRING",
        "TIME_STAMP": "STRING",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
        "DISC_STATUS": "STRING",
        "PO_NO": "STRING",
        "DISC_START_DATE": "STRING",
        "DISC_TITLE": "STRING",
        "UCF_DISC_VCH1": "STRING",
        "UCF_DISC_VCH2": "STRING",
        "UCF_DISC_VCH3": "STRING",
        "UCF_DISC_FLAG1": "STRING",
        "UCF_DISC_VCH4": "STRING",
        "UCF_DISC_VCH5": "STRING",
        "UCF_DISC_VCH6": "STRING",
        "UCF_DISC_VCH7": "STRING",
        "UCF_DISC_VCH8": "STRING",
        "UCF_DISC_VCH9": "STRING",
        "UCF_DISC_VCH10": "STRING",
        "UCF_DISC_VCH11": "STRING",
        "UCF_DISC_VCH12": "STRING",
        "UCF_DISC_VCH13": "STRING",
        "UCF_DISC_VCH14": "STRING",
        "UCF_DISC_VCH15": "STRING",
        "UCF_DISC_NUM1": "NUMBER",
        "UCF_DISC_NUM2": "NUMBER",
        "UCF_DISC_NUM3": "NUMBER",
        "UCF_DISC_NUM4": "NUMBER",
        "UCF_DISC_NUM5": "NUMBER",
        "UCF_DISC_DATE1": "STRING",
        "UCF_DISC_DATE2": "STRING",
        "UCF_DISC_DATE3": "STRING",
        "UCF_DISC_DATE4": "STRING",
        "UCF_DISC_DATE5": "STRING",
        "UCF_DISC_FLAG2": "STRING",
        "UCF_DISC_FLAG3": "STRING",
        "UCF_DISC_FLAG4": "STRING",
        "UCF_DISC_FLAG5": "STRING",
        "UCF_DISC_VCH255_1": "STRING",
        "UCF_DISC_VCH255_2": "STRING",
        "UCF_DISC_VCH255_3": "STRING",
        "UCF_DISC_VCH4000_1": "STRING",
        "UCF_DISC_VCH4000_2": "STRING",
        "PO_RELEASE": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_TYPE = parse_value(self.schema, column_value_map, "DISC_TYPE")
        "Type or classification of discrepancy, e.g., SCRAP, REWORK, REPAIR, AS IS, RETURN."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DISC_STATUS = parse_value(self.schema, column_value_map, "DISC_STATUS")
        "Current status of the discrepancy: PR (Preliminary Review) or MRB (Material Review Board)."
        self.PO_NO = parse_value(self.schema, column_value_map, "PO_NO")
        "Purchase Order Number associated with the discrepancy."
        self.DISC_START_DATE = parse_value(self.schema, column_value_map, "DISC_START_DATE")
        "The date on which the discrepancy was created."
        self.DISC_TITLE = parse_value(self.schema, column_value_map, "DISC_TITLE")
        "Title or name of the discrepancy."
        self.UCF_DISC_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_DISC_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH6 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH7 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH8 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH9 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH10 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH11 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH12 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH13 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH14 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH15 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_DISC_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_DISC_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_DISC_NUM4 = parse_value(self.schema, column_value_map, "UCF_DISC_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_DISC_NUM5 = parse_value(self.schema, column_value_map, "UCF_DISC_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_DISC_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_DISC_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_DISC_DATE3 = parse_value(self.schema, column_value_map, "UCF_DISC_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_DISC_DATE4 = parse_value(self.schema, column_value_map, "UCF_DISC_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_DISC_DATE5 = parse_value(self.schema, column_value_map, "UCF_DISC_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_DISC_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_FLAG4 = parse_value(self.schema, column_value_map, "UCF_DISC_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_FLAG5 = parse_value(self.schema, column_value_map, "UCF_DISC_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH255_1")
        self.UCF_DISC_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH255_2")
        self.UCF_DISC_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH255_3")
        self.UCF_DISC_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH4000_1")
        self.UCF_DISC_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH4000_2")
        self.PO_RELEASE = parse_value(self.schema, column_value_map, "PO_RELEASE")

class SFSQA_INSP_ORDER_ISII_DC_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "ITEM_ID": "STRING",
        "INSP_ITEM_ID": "STRING",
        "INSP_ITEM_COUNT": "NUMBER",
        "SLOT_ID": "STRING",
        "STATUS": "STRING",
        "REC_SOURCE": "STRING",
        "SAMPLE_NO": "NUMBER",
        "OCCURANCE_NO": "NUMBER",
        "NO_RESPONSE_FLAG": "STRING",
        "SLOT_FLAG": "STRING",
        "MANUALLY_MARKED_AS_REJECT_FLAG": "STRING",
        "CDC_VALUE": "STRING",
        "NOTES": "STRING",
        "UNIT_ID": "STRING",
        "CDC_TEXT_VALUE": "STRING",
        "ACTUAL_INSP_METHOD": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH1": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH2": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH3": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH4": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH5": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH6": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH7": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH8": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH9": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH10": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH11": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH12": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH13": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH14": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH15": "STRING",
        "UCF_INSP_ORDERIIIDC_DATE1": "STRING",
        "UCF_INSP_ORDERIIIDC_DATE2": "STRING",
        "UCF_INSP_ORDERIIIDC_DATE3": "STRING",
        "UCF_INSP_ORDERIIIDC_DATE4": "STRING",
        "UCF_INSP_ORDERIIIDC_DATE5": "STRING",
        "UCF_INSP_ORDERIIIDC_FLAG1": "STRING",
        "UCF_INSP_ORDERIIIDC_FLAG2": "STRING",
        "UCF_INSP_ORDERIIIDC_FLAG3": "STRING",
        "UCF_INSP_ORDERIIIDC_FLAG4": "STRING",
        "UCF_INSP_ORDERIIIDC_FLAG5": "STRING",
        "UCF_INSP_ORDERIIIDC_NUM1": "NUMBER",
        "UCF_INSP_ORDERIIIDC_NUM2": "NUMBER",
        "UCF_INSP_ORDERIIIDC_NUM3": "NUMBER",
        "UCF_INSP_ORDERIIIDC_NUM4": "NUMBER",
        "UCF_INSP_ORDERIIIDC_NUM5": "NUMBER",
        "UCF_INSP_ORDERIIIDC_VCH255_1": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH255_2": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH255_3": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH4000_1": "STRING",
        "UCF_INSP_ORDERIIIDC_VCH4000_2": "STRING",
        "CERT_STAMP_NO": "STRING",
        "COMP_UNIT_ID": "STRING",
        "COMP_SAMPLE_NO": "NUMBER",
        "COMP_OCCURANCE_NO": "NUMBER",
        "TEMPLATE_FILE_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        "Unique identifier for inspection Order."
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        "Unique identifier for inspection Order Step."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique identifier for inspection order Item Id."
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        "Unique identifier for inspection item Id."
        self.INSP_ITEM_COUNT = parse_value(self.schema, column_value_map, "INSP_ITEM_COUNT")
        "Inspection item count."
        self.SLOT_ID = parse_value(self.schema, column_value_map, "SLOT_ID")
        "Unique identifier for inspection order data collection slot."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Inspection item data collection status."
        self.REC_SOURCE = parse_value(self.schema, column_value_map, "REC_SOURCE")
        "Rec source."
        self.SAMPLE_NO = parse_value(self.schema, column_value_map, "SAMPLE_NO")
        "Identified sample no."
        self.OCCURANCE_NO = parse_value(self.schema, column_value_map, "OCCURANCE_NO")
        "Inspection item data collection iteration no."
        self.NO_RESPONSE_FLAG = parse_value(self.schema, column_value_map, "NO_RESPONSE_FLAG")
        "No response Flag."
        self.SLOT_FLAG = parse_value(self.schema, column_value_map, "SLOT_FLAG")
        "Slot Flag."
        self.MANUALLY_MARKED_AS_REJECT_FLAG = parse_value(self.schema, column_value_map, "MANUALLY_MARKED_AS_REJECT_FLAG")
        "Manually reject inspection item data collection."
        self.CDC_VALUE = parse_value(self.schema, column_value_map, "CDC_VALUE")
        "Data collection value."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Notes."
        self.UNIT_ID = parse_value(self.schema, column_value_map, "UNIT_ID")
        "Unique identifier for inspection unit."
        self.CDC_TEXT_VALUE = parse_value(self.schema, column_value_map, "CDC_TEXT_VALUE")
        "Data collection value."
        self.ACTUAL_INSP_METHOD = parse_value(self.schema, column_value_map, "ACTUAL_INSP_METHOD")
        "Actual inspection method."
        self.UCF_INSP_ORDERIIIDC_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_INSP_ORDERIIIDC_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_INSP_ORDERIIIDC_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_INSP_ORDERIIIDC_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_INSP_ORDERIIIDC_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_INSP_ORDERIIIDC_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_INSP_ORDERIIIDC_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_INSP_ORDERIIIDC_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_INSP_ORDERIIIDC_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_INSP_ORDERIIIDC_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_INSP_ORDERIIIDC_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_INSP_ORDERIIIDC_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_INSP_ORDERIIIDC_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_INSP_ORDERIIIDC_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_INSP_ORDERIIIDC_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_INSP_ORDERIIIDC_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_INSP_ORDERIIIDC_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_INSP_ORDERIIIDC_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_INSP_ORDERIIIDC_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_INSP_ORDERIIIDC_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_INSP_ORDERIIIDC_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIIDC_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.CERT_STAMP_NO = parse_value(self.schema, column_value_map, "CERT_STAMP_NO")
        "Inspection item data collection certificate stamp no."
        self.COMP_UNIT_ID = parse_value(self.schema, column_value_map, "COMP_UNIT_ID")
        "Component Unit ID."
        self.COMP_SAMPLE_NO = parse_value(self.schema, column_value_map, "COMP_SAMPLE_NO")
        "Component Unit Sample Number."
        self.COMP_OCCURANCE_NO = parse_value(self.schema, column_value_map, "COMP_OCCURANCE_NO")
        "Component Unit Sample Occurance Number."
        self.TEMPLATE_FILE_ID = parse_value(self.schema, column_value_map, "TEMPLATE_FILE_ID")
        "The unique identifier of the object being referenced."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_MFG_BOM_REV_EFF:
    schema = {
        "BOM_ID": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "EFF_GROUP_ID": "STRING",
        "LATEST_EFF_GRP_REV_FLAG": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
        "UNIT_TYPE",
        "EFF_FROM",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_REV_EFF_FK3", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
        DbForeignKey("SFPL_MFG_BOM_REV_EFF_FK1", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_REV_EFF_FK2", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique, system-generated identifier of a given BOM."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "A type of BOM revision effectivity. For example: time period, or finishing product."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "The upper bound of the effectivity range for unit type other than time period."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "The lower bound of the effectivity range for unit  type other than time period."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "The starting date of the time period during which the BOM revision is effective."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "The ending date of the time period during which the BOM revision is effective."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        self.LATEST_EFF_GRP_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_EFF_GRP_REV_FLAG")

class SFWID_ORDER_MACH_ALT_XREF_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_MACHINE_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "PLND_MACHINE_NO": "STRING",
        "PLND_MACHINE_CHG": "STRING",
        "ASGND_MACHINE_NO": "STRING",
        "ASGND_MACHINE_CHG": "STRING",
        "ASSIGNED_MACHINE_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH1": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH2": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH3": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH4": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH5": "STRING",
        "UCF_ORDER_MCHN_ALT_NUM1": "NUMBER",
        "UCF_ORDER_MCHN_ALT_NUM2": "NUMBER",
        "UCF_ORDER_MCHN_ALT_NUM3": "NUMBER",
        "UCF_ORDER_MCHN_ALT_FLAG1": "STRING",
        "UCF_ORDER_MCHN_ALT_FLAG2": "STRING",
        "UCF_ORDER_MCHN_ALT_FLAG3": "STRING",
        "UCF_ORDER_MCHN_ALT_DATE1": "STRING",
        "UCF_ORDER_MCHN_ALT_DATE2": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH255_1": "STRING",
        "UCF_ORDER_MCHN_ALT_VCH255_2": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_MACHINE_ALT_ID = parse_value(self.schema, column_value_map, "ORDER_MACHINE_ALT_ID")
        "Unique system generated machine identiifer that has been used as an alternate."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.PLND_MACHINE_NO = parse_value(self.schema, column_value_map, "PLND_MACHINE_NO")
        "The identifying number of the required Machine as planned in the given operation."
        self.PLND_MACHINE_CHG = parse_value(self.schema, column_value_map, "PLND_MACHINE_CHG")
        "The change letter (revision) of the required Machine as planned in the given operation."
        self.ASGND_MACHINE_NO = parse_value(self.schema, column_value_map, "ASGND_MACHINE_NO")
        "The identifying number of the required Machine as actually assigned to the given operation."
        self.ASGND_MACHINE_CHG = parse_value(self.schema, column_value_map, "ASGND_MACHINE_CHG")
        "The change letter (revision) of the required Machine as actually assigned to the given operation."
        self.ASSIGNED_MACHINE_FLAG = parse_value(self.schema, column_value_map, "ASSIGNED_MACHINE_FLAG")
        "Flag to check if Machine is assigned or not."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_ORDER_MCHN_ALT_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_MCHN_ALT_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_MCHN_ALT_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_MCHN_ALT_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_MCHN_ALT_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_MCHN_ALT_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_ORDER_MCHN_ALT_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_ORDER_MCHN_ALT_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_ORDER_MCHN_ALT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_MCHN_ALT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_MCHN_ALT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_MCHN_ALT_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_MCHN_ALT_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_MCHN_ALT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH255_1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_MCHN_ALT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_MCHN_ALT_VCH255_2")
        "User-configurable field for VARCHAR data type."

class SFQA_CA_AFFECTED_MACHINES_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "MACHINE_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "MACHINE_NO": "STRING",
        "MACHINE_CHG": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.MACHINE_ID = parse_value(self.schema, column_value_map, "MACHINE_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.MACHINE_NO = parse_value(self.schema, column_value_map, "MACHINE_NO")
        self.MACHINE_CHG = parse_value(self.schema, column_value_map, "MACHINE_CHG")

class SFSQA_MANDATE_TYPE_DEF:
    schema = {
        "MANDATE_TYPE": "STRING",
        "MANDATE_TYPE_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
    }
    primary_key_columns = [
        "MANDATE_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_OWNER_FK2",
    ]
    def __init__(self, column_value_map):
        self.MANDATE_TYPE = parse_value(self.schema, column_value_map, "MANDATE_TYPE")
        self.MANDATE_TYPE_DESC = parse_value(self.schema, column_value_map, "MANDATE_TYPE_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.SFSQA_OWNER_FK2 = []

class SFSQA_AUDIT_PROCESS:
    schema = {
        "AUDIT_PLAN_ID": "STRING",
        "ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "AUDIT_PLAN_ID",
        "ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_AUDIT_PROCESS_FK1", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
    ]
    refs = [
        "SFSQA_AUDIT_PLNPRO_SCHD_FK1",
    ]
    def __init__(self, column_value_map):
        self.AUDIT_PLAN_ID = parse_value(self.schema, column_value_map, "AUDIT_PLAN_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFSQA_AUDIT_PLNPRO_SCHD_FK1 = []

class SFWID_AS_WORKED_ITEM_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "SERIAL_ID": "STRING",
        "LOT_ID": "STRING",
        "PART_NO": "STRING",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
        "AS_WORKED_ITEM_STATUS": "STRING",
        "ORDER_TYPE": "STRING",
        "SCRAP_FLAG": "STRING",
        "MULTI_ORDER_OPEN_FLAG": "STRING",
        "LOT_QTY": "NUMBER",
        "LOT_SCRAP_QTY": "NUMBER",
        "LOT_STOP_QTY": "NUMBER",
        "TIME_STAMP": "STRING",
        "SPLIT_FLAG": "STRING",
        "PARENT_LOT_ID": "STRING",
        "ORIG_LOT_ID": "STRING",
        "LOT_FLAG": "STRING",
        "SERIAL_FLAG": "STRING",
        "ORDER_ID": "STRING",
        "UCF_ASWRKD_ITEM_VCH1": "STRING",
        "UCF_ASWRKD_ITEM_VCH2": "STRING",
        "UCF_ASWRKD_ITEM_VCH3": "STRING",
        "UCF_ASWRKD_ITEM_VCH4": "STRING",
        "UCF_ASWRKD_ITEM_VCH5": "STRING",
        "UCF_ASWRKD_ITEM_VCH6": "STRING",
        "UCF_ASWRKD_ITEM_VCH7": "STRING",
        "UCF_ASWRKD_ITEM_VCH8": "STRING",
        "UCF_ASWRKD_ITEM_VCH9": "STRING",
        "UCF_ASWRKD_ITEM_VCH10": "STRING",
        "UCF_ASWRKD_ITEM_VCH11": "STRING",
        "UCF_ASWRKD_ITEM_VCH12": "STRING",
        "UCF_ASWRKD_ITEM_VCH13": "STRING",
        "UCF_ASWRKD_ITEM_VCH14": "STRING",
        "UCF_ASWRKD_ITEM_VCH15": "STRING",
        "UCF_ASWRKD_ITEM_NUM1": "NUMBER",
        "UCF_ASWRKD_ITEM_NUM2": "NUMBER",
        "UCF_ASWRKD_ITEM_NUM3": "NUMBER",
        "UCF_ASWRKD_ITEM_NUM4": "NUMBER",
        "UCF_ASWRKD_ITEM_NUM5": "NUMBER",
        "UCF_ASWRKD_ITEM_DATE1": "STRING",
        "UCF_ASWRKD_ITEM_DATE2": "STRING",
        "UCF_ASWRKD_ITEM_DATE3": "STRING",
        "UCF_ASWRKD_ITEM_DATE4": "STRING",
        "UCF_ASWRKD_ITEM_DATE5": "STRING",
        "UCF_ASWRKD_ITEM_FLAG1": "STRING",
        "UCF_ASWRKD_ITEM_FLAG2": "STRING",
        "UCF_ASWRKD_ITEM_FLAG3": "STRING",
        "UCF_ASWRKD_ITEM_FLAG4": "STRING",
        "UCF_ASWRKD_ITEM_FLAG5": "STRING",
        "UCF_ASWRKD_ITEM_VCH255_1": "STRING",
        "UCF_ASWRKD_ITEM_VCH255_2": "STRING",
        "UCF_ASWRKD_ITEM_VCH255_3": "STRING",
        "UCF_ASWRKD_ITEM_VCH4000_1": "STRING",
        "UCF_ASWRKD_ITEM_VCH4000_2": "STRING",
        "SCHED_END_DATE": "STRING",
        "ASSIGNED_TO": "STRING",
        "CONDITION": "STRING",
        "ACCUMULATED_FLIGHT_HOURS": "NUMBER",
        "ACCUMULATED_FLIGHT_CYCLES": "NUMBER",
        "EXPIRATION_DATE": "STRING",
        "SECURITY_GROUP": "STRING",
        "DISC_INH_LIEN_ENTIRE_LOT_FLAG": "STRING",
        "DESIGN_AUTHORITY": "STRING",
        "MANUFACTURER_CODE": "STRING",
        "MANUFACTURER_PART_NO": "STRING",
        "MANUFACTURER_SERIAL_NO": "STRING",
        "MANUFACTURER_LOT_NO": "STRING",
        "SPOOL_NO": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.AS_WORKED_ITEM_STATUS = parse_value(self.schema, column_value_map, "AS_WORKED_ITEM_STATUS")
        "Status of the as-worked component/part."
        self.ORDER_TYPE = parse_value(self.schema, column_value_map, "ORDER_TYPE")
        "Type or classification of order."
        self.SCRAP_FLAG = parse_value(self.schema, column_value_map, "SCRAP_FLAG")
        "A flag (Y/N) indicating whether the component/part should be or has been scrapped."
        self.MULTI_ORDER_OPEN_FLAG = parse_value(self.schema, column_value_map, "MULTI_ORDER_OPEN_FLAG")
        "A flag (Y/N) indication whether the as-worked item is associated with multiple open orders."
        self.LOT_QTY = parse_value(self.schema, column_value_map, "LOT_QTY")
        "The number of components/parts in the lot."
        self.LOT_SCRAP_QTY = parse_value(self.schema, column_value_map, "LOT_SCRAP_QTY")
        "The number of scrapped components/parts in the lot."
        self.LOT_STOP_QTY = parse_value(self.schema, column_value_map, "LOT_STOP_QTY")
        "The number of stopped components/parts in the lot."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.SPLIT_FLAG = parse_value(self.schema, column_value_map, "SPLIT_FLAG")
        "A flag (Y/N) that indicates whether or not the work order is a split of another work order."
        self.PARENT_LOT_ID = parse_value(self.schema, column_value_map, "PARENT_LOT_ID")
        "Unique, system-generated identifier of a lot number assigned to the parent component/part."
        self.ORIG_LOT_ID = parse_value(self.schema, column_value_map, "ORIG_LOT_ID")
        "System-generated identifier of the original lot number assigned to a given component/part."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.UCF_ASWRKD_ITEM_VCH1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH1")
        self.UCF_ASWRKD_ITEM_VCH2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH2")
        self.UCF_ASWRKD_ITEM_VCH3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH3")
        self.UCF_ASWRKD_ITEM_VCH4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH4")
        self.UCF_ASWRKD_ITEM_VCH5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH5")
        self.UCF_ASWRKD_ITEM_VCH6 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH6")
        self.UCF_ASWRKD_ITEM_VCH7 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH7")
        self.UCF_ASWRKD_ITEM_VCH8 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH8")
        self.UCF_ASWRKD_ITEM_VCH9 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH9")
        self.UCF_ASWRKD_ITEM_VCH10 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH10")
        self.UCF_ASWRKD_ITEM_VCH11 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH11")
        self.UCF_ASWRKD_ITEM_VCH12 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH12")
        self.UCF_ASWRKD_ITEM_VCH13 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH13")
        self.UCF_ASWRKD_ITEM_VCH14 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH14")
        self.UCF_ASWRKD_ITEM_VCH15 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH15")
        self.UCF_ASWRKD_ITEM_NUM1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_NUM1")
        self.UCF_ASWRKD_ITEM_NUM2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_NUM2")
        self.UCF_ASWRKD_ITEM_NUM3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_NUM3")
        self.UCF_ASWRKD_ITEM_NUM4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_NUM4")
        self.UCF_ASWRKD_ITEM_NUM5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_NUM5")
        self.UCF_ASWRKD_ITEM_DATE1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_DATE1")
        self.UCF_ASWRKD_ITEM_DATE2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_DATE2")
        self.UCF_ASWRKD_ITEM_DATE3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_DATE3")
        self.UCF_ASWRKD_ITEM_DATE4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_DATE4")
        self.UCF_ASWRKD_ITEM_DATE5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_DATE5")
        self.UCF_ASWRKD_ITEM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_FLAG1")
        self.UCF_ASWRKD_ITEM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_FLAG2")
        self.UCF_ASWRKD_ITEM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_FLAG3")
        self.UCF_ASWRKD_ITEM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_FLAG4")
        self.UCF_ASWRKD_ITEM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_FLAG5")
        self.UCF_ASWRKD_ITEM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH255_1")
        self.UCF_ASWRKD_ITEM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH255_2")
        self.UCF_ASWRKD_ITEM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH255_3")
        self.UCF_ASWRKD_ITEM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH4000_1")
        self.UCF_ASWRKD_ITEM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH4000_2")
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        self.ASSIGNED_TO = parse_value(self.schema, column_value_map, "ASSIGNED_TO")
        self.CONDITION = parse_value(self.schema, column_value_map, "CONDITION")
        self.ACCUMULATED_FLIGHT_HOURS = parse_value(self.schema, column_value_map, "ACCUMULATED_FLIGHT_HOURS")
        self.ACCUMULATED_FLIGHT_CYCLES = parse_value(self.schema, column_value_map, "ACCUMULATED_FLIGHT_CYCLES")
        self.EXPIRATION_DATE = parse_value(self.schema, column_value_map, "EXPIRATION_DATE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.DISC_INH_LIEN_ENTIRE_LOT_FLAG = parse_value(self.schema, column_value_map, "DISC_INH_LIEN_ENTIRE_LOT_FLAG")
        "A flag (Y/N) indicating whether lot discrepancy exists on entire LOT or not, this indicator will be used for inherited discrepancy unit."
        self.DESIGN_AUTHORITY = parse_value(self.schema, column_value_map, "DESIGN_AUTHORITY")
        self.MANUFACTURER_CODE = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE")
        self.MANUFACTURER_PART_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_PART_NO")
        self.MANUFACTURER_SERIAL_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_SERIAL_NO")
        self.MANUFACTURER_LOT_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_LOT_NO")
        self.SPOOL_NO = parse_value(self.schema, column_value_map, "SPOOL_NO")

class SFQA_DISC_TYPE_DEF:
    schema = {
        "DISC_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "DEFAULT_CA_TYPE": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "AUTO_CREATE_CA_FLAG": "STRING",
        "DEFAULT_CA_WORK_FLOW": "STRING",
        "DEFAULT_CA_DOC_TYPE": "STRING",
        "DISC_DESC_UDV_ID": "STRING",
        "ITEM_LOT_SER_UDV_ID": "STRING",
        "COMP_LOT_SER_UDV_ID": "STRING",
        "DEFECT_CLASS_UDV_ID": "STRING",
        "DISP_ACTION_UDV_ID": "STRING",
        "CORR_ACTION_UDV_ID": "STRING",
        "NEXT_DISC_DESC_UDV_ID": "STRING",
        "NEXT_ITEM_LOT_SER_UDV_ID": "STRING",
        "NEXT_COMP_LOT_SER_UDV_ID": "STRING",
        "NEXT_DEFECT_CLASS_UDV_ID": "STRING",
        "NEXT_DISP_ACTION_UDV_ID": "STRING",
        "NEXT_CORR_ACTION_UDV_ID": "STRING",
        "LIEN_NUM_GEN_NAME": "STRING",
    }
    primary_key_columns = [
        "DISC_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK7", ["DEFECT_CLASS_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK8", ["DISP_ACTION_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK10", ["NEXT_DISC_DESC_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK11", ["NEXT_ITEM_LOT_SER_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK12", ["NEXT_COMP_LOT_SER_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK13", ["NEXT_DEFECT_CLASS_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK14", ["NEXT_DISP_ACTION_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK15", ["NEXT_CORR_ACTION_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK16", ["LIEN_NUM_GEN_NAME"], "SFFND_AUTO_NUM_GEN_DEF", ["NUM_GEN_NAME"]),
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK3", ["DEFAULT_CA_DOC_TYPE","DEFAULT_CA_TYPE","DEFAULT_CA_WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK4", ["DISC_DESC_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK5", ["ITEM_LOT_SER_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK6", ["COMP_LOT_SER_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_TYPE_DEF_FK9", ["CORR_ACTION_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_TYPE = parse_value(self.schema, column_value_map, "DISC_TYPE")
        "Type or classification of discrepancy, e.g., SCRAP, REWORK, REPAIR, AS IS, RETURN."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.DEFAULT_CA_TYPE = parse_value(self.schema, column_value_map, "DEFAULT_CA_TYPE")
        "Type or classification of discrepancy, e.g., SCRAP, REWORK, REPAIR, AS IS, RETURN."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.AUTO_CREATE_CA_FLAG = parse_value(self.schema, column_value_map, "AUTO_CREATE_CA_FLAG")
        self.DEFAULT_CA_WORK_FLOW = parse_value(self.schema, column_value_map, "DEFAULT_CA_WORK_FLOW")
        self.DEFAULT_CA_DOC_TYPE = parse_value(self.schema, column_value_map, "DEFAULT_CA_DOC_TYPE")
        self.DISC_DESC_UDV_ID = parse_value(self.schema, column_value_map, "DISC_DESC_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.ITEM_LOT_SER_UDV_ID = parse_value(self.schema, column_value_map, "ITEM_LOT_SER_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.COMP_LOT_SER_UDV_ID = parse_value(self.schema, column_value_map, "COMP_LOT_SER_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.DEFECT_CLASS_UDV_ID = parse_value(self.schema, column_value_map, "DEFECT_CLASS_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.DISP_ACTION_UDV_ID = parse_value(self.schema, column_value_map, "DISP_ACTION_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.CORR_ACTION_UDV_ID = parse_value(self.schema, column_value_map, "CORR_ACTION_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_DISC_DESC_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_DISC_DESC_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_ITEM_LOT_SER_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_ITEM_LOT_SER_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_COMP_LOT_SER_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_COMP_LOT_SER_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_DEFECT_CLASS_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_DEFECT_CLASS_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_DISP_ACTION_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_DISP_ACTION_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_CORR_ACTION_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_CORR_ACTION_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.LIEN_NUM_GEN_NAME = parse_value(self.schema, column_value_map, "LIEN_NUM_GEN_NAME")
        "Name of Number Generator to create Unique Id."

class SFQA_CA_REQ_DOC_TYPE_DEF:
    schema = {
        "SOURCE_DOC_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "SOURCE_DOC_TYPE_DESC": "STRING",
    }
    primary_key_columns = [
        "SOURCE_DOC_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_CA_REQ_SRC_DOC_TYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.SOURCE_DOC_TYPE = parse_value(self.schema, column_value_map, "SOURCE_DOC_TYPE")
        "The unique identifier of a particular type/class of documents used to initialize/create Corrective Action Requests. For instance: customer complaint, audit report, quality and service report, or process and discrepancy trend analysis report."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.SOURCE_DOC_TYPE_DESC = parse_value(self.schema, column_value_map, "SOURCE_DOC_TYPE_DESC")
        "A description of the Corrective Action Request Document Type."
        self.SFQA_CA_REQ_SRC_DOC_TYPE_FK = []

class SFFND_STDOPER:
    schema = {
        "STDOPER_OBJECT_ID": "STRING",
        "STDOPER_TAG": "STRING",
        "STDOPER_REV": "NUMBER",
        "STDOPER_PLAN_ID": "STRING",
        "STDOPER_PLAN_VER": "NUMBER",
        "STDOPER_PLAN_REV": "NUMBER",
        "STDOPER_PLAN_ALT": "NUMBER",
        "STDOPER_OPER_KEY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "STATUS": "STRING",
        "STDOPER_DESC": "STRING",
    }
    primary_key_columns = [
        "STDOPER_OBJECT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.STDOPER_OBJECT_ID = parse_value(self.schema, column_value_map, "STDOPER_OBJECT_ID")
        self.STDOPER_TAG = parse_value(self.schema, column_value_map, "STDOPER_TAG")
        self.STDOPER_REV = parse_value(self.schema, column_value_map, "STDOPER_REV")
        self.STDOPER_PLAN_ID = parse_value(self.schema, column_value_map, "STDOPER_PLAN_ID")
        self.STDOPER_PLAN_VER = parse_value(self.schema, column_value_map, "STDOPER_PLAN_VER")
        self.STDOPER_PLAN_REV = parse_value(self.schema, column_value_map, "STDOPER_PLAN_REV")
        self.STDOPER_PLAN_ALT = parse_value(self.schema, column_value_map, "STDOPER_PLAN_ALT")
        self.STDOPER_OPER_KEY = parse_value(self.schema, column_value_map, "STDOPER_OPER_KEY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The status of the disposition/rework task. For example: IN PROCESS, DISPOSITIONED, or COMPLETE."
        self.STDOPER_DESC = parse_value(self.schema, column_value_map, "STDOPER_DESC")

class SFWID_OPER_DCFORMULA_DESC_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "DAT_COL_ID": "STRING",
        "USE_RANGE": "STRING",
        "EXECUTION_ORDER": "NUMBER",
        "FORMULA": "STRING",
        "EXTERNAL_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        self.USE_RANGE = parse_value(self.schema, column_value_map, "USE_RANGE")
        self.EXECUTION_ORDER = parse_value(self.schema, column_value_map, "EXECUTION_ORDER")
        self.FORMULA = parse_value(self.schema, column_value_map, "FORMULA")
        self.EXTERNAL_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")

class SFSQA_SEVERITY_RULE_TYPE:
    schema = {
        "RULE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "RULE_TYPE_DESC": "STRING",
    }
    primary_key_columns = [
        "RULE_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_SR_DETAILS_FK1",
    ]
    def __init__(self, column_value_map):
        self.RULE_TYPE = parse_value(self.schema, column_value_map, "RULE_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.RULE_TYPE_DESC = parse_value(self.schema, column_value_map, "RULE_TYPE_DESC")
        self.SFSQA_SR_DETAILS_FK1 = []

class SFWID_SERIAL_OPER_TOOL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "ASGND_TOOL_NO": "STRING",
        "ASGND_TOOL_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "PLND_TOOL_NO": "STRING",
        "PLND_TOOL_CHG": "STRING",
        "ASGND_TOOL_QTY": "NUMBER",
        "TOOL_DAT_COL_STATUS": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "ASGND_TOOL_ID": "STRING",
        "COMPLETE_QTY": "NUMBER",
        "MESSAGE_SENT": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.ASGND_TOOL_NO = parse_value(self.schema, column_value_map, "ASGND_TOOL_NO")
        "The identifying number of the required tool as actually assigned to the given operation."
        self.ASGND_TOOL_CHG = parse_value(self.schema, column_value_map, "ASGND_TOOL_CHG")
        "The change letter (revision) of the required tool as actually assigned to the given operation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PLND_TOOL_NO = parse_value(self.schema, column_value_map, "PLND_TOOL_NO")
        "The identifying number of the required tool as originally specified in the work plan."
        self.PLND_TOOL_CHG = parse_value(self.schema, column_value_map, "PLND_TOOL_CHG")
        "The change letter (revision) of the required tool as originally specified in the work plan."
        self.ASGND_TOOL_QTY = parse_value(self.schema, column_value_map, "ASGND_TOOL_QTY")
        "The quantity of ASGND_TOOL_NO assigned to the given operation."
        self.TOOL_DAT_COL_STATUS = parse_value(self.schema, column_value_map, "TOOL_DAT_COL_STATUS")
        "Status of the data collection for the given tool at the given operation."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.ASGND_TOOL_ID = parse_value(self.schema, column_value_map, "ASGND_TOOL_ID")
        "Unique, system-generated identifier of the assigned tool."
        self.COMPLETE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_QTY")
        "Determines the number of units completed. Applicable when Continuous Flow flag is Y."
        self.MESSAGE_SENT = parse_value(self.schema, column_value_map, "MESSAGE_SENT")

class SFPL_PLAN_NOTIFICATION:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_TAG": "STRING",
        "OBJECT_REV": "STRING",
        "PROPAGATION_ACTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "CURRENT_OBJECT_ID": "STRING",
        "CURRENT_REVISION": "STRING",
        "IDENTITY_COL": "NUMBER",
    }
    primary_key_columns = [
        "IDENTITY_COL",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLAN_NOTIF_PLAN_FK", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.OBJECT_TAG = parse_value(self.schema, column_value_map, "OBJECT_TAG")
        "User provided unique identifier of the multimedia object; can be NULL and can be modified."
        self.OBJECT_REV = parse_value(self.schema, column_value_map, "OBJECT_REV")
        "The system generated revision number of the multimedia object."
        self.PROPAGATION_ACTION = parse_value(self.schema, column_value_map, "PROPAGATION_ACTION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.CURRENT_OBJECT_ID = parse_value(self.schema, column_value_map, "CURRENT_OBJECT_ID")
        "Unique system generated identifier for a given multimedia object tht now has a more recent revision."
        self.CURRENT_REVISION = parse_value(self.schema, column_value_map, "CURRENT_REVISION")
        self.IDENTITY_COL = parse_value(self.schema, column_value_map, "IDENTITY_COL")

class SFPL_STEP_TEXT_SV_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFRPT_PRINT_OPTION:
    schema = {
        "REPORT_ID": "STRING",
        "OPTION_KEY": "STRING",
        "OPTION_NAME": "STRING",
        "OPTION_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "REPORT_ID",
        "OPTION_KEY",
    ]
    foreign_keys = [
        DbForeignKey("SFRPT_PRINT_OPTION_FK1", ["REPORT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REPORT_ID = parse_value(self.schema, column_value_map, "REPORT_ID")
        "Unique identification of report."
        self.OPTION_KEY = parse_value(self.schema, column_value_map, "OPTION_KEY")
        "Abbreviation form of print option."
        self.OPTION_NAME = parse_value(self.schema, column_value_map, "OPTION_NAME")
        "Description of print option."
        self.OPTION_FLAG = parse_value(self.schema, column_value_map, "OPTION_FLAG")
        "Possible values Y / N. If Y, some portion indicated by Print Option will be displayed in Report."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_CONFIG_DEF:
    schema = {
        "CONFIG_ID": "STRING",
        "CONFIG_NAME": "STRING",
        "CONFIG_DESC": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CONFIG_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_MFG_BOM_TOOL_CONFIG_FK2",
        "SFPL_MFG_BOM_CONFIG_TRANS_FK3",
        "SFPL_MFG_BOM_CONFIG_TRANS_FK2",
        "SFPL_MFG_BOM_COMP_CONFIG_FK1",
        "SFPL_MFG_BOM_MM_OBJ_CONFIG_FK2",
        "SFPL_MFG_BOM_COMP_CONF_ORG_FK1",
        "SFPL_EFF_GROUP_RANGE_FK3",
        "SFWID_ORDER_CONFIG_CONFIG_FK",
    ]
    def __init__(self, column_value_map):
        self.CONFIG_ID = parse_value(self.schema, column_value_map, "CONFIG_ID")
        "Unique system generated column to identify each configuration value."
        self.CONFIG_NAME = parse_value(self.schema, column_value_map, "CONFIG_NAME")
        "An attribute specified for BOM Component and used to filter the component parts list based on the build configuration(s) selected during work order create."
        self.CONFIG_DESC = parse_value(self.schema, column_value_map, "CONFIG_DESC")
        "Description about configuration."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFPL_MFG_BOM_TOOL_CONFIG_FK2 = []
        self.SFPL_MFG_BOM_CONFIG_TRANS_FK3 = []
        self.SFPL_MFG_BOM_CONFIG_TRANS_FK2 = []
        self.SFPL_MFG_BOM_COMP_CONFIG_FK1 = []
        self.SFPL_MFG_BOM_MM_OBJ_CONFIG_FK2 = []
        self.SFPL_MFG_BOM_COMP_CONF_ORG_FK1 = []
        self.SFPL_EFF_GROUP_RANGE_FK3 = []
        self.SFWID_ORDER_CONFIG_CONFIG_FK = []

class SFFND_AUTO_NUM_GEN_DEF:
    schema = {
        "NUM_GEN_NAME": "STRING",
        "SEQ_START": "NUMBER",
        "CURRENT_NUMBER": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "NUM_GEN_DESC": "STRING",
        "NUM_GEN_PREFIX": "STRING",
        "NUM_PADDING": "NUMBER",
        "NUM_GEN_SUFFIX": "STRING",
        "USAGE_TYPE": "STRING",
    }
    primary_key_columns = [
        "NUM_GEN_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_DISC_TYPE_DEF_FK16",
        "SFFND_DOC_TYPE_DEF_FK1",
        "SFPL_ITEM_DESC_MASTER_ALL_FK2",
        "SFWID_ORDER_TYPE_DEF_FK2",
    ]
    def __init__(self, column_value_map):
        self.NUM_GEN_NAME = parse_value(self.schema, column_value_map, "NUM_GEN_NAME")
        self.SEQ_START = parse_value(self.schema, column_value_map, "SEQ_START")
        self.CURRENT_NUMBER = parse_value(self.schema, column_value_map, "CURRENT_NUMBER")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.NUM_GEN_DESC = parse_value(self.schema, column_value_map, "NUM_GEN_DESC")
        self.NUM_GEN_PREFIX = parse_value(self.schema, column_value_map, "NUM_GEN_PREFIX")
        self.NUM_PADDING = parse_value(self.schema, column_value_map, "NUM_PADDING")
        self.NUM_GEN_SUFFIX = parse_value(self.schema, column_value_map, "NUM_GEN_SUFFIX")
        self.USAGE_TYPE = parse_value(self.schema, column_value_map, "USAGE_TYPE")
        self.SFQA_DISC_TYPE_DEF_FK16 = []
        self.SFFND_DOC_TYPE_DEF_FK1 = []
        self.SFPL_ITEM_DESC_MASTER_ALL_FK2 = []
        self.SFWID_ORDER_TYPE_DEF_FK2 = []

class SFRPT_SIGMA_VALUES_DEF:
    schema = {
        "SIGMA": "NUMBER",
        "Z_VALUE": "NUMBER",
        "PROBABILITY": "NUMBER",
        "DPMO_HIGH": "NUMBER",
        "DPMO_LOW": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
    }
    primary_key_columns = [
        "SIGMA",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SIGMA = parse_value(self.schema, column_value_map, "SIGMA")
        self.Z_VALUE = parse_value(self.schema, column_value_map, "Z_VALUE")
        self.PROBABILITY = parse_value(self.schema, column_value_map, "PROBABILITY")
        self.DPMO_HIGH = parse_value(self.schema, column_value_map, "DPMO_HIGH")
        self.DPMO_LOW = parse_value(self.schema, column_value_map, "DPMO_LOW")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."

class SFFND_ISSUING_AGENCY_DEF:
    schema = {
        "ISSUING_AGENCY": "STRING",
        "AGENCY_DESC": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ISSUING_AGENCY",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_SECURITY_GROUP_DEF_FK2",
        "SFFND_UID_ENTERPRISE_ID_FK01",
    ]
    def __init__(self, column_value_map):
        self.ISSUING_AGENCY = parse_value(self.schema, column_value_map, "ISSUING_AGENCY")
        self.AGENCY_DESC = parse_value(self.schema, column_value_map, "AGENCY_DESC")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFFND_SECURITY_GROUP_DEF_FK2 = []
        self.SFFND_UID_ENTERPRISE_ID_FK01 = []

class SFRPT_UCHART_OPERATIONS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "OPER_NO": "STRING",
        "ORDER_NO": "STRING",
        "ITEM_ID": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "ORDER_STATUS": "STRING",
        "ORDER_QTY": "NUMBER",
        "ACTUAL_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "OPER_STATUS": "STRING",
        "OUTLIER_FLAG": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        self.ORDER_STATUS = parse_value(self.schema, column_value_map, "ORDER_STATUS")
        self.ORDER_QTY = parse_value(self.schema, column_value_map, "ORDER_QTY")
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        self.OPER_STATUS = parse_value(self.schema, column_value_map, "OPER_STATUS")
        self.OUTLIER_FLAG = parse_value(self.schema, column_value_map, "OUTLIER_FLAG")

class SFCORE_PRINTER_PROPERTY_DEF:
    schema = {
        "PRINTER_ID": "STRING",
        "OS_NAME": "STRING",
        "UI_NAME": "STRING",
        "ID": "STRING",
        "UI": "STRING",
        "UI_VALUE": "STRING",
        "OS_VALUE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "PRINTER_ID",
        "OS_NAME",
    ]
    foreign_keys = [
        DbForeignKey("FWPPDEF_FWPDEF_FK", ["PRINTER_ID"], "SFCORE_PRINTER_DEF", ["PRINTER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PRINTER_ID = parse_value(self.schema, column_value_map, "PRINTER_ID")
        "Unique system generated identifier for a given printer."
        self.OS_NAME = parse_value(self.schema, column_value_map, "OS_NAME")
        "Operating system name for the parameter."
        self.UI_NAME = parse_value(self.schema, column_value_map, "UI_NAME")
        "Corresponding user interface name to prompt for."
        self.ID = parse_value(self.schema, column_value_map, "ID")
        "ID associated with the given printer property."
        self.UI = parse_value(self.schema, column_value_map, "UI")
        "Flag that indicates of user interface mappings exist and should be prompted for."
        self.UI_VALUE = parse_value(self.schema, column_value_map, "UI_VALUE")
        "UI value."
        self.OS_VALUE = parse_value(self.schema, column_value_map, "OS_VALUE")
        "Operating system value for the parameter."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFFND_GLOBAL_CONFIGURATION:
    schema = {
        "CONFIG_MODULE_NAME": "STRING",
        "PARAMETER_NAME": "STRING",
        "PARAMETER_VALUE": "STRING",
        "PARAMETER_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CONFIG_MODULE_NAME",
        "PARAMETER_NAME",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_GLOBALCONF_CONFMODULE_FK", ["CONFIG_MODULE_NAME"], "SFFND_CONFIG_MODULE_DEF", ["CONFIG_MODULE_NAME"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONFIG_MODULE_NAME = parse_value(self.schema, column_value_map, "CONFIG_MODULE_NAME")
        self.PARAMETER_NAME = parse_value(self.schema, column_value_map, "PARAMETER_NAME")
        self.PARAMETER_VALUE = parse_value(self.schema, column_value_map, "PARAMETER_VALUE")
        self.PARAMETER_DESC = parse_value(self.schema, column_value_map, "PARAMETER_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_DCTYPE_SELECT_DEF:
    schema = {
        "STD_DATCOL_ID": "STRING",
        "DC_VALUE": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "VALID_RESULT_FLAG": "STRING",
        "DC_DESC": "STRING",
    }
    primary_key_columns = [
        "STD_DATCOL_ID",
        "DC_VALUE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_DCTYPE_SELECT_DEF_FK1", ["STD_DATCOL_ID"], "SFFND_STD_DATCOL_TYPE_DEF", ["STD_DATCOL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.STD_DATCOL_ID = parse_value(self.schema, column_value_map, "STD_DATCOL_ID")
        self.DC_VALUE = parse_value(self.schema, column_value_map, "DC_VALUE")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.VALID_RESULT_FLAG = parse_value(self.schema, column_value_map, "VALID_RESULT_FLAG")
        self.DC_DESC = parse_value(self.schema, column_value_map, "DC_DESC")

class SFFND_CHANGE_REQUEST_TASK:
    schema = {
        "TASK_ID": "STRING",
        "CHANGE_REQUEST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "TASK_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_CHANGE_REQUEST_TASK_FK2", ["TASK_ID"], "SFFND_TASK", ["TASK_ID"]),
        DbForeignKey("SFFND_CHANGE_REQUEST_TASK_FK1", ["CHANGE_REQUEST_ID"], "SFPL_CHANGE_REQUEST", ["CHANGE_REQUEST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TASK_ID = parse_value(self.schema, column_value_map, "TASK_ID")
        "Unique Identifier of a task for work flow control. Specifically a task for Change Request."
        self.CHANGE_REQUEST_ID = parse_value(self.schema, column_value_map, "CHANGE_REQUEST_ID")
        "Unique System Generated Identifier of a Change Request."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_AUDIT_LEVEL_CRITERIA:
    schema = {
        "ADV_CRITERIA_ID": "STRING",
        "AUDIT_LEVEL": "NUMBER",
        "FROM_TRANSACTION_RATE": "NUMBER",
        "THRU_TRANSACTION_RATE": "NUMBER",
        "NO_OF_OVER_INSP_UNITS_TO_ADV": "NUMBER",
        "NO_OF_OVER_INSP_DCS_TO_ADV": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ADV_CRITERIA_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_AUDIT_LVL_CRITERIA_FK1", ["AUDIT_LEVEL"], "SFFND_AUDIT_LEVEL_DEF", ["AUDIT_LEVEL"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ADV_CRITERIA_ID = parse_value(self.schema, column_value_map, "ADV_CRITERIA_ID")
        "System generated unique ID for audit criteria."
        self.AUDIT_LEVEL = parse_value(self.schema, column_value_map, "AUDIT_LEVEL")
        "Audit Level."
        self.FROM_TRANSACTION_RATE = parse_value(self.schema, column_value_map, "FROM_TRANSACTION_RATE")
        "From Transaction Rate to Advance Level."
        self.THRU_TRANSACTION_RATE = parse_value(self.schema, column_value_map, "THRU_TRANSACTION_RATE")
        "Thru Transaction Rate to Advance Level."
        self.NO_OF_OVER_INSP_UNITS_TO_ADV = parse_value(self.schema, column_value_map, "NO_OF_OVER_INSP_UNITS_TO_ADV")
        "No of Good Over Inspected Units/Lots to Advance."
        self.NO_OF_OVER_INSP_DCS_TO_ADV = parse_value(self.schema, column_value_map, "NO_OF_OVER_INSP_DCS_TO_ADV")
        "No of Good Over Inspected DCs to Advance."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_SER_OPER_MTRL_DAT_COL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "ASGND_MATERIAL_ID": "STRING",
        "MATERIAL_DAT_COL_ID": "STRING",
        "ASGND_MATERIAL_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "SERIAL_NO": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "LOT_NO": "STRING",
        "QUANTITY": "NUMBER",
        "MATERIAL_SERIAL_ID": "STRING",
        "MATERIAL_LOT_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        self.ASGND_MATERIAL_ID = parse_value(self.schema, column_value_map, "ASGND_MATERIAL_ID")
        self.MATERIAL_DAT_COL_ID = parse_value(self.schema, column_value_map, "MATERIAL_DAT_COL_ID")
        self.ASGND_MATERIAL_NAME = parse_value(self.schema, column_value_map, "ASGND_MATERIAL_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        self.QUANTITY = parse_value(self.schema, column_value_map, "QUANTITY")
        self.MATERIAL_SERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_SERIAL_ID")
        self.MATERIAL_LOT_ID = parse_value(self.schema, column_value_map, "MATERIAL_LOT_ID")

class SFCORE_REPORT_DEF:
    schema = {
        "OBJECT_ID": "STRING",
        "REPORT_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "CATEGORY": "STRING",
        "STATUS": "STRING",
        "REPORT_DESC": "STRING",
    }
    primary_key_columns = [
        "OBJECT_ID",
        "REPORT_NAME",
    ]
    foreign_keys = [
        DbForeignKey("FWRDEF_FWMMOBJ_FK", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
        "FWRPRM_FWRDEF_FK",
        "FWREPPRIV_REPORT_FK",
    ]
    def __init__(self, column_value_map):
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.REPORT_NAME = parse_value(self.schema, column_value_map, "REPORT_NAME")
        "User defineable name for a given report."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.CATEGORY = parse_value(self.schema, column_value_map, "CATEGORY")
        "The category of a given multimedia object."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The status of the disposition/rework task. For example: IN PROCESS, DISPOSITIONED, or COMPLETE."
        self.REPORT_DESC = parse_value(self.schema, column_value_map, "REPORT_DESC")
        "Description of the report."
        self.FWRPRM_FWRDEF_FK = []
        self.FWREPPRIV_REPORT_FK = []

class SFCORE_MT_NODE:
    schema = {
        "MT_NODE_ID": "STRING",
        "MACHINE_NAME": "STRING",
        "IP_ADDRESS": "STRING",
        "START_TIME_STAMP_DATE": "DATE",
        "LAST_ACTIVE_TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "MT_NODE_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.MT_NODE_ID = parse_value(self.schema, column_value_map, "MT_NODE_ID")
        "Unique middle tier node id."
        self.MACHINE_NAME = parse_value(self.schema, column_value_map, "MACHINE_NAME")
        " Name of the middle tier machine."
        self.IP_ADDRESS = parse_value(self.schema, column_value_map, "IP_ADDRESS")
        "IP  address of the middle tier machine."
        self.START_TIME_STAMP_DATE = parse_value(self.schema, column_value_map, "START_TIME_STAMP_DATE")
        "Starting  time of the middle tier machine."
        self.LAST_ACTIVE_TIME_STAMP = parse_value(self.schema, column_value_map, "LAST_ACTIVE_TIME_STAMP")
        "Last activity time from the middle tier."

class SFPL_PLAN_RETURN_INFO:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "RETURN_NODE_ID": "STRING",
        "RETURN_TO_NODE_ID": "STRING",
        "PATH_NODE_ID": "STRING",
        "MERGE_POINT_FLAG": "STRING",
        "ORDER_KEY": "NUMBER",
        "PATH_NODE_NO": "STRING",
        "PATH_OPER_KEY": "NUMBER",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_UPDT_NO",
        "RETURN_NODE_ID",
        "RETURN_TO_NODE_ID",
        "PATH_NODE_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.RETURN_NODE_ID = parse_value(self.schema, column_value_map, "RETURN_NODE_ID")
        self.RETURN_TO_NODE_ID = parse_value(self.schema, column_value_map, "RETURN_TO_NODE_ID")
        self.PATH_NODE_ID = parse_value(self.schema, column_value_map, "PATH_NODE_ID")
        self.MERGE_POINT_FLAG = parse_value(self.schema, column_value_map, "MERGE_POINT_FLAG")
        self.ORDER_KEY = parse_value(self.schema, column_value_map, "ORDER_KEY")
        self.PATH_NODE_NO = parse_value(self.schema, column_value_map, "PATH_NODE_NO")
        self.PATH_OPER_KEY = parse_value(self.schema, column_value_map, "PATH_OPER_KEY")

class SFPL_OPERATION_TEXT:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "OPER_UPDT_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "OPER_UPDT_NO",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_OPERTXT_PLANDESC_FK", ["PLAN_ID","OPER_KEY","OPER_UPDT_NO"], "SFPL_OPERATION_DESC", ["PLAN_ID","OPER_KEY","OPER_UPDT_NO"]),
    ]
    refs = [
        "SFFND_HTREF_OPER_TEXT_OT_FK",
        "SFPL_OPERATION_TEXT_SV_FK1",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        "Unique, system-generated sequence number identifying a given version/revision/alteration of a given operation description."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.SFFND_HTREF_OPER_TEXT_OT_FK = []
        self.SFPL_OPERATION_TEXT_SV_FK1 = []

class SFQA_LINKED_CA:
    schema = {
        "CA_ID": "STRING",
        "LINKED_CA_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "LINKED_CA_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_LINKED_CA_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_LINKED_CA_FK2", ["LINKED_CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.LINKED_CA_ID = parse_value(self.schema, column_value_map, "LINKED_CA_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFFND_USER_CERTS:
    schema = {
        "USERID": "STRING",
        "CERT": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "EFF_DATE": "STRING",
        "EXP_DATE": "STRING",
        "CERT_STAMP_NO": "STRING",
    }
    primary_key_columns = [
        "USERID",
        "CERT",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_USRCRT_USERS_FK", ["USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFFND_USRCRT_CRT_FK", ["CERT"], "SFFND_CERT_DEF", ["CERT"]),
    ]
    refs = [
        "SFFND_USER_CERTS_XREF_FK1",
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        "The unique identifier of a particular certification possessed by the user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.EFF_DATE = parse_value(self.schema, column_value_map, "EFF_DATE")
        "The effective date of the certification."
        self.EXP_DATE = parse_value(self.schema, column_value_map, "EXP_DATE")
        "The expiration date of the certification."
        self.CERT_STAMP_NO = parse_value(self.schema, column_value_map, "CERT_STAMP_NO")
        self.SFFND_USER_CERTS_XREF_FK1 = []

class OAUTH2_AUTHORIZATION_CONSENT:
    schema = {
        "REGISTERED_CLIENT_ID": "STRING",
        "PRINCIPAL_NAME": "STRING",
        "AUTHORITIES": "STRING",
    }
    primary_key_columns = [
        "REGISTERED_CLIENT_ID",
        "PRINCIPAL_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REGISTERED_CLIENT_ID = parse_value(self.schema, column_value_map, "REGISTERED_CLIENT_ID")
        self.PRINCIPAL_NAME = parse_value(self.schema, column_value_map, "PRINCIPAL_NAME")
        self.AUTHORITIES = parse_value(self.schema, column_value_map, "AUTHORITIES")

class SFFND_HTREF_OPER_TEXT:
    schema = {
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "OBJECT_TYPE": "STRING",
        "OBJECT_NAME": "STRING",
        "OPER_UPDT_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "PLAN_ID",
        "OPER_KEY",
        "OPER_UPDT_NO",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("BLOCKID_FK10", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
        DbForeignKey("SFFND_HTREF_OPER_TEXT_OT_FK", ["PLAN_ID","OPER_KEY","OPER_UPDT_NO","TEXT_TYPE"], "SFPL_OPERATION_TEXT", ["PLAN_ID","OPER_KEY","OPER_UPDT_NO","TEXT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "The system generated unique identifier of an object link embedded in a work plan operation text block."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "The unique identifier of the object being referenced."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The object type/class which the object belongs to. For example: CAD drawing, still image, slide, UDV, standard text, audio, or video."
        self.OBJECT_NAME = parse_value(self.schema, column_value_map, "OBJECT_NAME")
        "A descriptive tag/name of the object."
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        "The sequence number of a particular copy/description of the work plan operation."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "The protocol id of a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "The host id of a Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "The file location of a Universal Resource Locator."

class SFQA_DISC_CAUSE:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "CAUSE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "RESP_RESOURCE_TYPE": "STRING",
        "DEFECT_TYPE": "STRING",
        "RELATED_TOOL_NO": "STRING",
        "RELATED_MACHINE_NO": "STRING",
        "MAIN_CAUSE_FLAG": "STRING",
        "PROCESS_TYPE": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "CAUSE_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_CAUSE_FK1", ["RESP_RESOURCE_TYPE"], "SFQA_RESP_RESOURCE_TYPE_DEF", ["RESP_RESOURCE_TYPE"]),
        DbForeignKey("SFQA_DISC_CAUSE_FK3", ["PROCESS_TYPE","DEFECT_TYPE"], "SFQA_DEFECT_TYPE_DEF", ["PROCESS_TYPE","DEFECT_TYPE"]),
        DbForeignKey("SFQA_DISC_CAUSE_DISC_ITEM_FK", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.CAUSE_TYPE = parse_value(self.schema, column_value_map, "CAUSE_TYPE")
        "Type or classification of cause/origin leading to a discrepancy."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.RESP_RESOURCE_TYPE = parse_value(self.schema, column_value_map, "RESP_RESOURCE_TYPE")
        "Type of resource of cause/origin leading to a discrepancy. Possible values are Part, Tool, Machine, Facilities, Skill, Process, System, and Other."
        self.DEFECT_TYPE = parse_value(self.schema, column_value_map, "DEFECT_TYPE")
        "Type or classification of defect."
        self.RELATED_TOOL_NO = parse_value(self.schema, column_value_map, "RELATED_TOOL_NO")
        "Related Tool No."
        self.RELATED_MACHINE_NO = parse_value(self.schema, column_value_map, "RELATED_MACHINE_NO")
        "Related Machine No."
        self.MAIN_CAUSE_FLAG = parse_value(self.schema, column_value_map, "MAIN_CAUSE_FLAG")
        "This Flag (Y/N) is indicating whether the Cause is Main Cause. 'Y' indicates, it is Main Cause."
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        "A particular class/type of manufacturing process."

class SFWID_OPER_TEXT:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "TEXT": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_TEXT_FK01", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
        DbForeignKey("SFWID_OPER_TEXT_DESC_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_OPER_TEXT_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
        "SFFND_HTREF_WID_OPERTXT_FK",
        "SFWID_OPER_TEXT_SV_FK1",
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        self.SFFND_HTREF_WID_OPERTXT_FK = []
        self.SFWID_OPER_TEXT_SV_FK1 = []

class SFSQA_INSP_PLAN_STEP_INCL_CTRL:
    schema = {
        "INSP_PLAN_ID": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "INSP_STEP_ID": "STRING",
        "DPPM_FROM": "NUMBER",
        "DPPM_TO": "NUMBER",
        "FREQUENCY": "NUMBER",
        "RANDOM_PERCENT": "NUMBER",
        "MAX_DAYS_TO_NEXT_INCLUSION": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "INSP_PLAN_ID",
        "INSP_PLAN_REV",
        "INSP_STEP_ID",
        "DPPM_FROM",
        "DPPM_TO",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_PLAN_IS_INCCTRL_FK1", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID"], "SFSQA_INSP_PLAN_INSP_STEPS", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.DPPM_FROM = parse_value(self.schema, column_value_map, "DPPM_FROM")
        self.DPPM_TO = parse_value(self.schema, column_value_map, "DPPM_TO")
        self.FREQUENCY = parse_value(self.schema, column_value_map, "FREQUENCY")
        self.RANDOM_PERCENT = parse_value(self.schema, column_value_map, "RANDOM_PERCENT")
        self.MAX_DAYS_TO_NEXT_INCLUSION = parse_value(self.schema, column_value_map, "MAX_DAYS_TO_NEXT_INCLUSION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFFND_SECURITY_GROUP_DEF:
    schema = {
        "SECURITY_GROUP": "STRING",
        "EXPIRATION_DATE": "STRING",
        "ISSUING_AGENCY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "SECURITY_GROUP_TYPE": "STRING",
        "SECURITY_GROUP_DESC": "STRING",
        "UCF_SEC_GRP_VCH1": "STRING",
        "UCF_SEC_GRP_VCH2": "STRING",
        "UCF_SEC_GRP_VCH3": "STRING",
        "UCF_SEC_GRP_VCH4": "STRING",
        "UCF_SEC_GRP_VCH5": "STRING",
        "UCF_SEC_GRP_VCH6": "STRING",
        "UCF_SEC_GRP_VCH7": "STRING",
        "UCF_SEC_GRP_VCH8": "STRING",
        "UCF_SEC_GRP_VCH9": "STRING",
        "UCF_SEC_GRP_VCH10": "STRING",
        "UCF_SEC_GRP_VCH11": "STRING",
        "UCF_SEC_GRP_VCH12": "STRING",
        "UCF_SEC_GRP_VCH13": "STRING",
        "UCF_SEC_GRP_VCH14": "STRING",
        "UCF_SEC_GRP_VCH15": "STRING",
        "UCF_SEC_GRP_NUM1": "NUMBER",
        "UCF_SEC_GRP_NUM2": "NUMBER",
        "UCF_SEC_GRP_NUM3": "NUMBER",
        "UCF_SEC_GRP_NUM4": "NUMBER",
        "UCF_SEC_GRP_NUM5": "NUMBER",
        "UCF_SEC_GRP_DATE1": "STRING",
        "UCF_SEC_GRP_DATE2": "STRING",
        "UCF_SEC_GRP_DATE3": "STRING",
        "UCF_SEC_GRP_DATE4": "STRING",
        "UCF_SEC_GRP_DATE5": "STRING",
        "UCF_SEC_GRP_FLAG1": "STRING",
        "UCF_SEC_GRP_FLAG2": "STRING",
        "UCF_SEC_GRP_FLAG3": "STRING",
        "UCF_SEC_GRP_FLAG4": "STRING",
        "UCF_SEC_GRP_FLAG5": "STRING",
        "UCF_SEC_GRP_VCH255_1": "STRING",
        "UCF_SEC_GRP_VCH255_2": "STRING",
        "UCF_SEC_GRP_VCH255_3": "STRING",
        "UCF_SEC_GRP_VCH4000_1": "STRING",
        "UCF_SEC_GRP_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "SECURITY_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_SECURITY_GROUP_DEF_FK1", ["SECURITY_GROUP_TYPE"], "SFFND_SECURITY_GROUP_TYPE_DEF", ["SECURITY_GROUP_TYPE"]),
        DbForeignKey("SFFND_SECURITY_GROUP_DEF_FK2", ["ISSUING_AGENCY"], "SFFND_ISSUING_AGENCY_DEF", ["ISSUING_AGENCY"]),
    ]
    refs = [
        "SFPL_PLAN_DESC_SEC_GRP_FK1",
        "SFPL_ITEM_DESC_SEC_GRP_FK1",
        "SFSQA_INSP_ORDER_SEC_GRP_FK2",
        "SFWID_ORDER_SEC_GRP_FK1",
        "SFQA_DISC_ITEM_SEC_GRP_FK2",
        "SFSQA_INSP_DEF_REV_SEC_GRP_FK2",
        "SFWID_GROUP_JOB_SEC_GRP_FK2",
        "SFFND_USER_SEC_GROUP_XREF_FK1",
        "SFPL_BOM_REV_SEC_GRP_XREF_FK1",
        "SFCORE_MM_OBJECT_SEC_GRP_FK2",
    ]
    def __init__(self, column_value_map):
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.EXPIRATION_DATE = parse_value(self.schema, column_value_map, "EXPIRATION_DATE")
        self.ISSUING_AGENCY = parse_value(self.schema, column_value_map, "ISSUING_AGENCY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.SECURITY_GROUP_TYPE = parse_value(self.schema, column_value_map, "SECURITY_GROUP_TYPE")
        self.SECURITY_GROUP_DESC = parse_value(self.schema, column_value_map, "SECURITY_GROUP_DESC")
        self.UCF_SEC_GRP_VCH1 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH1")
        self.UCF_SEC_GRP_VCH2 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH2")
        self.UCF_SEC_GRP_VCH3 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH3")
        self.UCF_SEC_GRP_VCH4 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH4")
        self.UCF_SEC_GRP_VCH5 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH5")
        self.UCF_SEC_GRP_VCH6 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH6")
        self.UCF_SEC_GRP_VCH7 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH7")
        self.UCF_SEC_GRP_VCH8 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH8")
        self.UCF_SEC_GRP_VCH9 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH9")
        self.UCF_SEC_GRP_VCH10 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH10")
        self.UCF_SEC_GRP_VCH11 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH11")
        self.UCF_SEC_GRP_VCH12 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH12")
        self.UCF_SEC_GRP_VCH13 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH13")
        self.UCF_SEC_GRP_VCH14 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH14")
        self.UCF_SEC_GRP_VCH15 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH15")
        self.UCF_SEC_GRP_NUM1 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_NUM1")
        self.UCF_SEC_GRP_NUM2 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_NUM2")
        self.UCF_SEC_GRP_NUM3 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_NUM3")
        self.UCF_SEC_GRP_NUM4 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_NUM4")
        self.UCF_SEC_GRP_NUM5 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_NUM5")
        self.UCF_SEC_GRP_DATE1 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_DATE1")
        self.UCF_SEC_GRP_DATE2 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_DATE2")
        self.UCF_SEC_GRP_DATE3 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_DATE3")
        self.UCF_SEC_GRP_DATE4 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_DATE4")
        self.UCF_SEC_GRP_DATE5 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_DATE5")
        self.UCF_SEC_GRP_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_FLAG1")
        self.UCF_SEC_GRP_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_FLAG2")
        self.UCF_SEC_GRP_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_FLAG3")
        self.UCF_SEC_GRP_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_FLAG4")
        self.UCF_SEC_GRP_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_FLAG5")
        self.UCF_SEC_GRP_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SEC_GRP_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SEC_GRP_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SEC_GRP_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_SEC_GRP_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SEC_GRP_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.SFPL_PLAN_DESC_SEC_GRP_FK1 = []
        self.SFPL_ITEM_DESC_SEC_GRP_FK1 = []
        self.SFSQA_INSP_ORDER_SEC_GRP_FK2 = []
        self.SFWID_ORDER_SEC_GRP_FK1 = []
        self.SFQA_DISC_ITEM_SEC_GRP_FK2 = []
        self.SFSQA_INSP_DEF_REV_SEC_GRP_FK2 = []
        self.SFWID_GROUP_JOB_SEC_GRP_FK2 = []
        self.SFFND_USER_SEC_GROUP_XREF_FK1 = []
        self.SFPL_BOM_REV_SEC_GRP_XREF_FK1 = []
        self.SFCORE_MM_OBJECT_SEC_GRP_FK2 = []

class SFQA_CA_PROCESS:
    schema = {
        "CA_ID": "STRING",
        "PROCESS_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DEFECT_TYPE": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "PROCESS_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CADESC_PROCLOCDEPTWCS_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CADESC_PROCLOCDEPTWCS_FK2", ["PROCESS_TYPE"], "SFFND_PROCESS_TYPE_DEF", ["PROCESS_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.DEFECT_TYPE = parse_value(self.schema, column_value_map, "DEFECT_TYPE")
        "Type or classification of defect."

class SFWID_ALT_CHG_LOG:
    schema = {
        "CHG_LOG_ID": "STRING",
        "ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LOG_ACTION": "STRING",
        "TABLE_NAME": "STRING",
        "KEY_VALUE1": "STRING",
        "KEY_VALUE2": "STRING",
        "KEY_VALUE3": "STRING",
        "KEY_VALUE4": "STRING",
        "KEY_VALUE5": "STRING",
        "KEY_VALUE6": "STRING",
        "KEY_VALUE7": "STRING",
        "KEY_VALUE8": "STRING",
        "REF1": "STRING",
        "REF2": "STRING",
        "REF3": "STRING",
        "REF4": "STRING",
        "REF5": "STRING",
        "REF6": "STRING",
        "REF7": "STRING",
        "REF8": "STRING",
        "COLUMN_NAME": "STRING",
        "OLD_VALUE": "STRING",
        "NEW_VALUE": "STRING",
        "OLD_TEXT": "STRING",
        "NEW_TEXT": "STRING",
        "CHANGE_SEQ": "NUMBER",
        "REF9": "STRING",
    }
    primary_key_columns = [
        "CHG_LOG_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ALT_CHG_LOG_FK2", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ALT_CHG_LOG_FK1", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CHG_LOG_ID = parse_value(self.schema, column_value_map, "CHG_LOG_ID")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LOG_ACTION = parse_value(self.schema, column_value_map, "LOG_ACTION")
        self.TABLE_NAME = parse_value(self.schema, column_value_map, "TABLE_NAME")
        self.KEY_VALUE1 = parse_value(self.schema, column_value_map, "KEY_VALUE1")
        self.KEY_VALUE2 = parse_value(self.schema, column_value_map, "KEY_VALUE2")
        self.KEY_VALUE3 = parse_value(self.schema, column_value_map, "KEY_VALUE3")
        self.KEY_VALUE4 = parse_value(self.schema, column_value_map, "KEY_VALUE4")
        self.KEY_VALUE5 = parse_value(self.schema, column_value_map, "KEY_VALUE5")
        self.KEY_VALUE6 = parse_value(self.schema, column_value_map, "KEY_VALUE6")
        self.KEY_VALUE7 = parse_value(self.schema, column_value_map, "KEY_VALUE7")
        self.KEY_VALUE8 = parse_value(self.schema, column_value_map, "KEY_VALUE8")
        self.REF1 = parse_value(self.schema, column_value_map, "REF1")
        self.REF2 = parse_value(self.schema, column_value_map, "REF2")
        self.REF3 = parse_value(self.schema, column_value_map, "REF3")
        self.REF4 = parse_value(self.schema, column_value_map, "REF4")
        self.REF5 = parse_value(self.schema, column_value_map, "REF5")
        self.REF6 = parse_value(self.schema, column_value_map, "REF6")
        self.REF7 = parse_value(self.schema, column_value_map, "REF7")
        self.REF8 = parse_value(self.schema, column_value_map, "REF8")
        self.COLUMN_NAME = parse_value(self.schema, column_value_map, "COLUMN_NAME")
        self.OLD_VALUE = parse_value(self.schema, column_value_map, "OLD_VALUE")
        self.NEW_VALUE = parse_value(self.schema, column_value_map, "NEW_VALUE")
        self.OLD_TEXT = parse_value(self.schema, column_value_map, "OLD_TEXT")
        self.NEW_TEXT = parse_value(self.schema, column_value_map, "NEW_TEXT")
        self.CHANGE_SEQ = parse_value(self.schema, column_value_map, "CHANGE_SEQ")
        self.REF9 = parse_value(self.schema, column_value_map, "REF9")
        "This Column will maintaining the New Value of FORMAT."

class SFPL_MFG_BOM_REV_LINE_NO_ORIG:
    schema = {
        "BOM_ID": "STRING",
        "BOM_LINE_ID": "STRING",
        "LINE_NO": "STRING",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
        "TIME_STAMP": "DATE",
        "LINE_DESC": "STRING",
        "STD_ITEM_ID": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH1": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH2": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH3": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH4": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH5": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH6": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH7": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH8": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH9": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH10": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH11": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH12": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH13": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH14": "STRING",
        "UCF_BOM_LINE_NO_ORIG_VCH15": "STRING",
        "UCF_BOM_LINE_NO_ORIG_NUM1": "NUMBER",
        "UCF_BOM_LINE_NO_ORIG_NUM2": "NUMBER",
        "UCF_BOM_LINE_NO_ORIG_NUM3": "NUMBER",
        "UCF_BOM_LINE_NO_ORIG_NUM4": "NUMBER",
        "UCF_BOM_LINE_NO_ORIG_NUM5": "NUMBER",
        "UCF_BOM_LINE_NO_ORIG_DATE1": "STRING",
        "UCF_BOM_LINE_NO_ORIG_DATE2": "STRING",
        "UCF_BOM_LINE_NO_ORIG_DATE3": "STRING",
        "UCF_BOM_LINE_NO_ORIG_DATE4": "STRING",
        "UCF_BOM_LINE_NO_ORIG_DATE5": "STRING",
        "UCF_BOM_LINE_NO_ORIG_FLAG1": "STRING",
        "UCF_BOM_LINE_NO_ORIG_FLAG2": "STRING",
        "UCF_BOM_LINE_NO_ORIG_FLAG3": "STRING",
        "UCF_BOM_LINE_NO_ORIG_FLAG4": "STRING",
        "UCF_BOM_LINE_NO_ORIG_FLAG5": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
        "BOM_LINE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_REV_LINE_ORIG_FK2", ["STD_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_REV_LINE_ORIG_FK1", ["BOM_ID"], "SFPL_MFG_BOM_REV_ORIG", ["BOM_ID"]),
    ]
    refs = [
        "SFPL_MFG_BOM_MM_OBJ_ORIG_FK3",
        "SFPL_MFG_BOM_TOOL_ORIG_FK7",
        "SFPL_MFG_BOM_COMP_ORIG_FK1",
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Corresponding BOM for which BOM Component is added."
        self.BOM_LINE_ID = parse_value(self.schema, column_value_map, "BOM_LINE_ID")
        "Reference of BOM Line of the BOM Component."
        self.LINE_NO = parse_value(self.schema, column_value_map, "LINE_NO")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LINE_DESC = parse_value(self.schema, column_value_map, "LINE_DESC")
        self.STD_ITEM_ID = parse_value(self.schema, column_value_map, "STD_ITEM_ID")
        "Item Id of standard part associated with BOM Line."
        self.UCF_BOM_LINE_NO_ORIG_VCH1 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH2 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH3 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH4 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH5 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH6 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH7 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH8 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH9 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH10 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH11 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH12 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH13 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH14 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_VCH15 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_ORIG_NUM1 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_BOM_LINE_NO_ORIG_NUM2 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_BOM_LINE_NO_ORIG_NUM3 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_BOM_LINE_NO_ORIG_NUM4 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_BOM_LINE_NO_ORIG_NUM5 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_BOM_LINE_NO_ORIG_DATE1 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_BOM_LINE_NO_ORIG_DATE2 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_BOM_LINE_NO_ORIG_DATE3 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_BOM_LINE_NO_ORIG_DATE4 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_BOM_LINE_NO_ORIG_DATE5 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_BOM_LINE_NO_ORIG_FLAG1 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_BOM_LINE_NO_ORIG_FLAG2 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_BOM_LINE_NO_ORIG_FLAG3 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_BOM_LINE_NO_ORIG_FLAG4 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_BOM_LINE_NO_ORIG_FLAG5 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_ORIG_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.SFPL_MFG_BOM_MM_OBJ_ORIG_FK3 = []
        self.SFPL_MFG_BOM_TOOL_ORIG_FK7 = []
        self.SFPL_MFG_BOM_COMP_ORIG_FK1 = []

class SFPL_ITEM_MM_OBJECT_XREF:
    schema = {
        "ITEM_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "DEFAULT_FLAG": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_ITEM_MM_OBJ_XREF_FK2", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_ITEM_MM_OBJ_XREF_FK1", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.DEFAULT_FLAG = parse_value(self.schema, column_value_map, "DEFAULT_FLAG")
        "Value Y means the MM Object is default for that Item. Only 1 MM Object can have DEFAULT_FLAG=Y for a particular Item."

class SFWID_ORDER_LIENS:
    schema = {
        "LIEN_ID": "STRING",
        "PART_NO": "STRING",
        "INH_LIEN_ID": "STRING",
        "LOT_ID": "STRING",
        "ORDER_ID": "STRING",
        "LIEN_STATUS": "STRING",
        "SERIAL_ID": "STRING",
        "LIEN_START_DATE": "STRING",
        "LIEN_END_DATE": "STRING",
        "LIEN_WO_PERSIST_AUTH_FLAG": "STRING",
        "AUTHORIZATION_NOTES": "STRING",
        "LIEN_PERSIST_UPTO_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SERIAL_NO": "STRING",
        "LOT_NO": "STRING",
    }
    primary_key_columns = [
        "LIEN_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_LIENS_FK2", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_LIENS_FK1", ["PART_NO","LOT_NO","SERIAL_NO"], "SFWID_AS_WORKED_ITEM", ["PART_NO","LOT_NO","SERIAL_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.LIEN_ID = parse_value(self.schema, column_value_map, "LIEN_ID")
        "Unique identifier of the Lien."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.INH_LIEN_ID = parse_value(self.schema, column_value_map, "INH_LIEN_ID")
        "The unique identifier of the lien being inherited."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique identifier of the Lot."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Identifier of the Order on which the Lien is created."
        self.LIEN_STATUS = parse_value(self.schema, column_value_map, "LIEN_STATUS")
        "Status of the Lien/Inherited lien."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique identifier of the Serial."
        self.LIEN_START_DATE = parse_value(self.schema, column_value_map, "LIEN_START_DATE")
        "Timestamp on which the discrepancy is created for the unit."
        self.LIEN_END_DATE = parse_value(self.schema, column_value_map, "LIEN_END_DATE")
        "Timestamp on which the lien is closed, or cancelled."
        self.LIEN_WO_PERSIST_AUTH_FLAG = parse_value(self.schema, column_value_map, "LIEN_WO_PERSIST_AUTH_FLAG")
        "Indicates whether an authorization for the lien must be persisted."
        self.AUTHORIZATION_NOTES = parse_value(self.schema, column_value_map, "AUTHORIZATION_NOTES")
        "Authorization Notes."
        self.LIEN_PERSIST_UPTO_ITEM_ID = parse_value(self.schema, column_value_map, "LIEN_PERSIST_UPTO_ITEM_ID")
        "Indicates the item id of the higher level unit that must be held when the discrepancy lien is inherited."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."

class SFLTA_JOB_ERROR:
    schema = {
        "JOB_ERR_ID": "NUMBER",
        "JOB_ID": "STRING",
        "ERROR_CODE": "STRING",
        "ERROR_MSG": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "JOB_ERR_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFLTA_JOB_ERROR_JOB_DEF_FK", ["JOB_ID"], "SFLTA_JOB_DEF", ["JOB_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.JOB_ERR_ID = parse_value(self.schema, column_value_map, "JOB_ERR_ID")
        self.JOB_ID = parse_value(self.schema, column_value_map, "JOB_ID")
        self.ERROR_CODE = parse_value(self.schema, column_value_map, "ERROR_CODE")
        self.ERROR_MSG = parse_value(self.schema, column_value_map, "ERROR_MSG")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")

class SFFND_TOOL_SRL_DEF_ISSUE_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
        "TOOL_SERIAL_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "CUMLATV_USE_CTR": "NUMBER",
        "CUMLATV_HOURS_CTR": "NUMBER",
        "STATUS": "STRING",
        "MANUFACTURER_CODE": "STRING",
        "OUT_OF_SERVICE_DATE": "STRING",
        "MISSING_DATE": "STRING",
        "TO_REPAIR_DATE": "STRING",
        "EST_INSERVICE_DATE": "STRING",
        "COMMENTS": "STRING",
        "UCF_TOOLSRL_VCH1": "STRING",
        "UCF_TOOLSRL_VCH2": "STRING",
        "UCF_TOOLSRL_VCH3": "STRING",
        "UCF_TOOLSRL_VCH4": "STRING",
        "UCF_TOOLSRL_VCH5": "STRING",
        "UCF_TOOLSRL_VCH6": "STRING",
        "UCF_TOOLSRL_VCH7": "STRING",
        "UCF_TOOLSRL_VCH8": "STRING",
        "UCF_TOOLSRL_VCH9": "STRING",
        "UCF_TOOLSRL_VCH10": "STRING",
        "UCF_TOOLSRL_VCH11": "STRING",
        "UCF_TOOLSRL_VCH12": "STRING",
        "UCF_TOOLSRL_VCH13": "STRING",
        "UCF_TOOLSRL_VCH14": "STRING",
        "UCF_TOOLSRL_VCH15": "STRING",
        "UCF_TOOLSRL_NUM1": "NUMBER",
        "UCF_TOOLSRL_NUM2": "NUMBER",
        "UCF_TOOLSRL_NUM3": "NUMBER",
        "UCF_TOOLSRL_NUM4": "NUMBER",
        "UCF_TOOLSRL_NUM5": "NUMBER",
        "UCF_TOOLSRL_DATE1": "STRING",
        "UCF_TOOLSRL_DATE2": "STRING",
        "UCF_TOOLSRL_DATE3": "STRING",
        "UCF_TOOLSRL_DATE4": "STRING",
        "UCF_TOOLSRL_DATE5": "STRING",
        "UCF_TOOLSRL_FLAG1": "STRING",
        "UCF_TOOLSRL_FLAG2": "STRING",
        "UCF_TOOLSRL_FLAG3": "STRING",
        "UCF_TOOLSRL_FLAG4": "STRING",
        "UCF_TOOLSRL_FLAG5": "STRING",
        "IP_ADDRESS": "STRING",
        "ISSUED_TO_LOCATION_ID": "STRING",
        "ISSUED_TO_DEPARTMENT_ID": "STRING",
        "ISSUED_TO_CENTER_ID": "STRING",
        "HOME_LOCATION_ID": "STRING",
        "HOME_DEPARTMENT_ID": "STRING",
        "HOME_CENTER_ID": "STRING",
        "UCF_TOOLSRL_VCH255_1": "STRING",
        "UCF_TOOLSRL_VCH255_2": "STRING",
        "UCF_TOOLSRL_VCH255_3": "STRING",
        "UCF_TOOLSRL_VCH4000_1": "STRING",
        "UCF_TOOLSRL_VCH4000_2": "STRING",
        "USERID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The change number, secondary identifier, of the tool."
        self.TOOL_SERIAL_NO = parse_value(self.schema, column_value_map, "TOOL_SERIAL_NO")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.CUMLATV_USE_CTR = parse_value(self.schema, column_value_map, "CUMLATV_USE_CTR")
        self.CUMLATV_HOURS_CTR = parse_value(self.schema, column_value_map, "CUMLATV_HOURS_CTR")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The status of the disposition/rework task. For example: IN PROCESS, DISPOSITIONED, or COMPLETE."
        self.MANUFACTURER_CODE = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE")
        self.OUT_OF_SERVICE_DATE = parse_value(self.schema, column_value_map, "OUT_OF_SERVICE_DATE")
        self.MISSING_DATE = parse_value(self.schema, column_value_map, "MISSING_DATE")
        self.TO_REPAIR_DATE = parse_value(self.schema, column_value_map, "TO_REPAIR_DATE")
        self.EST_INSERVICE_DATE = parse_value(self.schema, column_value_map, "EST_INSERVICE_DATE")
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Comments about loading of the current product version."
        self.UCF_TOOLSRL_VCH1 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH2 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH3 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH4 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH5 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH6 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH7 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH8 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH9 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH10 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH11 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH12 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH13 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH14 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_VCH15 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_TOOLSRL_NUM1 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_TOOLSRL_NUM2 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_TOOLSRL_NUM3 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_TOOLSRL_NUM4 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_NUM4")
        "User-configurable field for NUMBER data type."
        self.UCF_TOOLSRL_NUM5 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_NUM5")
        "User-configurable field for NUMBER data type."
        self.UCF_TOOLSRL_DATE1 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_TOOLSRL_DATE2 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_TOOLSRL_DATE3 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_TOOLSRL_DATE4 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_TOOLSRL_DATE5 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_TOOLSRL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_TOOLSRL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_TOOLSRL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_TOOLSRL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_FLAG4")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_TOOLSRL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_FLAG5")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.IP_ADDRESS = parse_value(self.schema, column_value_map, "IP_ADDRESS")
        "IP address from which the user is logging in."
        self.ISSUED_TO_LOCATION_ID = parse_value(self.schema, column_value_map, "ISSUED_TO_LOCATION_ID")
        self.ISSUED_TO_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "ISSUED_TO_DEPARTMENT_ID")
        self.ISSUED_TO_CENTER_ID = parse_value(self.schema, column_value_map, "ISSUED_TO_CENTER_ID")
        self.HOME_LOCATION_ID = parse_value(self.schema, column_value_map, "HOME_LOCATION_ID")
        self.HOME_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "HOME_DEPARTMENT_ID")
        self.HOME_CENTER_ID = parse_value(self.schema, column_value_map, "HOME_CENTER_ID")
        self.UCF_TOOLSRL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_TOOLSRL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_TOOLSRL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_TOOLSRL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_TOOLSRL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."

class SFWID_ORDER_INSP_STEP_LINK_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_INSP_STEP_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_NO": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_NO": "STRING",
        "STEP_KEY": "NUMBER",
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "INSP_PLAN_ID": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.ORDER_INSP_STEP_ID = parse_value(self.schema, column_value_map, "ORDER_INSP_STEP_ID")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFFND_UID_ENTRY:
    schema = {
        "UID_ENTRY_NAME": "STRING",
        "ENTERPRISE_ID": "STRING",
        "DATA_QUALIFIER": "STRING",
        "CONSTRUCT_TYPE": "STRING",
        "UID_ENTRY_DESC": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "UID_ENTRY_NAME",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_UID_ENTRY_FK01", ["ENTERPRISE_ID"], "SFFND_UID_ENTERPRISE_ID", ["ENTERPRISE_ID"]),
    ]
    refs = [
        "SFPL_PLAN_DESC_FK01",
        "SFWID_SERIAL_DESC_UID_FK1",
        "SFWID_OPER_ITEMS_FK01",
        "SFWID_ORDER_DESC_FK01",
        "SFWID_OPER_ITEMS_ALT_FK2",
        "SFFND_WORK_LOC_DEF_FK01",
        "SFWID_AWB_UID_ENTRY_FK",
        "SFPL_ITEM_PROG_DETAILS_FK01",
        "SFPL_STEP_ITEMS_FK01",
        "SFWID_ORDER_DESC_ALT_FK3",
    ]
    def __init__(self, column_value_map):
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.ENTERPRISE_ID = parse_value(self.schema, column_value_map, "ENTERPRISE_ID")
        self.DATA_QUALIFIER = parse_value(self.schema, column_value_map, "DATA_QUALIFIER")
        self.CONSTRUCT_TYPE = parse_value(self.schema, column_value_map, "CONSTRUCT_TYPE")
        self.UID_ENTRY_DESC = parse_value(self.schema, column_value_map, "UID_ENTRY_DESC")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFPL_PLAN_DESC_FK01 = []
        self.SFWID_SERIAL_DESC_UID_FK1 = []
        self.SFWID_OPER_ITEMS_FK01 = []
        self.SFWID_ORDER_DESC_FK01 = []
        self.SFWID_OPER_ITEMS_ALT_FK2 = []
        self.SFFND_WORK_LOC_DEF_FK01 = []
        self.SFWID_AWB_UID_ENTRY_FK = []
        self.SFPL_ITEM_PROG_DETAILS_FK01 = []
        self.SFPL_STEP_ITEMS_FK01 = []
        self.SFWID_ORDER_DESC_ALT_FK3 = []

class SFPL_MFG_BOM_COMP_REF_DES_ORIG:
    schema = {
        "BOM_ID": "STRING",
        "BOM_COMP_ID": "STRING",
        "REF_DES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "REF_DES_QTY": "NUMBER",
        "REF_DES_PREF_RANK": "NUMBER",
    }
    primary_key_columns = [
        "BOM_ID",
        "BOM_COMP_ID",
        "REF_DES",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_COMP_REF_ORIG_FK1", ["BOM_ID","BOM_COMP_ID"], "SFPL_MFG_BOM_COMP_ORIG", ["BOM_ID","BOM_COMP_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique system generated identifier for BOM."
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        "Unique, system-generated identifier of a given BOM component."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "The identifier of the physical location/position on the parent part where the component part is to be installed."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.REF_DES_QTY = parse_value(self.schema, column_value_map, "REF_DES_QTY")
        "The quantity of component item/parts to be installed at the reference designator location."
        self.REF_DES_PREF_RANK = parse_value(self.schema, column_value_map, "REF_DES_PREF_RANK")
        "Where multiple candidate components are associated with a given reference designator, the rank of a given candidate, where the lowest number shows the highest preference for use."

class SFWID_ITEM_ALIAS:
    schema = {
        "ALIAS_ID": "STRING",
        "ALIAS_ITEM_ID": "STRING",
        "ALIAS_LOT_ID": "STRING",
        "ALIAS_SERIAL_ID": "STRING",
        "UPGRADE_ITEM_ID": "STRING",
        "UPGRADE_LOT_ID": "STRING",
        "UPGRADE_SERIAL_ID": "STRING",
        "LATEST_UPGRADE_ITEM_ID": "STRING",
        "LATEST_UPGRADE_LOT_ID": "STRING",
        "LATEST_UPGRADE_SERIAL_ID": "STRING",
        "QTY": "NUMBER",
        "IS_FINISHED_PART_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ALIAS_PART_NO": "STRING",
        "ALIAS_PART_CHG": "STRING",
        "ALIAS_LOT_NO": "STRING",
        "ALIAS_SERIAL_NO": "STRING",
        "UPGRADE_PART_NO": "STRING",
        "UPGRADE_PART_CHG": "STRING",
        "UPGRADE_LOT_NO": "STRING",
        "UPGRADE_SERIAL_NO": "STRING",
        "LATEST_UPGRADE_PART_NO": "STRING",
        "LATEST_UPGRADE_PART_CHG": "STRING",
        "LATEST_UPGRADE_LOT_NO": "STRING",
        "LATEST_UPGRADE_SERIAL_NO": "STRING",
    }
    primary_key_columns = [
        "ALIAS_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ITEM_ALIAS_FK2", ["ALIAS_PART_NO","ALIAS_LOT_NO","ALIAS_SERIAL_NO"], "SFWID_AS_WORKED_ITEM", ["PART_NO","LOT_NO","SERIAL_NO"]),
        DbForeignKey("SFWID_ITEM_ALIAS_FK3", ["LATEST_UPGRADE_PART_NO","LATEST_UPGRADE_LOT_NO","LATEST_UPGRADE_SERIAL_NO"], "SFWID_AS_WORKED_ITEM", ["PART_NO","LOT_NO","SERIAL_NO"]),
        DbForeignKey("SFWID_ITEM_ALIAS_FK1", ["UPGRADE_PART_NO","UPGRADE_LOT_NO","UPGRADE_SERIAL_NO"], "SFWID_AS_WORKED_ITEM", ["PART_NO","LOT_NO","SERIAL_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ALIAS_ID = parse_value(self.schema, column_value_map, "ALIAS_ID")
        "Unique, system-generated identifier of upgradation of unit."
        self.ALIAS_ITEM_ID = parse_value(self.schema, column_value_map, "ALIAS_ITEM_ID")
        "Item ID of alias/Starting Part."
        self.ALIAS_LOT_ID = parse_value(self.schema, column_value_map, "ALIAS_LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given alias component/part."
        self.ALIAS_SERIAL_ID = parse_value(self.schema, column_value_map, "ALIAS_SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given alias component/part."
        self.UPGRADE_ITEM_ID = parse_value(self.schema, column_value_map, "UPGRADE_ITEM_ID")
        "Item ID of upgrade/ending Part."
        self.UPGRADE_LOT_ID = parse_value(self.schema, column_value_map, "UPGRADE_LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.UPGRADE_SERIAL_ID = parse_value(self.schema, column_value_map, "UPGRADE_SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.LATEST_UPGRADE_ITEM_ID = parse_value(self.schema, column_value_map, "LATEST_UPGRADE_ITEM_ID")
        "Item ID of the latest upgraded part, to avoid performance issues in hierarchical query."
        self.LATEST_UPGRADE_LOT_ID = parse_value(self.schema, column_value_map, "LATEST_UPGRADE_LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given latest upgraded component/part."
        self.LATEST_UPGRADE_SERIAL_ID = parse_value(self.schema, column_value_map, "LATEST_UPGRADE_SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given latest upgraded component/part."
        self.QTY = parse_value(self.schema, column_value_map, "QTY")
        "Build quantity."
        self.IS_FINISHED_PART_FLAG = parse_value(self.schema, column_value_map, "IS_FINISHED_PART_FLAG")
        "A flag(Y/N) that indicates whether or not the alias record is created with update finish part no/rev."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ALIAS_PART_NO = parse_value(self.schema, column_value_map, "ALIAS_PART_NO")
        "Part number assigned to a given alias part."
        self.ALIAS_PART_CHG = parse_value(self.schema, column_value_map, "ALIAS_PART_CHG")
        "Part change assigned to a given alias part."
        self.ALIAS_LOT_NO = parse_value(self.schema, column_value_map, "ALIAS_LOT_NO")
        "Lot No assigned to a given alias part."
        self.ALIAS_SERIAL_NO = parse_value(self.schema, column_value_map, "ALIAS_SERIAL_NO")
        "Serial No assigned to a given alias part."
        self.UPGRADE_PART_NO = parse_value(self.schema, column_value_map, "UPGRADE_PART_NO")
        "Part number assigned to a given upgraded part."
        self.UPGRADE_PART_CHG = parse_value(self.schema, column_value_map, "UPGRADE_PART_CHG")
        "Part change assigned to a given upgraded part."
        self.UPGRADE_LOT_NO = parse_value(self.schema, column_value_map, "UPGRADE_LOT_NO")
        "Lot No assigned to a given upgraded part."
        self.UPGRADE_SERIAL_NO = parse_value(self.schema, column_value_map, "UPGRADE_SERIAL_NO")
        "Serial No assigned to a given upgraded part."
        self.LATEST_UPGRADE_PART_NO = parse_value(self.schema, column_value_map, "LATEST_UPGRADE_PART_NO")
        "Part number assigned to a given latest upgraded part."
        self.LATEST_UPGRADE_PART_CHG = parse_value(self.schema, column_value_map, "LATEST_UPGRADE_PART_CHG")
        "Part change assigned to a given latest upgraded part."
        self.LATEST_UPGRADE_LOT_NO = parse_value(self.schema, column_value_map, "LATEST_UPGRADE_LOT_NO")
        "Lot No assigned to a given latest upgraded part."
        self.LATEST_UPGRADE_SERIAL_NO = parse_value(self.schema, column_value_map, "LATEST_UPGRADE_SERIAL_NO")
        "Serial No assigned to a given latest upgraded part."

class MOTT_SCRAP_REASONS_DEF:
    schema = {
        "SCRAP_REASON_ID": "STRING",
        "SCRAP_REASON": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
    }
    primary_key_columns = [
        "SCRAP_REASON_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "MOTT_TIME_MATERIAL_FK8",
    ]
    def __init__(self, column_value_map):
        self.SCRAP_REASON_ID = parse_value(self.schema, column_value_map, "SCRAP_REASON_ID")
        self.SCRAP_REASON = parse_value(self.schema, column_value_map, "SCRAP_REASON")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the user"
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was modified."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation"
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.MOTT_TIME_MATERIAL_FK8 = []

class SFFND_USER_CERT_PROGRAM:
    schema = {
        "USERID": "STRING",
        "CERT": "STRING",
        "PROGRAM": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "EFF_DATE": "STRING",
        "EXP_DATE": "STRING",
        "CERT_STAMP_NO": "STRING",
    }
    primary_key_columns = [
        "USERID",
        "CERT",
        "PROGRAM",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_USER_CERT_PRGM_PRGM_FK", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("SFFND_USER_CERT_PRGM_USER_FK", ["USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFFND_USRCRTPROG_USR_PROG_FK", ["USERID","PROGRAM"], "SFFND_USER_PROGRAM", ["USERID","PROGRAM"]),
        DbForeignKey("SFFND_USER_CERT_PRGM_CERT_FK", ["CERT"], "SFFND_CERT_DEF", ["CERT"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        "The unique identifier of a certification. For example: MFG, INSPECTION, or CUST."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.EFF_DATE = parse_value(self.schema, column_value_map, "EFF_DATE")
        "The date on which the user's program specific certification becomes effective."
        self.EXP_DATE = parse_value(self.schema, column_value_map, "EXP_DATE")
        "The expiration date of the program-specific certification."
        self.CERT_STAMP_NO = parse_value(self.schema, column_value_map, "CERT_STAMP_NO")

class SFSQA_PO_LINE:
    schema = {
        "PO_ID": "STRING",
        "PO_LINE_ITEM": "STRING",
        "PO_ITEM_QTY": "NUMBER",
        "OWNER_CODE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "INSPECTION_TYPE": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "FAI_INSPECTIONS": "NUMBER",
        "UCF_POLINE_VCH1": "STRING",
        "UCF_POLINE_VCH2": "STRING",
        "UCF_POLINE_VCH3": "STRING",
        "UCF_POLINE_VCH4": "STRING",
        "UCF_POLINE_VCH5": "STRING",
        "UCF_POLINE_VCH6": "STRING",
        "UCF_POLINE_VCH7": "STRING",
        "UCF_POLINE_VCH8": "STRING",
        "UCF_POLINE_VCH9": "STRING",
        "UCF_POLINE_VCH10": "STRING",
        "UCF_POLINE_VCH11": "STRING",
        "UCF_POLINE_VCH12": "STRING",
        "UCF_POLINE_VCH13": "STRING",
        "UCF_POLINE_VCH14": "STRING",
        "UCF_POLINE_VCH15": "STRING",
        "UCF_POLINE_NUM1": "NUMBER",
        "UCF_POLINE_NUM2": "NUMBER",
        "UCF_POLINE_NUM3": "NUMBER",
        "UCF_POLINE_NUM4": "NUMBER",
        "UCF_POLINE_NUM5": "NUMBER",
        "UCF_POLINE_DATE1": "STRING",
        "UCF_POLINE_DATE2": "STRING",
        "UCF_POLINE_DATE3": "STRING",
        "UCF_POLINE_DATE4": "STRING",
        "UCF_POLINE_DATE5": "STRING",
        "UCF_POLINE_FLAG1": "STRING",
        "UCF_POLINE_FLAG2": "STRING",
        "UCF_POLINE_FLAG3": "STRING",
        "UCF_POLINE_FLAG4": "STRING",
        "UCF_POLINE_FLAG5": "STRING",
        "SERIAL_PREFIX": "STRING",
        "SERIAL_SUFFIX": "STRING",
        "DRAWING_NO": "STRING",
        "DRAWING_CHG": "STRING",
        "UCF_POLINE_VCH255_1": "STRING",
        "UOM": "STRING",
        "UCF_POLINE_VCH255_2": "STRING",
        "UCF_POLINE_VCH255_3": "STRING",
        "UCF_POLINE_VCH4000_1": "STRING",
        "UCF_POLINE_VCH4000_2": "STRING",
        "DUE_DATE": "STRING",
        "SHIP_TO_ADDRESS": "STRING",
        "PO_LINE_NOTES": "STRING",
        "PO_SHIPPED_QTY": "NUMBER",
        "EXTERNAL_PO_SHIPPED_QTY": "NUMBER",
        "ITEM_ID": "STRING",
        "OVERAGE_QTY": "NUMBER",
        "CATEGORY": "STRING",
        "BUYER": "STRING",
        "DESIGN_AUTHORITY": "STRING",
        "MANUFACTURER_CODE": "STRING",
        "MANUFACTURER_PART_NO": "STRING",
    }
    primary_key_columns = [
        "PO_ID",
        "PO_LINE_ITEM",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_PO_LINE_FK4", ["UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFSQA_PO_LINE_FK3", ["ITEM_ID","OWNER_CODE"], "SFSQA_ITEM_OWNER", ["ITEM_ID","OWNER_CODE"]),
        DbForeignKey("SFSQA_PO_LINE_FK1", ["PO_ID"], "SFSQA_PO_HDR", ["PO_ID"]),
        DbForeignKey("SFSQA_PO_LINE_FK2", ["INSPECTION_TYPE"], "SFSQA_INSP_ORDER_INSP_TYPE_DEF", ["INSPECTION_TYPE"]),
        DbForeignKey("SFSQA_PO_LINE_FK5", ["CATEGORY"], "SFSQA_PO_LINE_CATEGORY", ["PO_LINE_CATEGORY"]),
        DbForeignKey("SFSQA_PO_LINE_FK6", ["BUYER"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
        "SFSQA_INSP_ORDER_DESC_FK2",
        "SFSQA_PO_LINE_SERIALS_FK1",
        "SFSQA_PO_DELIVERY_SCHED_FK1",
        "SFSQA_PO_LINE_CLAUSE_FK2",
    ]
    def __init__(self, column_value_map):
        self.PO_ID = parse_value(self.schema, column_value_map, "PO_ID")
        "System generated unique identifier for a given purchase order."
        self.PO_LINE_ITEM = parse_value(self.schema, column_value_map, "PO_LINE_ITEM")
        self.PO_ITEM_QTY = parse_value(self.schema, column_value_map, "PO_ITEM_QTY")
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.INSPECTION_TYPE = parse_value(self.schema, column_value_map, "INSPECTION_TYPE")
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        self.FAI_INSPECTIONS = parse_value(self.schema, column_value_map, "FAI_INSPECTIONS")
        self.UCF_POLINE_VCH1 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH1")
        self.UCF_POLINE_VCH2 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH2")
        self.UCF_POLINE_VCH3 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH3")
        self.UCF_POLINE_VCH4 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH4")
        self.UCF_POLINE_VCH5 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH5")
        self.UCF_POLINE_VCH6 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH6")
        self.UCF_POLINE_VCH7 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH7")
        self.UCF_POLINE_VCH8 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH8")
        self.UCF_POLINE_VCH9 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH9")
        self.UCF_POLINE_VCH10 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH10")
        self.UCF_POLINE_VCH11 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH11")
        self.UCF_POLINE_VCH12 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH12")
        self.UCF_POLINE_VCH13 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH13")
        self.UCF_POLINE_VCH14 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH14")
        self.UCF_POLINE_VCH15 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH15")
        self.UCF_POLINE_NUM1 = parse_value(self.schema, column_value_map, "UCF_POLINE_NUM1")
        self.UCF_POLINE_NUM2 = parse_value(self.schema, column_value_map, "UCF_POLINE_NUM2")
        self.UCF_POLINE_NUM3 = parse_value(self.schema, column_value_map, "UCF_POLINE_NUM3")
        self.UCF_POLINE_NUM4 = parse_value(self.schema, column_value_map, "UCF_POLINE_NUM4")
        self.UCF_POLINE_NUM5 = parse_value(self.schema, column_value_map, "UCF_POLINE_NUM5")
        self.UCF_POLINE_DATE1 = parse_value(self.schema, column_value_map, "UCF_POLINE_DATE1")
        self.UCF_POLINE_DATE2 = parse_value(self.schema, column_value_map, "UCF_POLINE_DATE2")
        self.UCF_POLINE_DATE3 = parse_value(self.schema, column_value_map, "UCF_POLINE_DATE3")
        self.UCF_POLINE_DATE4 = parse_value(self.schema, column_value_map, "UCF_POLINE_DATE4")
        self.UCF_POLINE_DATE5 = parse_value(self.schema, column_value_map, "UCF_POLINE_DATE5")
        self.UCF_POLINE_FLAG1 = parse_value(self.schema, column_value_map, "UCF_POLINE_FLAG1")
        self.UCF_POLINE_FLAG2 = parse_value(self.schema, column_value_map, "UCF_POLINE_FLAG2")
        self.UCF_POLINE_FLAG3 = parse_value(self.schema, column_value_map, "UCF_POLINE_FLAG3")
        self.UCF_POLINE_FLAG4 = parse_value(self.schema, column_value_map, "UCF_POLINE_FLAG4")
        self.UCF_POLINE_FLAG5 = parse_value(self.schema, column_value_map, "UCF_POLINE_FLAG5")
        self.SERIAL_PREFIX = parse_value(self.schema, column_value_map, "SERIAL_PREFIX")
        self.SERIAL_SUFFIX = parse_value(self.schema, column_value_map, "SERIAL_SUFFIX")
        self.DRAWING_NO = parse_value(self.schema, column_value_map, "DRAWING_NO")
        self.DRAWING_CHG = parse_value(self.schema, column_value_map, "DRAWING_CHG")
        "The change letter, a secondary identifier, of the drawing."
        self.UCF_POLINE_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH255_1")
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Unit of Measure for a component/part."
        self.UCF_POLINE_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH255_2")
        self.UCF_POLINE_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH255_3")
        self.UCF_POLINE_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH4000_1")
        self.UCF_POLINE_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_POLINE_VCH4000_2")
        self.DUE_DATE = parse_value(self.schema, column_value_map, "DUE_DATE")
        self.SHIP_TO_ADDRESS = parse_value(self.schema, column_value_map, "SHIP_TO_ADDRESS")
        self.PO_LINE_NOTES = parse_value(self.schema, column_value_map, "PO_LINE_NOTES")
        self.PO_SHIPPED_QTY = parse_value(self.schema, column_value_map, "PO_SHIPPED_QTY")
        "Store Shipped/Received qty for PO Line."
        self.EXTERNAL_PO_SHIPPED_QTY = parse_value(self.schema, column_value_map, "EXTERNAL_PO_SHIPPED_QTY")
        "Store original Shipped/Received qty for PO Line coming from external system."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of an item/part."
        self.OVERAGE_QTY = parse_value(self.schema, column_value_map, "OVERAGE_QTY")
        "As Overage Qty."
        self.CATEGORY = parse_value(self.schema, column_value_map, "CATEGORY")
        self.BUYER = parse_value(self.schema, column_value_map, "BUYER")
        "Solumina login ID of the user."
        self.DESIGN_AUTHORITY = parse_value(self.schema, column_value_map, "DESIGN_AUTHORITY")
        self.MANUFACTURER_CODE = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE")
        self.MANUFACTURER_PART_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_PART_NO")
        self.SFSQA_INSP_ORDER_DESC_FK2 = []
        self.SFSQA_PO_LINE_SERIALS_FK1 = []
        self.SFSQA_PO_DELIVERY_SCHED_FK1 = []
        self.SFSQA_PO_LINE_CLAUSE_FK2 = []

class SFQA_COMP_DISP_TYPE_DEF:
    schema = {
        "COMP_DISP_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "REMOVE_FLAG": "STRING",
        "SCRAP_FLAG": "STRING",
        "REPLACE_WITH_SAME_PART_FLAG": "STRING",
        "COMP_DISC_TYPE_DESC": "STRING",
        "RETURN_TO_VENDOR": "STRING",
        "DISP_INSTR_FLAG": "STRING",
        "RETURN_TO_INVENTORY_FLAG": "STRING",
        "REINSTALL_SAME_UNIT_FLAG": "STRING",
        "REPLACE_WITH_DIFF_PART_FLAG": "STRING",
        "REQUIRE_EXT_PROCESSING_FLAG": "STRING",
        "ITEM_DISP_STATUS_CODE": "STRING",
    }
    primary_key_columns = [
        "COMP_DISP_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_DISC_CMP_DISCCOMPTYPE",
        "SFWID_OPER_ITEMS_FK02",
        "SFWID_OPER_ITEMS_ALT_FK3",
        "SFPL_STEP_ITEMS_FK02",
    ]
    def __init__(self, column_value_map):
        self.COMP_DISP_TYPE = parse_value(self.schema, column_value_map, "COMP_DISP_TYPE")
        "Type or classification of disposition for a given component/part."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.REMOVE_FLAG = parse_value(self.schema, column_value_map, "REMOVE_FLAG")
        "A flag (Y/N) indicating whether a currently used component/part should be or was removed."
        self.SCRAP_FLAG = parse_value(self.schema, column_value_map, "SCRAP_FLAG")
        "A flag (Y/N) indicating whether the component/part should be or has been scrapped."
        self.REPLACE_WITH_SAME_PART_FLAG = parse_value(self.schema, column_value_map, "REPLACE_WITH_SAME_PART_FLAG")
        "A flag (Y/N) indicating whether a removed component/part should be or was reinstalled."
        self.COMP_DISC_TYPE_DESC = parse_value(self.schema, column_value_map, "COMP_DISC_TYPE_DESC")
        "Description of a given disposition type."
        self.RETURN_TO_VENDOR = parse_value(self.schema, column_value_map, "RETURN_TO_VENDOR")
        self.DISP_INSTR_FLAG = parse_value(self.schema, column_value_map, "DISP_INSTR_FLAG")
        self.RETURN_TO_INVENTORY_FLAG = parse_value(self.schema, column_value_map, "RETURN_TO_INVENTORY_FLAG")
        self.REINSTALL_SAME_UNIT_FLAG = parse_value(self.schema, column_value_map, "REINSTALL_SAME_UNIT_FLAG")
        "Flag to reinstall same part no/rev with same unit."
        self.REPLACE_WITH_DIFF_PART_FLAG = parse_value(self.schema, column_value_map, "REPLACE_WITH_DIFF_PART_FLAG")
        "Flag to reinstall diffrent part no/rev."
        self.REQUIRE_EXT_PROCESSING_FLAG = parse_value(self.schema, column_value_map, "REQUIRE_EXT_PROCESSING_FLAG")
        "Flag if external processing is required."
        self.ITEM_DISP_STATUS_CODE = parse_value(self.schema, column_value_map, "ITEM_DISP_STATUS_CODE")
        "Tag value to send S_ITEM_DISPOSITION"
        self.SFQA_DISC_CMP_DISCCOMPTYPE = []
        self.SFWID_OPER_ITEMS_FK02 = []
        self.SFWID_OPER_ITEMS_ALT_FK3 = []
        self.SFPL_STEP_ITEMS_FK02 = []

class SFSQA_SAMPLE_PLAN_PROCESS_TYPE:
    schema = {
        "SP_PROCESS_TYPE": "STRING",
        "SP_PROCESS_TYPE_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "SP_PROCESS_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_SP_PROC_TYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.SP_PROCESS_TYPE = parse_value(self.schema, column_value_map, "SP_PROCESS_TYPE")
        self.SP_PROCESS_TYPE_DESC = parse_value(self.schema, column_value_map, "SP_PROCESS_TYPE_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFSQA_SP_PROC_TYPE_FK = []

class SFPL_PLAN_DESC:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "PROGRAM": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PLND_ORDER_QTY": "NUMBER",
        "SEQ_FLAG": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "PLAN_STATE": "STRING",
        "PLAN_TITLE": "STRING",
        "PLAN_STATUS": "STRING",
        "MFG_INDEX_NO": "STRING",
        "PLND_CUST_ID": "STRING",
        "ORDER_UOM": "STRING",
        "ENG_PART_NO": "STRING",
        "ENG_PART_CHG": "STRING",
        "MODEL": "STRING",
        "NEXT_PLAN_ID": "STRING",
        "PLG_GROUP": "STRING",
        "MFG_BOM_CHG": "STRING",
        "ITEM_ID": "STRING",
        "INITIAL_STORES": "STRING",
        "FINAL_STORES": "STRING",
        "ENG_GROUP": "STRING",
        "PLND_MAX_ORDER_QTY": "NUMBER",
        "PLAN_TYPE": "STRING",
        "PLND_MIN_ORDER_QTY": "NUMBER",
        "NEEDS_REVIEW_FLAG": "STRING",
        "UNIT_TYPE": "STRING",
        "UCF_PLAN_VCH1": "STRING",
        "UCF_PLAN_VCH2": "STRING",
        "PROJECT": "STRING",
        "UCF_PLAN_VCH3": "STRING",
        "UCF_PLAN_VCH4": "STRING",
        "UCF_PLAN_VCH5": "STRING",
        "UCF_PLAN_VCH6": "STRING",
        "UCF_PLAN_VCH7": "STRING",
        "UCF_PLAN_VCH8": "STRING",
        "UCF_PLAN_FLAG1": "STRING",
        "UCF_PLAN_FLAG2": "STRING",
        "UCF_PLAN_NUM1": "NUMBER",
        "UCF_PLAN_NUM2": "NUMBER",
        "LTA_SEND_FLAG": "STRING",
        "UCF_PLAN_VCH9": "STRING",
        "UCF_PLAN_VCH10": "STRING",
        "UCF_PLAN_VCH11": "STRING",
        "UCF_PLAN_VCH12": "STRING",
        "UCF_PLAN_VCH13": "STRING",
        "UCF_PLAN_VCH14": "STRING",
        "UCF_PLAN_VCH15": "STRING",
        "UCF_PLAN_NUM3": "NUMBER",
        "UCF_PLAN_NUM4": "NUMBER",
        "UCF_PLAN_NUM5": "NUMBER",
        "UCF_PLAN_DATE1": "STRING",
        "UCF_PLAN_DATE2": "STRING",
        "UCF_PLAN_DATE3": "STRING",
        "UCF_PLAN_DATE4": "STRING",
        "UCF_PLAN_DATE5": "STRING",
        "UCF_PLAN_FLAG3": "STRING",
        "UCF_PLAN_FLAG4": "STRING",
        "UCF_PLAN_FLAG5": "STRING",
        "UCF_PLAN_VCH255_1": "STRING",
        "UCF_PLAN_VCH255_2": "STRING",
        "UCF_PLAN_VCH255_3": "STRING",
        "UCF_PLAN_VCH4000_1": "STRING",
        "UCF_PLAN_VCH4000_2": "STRING",
        "PLAN_NO": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "BOM_NO": "STRING",
        "SECURITY_GROUP": "STRING",
        "DISPLAY_SEQUENCE": "STRING",
        "OPERATION_OVERLAP_FLAG": "STRING",
        "BOM_ID": "STRING",
        "OBJECT_ID": "STRING",
        "EXPLICIT_BOM_LINK_FLAG": "STRING",
        "COMMODITY_JURISDICTION": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "COMMODITY_CLASSIFICATION": "STRING",
        "ERP_BOM_FLAG": "STRING",
        "CONDITION": "STRING",
        "DOC_TYPE": "STRING",
        "WORK_FLOW": "STRING",
        "PLND_LOCATION_ID": "STRING",
        "DECLARED_LANGUAGE_CODE": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_UPDT_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLAN_DESC_BOM_FK", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFPL_PLAN_DESC_UOM_FK", ["ORDER_UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFPL_PLAN_DESC_PROJECT_FK", ["PROJECT"], "SFFND_PROJECT_DEF", ["PROJECT"]),
        DbForeignKey("SFPLPLAN_DESC_FK01", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFPL_PLANDESC_UNITTYPDEF_FK", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFPL_PLAN_DESC_CUST_FK", ["PLND_CUST_ID"], "SFFND_CUST_ID_DEF", ["CUST_ID"]),
        DbForeignKey("SFPL_PLAN_DESC_FK01", ["UID_ENTRY_NAME"], "SFFND_UID_ENTRY", ["UID_ENTRY_NAME"]),
        DbForeignKey("SFPL_PLAN_DESC_FK02", ["CONDITION"], "SFFND_CONDITION_DEF", ["CONDITION"]),
        DbForeignKey("SFPL_PLAN_DESC_ENG_GRP_FK", ["ENG_GROUP"], "SFFND_ENG_GROUP_DEF", ["ENG_GROUP"]),
        DbForeignKey("SFPL_PLAN_DESC_LANGUAGE_FK", ["DECLARED_LANGUAGE_CODE"], "SFFND_LANGUAGE", ["LANGUAGE_CODE"]),
        DbForeignKey("SFPL_PLAN_DESC_LOC_FK", ["PLND_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFPL_PLAN_DESC_MODEL_FK", ["MODEL"], "SFFND_MODEL_DEF", ["MODEL"]),
        DbForeignKey("SFPL_PLAN_DESC_PLG_GRP_FK", ["PLG_GROUP"], "SFFND_PLG_GROUP_DEF", ["PLG_GROUP"]),
        DbForeignKey("SFPL_PLAN_DESC_FK4", ["DOC_TYPE","PLAN_TYPE","WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
        DbForeignKey("SFPL_PLAN_DESC_ITEM_FK", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_PLAN_DESC_ITEM_TYPE_FK", ["ITEM_TYPE","ITEM_SUBTYPE"], "SFPL_ITEM_TYPE_DEF", ["ITEM_TYPE","ITEM_SUBTYPE"]),
        DbForeignKey("SFPL_PLAN_DESC_PLN_MSTR_FK", ["NEXT_PLAN_ID"], "SFPL_PLAN_MASTER", ["PLAN_ID"]),
        DbForeignKey("SFPL_PLANDESC_PLANMAST_FK1", ["PLAN_ID"], "SFPL_PLAN_MASTER", ["PLAN_ID"]),
    ]
    refs = [
        "SFPL_PLAN_DESC_SEC_GRP_FK2",
        "SFOR_SFPL_PLAN_SUBJECT_PLAN_FK",
        "SFPL_PLANREV_PLANDESC_FK",
        "SFPL_PLAN_BOM_LINES_FK1",
        "SFPL_PLANTEXT_PLANDESC_FK",
        "SFPL_PLAN_LINK_PLAN_DESC_FK",
        "SFPL_PLAN_MM_OBJECTS_FK1",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PLND_ORDER_QTY = parse_value(self.schema, column_value_map, "PLND_ORDER_QTY")
        "The quantity of the part/product to be manufactured as originally planned in the work plan."
        self.SEQ_FLAG = parse_value(self.schema, column_value_map, "SEQ_FLAG")
        "A flag (Y/N) that indicates whether operations must be executed sequentially in the order shown in the plan."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.PLAN_STATE = parse_value(self.schema, column_value_map, "PLAN_STATE")
        "The editing state of the plan level information, EDIT or NO EDIT."
        self.PLAN_TITLE = parse_value(self.schema, column_value_map, "PLAN_TITLE")
        "A descriptive title or name of the work plan."
        self.PLAN_STATUS = parse_value(self.schema, column_value_map, "PLAN_STATUS")
        "The status of the Work Plan during the authoring cycle. Not in use."
        self.MFG_INDEX_NO = parse_value(self.schema, column_value_map, "MFG_INDEX_NO")
        "The associated manufacturing index number, usually used in Engineering to identify a specific stage in the manufacturing process."
        self.PLND_CUST_ID = parse_value(self.schema, column_value_map, "PLND_CUST_ID")
        "The customer receiving the product/completed work."
        self.ORDER_UOM = parse_value(self.schema, column_value_map, "ORDER_UOM")
        "The Unit Of Measure associated with PLND_ORDER_QTY and ORDER_QTY."
        self.ENG_PART_NO = parse_value(self.schema, column_value_map, "ENG_PART_NO")
        "The part number of the product to be made, mapped to engineering BOM, provided by Engineering."
        self.ENG_PART_CHG = parse_value(self.schema, column_value_map, "ENG_PART_CHG")
        "The change letter associated with the engineering part number."
        self.MODEL = parse_value(self.schema, column_value_map, "MODEL")
        "Unique identifier of the associated model/product line."
        self.NEXT_PLAN_ID = parse_value(self.schema, column_value_map, "NEXT_PLAN_ID")
        "The next work plan in the manufacturing process."
        self.PLG_GROUP = parse_value(self.schema, column_value_map, "PLG_GROUP")
        "Unique identifier of the associated process planning group."
        self.MFG_BOM_CHG = parse_value(self.schema, column_value_map, "MFG_BOM_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given BOM."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.INITIAL_STORES = parse_value(self.schema, column_value_map, "INITIAL_STORES")
        "Storage or process location associated with the initial phases of the given work plan or work order."
        self.FINAL_STORES = parse_value(self.schema, column_value_map, "FINAL_STORES")
        "Storage or process location associated with the final phases of the given work plan or work order."
        self.ENG_GROUP = parse_value(self.schema, column_value_map, "ENG_GROUP")
        "The unique identifier of the associated engineering group."
        self.PLND_MAX_ORDER_QTY = parse_value(self.schema, column_value_map, "PLND_MAX_ORDER_QTY")
        "The maximum order quantity the work plan is suitable for."
        self.PLAN_TYPE = parse_value(self.schema, column_value_map, "PLAN_TYPE")
        "Type or classification of the associated work plan."
        self.PLND_MIN_ORDER_QTY = parse_value(self.schema, column_value_map, "PLND_MIN_ORDER_QTY")
        "The minimum order quantity the work plan is suitable for."
        self.NEEDS_REVIEW_FLAG = parse_value(self.schema, column_value_map, "NEEDS_REVIEW_FLAG")
        "A flag (Y/N) that indicates whether the associated Operation Flow Diagram requires review."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.UCF_PLAN_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH2")
        "User-configurable field for VARCHAR data type."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.UCF_PLAN_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM2")
        "User-configurable field for NUM data type."
        self.LTA_SEND_FLAG = parse_value(self.schema, column_value_map, "LTA_SEND_FLAG")
        self.UCF_PLAN_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH9")
        self.UCF_PLAN_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH10")
        self.UCF_PLAN_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH11")
        self.UCF_PLAN_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH12")
        self.UCF_PLAN_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH13")
        self.UCF_PLAN_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH14")
        self.UCF_PLAN_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH15")
        self.UCF_PLAN_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM3")
        self.UCF_PLAN_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM4")
        self.UCF_PLAN_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM5")
        self.UCF_PLAN_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE1")
        self.UCF_PLAN_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE2")
        self.UCF_PLAN_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE3")
        self.UCF_PLAN_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE4")
        self.UCF_PLAN_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE5")
        self.UCF_PLAN_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG3")
        self.UCF_PLAN_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG4")
        self.UCF_PLAN_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG5")
        self.UCF_PLAN_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH255_1")
        self.UCF_PLAN_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH255_2")
        self.UCF_PLAN_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH255_3")
        self.UCF_PLAN_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH4000_1")
        self.UCF_PLAN_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH4000_2")
        self.PLAN_NO = parse_value(self.schema, column_value_map, "PLAN_NO")
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.BOM_NO = parse_value(self.schema, column_value_map, "BOM_NO")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.DISPLAY_SEQUENCE = parse_value(self.schema, column_value_map, "DISPLAY_SEQUENCE")
        self.OPERATION_OVERLAP_FLAG = parse_value(self.schema, column_value_map, "OPERATION_OVERLAP_FLAG")
        "Operation Overlap flag, used to allow partial lot completions and a lot to be spread out over many operations."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique system generated identifier for BOM."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.EXPLICIT_BOM_LINK_FLAG = parse_value(self.schema, column_value_map, "EXPLICIT_BOM_LINK_FLAG")
        "Indicates if specific BOM Revision will be explicitly linked to Plan/Order."
        self.COMMODITY_JURISDICTION = parse_value(self.schema, column_value_map, "COMMODITY_JURISDICTION")
        "Commodity Jurisdiction of Process Plan."
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.COMMODITY_CLASSIFICATION = parse_value(self.schema, column_value_map, "COMMODITY_CLASSIFICATION")
        "Commodity Classification of Process Plan."
        self.ERP_BOM_FLAG = parse_value(self.schema, column_value_map, "ERP_BOM_FLAG")
        "Y/N, Y indicates that while creating external Plan having BOM reference given in xml. N indicates that while creating external Plan does not have BOM reference  in xml."
        self.CONDITION = parse_value(self.schema, column_value_map, "CONDITION")
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        self.WORK_FLOW = parse_value(self.schema, column_value_map, "WORK_FLOW")
        self.PLND_LOCATION_ID = parse_value(self.schema, column_value_map, "PLND_LOCATION_ID")
        self.DECLARED_LANGUAGE_CODE = parse_value(self.schema, column_value_map, "DECLARED_LANGUAGE_CODE")
        "Language code as per ISO639 standard."
        self.SFPL_PLAN_DESC_SEC_GRP_FK2 = []
        self.SFOR_SFPL_PLAN_SUBJECT_PLAN_FK = []
        self.SFPL_PLANREV_PLANDESC_FK = []
        self.SFPL_PLAN_BOM_LINES_FK1 = []
        self.SFPL_PLANTEXT_PLANDESC_FK = []
        self.SFPL_PLAN_LINK_PLAN_DESC_FK = []
        self.SFPL_PLAN_MM_OBJECTS_FK1 = []

class SFCORE_USER_ROLES_HIST:
    schema = {
        "HIST_ID": "STRING",
        "HIST_TIME_STAMP": "STRING",
        "HIST_USERID": "STRING",
        "USERID": "STRING",
        "ROLE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "HIST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.ROLE = parse_value(self.schema, column_value_map, "ROLE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")

class SFQA_DISC_COMPONENT:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "PART_DAT_COL_ID": "STRING",
        "ITEM_ID": "STRING",
        "REF_DES": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "LOT_FLAG": "STRING",
        "SERIAL_FLAG": "STRING",
        "AFFECTED_QTY": "NUMBER",
        "COMP_DISP_TYPE": "STRING",
        "UOM": "STRING",
        "DEFECT_TYPE": "STRING",
        "DEFECT_COUNT": "NUMBER",
        "CFLAGS": "NUMBER",
        "FIND_NO": "STRING",
        "REF_SUB_DES": "STRING",
        "NOTES": "STRING",
        "UCF_DISC_COMP_VCH1": "STRING",
        "UCF_DISC_COMP_VCH2": "STRING",
        "UCF_DISC_COMP_VCH3": "STRING",
        "UCF_DISC_COMP_VCH4": "STRING",
        "UCF_DISC_COMP_NUM1": "NUMBER",
        "UCF_DISC_COMP_DATE1": "STRING",
        "UCF_DISC_COMP_FLAG1": "STRING",
        "UCF_DISC_COMP_VCH5": "STRING",
        "UCF_DISC_COMP_VCH6": "STRING",
        "UCF_DISC_COMP_VCH7": "STRING",
        "UCF_DISC_COMP_VCH8": "STRING",
        "UCF_DISC_COMP_VCH9": "STRING",
        "UCF_DISC_COMP_VCH10": "STRING",
        "UCF_DISC_COMP_VCH11": "STRING",
        "UCF_DISC_COMP_VCH12": "STRING",
        "UCF_DISC_COMP_VCH13": "STRING",
        "UCF_DISC_COMP_VCH14": "STRING",
        "UCF_DISC_COMP_VCH15": "STRING",
        "UCF_DISC_COMP_NUM2": "NUMBER",
        "UCF_DISC_COMP_NUM3": "NUMBER",
        "UCF_DISC_COMP_NUM4": "NUMBER",
        "UCF_DISC_COMP_NUM5": "NUMBER",
        "UCF_DISC_COMP_DATE2": "STRING",
        "UCF_DISC_COMP_DATE3": "STRING",
        "UCF_DISC_COMP_DATE4": "STRING",
        "UCF_DISC_COMP_DATE5": "STRING",
        "UCF_DISC_COMP_FLAG2": "STRING",
        "UCF_DISC_COMP_FLAG3": "STRING",
        "UCF_DISC_COMP_FLAG4": "STRING",
        "UCF_DISC_COMP_FLAG5": "STRING",
        "UCF_DISC_COMP_VCH255_1": "STRING",
        "UCF_DISC_COMP_VCH255_2": "STRING",
        "UCF_DISC_COMP_VCH255_3": "STRING",
        "UCF_DISC_COMP_VCH4000_1": "STRING",
        "UCF_DISC_COMP_VCH4000_2": "STRING",
        "SPOOL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "OPT_DC1_FLAG": "STRING",
        "OPT_DC2_FLAG": "STRING",
        "OPT_DC3_FLAG": "STRING",
        "OPT_DC4_FLAG": "STRING",
        "PO_NUMBER": "STRING",
        "SUPPLIER_CODE": "STRING",
        "PO_RELEASE": "STRING",
        "PO_LINE_ITEM": "STRING",
        "REPLACEMENT_PART_NO": "STRING",
        "REPLACEMENT_PART_CHG": "STRING",
        "MAIN_COMPONENT_FLAG": "STRING",
        "LIEN_DISC_STOP_ORDERS": "STRING",
        "LIEN_DISC_INH_STOP_ORDERS": "STRING",
        "FINAL_COMPONENT_DISP_FLAG": "STRING",
        "AS_WORKED_BOM": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "PART_DAT_COL_ID",
        "ITEM_ID",
        "FINAL_COMPONENT_DISP_FLAG",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_CMP_UOM_FK", ["UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFQA_DISC_COMPONENT_SCODE_FK", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFQA_DISC_CMP_DISC_ITEM_FK", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
        DbForeignKey("SFQA_DISC_CMP_DISCCOMPTYPE", ["COMP_DISP_TYPE"], "SFQA_COMP_DISP_TYPE_DEF", ["COMP_DISP_TYPE"]),
    ]
    refs = [
        "SFQA_DISC_CMP_DSRL_CMP_D_FK",
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating whether the component/part is or should be tracked by lot number."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating whether the component/part is or should be tracked by serial number."
        self.AFFECTED_QTY = parse_value(self.schema, column_value_map, "AFFECTED_QTY")
        "Number of components/parts that have been inspected and are found to be affected by the associated discrepancy."
        self.COMP_DISP_TYPE = parse_value(self.schema, column_value_map, "COMP_DISP_TYPE")
        "Type or classification of disposition for a given component/part."
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Unit of Measure for the component/part."
        self.DEFECT_TYPE = parse_value(self.schema, column_value_map, "DEFECT_TYPE")
        "Type or classification of defect."
        self.DEFECT_COUNT = parse_value(self.schema, column_value_map, "DEFECT_COUNT")
        "Number of defects associated with a given component/part."
        self.CFLAGS = parse_value(self.schema, column_value_map, "CFLAGS")
        "Number used to represent up to 50 bitmapped flag values. Currently only bit position 1 (one) is in use as the \"IN BOM\" flag. \"IN BOM\" flag indicates whether this particular discrepancy deals with a part in the BOM (1 = Yes, 0 = No)."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.REF_SUB_DES = parse_value(self.schema, column_value_map, "REF_SUB_DES")
        "The specific sector of the associated reference designator."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about the component/part."
        self.UCF_DISC_COMP_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_DISC_COMP_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_DISC_COMP_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_DISC_COMP_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH5")
        self.UCF_DISC_COMP_VCH6 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH6")
        self.UCF_DISC_COMP_VCH7 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH7")
        self.UCF_DISC_COMP_VCH8 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH8")
        self.UCF_DISC_COMP_VCH9 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH9")
        self.UCF_DISC_COMP_VCH10 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH10")
        self.UCF_DISC_COMP_VCH11 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH11")
        self.UCF_DISC_COMP_VCH12 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH12")
        self.UCF_DISC_COMP_VCH13 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH13")
        self.UCF_DISC_COMP_VCH14 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH14")
        self.UCF_DISC_COMP_VCH15 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH15")
        self.UCF_DISC_COMP_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_NUM2")
        self.UCF_DISC_COMP_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_NUM3")
        self.UCF_DISC_COMP_NUM4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_NUM4")
        self.UCF_DISC_COMP_NUM5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_NUM5")
        self.UCF_DISC_COMP_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_DATE2")
        self.UCF_DISC_COMP_DATE3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_DATE3")
        self.UCF_DISC_COMP_DATE4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_DATE4")
        self.UCF_DISC_COMP_DATE5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_DATE5")
        self.UCF_DISC_COMP_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_FLAG2")
        self.UCF_DISC_COMP_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_FLAG3")
        self.UCF_DISC_COMP_FLAG4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_FLAG4")
        self.UCF_DISC_COMP_FLAG5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_FLAG5")
        self.UCF_DISC_COMP_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH255_1")
        self.UCF_DISC_COMP_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH255_2")
        self.UCF_DISC_COMP_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH255_3")
        self.UCF_DISC_COMP_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH4000_1")
        self.UCF_DISC_COMP_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH4000_2")
        self.SPOOL_FLAG = parse_value(self.schema, column_value_map, "SPOOL_FLAG")
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        self.OPT_DC1_FLAG = parse_value(self.schema, column_value_map, "OPT_DC1_FLAG")
        self.OPT_DC2_FLAG = parse_value(self.schema, column_value_map, "OPT_DC2_FLAG")
        self.OPT_DC3_FLAG = parse_value(self.schema, column_value_map, "OPT_DC3_FLAG")
        self.OPT_DC4_FLAG = parse_value(self.schema, column_value_map, "OPT_DC4_FLAG")
        self.PO_NUMBER = parse_value(self.schema, column_value_map, "PO_NUMBER")
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.PO_RELEASE = parse_value(self.schema, column_value_map, "PO_RELEASE")
        self.PO_LINE_ITEM = parse_value(self.schema, column_value_map, "PO_LINE_ITEM")
        "The line number that corresponds to the discrepancy component in an associated purchase order."
        self.REPLACEMENT_PART_NO = parse_value(self.schema, column_value_map, "REPLACEMENT_PART_NO")
        "Contains replacement part number."
        self.REPLACEMENT_PART_CHG = parse_value(self.schema, column_value_map, "REPLACEMENT_PART_CHG")
        "Contains replacement part revision."
        self.MAIN_COMPONENT_FLAG = parse_value(self.schema, column_value_map, "MAIN_COMPONENT_FLAG")
        "This Flag (Y/N) is indicating whether the Component Part is Main Component. 'Y' indicates, it is Main Component."
        self.LIEN_DISC_STOP_ORDERS = parse_value(self.schema, column_value_map, "LIEN_DISC_STOP_ORDERS")
        "Determines what orders must be set on hold when a discrepancy is created on a unit."
        self.LIEN_DISC_INH_STOP_ORDERS = parse_value(self.schema, column_value_map, "LIEN_DISC_INH_STOP_ORDERS")
        "Determines what open orders must be set on hold when a discrepancy is inherited from an installed unit."
        self.FINAL_COMPONENT_DISP_FLAG = parse_value(self.schema, column_value_map, "FINAL_COMPONENT_DISP_FLAG")
        "A flag (Y/N) indicating whether the component/part was added through Re-Disposition Units of Verify Rework Hold."
        self.AS_WORKED_BOM = parse_value(self.schema, column_value_map, "AS_WORKED_BOM")
        "As worked BOM."
        self.SFQA_DISC_CMP_DSRL_CMP_D_FK = []

class SFWID_SERIAL_NODE_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "NODE_ID": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "OPER_URC": "NUMBER",
        "SERIAL_NODE_STATUS": "STRING",
        "STATUS_CHG_NOTES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.NODE_ID = parse_value(self.schema, column_value_map, "NODE_ID")
        "The unique system-generated identifier of a node in a Operation Flow Diagram."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.OPER_URC = parse_value(self.schema, column_value_map, "OPER_URC")
        "When executing a work order with returns (iterative branching) this is a user configurable counter."
        self.SERIAL_NODE_STATUS = parse_value(self.schema, column_value_map, "SERIAL_NODE_STATUS")
        "Status of the node for the given Unit."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated operation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_RAW_MATERIAL_SHAPE_DEF:
    schema = {
        "SHAPE": "STRING",
        "DESCRIPTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "SHAPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_RAW_MATERIALS_DEF_FK2",
    ]
    def __init__(self, column_value_map):
        self.SHAPE = parse_value(self.schema, column_value_map, "SHAPE")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFPL_RAW_MATERIALS_DEF_FK2 = []

class SFPL_ITEM_DESC_SEC_GRP:
    schema = {
        "PART_NO": "STRING",
        "SECURITY_GROUP": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
    }
    primary_key_columns = [
        "PART_NO",
        "SECURITY_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_ITEM_DESC_SEC_GRP_FK1", ["SECURITY_GROUP"], "SFFND_SECURITY_GROUP_DEF", ["SECURITY_GROUP"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")

class SFWID_ORDER_NOTIFICATION_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_TAG": "STRING",
        "OBJECT_REV": "STRING",
        "PROPAGATION_ACTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "CURRENT_OBJECT_ID": "STRING",
        "CURRENT_REVISION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.OBJECT_TAG = parse_value(self.schema, column_value_map, "OBJECT_TAG")
        "User provided unique identifier of the multimedia object; can be NULL and can be modified."
        self.OBJECT_REV = parse_value(self.schema, column_value_map, "OBJECT_REV")
        "The system generated revision number of the multimedia object."
        self.PROPAGATION_ACTION = parse_value(self.schema, column_value_map, "PROPAGATION_ACTION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.CURRENT_OBJECT_ID = parse_value(self.schema, column_value_map, "CURRENT_OBJECT_ID")
        "Unique system generated identifier for a given multimedia object tht now has a more recent revision."
        self.CURRENT_REVISION = parse_value(self.schema, column_value_map, "CURRENT_REVISION")

class SFQA_DISC_ITEM_SERIAL:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
        "UNIT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "AFFECTED_QTY": "NUMBER",
        "PART_NO": "STRING",
        "OPER_NO": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "UCF_DISC_ITEM_SRL_VCH1": "STRING",
        "UCF_DISC_ITEM_SRL_VCH2": "STRING",
        "UCF_DISC_ITEM_SRL_VCH3": "STRING",
        "UCF_DISC_ITEM_SRL_VCH4": "STRING",
        "UCF_DISC_ITEM_SRL_VCH5": "STRING",
        "UCF_DISC_ITEM_SRL_VCH6": "STRING",
        "UCF_DISC_ITEM_SRL_VCH7": "STRING",
        "UCF_DISC_ITEM_SRL_VCH8": "STRING",
        "UCF_DISC_ITEM_SRL_VCH9": "STRING",
        "UCF_DISC_ITEM_SRL_VCH10": "STRING",
        "UCF_DISC_ITEM_SRL_VCH11": "STRING",
        "UCF_DISC_ITEM_SRL_VCH12": "STRING",
        "UCF_DISC_ITEM_SRL_VCH13": "STRING",
        "UCF_DISC_ITEM_SRL_VCH14": "STRING",
        "UCF_DISC_ITEM_SRL_VCH15": "STRING",
        "UCF_DISC_ITEM_SRL_FLAG1": "STRING",
        "UCF_DISC_ITEM_SRL_FLAG2": "STRING",
        "UCF_DISC_ITEM_SRL_NUM1": "NUMBER",
        "UCF_DISC_ITEM_SRL_NUM2": "NUMBER",
        "UCF_DISC_ITEM_SRL_NUM3": "NUMBER",
        "UCF_DISC_ITEM_SRL_NUM4": "NUMBER",
        "UCF_DISC_ITEM_SRL_NUM5": "NUMBER",
        "UCF_DISC_ITEM_SRL_DATE1": "STRING",
        "UCF_DISC_ITEM_SRL_DATE2": "STRING",
        "UCF_DISC_ITEM_SRL_DATE3": "STRING",
        "UCF_DISC_ITEM_SRL_DATE4": "STRING",
        "UCF_DISC_ITEM_SRL_DATE5": "STRING",
        "UCF_DISC_ITEM_SRL_FLAG3": "STRING",
        "UCF_DISC_ITEM_SRL_FLAG4": "STRING",
        "UCF_DISC_ITEM_SRL_FLAG5": "STRING",
        "UCF_DISC_ITEM_SRL_VCH255_1": "STRING",
        "UCF_DISC_ITEM_SRL_VCH255_2": "STRING",
        "UCF_DISC_ITEM_SRL_VCH255_3": "STRING",
        "UCF_DISC_ITEM_SRL_VCH4000_1": "STRING",
        "UCF_DISC_ITEM_SRL_VCH4000_2": "STRING",
        "SAMPLE_NO": "NUMBER",
        "TEMP_MARKER_COL": "STRING",
        "DESIGN_AUTHORITY": "STRING",
        "MANUFACTURER_CODE": "STRING",
        "MANUFACTURER_PART_NO": "STRING",
        "MANUFACTURER_SERIAL_NO": "STRING",
        "MANUFACTURER_LOT_NO": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "LOT_NO",
        "SERIAL_NO",
        "UNIT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_ITM_SERL_DISC_ITM_FK", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
    ]
    refs = [
        "SFQA_DISC_CMP_DSRL_DPRT_SRL_FK",
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.UNIT_ID = parse_value(self.schema, column_value_map, "UNIT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.AFFECTED_QTY = parse_value(self.schema, column_value_map, "AFFECTED_QTY")
        "Number of components/parts that have been inspected and are found to be affected by the associated discrepancy item."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier of the component/part."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.UCF_DISC_ITEM_SRL_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH1")
        self.UCF_DISC_ITEM_SRL_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH2")
        self.UCF_DISC_ITEM_SRL_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH3")
        self.UCF_DISC_ITEM_SRL_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH4")
        self.UCF_DISC_ITEM_SRL_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH5")
        self.UCF_DISC_ITEM_SRL_VCH6 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH6")
        self.UCF_DISC_ITEM_SRL_VCH7 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH7")
        self.UCF_DISC_ITEM_SRL_VCH8 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH8")
        self.UCF_DISC_ITEM_SRL_VCH9 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH9")
        self.UCF_DISC_ITEM_SRL_VCH10 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH10")
        self.UCF_DISC_ITEM_SRL_VCH11 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH11")
        self.UCF_DISC_ITEM_SRL_VCH12 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH12")
        self.UCF_DISC_ITEM_SRL_VCH13 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH13")
        self.UCF_DISC_ITEM_SRL_VCH14 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH14")
        self.UCF_DISC_ITEM_SRL_VCH15 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH15")
        self.UCF_DISC_ITEM_SRL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_FLAG1")
        self.UCF_DISC_ITEM_SRL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_FLAG2")
        self.UCF_DISC_ITEM_SRL_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_NUM1")
        self.UCF_DISC_ITEM_SRL_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_NUM2")
        self.UCF_DISC_ITEM_SRL_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_NUM3")
        self.UCF_DISC_ITEM_SRL_NUM4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_NUM4")
        self.UCF_DISC_ITEM_SRL_NUM5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_NUM5")
        self.UCF_DISC_ITEM_SRL_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_DATE1")
        self.UCF_DISC_ITEM_SRL_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_DATE2")
        self.UCF_DISC_ITEM_SRL_DATE3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_DATE3")
        self.UCF_DISC_ITEM_SRL_DATE4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_DATE4")
        self.UCF_DISC_ITEM_SRL_DATE5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_DATE5")
        self.UCF_DISC_ITEM_SRL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_FLAG3")
        self.UCF_DISC_ITEM_SRL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_FLAG4")
        self.UCF_DISC_ITEM_SRL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_FLAG5")
        self.UCF_DISC_ITEM_SRL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH255_1")
        self.UCF_DISC_ITEM_SRL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH255_2")
        self.UCF_DISC_ITEM_SRL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH255_3")
        self.UCF_DISC_ITEM_SRL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH4000_1")
        self.UCF_DISC_ITEM_SRL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH4000_2")
        self.SAMPLE_NO = parse_value(self.schema, column_value_map, "SAMPLE_NO")
        self.TEMP_MARKER_COL = parse_value(self.schema, column_value_map, "TEMP_MARKER_COL")
        self.DESIGN_AUTHORITY = parse_value(self.schema, column_value_map, "DESIGN_AUTHORITY")
        self.MANUFACTURER_CODE = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE")
        self.MANUFACTURER_PART_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_PART_NO")
        self.MANUFACTURER_SERIAL_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_SERIAL_NO")
        self.MANUFACTURER_LOT_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_LOT_NO")
        self.SFQA_DISC_CMP_DSRL_DPRT_SRL_FK = []

class SFQA_DISC_COMPONENTSERIAL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "PARENT_LOT_NO": "STRING",
        "PARENT_SERIAL_NO": "STRING",
        "ITEM_ID": "STRING",
        "REF_DES": "STRING",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "AFFECTED_QTY": "NUMBER",
        "UCF_DISC_COMP_SRL_VCH1": "STRING",
        "UCF_DISC_COMP_SRL_VCH2": "STRING",
        "UCF_DISC_COMP_SRL_VCH3": "STRING",
        "UCF_DISC_COMP_SRL_VCH4": "STRING",
        "UCF_DISC_COMP_SRL_VCH5": "STRING",
        "UCF_DISC_COMP_SRL_FLAG1": "STRING",
        "UCF_DISC_COMP_SRL_DATE1": "STRING",
        "UCF_DISC_COMP_SRL_NUM1": "NUMBER",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "UCF_DISC_COMP_SRL_VCH6": "STRING",
        "UCF_DISC_COMP_SRL_VCH7": "STRING",
        "UCF_DISC_COMP_SRL_VCH8": "STRING",
        "UCF_DISC_COMP_SRL_VCH9": "STRING",
        "UCF_DISC_COMP_SRL_VCH10": "STRING",
        "UCF_DISC_COMP_SRL_VCH11": "STRING",
        "UCF_DISC_COMP_SRL_VCH12": "STRING",
        "UCF_DISC_COMP_SRL_VCH13": "STRING",
        "UCF_DISC_COMP_SRL_VCH14": "STRING",
        "UCF_DISC_COMP_SRL_VCH15": "STRING",
        "UCF_DISC_COMP_SRL_NUM2": "NUMBER",
        "UCF_DISC_COMP_SRL_NUM3": "NUMBER",
        "UCF_DISC_COMP_SRL_NUM4": "NUMBER",
        "UCF_DISC_COMP_SRL_NUM5": "NUMBER",
        "UCF_DISC_COMP_SRL_DATE2": "STRING",
        "UCF_DISC_COMP_SRL_DATE3": "STRING",
        "UCF_DISC_COMP_SRL_DATE4": "STRING",
        "UCF_DISC_COMP_SRL_DATE5": "STRING",
        "UCF_DISC_COMP_SRL_FLAG2": "STRING",
        "UCF_DISC_COMP_SRL_FLAG3": "STRING",
        "UCF_DISC_COMP_SRL_FLAG4": "STRING",
        "UCF_DISC_COMP_SRL_FLAG5": "STRING",
        "UCF_DISC_COMP_SRL_VCH255_1": "STRING",
        "UCF_DISC_COMP_SRL_VCH255_2": "STRING",
        "UCF_DISC_COMP_SRL_VCH255_3": "STRING",
        "UCF_DISC_COMP_SRL_VCH4000_1": "STRING",
        "UCF_DISC_COMP_SRL_VCH4000_2": "STRING",
        "PART_DAT_COL_ID": "STRING",
        "UNIT_ID": "STRING",
        "COMP_UNIT_ID": "STRING",
        "COMP_SAMPLE_NO": "NUMBER",
        "FINAL_COMPONENT_DISP_FLAG": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.PARENT_LOT_NO = parse_value(self.schema, column_value_map, "PARENT_LOT_NO")
        "User-assigned lot number of a given component/part."
        self.PARENT_SERIAL_NO = parse_value(self.schema, column_value_map, "PARENT_SERIAL_NO")
        "User-assigned serial number of the parent component/part."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.AFFECTED_QTY = parse_value(self.schema, column_value_map, "AFFECTED_QTY")
        "Number of components/parts that have been inspected and are found to be affected by the associated discrepancy."
        self.UCF_DISC_COMP_SRL_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_SRL_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_SRL_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_SRL_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_SRL_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_SRL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_DISC_COMP_SRL_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_DISC_COMP_SRL_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_NUM1")
        "User-configurable field for NUM data type."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.UCF_DISC_COMP_SRL_VCH6 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH6")
        self.UCF_DISC_COMP_SRL_VCH7 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH7")
        self.UCF_DISC_COMP_SRL_VCH8 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH8")
        self.UCF_DISC_COMP_SRL_VCH9 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH9")
        self.UCF_DISC_COMP_SRL_VCH10 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH10")
        self.UCF_DISC_COMP_SRL_VCH11 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH11")
        self.UCF_DISC_COMP_SRL_VCH12 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH12")
        self.UCF_DISC_COMP_SRL_VCH13 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH13")
        self.UCF_DISC_COMP_SRL_VCH14 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH14")
        self.UCF_DISC_COMP_SRL_VCH15 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH15")
        self.UCF_DISC_COMP_SRL_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_NUM2")
        self.UCF_DISC_COMP_SRL_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_NUM3")
        self.UCF_DISC_COMP_SRL_NUM4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_NUM4")
        self.UCF_DISC_COMP_SRL_NUM5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_NUM5")
        self.UCF_DISC_COMP_SRL_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_DATE2")
        self.UCF_DISC_COMP_SRL_DATE3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_DATE3")
        self.UCF_DISC_COMP_SRL_DATE4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_DATE4")
        self.UCF_DISC_COMP_SRL_DATE5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_DATE5")
        self.UCF_DISC_COMP_SRL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_FLAG2")
        self.UCF_DISC_COMP_SRL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_FLAG3")
        self.UCF_DISC_COMP_SRL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_FLAG4")
        self.UCF_DISC_COMP_SRL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_FLAG5")
        self.UCF_DISC_COMP_SRL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH255_1")
        self.UCF_DISC_COMP_SRL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH255_2")
        self.UCF_DISC_COMP_SRL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH255_3")
        self.UCF_DISC_COMP_SRL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH4000_1")
        self.UCF_DISC_COMP_SRL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH4000_2")
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.UNIT_ID = parse_value(self.schema, column_value_map, "UNIT_ID")
        self.COMP_UNIT_ID = parse_value(self.schema, column_value_map, "COMP_UNIT_ID")
        "System generated unique id for Component Part Unit."
        self.COMP_SAMPLE_NO = parse_value(self.schema, column_value_map, "COMP_SAMPLE_NO")
        "Component Unit Sample Number."
        self.FINAL_COMPONENT_DISP_FLAG = parse_value(self.schema, column_value_map, "FINAL_COMPONENT_DISP_FLAG")
        "A flag (Y/N) indicating whether the component/part was added through Re-Disposition Units of Verify Rework Hold."

class SFPL_MFG_BOM_TRANSFORMATION:
    schema = {
        "TRANSFORMATION_ID": "STRING",
        "BOM_ID": "STRING",
        "IMPORTED_BOM_COMP_ID": "STRING",
        "IMPORTED_REF_DES": "STRING",
        "TRANSFORMED_BOM_COMP_ID": "STRING",
        "TRANSFORMED_REF_DES": "STRING",
        "TRANSFORMATION_STATUS": "STRING",
        "NOTES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TRANSFORMED_ON": "STRING",
        "TRANSFORMED_BY": "STRING",
    }
    primary_key_columns = [
        "TRANSFORMATION_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_TRANSFORM_FK1", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TRANSFORMATION_ID = parse_value(self.schema, column_value_map, "TRANSFORMATION_ID")
        "Unique system generated id for BOM transformation."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "BOM_ID for which transformation is made."
        self.IMPORTED_BOM_COMP_ID = parse_value(self.schema, column_value_map, "IMPORTED_BOM_COMP_ID")
        "BOM_COMP_ID of Imported record. NULL in case of Transformation option ADD."
        self.IMPORTED_REF_DES = parse_value(self.schema, column_value_map, "IMPORTED_REF_DES")
        "REF DES of Imported record."
        self.TRANSFORMED_BOM_COMP_ID = parse_value(self.schema, column_value_map, "TRANSFORMED_BOM_COMP_ID")
        "BOM_COMP_ID of Transformed record. NULL in case of Transformation option DELETE."
        self.TRANSFORMED_REF_DES = parse_value(self.schema, column_value_map, "TRANSFORMED_REF_DES")
        "REF DES of Transformed record."
        self.TRANSFORMATION_STATUS = parse_value(self.schema, column_value_map, "TRANSFORMATION_STATUS")
        "Transformation Status APPROVED or UNAPPROVED."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Notes provided during transformation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TRANSFORMED_ON = parse_value(self.schema, column_value_map, "TRANSFORMED_ON")
        "The date and time the record was last transformed."
        self.TRANSFORMED_BY = parse_value(self.schema, column_value_map, "TRANSFORMED_BY")
        "Last user who transformed the record."

class SFWID_LOT_DESC_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "LOT_ID": "STRING",
        "LOT_SCRAP_QTY": "NUMBER",
        "LOT_COMPLETE_QTY": "NUMBER",
        "LOT_STOP_QTY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "LOT_NO": "STRING",
        "SPLIT_FLAG": "STRING",
        "PARENT_LOT_ID": "STRING",
        "ORIG_LOT_ID": "STRING",
        "LOT_QTY": "NUMBER",
        "HIST_ALT_ID": "STRING",
        "UCF_LOT_VCH1": "STRING",
        "UCF_LOT_VCH2": "STRING",
        "UCF_LOT_VCH3": "STRING",
        "UCF_LOT_VCH4": "STRING",
        "UCF_LOT_VCH5": "STRING",
        "UCF_LOT_VCH6": "STRING",
        "UCF_LOT_VCH7": "STRING",
        "UCF_LOT_VCH8": "STRING",
        "UCF_LOT_VCH9": "STRING",
        "UCF_LOT_VCH10": "STRING",
        "UCF_LOT_VCH11": "STRING",
        "UCF_LOT_VCH12": "STRING",
        "UCF_LOT_VCH13": "STRING",
        "UCF_LOT_VCH14": "STRING",
        "UCF_LOT_VCH15": "STRING",
        "UCF_LOT_NUM1": "NUMBER",
        "UCF_LOT_NUM2": "NUMBER",
        "UCF_LOT_NUM3": "NUMBER",
        "UCF_LOT_NUM4": "NUMBER",
        "UCF_LOT_NUM5": "NUMBER",
        "UCF_LOT_DATE1": "STRING",
        "UCF_LOT_DATE2": "STRING",
        "UCF_LOT_DATE3": "STRING",
        "UCF_LOT_DATE4": "STRING",
        "UCF_LOT_DATE5": "STRING",
        "UCF_LOT_FLAG1": "STRING",
        "UCF_LOT_FLAG2": "STRING",
        "UCF_LOT_FLAG3": "STRING",
        "UCF_LOT_FLAG4": "STRING",
        "UCF_LOT_FLAG5": "STRING",
        "UCF_LOT_VCH255_1": "STRING",
        "UCF_LOT_VCH255_2": "STRING",
        "UCF_LOT_VCH255_3": "STRING",
        "UCF_LOT_VCH4000_1": "STRING",
        "UCF_LOT_VCH4000_2": "STRING",
        "BATCH_NO": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the associated lot number."
        self.LOT_SCRAP_QTY = parse_value(self.schema, column_value_map, "LOT_SCRAP_QTY")
        "The number of scrapped components/parts in the lot."
        self.LOT_COMPLETE_QTY = parse_value(self.schema, column_value_map, "LOT_COMPLETE_QTY")
        "The number of completed components/parts in the lot."
        self.LOT_STOP_QTY = parse_value(self.schema, column_value_map, "LOT_STOP_QTY")
        "The number of stopped components/parts in the lot."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.SPLIT_FLAG = parse_value(self.schema, column_value_map, "SPLIT_FLAG")
        "A flag (Y/N) that indicates whether or not the work order is a split of another work order."
        self.PARENT_LOT_ID = parse_value(self.schema, column_value_map, "PARENT_LOT_ID")
        "Unique, system-generated identifier of a lot number assigned to the parent component/part."
        self.ORIG_LOT_ID = parse_value(self.schema, column_value_map, "ORIG_LOT_ID")
        "System-generated identifier of the original lot number assigned to a given component/part."
        self.LOT_QTY = parse_value(self.schema, column_value_map, "LOT_QTY")
        "The number of components/parts in the lot."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.UCF_LOT_VCH1 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH1")
        self.UCF_LOT_VCH2 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH2")
        self.UCF_LOT_VCH3 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH3")
        self.UCF_LOT_VCH4 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH4")
        self.UCF_LOT_VCH5 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH5")
        self.UCF_LOT_VCH6 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH6")
        self.UCF_LOT_VCH7 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH7")
        self.UCF_LOT_VCH8 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH8")
        self.UCF_LOT_VCH9 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH9")
        self.UCF_LOT_VCH10 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH10")
        self.UCF_LOT_VCH11 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH11")
        self.UCF_LOT_VCH12 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH12")
        self.UCF_LOT_VCH13 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH13")
        self.UCF_LOT_VCH14 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH14")
        self.UCF_LOT_VCH15 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH15")
        self.UCF_LOT_NUM1 = parse_value(self.schema, column_value_map, "UCF_LOT_NUM1")
        self.UCF_LOT_NUM2 = parse_value(self.schema, column_value_map, "UCF_LOT_NUM2")
        self.UCF_LOT_NUM3 = parse_value(self.schema, column_value_map, "UCF_LOT_NUM3")
        self.UCF_LOT_NUM4 = parse_value(self.schema, column_value_map, "UCF_LOT_NUM4")
        self.UCF_LOT_NUM5 = parse_value(self.schema, column_value_map, "UCF_LOT_NUM5")
        self.UCF_LOT_DATE1 = parse_value(self.schema, column_value_map, "UCF_LOT_DATE1")
        self.UCF_LOT_DATE2 = parse_value(self.schema, column_value_map, "UCF_LOT_DATE2")
        self.UCF_LOT_DATE3 = parse_value(self.schema, column_value_map, "UCF_LOT_DATE3")
        self.UCF_LOT_DATE4 = parse_value(self.schema, column_value_map, "UCF_LOT_DATE4")
        self.UCF_LOT_DATE5 = parse_value(self.schema, column_value_map, "UCF_LOT_DATE5")
        self.UCF_LOT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_LOT_FLAG1")
        self.UCF_LOT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_LOT_FLAG2")
        self.UCF_LOT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_LOT_FLAG3")
        self.UCF_LOT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_LOT_FLAG4")
        self.UCF_LOT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_LOT_FLAG5")
        self.UCF_LOT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH255_1")
        self.UCF_LOT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH255_2")
        self.UCF_LOT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH255_3")
        self.UCF_LOT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH4000_1")
        self.UCF_LOT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_LOT_VCH4000_2")
        self.BATCH_NO = parse_value(self.schema, column_value_map, "BATCH_NO")
        "The Batch No from SAP provides a secondary tracking no for user reference in Solumina."

class SFWID_EARNED_VALUE_CLAIM_CHANGLOG:
    schema = {
        "CHANGE_LOG_ID": "STRING",
        "CLAIM_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "ACTION": "STRING",
        "CLAIM_TYPE": "STRING",
        "CLAIM_PERCENTAGE": "NUMBER",
        "CLAIMED_BY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "CHANGE_LOG_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CHANGE_LOG_ID = parse_value(self.schema, column_value_map, "CHANGE_LOG_ID")
        self.CLAIM_ID = parse_value(self.schema, column_value_map, "CLAIM_ID")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.ACTION = parse_value(self.schema, column_value_map, "ACTION")
        self.CLAIM_TYPE = parse_value(self.schema, column_value_map, "CLAIM_TYPE")
        self.CLAIM_PERCENTAGE = parse_value(self.schema, column_value_map, "CLAIM_PERCENTAGE")
        self.CLAIMED_BY = parse_value(self.schema, column_value_map, "CLAIMED_BY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")

class SFSQA_INSP_ITEM_TYPE_DEF:
    schema = {
        "INSP_ITEM_TYPE": "STRING",
        "INSP_ITEM_TYPE_DESC": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "INSP_ITEM_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_INSP_ITEM_NAME_DEF_FK1",
        "SFSQA_CLIST_IIFK12",
    ]
    def __init__(self, column_value_map):
        self.INSP_ITEM_TYPE = parse_value(self.schema, column_value_map, "INSP_ITEM_TYPE")
        self.INSP_ITEM_TYPE_DESC = parse_value(self.schema, column_value_map, "INSP_ITEM_TYPE_DESC")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFSQA_INSP_ITEM_NAME_DEF_FK1 = []
        self.SFSQA_CLIST_IIFK12 = []

class SFFND_TOOL_SERIAL_DEF_XREF:
    schema = {
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
        "TOOL_SERIAL_NO": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "NOTES": "STRING",
    }
    primary_key_columns = [
        "TOOL_NO",
        "TOOL_CHG",
        "TOOL_SERIAL_NO",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_TOOL_SERIAL_DEF_XREF_FK2", ["TOOL_NO","TOOL_CHG","TOOL_SERIAL_NO"], "SFFND_TOOL_SERIAL_DEF", ["TOOL_NO","TOOL_CHG","TOOL_SERIAL_NO"]),
        DbForeignKey("SFFND_TOOL_SERIAL_DEF_XREF_FK1", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The change number, secondary identifier, of the tool."
        self.TOOL_SERIAL_NO = parse_value(self.schema, column_value_map, "TOOL_SERIAL_NO")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")

class SFFND_COMM:
    schema = {
        "COMM_ID": "STRING",
        "TASK_ID": "STRING",
        "COMM_STATUS": "STRING",
        "FROM_QUEUE": "STRING",
        "FROM_USERID": "STRING",
        "REPLY_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "SUBJECT": "STRING",
        "LAST_ACTION": "STRING",
        "ORIG_COMM_ID": "STRING",
        "PARENT_COMM_ID": "STRING",
        "PRIORITY": "STRING",
        "TEXT": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "HOLD_FLAG": "STRING",
        "STEP_KEY": "NUMBER",
        "UCF_COMM_VCH1": "STRING",
        "UCF_COMM_VCH2": "STRING",
        "UCF_COMM_VCH3": "STRING",
        "UCF_COMM_VCH4": "STRING",
        "UCF_COMM_VCH5": "STRING",
        "UCF_COMM_VCH6": "STRING",
        "UCF_COMM_VCH7": "STRING",
        "UCF_COMM_VCH8": "STRING",
        "UCF_COMM_VCH9": "STRING",
        "UCF_COMM_VCH10": "STRING",
        "UCF_COMM_VCH11": "STRING",
        "UCF_COMM_VCH12": "STRING",
        "UCF_COMM_VCH13": "STRING",
        "UCF_COMM_VCH14": "STRING",
        "UCF_COMM_VCH15": "STRING",
        "UCF_COMM_NUM1": "NUMBER",
        "UCF_COMM_NUM2": "NUMBER",
        "UCF_COMM_NUM3": "NUMBER",
        "UCF_COMM_NUM4": "NUMBER",
        "UCF_COMM_NUM5": "NUMBER",
        "UCF_COMM_DATE1": "STRING",
        "UCF_COMM_DATE2": "STRING",
        "UCF_COMM_DATE3": "STRING",
        "UCF_COMM_DATE4": "STRING",
        "UCF_COMM_DATE5": "STRING",
        "UCF_COMM_FLAG1": "STRING",
        "UCF_COMM_FLAG2": "STRING",
        "UCF_COMM_FLAG3": "STRING",
        "UCF_COMM_FLAG4": "STRING",
        "UCF_COMM_FLAG5": "STRING",
        "DOC_TYPE": "STRING",
        "UCF_COMM_VCH255_1": "STRING",
        "UCF_COMM_VCH255_2": "STRING",
        "UCF_COMM_VCH255_3": "STRING",
        "UCF_COMM_VCH4000_1": "STRING",
        "UCF_COMM_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "COMM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_COMM_TASK_FK", ["TASK_ID"], "SFFND_TASK", ["TASK_ID"]),
        DbForeignKey("SFFND_COMM_PARNT_COMM_FK", ["PARENT_COMM_ID"], "SFFND_COMM", ["COMM_ID"]),
        DbForeignKey("SFFND_COMM_ORIG_COMM_FK", ["ORIG_COMM_ID"], "SFFND_COMM", ["COMM_ID"]),
        DbForeignKey("SFFND_COMM_OPER_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
        "SFFND_COMM_PARNT_COMM_FK",
        "SFFND_COMM_ORIG_COMM_FK",
        "SFFND_COMM_MM_OBJECTS_FK2",
        "SFFND_COMM_ROUTING_COMM_FK",
        "SFFND_COMM_LAST_FILTER_CONT_F1",
        "SFFND_HTREF_COMM_TEXT_COMM_FK",
    ]
    def __init__(self, column_value_map):
        self.COMM_ID = parse_value(self.schema, column_value_map, "COMM_ID")
        "Unique system generated identifier for a given communication record."
        self.TASK_ID = parse_value(self.schema, column_value_map, "TASK_ID")
        "The unique identifier of a task."
        self.COMM_STATUS = parse_value(self.schema, column_value_map, "COMM_STATUS")
        self.FROM_QUEUE = parse_value(self.schema, column_value_map, "FROM_QUEUE")
        self.FROM_USERID = parse_value(self.schema, column_value_map, "FROM_USERID")
        "Unique, system generated identifier of the user a given communication came from."
        self.REPLY_FLAG = parse_value(self.schema, column_value_map, "REPLY_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.SUBJECT = parse_value(self.schema, column_value_map, "SUBJECT")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ORIG_COMM_ID = parse_value(self.schema, column_value_map, "ORIG_COMM_ID")
        "The unique system generated identifier of the cummincation this one originated from (in response to)."
        self.PARENT_COMM_ID = parse_value(self.schema, column_value_map, "PARENT_COMM_ID")
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        "The priority of the task."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.HOLD_FLAG = parse_value(self.schema, column_value_map, "HOLD_FLAG")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.UCF_COMM_VCH1 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH2 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH3 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH4 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH5 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH6 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH7 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH8 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH9 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH10 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH11 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH12 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH13 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH14 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_VCH15 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_NUM1 = parse_value(self.schema, column_value_map, "UCF_COMM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_COMM_NUM2 = parse_value(self.schema, column_value_map, "UCF_COMM_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_COMM_NUM3 = parse_value(self.schema, column_value_map, "UCF_COMM_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_COMM_NUM4 = parse_value(self.schema, column_value_map, "UCF_COMM_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_COMM_NUM5 = parse_value(self.schema, column_value_map, "UCF_COMM_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_COMM_DATE1 = parse_value(self.schema, column_value_map, "UCF_COMM_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_COMM_DATE2 = parse_value(self.schema, column_value_map, "UCF_COMM_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_COMM_DATE3 = parse_value(self.schema, column_value_map, "UCF_COMM_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_COMM_DATE4 = parse_value(self.schema, column_value_map, "UCF_COMM_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_COMM_DATE5 = parse_value(self.schema, column_value_map, "UCF_COMM_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_COMM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_COMM_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_COMM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_COMM_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_COMM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_COMM_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_COMM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_COMM_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_COMM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_COMM_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        self.UCF_COMM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_COMM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_COMM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_COMM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_COMM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_COMM_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.SFFND_COMM_PARNT_COMM_FK = []
        self.SFFND_COMM_ORIG_COMM_FK = []
        self.SFFND_COMM_MM_OBJECTS_FK2 = []
        self.SFFND_COMM_ROUTING_COMM_FK = []
        self.SFFND_COMM_LAST_FILTER_CONT_F1 = []
        self.SFFND_HTREF_COMM_TEXT_COMM_FK = []

class SFWID_USER_OPER_CHG_ACK:
    schema = {
        "ORDER_ID": "STRING",
        "USERID": "STRING",
        "NOTES": "STRING",
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "WARNING_READ_FLAG": "STRING",
        "OPER_UPDT_NO": "NUMBER",
        "ACKNOWLEDGE_REQ": "STRING",
        "UPDT_USERID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
    }
    primary_key_columns = [
        "USERID",
        "PLAN_ID",
        "OPER_KEY",
        "OPER_UPDT_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_USER_OPER_CHG_ACK_FK2", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_USER_OPER_CHG_ACK_FK3", ["USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFWID_USER_OPER_CHG_ACK_FK1", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS","OPER_KEY","OPER_UPDT_NO"], "SFPL_OPERATION_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS","OPER_KEY","OPER_UPDT_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Order in which the changes are acknowledged."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "User performing the Instruction Read Acknowledgement."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "User operation change acknowledgement notes."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.WARNING_READ_FLAG = parse_value(self.schema, column_value_map, "WARNING_READ_FLAG")
        "Y/N, Y Indicates Instruction changes are read by the user otherwise N."
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        "Unique, system-generated sequence number identifying a given version/revision/alteration of a given operation description."
        self.ACKNOWLEDGE_REQ = parse_value(self.schema, column_value_map, "ACKNOWLEDGE_REQ")
        "Y/N, Y Indicates Instructions read acknowledgment required otherwise N."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "Plan Version."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "Plan Revision."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Plan Alterations."

class SFCORE_USER_HIST:
    schema = {
        "HIST_ID": "STRING",
        "HIST_TIME_STAMP": "STRING",
        "HIST_USERID": "STRING",
        "HIST_ACTION": "STRING",
        "USERID": "STRING",
        "PASSWORD": "STRING",
        "ACCOUNT_STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "EXPIRY_DATE": "STRING",
        "PASSWD_CHANGE_DATE": "STRING",
        "ACCOUNT_TYPE": "STRING",
        "PASSWD_EXPIRE_DAYS": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.PASSWORD = parse_value(self.schema, column_value_map, "PASSWORD")
        self.ACCOUNT_STATUS = parse_value(self.schema, column_value_map, "ACCOUNT_STATUS")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.EXPIRY_DATE = parse_value(self.schema, column_value_map, "EXPIRY_DATE")
        self.PASSWD_CHANGE_DATE = parse_value(self.schema, column_value_map, "PASSWD_CHANGE_DATE")
        self.ACCOUNT_TYPE = parse_value(self.schema, column_value_map, "ACCOUNT_TYPE")
        self.PASSWD_EXPIRE_DAYS = parse_value(self.schema, column_value_map, "PASSWD_EXPIRE_DAYS")

class SFPL_PLAN_TEXT_SV_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_DISC_CAUSE_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "CAUSE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "RESP_RESOURCE_TYPE": "STRING",
        "LAST_ACTION": "STRING",
        "DEFECT_TYPE": "STRING",
        "RELATED_TOOL_NO": "STRING",
        "RELATED_MACHINE_NO": "STRING",
        "PROCESS_TYPE": "STRING",
        "MAIN_CAUSE_FLAG": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.CAUSE_TYPE = parse_value(self.schema, column_value_map, "CAUSE_TYPE")
        "Type or classification of cause/origin leading to a discrepancy."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.RESP_RESOURCE_TYPE = parse_value(self.schema, column_value_map, "RESP_RESOURCE_TYPE")
        "Type of resource of cause/origin leading to a discrepancy. Possible values are Part, Tool, Machine, Facilities, Skill, Process, System, and Other."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DEFECT_TYPE = parse_value(self.schema, column_value_map, "DEFECT_TYPE")
        "Type or classification of defect."
        self.RELATED_TOOL_NO = parse_value(self.schema, column_value_map, "RELATED_TOOL_NO")
        "Related Tool No."
        self.RELATED_MACHINE_NO = parse_value(self.schema, column_value_map, "RELATED_MACHINE_NO")
        "Related Machine No."
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        "Type or classification of process."
        self.MAIN_CAUSE_FLAG = parse_value(self.schema, column_value_map, "MAIN_CAUSE_FLAG")
        "This Flag (Y/N) is indicating whether the Cause is Main Cause. 'Y' indicates, it is Main Cause."

class SFFND_STDTEXT_DATA:
    schema = {
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DEFAULT_VALUE": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "OBJECT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DEFAULT_VALUE = parse_value(self.schema, column_value_map, "DEFAULT_VALUE")

class SFWID_ORDER_CYCLES:
    schema = {
        "CYCLE_ID": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "ORDER_NO": "STRING",
        "OPER_NO": "STRING",
        "SIGNAL_TYPE": "STRING",
        "SIGNAL_STATUS": "STRING",
        "UNIT_PER_CYCLE": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SIGNAL_ERROR": "STRING",
        "ODOMETER": "NUMBER",
        "NO_OF_CYCLES": "NUMBER",
        "LOCATION_ID": "STRING",
        "DEPARTMENT_ID": "STRING",
        "CENTER_ID": "STRING",
    }
    primary_key_columns = [
        "CYCLE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_CYCLES_FK2", ["LOCATION_ID","DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFWID_ORDER_CYCLES_FK3", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFWID_ORDER_CYCLES_FK1", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CYCLE_ID = parse_value(self.schema, column_value_map, "CYCLE_ID")
        "Unique system generated Id for a cycle."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given part."
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        "Work order on which the cycle is getting processed."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "Work order operation on which the cycle is getting processed."
        self.SIGNAL_TYPE = parse_value(self.schema, column_value_map, "SIGNAL_TYPE")
        "Type of signal to process the cycle, possible values are Cycle Start and Cycle Complete."
        self.SIGNAL_STATUS = parse_value(self.schema, column_value_map, "SIGNAL_STATUS")
        "Status of the signal being processed, possible values are PENDING, COMPLETE, INVALID, HOLD."
        self.UNIT_PER_CYCLE = parse_value(self.schema, column_value_map, "UNIT_PER_CYCLE")
        "Number of units processed per cycle."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SIGNAL_ERROR = parse_value(self.schema, column_value_map, "SIGNAL_ERROR")
        "Error message if any error occurs during transaction."
        self.ODOMETER = parse_value(self.schema, column_value_map, "ODOMETER")
        "The incremental value of cycles processed by a machine."
        self.NO_OF_CYCLES = parse_value(self.schema, column_value_map, "NO_OF_CYCLES")
        "Difference between current ODOMETER value and the last ODOMETER value."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        self.DEPARTMENT_ID = parse_value(self.schema, column_value_map, "DEPARTMENT_ID")
        self.CENTER_ID = parse_value(self.schema, column_value_map, "CENTER_ID")

class SFFND_USER_SKILL:
    schema = {
        "USERID": "STRING",
        "SKILL_CATEGORY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "USERID",
        "SKILL_CATEGORY",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_USER_SKILL_USER_FK", ["USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFFND_USER_SKILL_SCATG_FK", ["SKILL_CATEGORY"], "SFFND_SKILL_CATEGORY_DEF", ["SKILL_CATEGORY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.SKILL_CATEGORY = parse_value(self.schema, column_value_map, "SKILL_CATEGORY")
        "A category to which the user's skill belongs."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_ORDER_RELATED:
    schema = {
        "ORDER_ID": "STRING",
        "RELATED_ORDER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "RELATED_ORDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_RELATED_FK02", ["RELATED_ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_RELATED_FK01", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.RELATED_ORDER_ID = parse_value(self.schema, column_value_map, "RELATED_ORDER_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFFND_AUDIT_LEVEL_DEF:
    schema = {
        "AUDIT_LEVEL": "NUMBER",
        "DESCRIPTION": "STRING",
        "NO_OF_OVER_INSP_UNITS": "NUMBER",
        "NO_OF_OVER_INSP_DCS": "NUMBER",
        "OVER_INSPECTION_FREQUENCY": "NUMBER",
        "RANDOM_PERCENT": "NUMBER",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "ADVANCE_TO_LEVEL": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OVER_INSPECT_BUYOFF_FLAG": "STRING",
    }
    primary_key_columns = [
        "AUDIT_LEVEL",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_AUDIT_LEVEL_DEF_FK1", ["ADVANCE_TO_LEVEL"], "SFFND_AUDIT_LEVEL_DEF", ["AUDIT_LEVEL"]),
    ]
    refs = [
        "SFFND_AUDIT_LVL_CRITERIA_FK1",
        "SFFND_AUDIT_LEVEL_DEF_FK1",
        "SFFND_USER_MAX_LEVEL_FK",
        "SFFND_USER_CUR_LEVEL_FK",
    ]
    def __init__(self, column_value_map):
        self.AUDIT_LEVEL = parse_value(self.schema, column_value_map, "AUDIT_LEVEL")
        "Audit Level."
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        "Audit Level description."
        self.NO_OF_OVER_INSP_UNITS = parse_value(self.schema, column_value_map, "NO_OF_OVER_INSP_UNITS")
        "No of Good Over Inspected Units/Lots to Certify."
        self.NO_OF_OVER_INSP_DCS = parse_value(self.schema, column_value_map, "NO_OF_OVER_INSP_DCS")
        "No of Good Over Inspected DCs to Certify."
        self.OVER_INSPECTION_FREQUENCY = parse_value(self.schema, column_value_map, "OVER_INSPECTION_FREQUENCY")
        "Over Inspection Frequency."
        self.RANDOM_PERCENT = parse_value(self.schema, column_value_map, "RANDOM_PERCENT")
        "Random Percent for Over Inspection."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.ADVANCE_TO_LEVEL = parse_value(self.schema, column_value_map, "ADVANCE_TO_LEVEL")
        "Advance to Audit Level."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OVER_INSPECT_BUYOFF_FLAG = parse_value(self.schema, column_value_map, "OVER_INSPECT_BUYOFF_FLAG")
        self.SFFND_AUDIT_LVL_CRITERIA_FK1 = []
        self.SFFND_AUDIT_LEVEL_DEF_FK1 = []
        self.SFFND_USER_MAX_LEVEL_FK = []
        self.SFFND_USER_CUR_LEVEL_FK = []

class SFQA_CA_CAT_TEMPLATE_ATTACH:
    schema = {
        "CA_SECTION": "STRING",
        "DOC_TYPE": "STRING",
        "CA_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "WORK_FLOW": "STRING",
        "LAST_ACTION": "STRING",
        "OBJECT_ID": "STRING",
        "NOTES": "STRING",
    }
    primary_key_columns = [
        "DOC_TYPE",
        "CA_TYPE",
        "WORK_FLOW",
        "CA_SECTION",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_CAT_TEMPATT_CATYPE_FK2", ["DOC_TYPE","CA_TYPE","WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
        DbForeignKey("SFQA_CA_CAT_TEMP_ATTACH_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_SECTION = parse_value(self.schema, column_value_map, "CA_SECTION")
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        self.CA_TYPE = parse_value(self.schema, column_value_map, "CA_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.WORK_FLOW = parse_value(self.schema, column_value_map, "WORK_FLOW")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")

class SFFND_ALERT_CONDITION_DEF:
    schema = {
        "ALERT_TYPE": "STRING",
        "ALERT_CONDITION": "STRING",
        "DEFAULT_VALUE_ON_NULL": "STRING",
        "AGING_CONDITION_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "DESCRIPTION": "STRING",
    }
    primary_key_columns = [
        "ALERT_TYPE",
        "ALERT_CONDITION",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_ALERT_CONDITION_DEF_FK1", ["ALERT_TYPE"], "SFFND_ALERT_TYPE_DEF", ["ALERT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ALERT_TYPE = parse_value(self.schema, column_value_map, "ALERT_TYPE")
        self.ALERT_CONDITION = parse_value(self.schema, column_value_map, "ALERT_CONDITION")
        self.DEFAULT_VALUE_ON_NULL = parse_value(self.schema, column_value_map, "DEFAULT_VALUE_ON_NULL")
        self.AGING_CONDITION_FLAG = parse_value(self.schema, column_value_map, "AGING_CONDITION_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")

class SFOR_SFWID_ORDER_SUBJECT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "SUBJECT_NO": "NUMBER",
        "SUBJECT_REV": "NUMBER",
        "TITLE": "STRING",
        "AUTHORITY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "INCLUDED_FLAG": "STRING",
        "STANDARD_FLAG": "STRING",
        "FILTERED_FLAG": "STRING",
        "SUBJECT_STATUS": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "NOTES": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "UCF_ORDER_SUBJECT_VCH1": "STRING",
        "UCF_ORDER_SUBJECT_VCH2": "STRING",
        "UCF_ORDER_SUBJECT_VCH3": "STRING",
        "UCF_ORDER_SUBJECT_VCH4": "STRING",
        "UCF_ORDER_SUBJECT_VCH5": "STRING",
        "UCF_ORDER_SUBJECT_VCH6": "STRING",
        "UCF_ORDER_SUBJECT_VCH7": "STRING",
        "UCF_ORDER_SUBJECT_VCH8": "STRING",
        "UCF_ORDER_SUBJECT_VCH9": "STRING",
        "UCF_ORDER_SUBJECT_VCH10": "STRING",
        "UCF_ORDER_SUBJECT_VCH11": "STRING",
        "UCF_ORDER_SUBJECT_VCH12": "STRING",
        "UCF_ORDER_SUBJECT_VCH13": "STRING",
        "UCF_ORDER_SUBJECT_VCH14": "STRING",
        "UCF_ORDER_SUBJECT_VCH15": "STRING",
        "UCF_ORDER_SUBJECT_NUM1": "NUMBER",
        "UCF_ORDER_SUBJECT_NUM2": "NUMBER",
        "UCF_ORDER_SUBJECT_NUM3": "NUMBER",
        "UCF_ORDER_SUBJECT_NUM4": "NUMBER",
        "UCF_ORDER_SUBJECT_NUM5": "NUMBER",
        "UCF_ORDER_SUBJECT_FLAG1": "STRING",
        "UCF_ORDER_SUBJECT_FLAG2": "STRING",
        "UCF_ORDER_SUBJECT_FLAG3": "STRING",
        "UCF_ORDER_SUBJECT_FLAG4": "STRING",
        "UCF_ORDER_SUBJECT_FLAG5": "STRING",
        "UCF_ORDER_SUBJECT_DATE1": "STRING",
        "UCF_ORDER_SUBJECT_DATE2": "STRING",
        "UCF_ORDER_SUBJECT_DATE3": "STRING",
        "UCF_ORDER_SUBJECT_DATE4": "STRING",
        "UCF_ORDER_SUBJECT_DATE5": "DATE",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.SUBJECT_NO = parse_value(self.schema, column_value_map, "SUBJECT_NO")
        self.SUBJECT_REV = parse_value(self.schema, column_value_map, "SUBJECT_REV")
        self.TITLE = parse_value(self.schema, column_value_map, "TITLE")
        "Title or name of the given operation."
        self.AUTHORITY = parse_value(self.schema, column_value_map, "AUTHORITY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.INCLUDED_FLAG = parse_value(self.schema, column_value_map, "INCLUDED_FLAG")
        self.STANDARD_FLAG = parse_value(self.schema, column_value_map, "STANDARD_FLAG")
        self.FILTERED_FLAG = parse_value(self.schema, column_value_map, "FILTERED_FLAG")
        self.SUBJECT_STATUS = parse_value(self.schema, column_value_map, "SUBJECT_STATUS")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        self.UCF_ORDER_SUBJECT_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_SUBJECT_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_SUBJECT_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_SUBJECT_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_SUBJECT_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_SUBJECT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_SUBJECT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_SUBJECT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_SUBJECT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_SUBJECT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_SUBJECT_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_SUBJECT_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_SUBJECT_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_SUBJECT_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_SUBJECT_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_DATE5")
        "User-configurable field for DATE data type."

class SFPL_IMPACTED_OBJECTS:
    schema = {
        "IMPACTED_OBJECT_ID": "STRING",
        "CHANGE_REQUEST_ID": "STRING",
        "AFFECTED_OBJECT_ID": "STRING",
        "IMPACTED_OBJECT_TYPE": "STRING",
        "USED_IN_FLAG": "STRING",
        "ITEM_ID": "STRING",
        "BOM_ID": "STRING",
        "PLAN_ID": "STRING",
        "OBJECT_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "APPROVAL_STATUS": "STRING",
        "ORDER_ID": "STRING",
        "REVIEWED_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "INSP_PLAN_ID": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "INSP_ORDER_ID": "STRING",
        "INSP_ITEM_ID": "STRING",
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
    }
    primary_key_columns = [
        "IMPACTED_OBJECT_ID",
        "CHANGE_REQUEST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_IMPACTED_OBJECTS_FK4", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFPL_IMPACTED_OBJECTS_FK6", ["INSP_PLAN_ID","INSP_PLAN_REV"], "SFSQA_INSP_PLAN_DESC", ["INSP_PLAN_ID","INSP_PLAN_REV"]),
        DbForeignKey("SFPL_IMPACTED_OBJECTS_FK10", ["INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFPL_IMPACTED_OBJECTS_FK8", ["AFFECTED_OBJECT_ID","CHANGE_REQUEST_ID"], "SFPL_AFFECTED_OBJECTS", ["AFFECTED_OBJECT_ID","CHANGE_REQUEST_ID"]),
        DbForeignKey("SFPL_IMPACTED_OBJECTS_FK1", ["CHANGE_REQUEST_ID"], "SFPL_CHANGE_REQUEST", ["CHANGE_REQUEST_ID"]),
        DbForeignKey("SFPL_IMPACTED_OBJECTS_FK2", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_IMPACTED_OBJECTS_FK7", ["INSP_ITEM_ID","OWNER_CODE","INSP_DEF_REV"], "SFSQA_INSP_DEFINITION_REV", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"]),
        DbForeignKey("SFPL_IMPACTED_OBJECTS_FK3", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFPL_IMPACTED_OBJECTS_FK5", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
        DbForeignKey("SFPL_IMPACTED_OBJECTS_FK9", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
    ]
    refs = [
        "SFPL_PLANNED_ACTIONS_FK8",
    ]
    def __init__(self, column_value_map):
        self.IMPACTED_OBJECT_ID = parse_value(self.schema, column_value_map, "IMPACTED_OBJECT_ID")
        "Unique System Generated Identifier of an Impacted Object of Change Request."
        self.CHANGE_REQUEST_ID = parse_value(self.schema, column_value_map, "CHANGE_REQUEST_ID")
        "Unique System Generated Identifier of a Change Request."
        self.AFFECTED_OBJECT_ID = parse_value(self.schema, column_value_map, "AFFECTED_OBJECT_ID")
        "Unique System Generated Identifier of an Affected Object of Change Request."
        self.IMPACTED_OBJECT_TYPE = parse_value(self.schema, column_value_map, "IMPACTED_OBJECT_TYPE")
        "The Type of Object as Impacted Output. It can be : Bom, Work Order, Work Plan, Standard Operation, Standard Text, Inspection Plan, Inspection Order, All Types of MM Objects. Based on this field, the other Key ID fields will be populated."
        self.USED_IN_FLAG = parse_value(self.schema, column_value_map, "USED_IN_FLAG")
        "Whether this impacted object is used in that particular OBJECT_TYPE or not; By default, it will be N, means the impacted object is created from that particular OBJECT_TYPE."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Key Field for Part, Tool, Machine, etc."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Key Field for MBOM / EBOM / PLIST."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Key Field for Standard Operation, Work Plan."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Key Field for For File, Illustration, Standard Text, Standard Operation."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "Key Field for Standard Operation, Work Plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "Key Field for Standard Operation, Work Plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Key Field for Standard Operation, Work Plan."
        self.APPROVAL_STATUS = parse_value(self.schema, column_value_map, "APPROVAL_STATUS")
        "Approval Status for Impacted Object. Value can be like PENDING, COMPLETE."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Key Field for Work Order."
        self.REVIEWED_FLAG = parse_value(self.schema, column_value_map, "REVIEWED_FLAG")
        "Whether this impacted object is reviewed or not."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        "Key Field for Inspection Plan."
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        "Key Field for Inspection Plan."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        "Key Field for Inspection Order."
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        "Key Field for Inspection Definition."
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        "Key Field for Inspection Definition."
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        "Key Field for Inspection Definition."
        self.SFPL_PLANNED_ACTIONS_FK8 = []

class SFFND_IMP_VERSION:
    schema = {
        "SHORT_IMP_VER": "STRING",
        "LONG_IMP_VER": "STRING",
        "MIN_REQ_FRMWK_VER": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "SHORT_IMP_VER",
        "LONG_IMP_VER",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SHORT_IMP_VER = parse_value(self.schema, column_value_map, "SHORT_IMP_VER")
        self.LONG_IMP_VER = parse_value(self.schema, column_value_map, "LONG_IMP_VER")
        self.MIN_REQ_FRMWK_VER = parse_value(self.schema, column_value_map, "MIN_REQ_FRMWK_VER")
        "The version number of the oldest Solumina Framework release that is compatible with the Foundation release."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_ORDER_MM_OBJECTS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "ALT_ID": "STRING",
        "HIST_ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH1": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH2": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH3": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH4": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH5": "STRING",
        "UCF_SFWID_WO_MM_OBJ_NUM1": "NUMBER",
        "UCF_SFWID_WO_MM_OBJ_NUM2": "NUMBER",
        "UCF_SFWID_WO_MM_OBJ_NUM3": "NUMBER",
        "UCF_SFWID_WO_MM_OBJ_DATE1": "STRING",
        "UCF_SFWID_WO_MM_OBJ_DATE2": "STRING",
        "UCF_SFWID_WO_MM_OBJ_FLAG1": "STRING",
        "UCF_SFWID_WO_MM_OBJ_FLAG2": "STRING",
        "UCF_SFWID_WO_MM_OBJ_FLAG3": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH255_1": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH255_2": "STRING",
        "SOURCE_ID": "STRING",
        "SOURCE_TYPE": "STRING",
        "ORIG_OBJECT_ID": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "RTF_LINK_ID": "STRING",
        "BOM_LINE_NO": "STRING",
        "EFF_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "DATE",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a work plan."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_SFWID_WO_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_WO_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_WO_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_WO_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SFWID_WO_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SFWID_WO_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_WO_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_WO_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_WO_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SFWID_WO_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.SOURCE_ID = parse_value(self.schema, column_value_map, "SOURCE_ID")
        "Unique identifier for source, when source is BOM then BOM_ID and ITEM_ID for other sources."
        self.SOURCE_TYPE = parse_value(self.schema, column_value_map, "SOURCE_TYPE")
        "Source type where illustration belongs. Like Bom, Component, Part, Tool, Process, Machine etc."
        self.ORIG_OBJECT_ID = parse_value(self.schema, column_value_map, "ORIG_OBJECT_ID")
        "ID of the object originaly authored from which the current one is created on-the-fly."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        self.EFF_TYPE = parse_value(self.schema, column_value_map, "EFF_TYPE")
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")

class SFPL_OPER_PROCESS:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "OPER_UPDT_NO": "NUMBER",
        "PROCESS_TYPE": "STRING",
        "OCCUR_COUNT": "NUMBER",
        "OPER_PROC_DNF": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "OPER_UPDT_NO",
        "PROCESS_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_OPER_PROCESS_FK1", ["PLAN_ID","OPER_KEY","OPER_UPDT_NO"], "SFPL_OPERATION_DESC", ["PLAN_ID","OPER_KEY","OPER_UPDT_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        self.OCCUR_COUNT = parse_value(self.schema, column_value_map, "OCCUR_COUNT")
        self.OPER_PROC_DNF = parse_value(self.schema, column_value_map, "OPER_PROC_DNF")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFFND_HTREF_CA_TEXT:
    schema = {
        "REF_ID": "STRING",
        "CA_ID": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_TYPE": "STRING",
        "OBJECT_NAME": "STRING",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TEXT_TYPE": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "REF_ID",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_HTREF_CA_TEXT_FK3", ["CA_ID","TEXT_TYPE"], "SFQA_CA_TEXT", ["CA_ID","TEXT_TYPE"]),
        DbForeignKey("SFFND_HTREF_CA_TEXT_FK1", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "The system generated identifier of an object link embedded in the Corrective Action text block."
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The object type/class which the object belongs to. For example: CAD drawing, still image, slide, UDV, standard text, audio, or video."
        self.OBJECT_NAME = parse_value(self.schema, column_value_map, "OBJECT_NAME")
        "A descriptive tag/name of the object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The text block type of the referencing text block."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "The protocol id of a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "The host id of a Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "The file location of a Universal Resource Locator."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., ISSUE_DISC."

class SFQA_DISC_CATEGORY_DEF:
    schema = {
        "DISC_CATEGORY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "DISC_CATEGORY_DESC": "STRING",
    }
    primary_key_columns = [
        "DISC_CATEGORY",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_DISC_ITEM_DISC_CAT_FK",
    ]
    def __init__(self, column_value_map):
        self.DISC_CATEGORY = parse_value(self.schema, column_value_map, "DISC_CATEGORY")
        "Customer-assigned discrepancy category used to show severity of problem. Data in this table supplied by the customer."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.DISC_CATEGORY_DESC = parse_value(self.schema, column_value_map, "DISC_CATEGORY_DESC")
        "A detail description of the discrepancy category."
        self.SFQA_DISC_ITEM_DISC_CAT_FK = []

class SFQA_CA_TEAM_ASSIGNMENT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "USERID": "STRING",
        "FIRST_NAME": "STRING",
        "LAST_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "TEAM_LEAD_FLAG": "STRING",
        "CAN_MODIFY_FLAG": "STRING",
        "FACILITATOR_FLAG": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH1": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH2": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH3": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH4": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH5": "STRING",
        "UCF_CA_TEAM_ASSIGN_NUM1": "NUMBER",
        "UCF_CA_TEAM_ASSIGN_NUM2": "NUMBER",
        "UCF_CA_TEAM_ASSIGN_NUM3": "NUMBER",
        "UCF_CA_TEAM_ASSIGN_DATE1": "STRING",
        "UCF_CA_TEAM_ASSIGN_DATE2": "STRING",
        "UCF_CA_TEAM_ASSIGN_FLAG1": "STRING",
        "UCF_CA_TEAM_ASSIGN_FLAG2": "STRING",
        "UCF_CA_TEAM_ASSIGN_FLAG3": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH255_1": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH255_2": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.FIRST_NAME = parse_value(self.schema, column_value_map, "FIRST_NAME")
        self.LAST_NAME = parse_value(self.schema, column_value_map, "LAST_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.TEAM_LEAD_FLAG = parse_value(self.schema, column_value_map, "TEAM_LEAD_FLAG")
        self.CAN_MODIFY_FLAG = parse_value(self.schema, column_value_map, "CAN_MODIFY_FLAG")
        self.FACILITATOR_FLAG = parse_value(self.schema, column_value_map, "FACILITATOR_FLAG")
        "A flag (Y/N) indicating whether the team member is a Gate Keeper or not."
        self.UCF_CA_TEAM_ASSIGN_VCH1 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_TEAM_ASSIGN_VCH2 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_TEAM_ASSIGN_VCH3 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_TEAM_ASSIGN_VCH4 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_TEAM_ASSIGN_VCH5 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_TEAM_ASSIGN_NUM1 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CA_TEAM_ASSIGN_NUM2 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_CA_TEAM_ASSIGN_NUM3 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CA_TEAM_ASSIGN_DATE1 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CA_TEAM_ASSIGN_DATE2 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CA_TEAM_ASSIGN_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_TEAM_ASSIGN_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_TEAM_ASSIGN_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_TEAM_ASSIGN_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_TEAM_ASSIGN_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."

class SFSQA_AUDIT_PLNPRO_SCHD_DETAIL:
    schema = {
        "AUDIT_PROCESS_DETAIL_ID": "STRING",
        "AUDIT_PLAN_ID": "STRING",
        "DAYS_BETWEEN_AUDIT": "NUMBER",
        "ITEM_ID": "STRING",
        "RANDOM_FACTOR": "NUMBER",
        "AUDIT_COORDINATOR_USERID": "STRING",
        "LAST_AUDIT_DATE": "STRING",
        "LAST_AUDIT_NO": "STRING",
        "NEXT_AUDIT_FROM_DATE": "STRING",
        "NEXT_AUDIT_THRU_DATE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "LOCATION_ID": "STRING",
        "DEPARTMENT_ID": "STRING",
        "CENTER_ID": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH1": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH2": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH3": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH4": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH5": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH6": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH7": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH8": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH9": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH10": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH11": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH12": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH13": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH14": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH15": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_FLAG1": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_FLAG2": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_FLAG3": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_FLAG4": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_FLAG5": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_NUM1": "NUMBER",
        "UCF_AUD_PLPR_SHD_DTL_NUM2": "NUMBER",
        "UCF_AUD_PLPR_SHD_DTL_NUM3": "NUMBER",
        "UCF_AUD_PLPR_SHD_DTL_NUM4": "NUMBER",
        "UCF_AUD_PLPR_SHD_DTL_NUM5": "NUMBER",
        "UCF_AUD_PLPR_SHD_DTL_DATE1": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_DATE2": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_DATE3": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_DATE4": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_DATE5": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH255_1": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH255_2": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH255_3": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH4000_1": "STRING",
        "UCF_AUD_PLPR_SHD_DTL_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "AUDIT_PROCESS_DETAIL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_AUDIT_PLNPRO_SCHD_FK1", ["AUDIT_PLAN_ID","ITEM_ID"], "SFSQA_AUDIT_PROCESS", ["AUDIT_PLAN_ID","ITEM_ID"]),
        DbForeignKey("SFSQA_AUDIT_PLNPRO_SCHD_FK3", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFSQA_AUDIT_PLNPRO_SCHD_FK4", ["LOCATION_ID","DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFSQA_AUDIT_PLNPRO_SCHD_FK5", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFSQA_AUDIT_PLNPRO_SCHD_FK2", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.AUDIT_PROCESS_DETAIL_ID = parse_value(self.schema, column_value_map, "AUDIT_PROCESS_DETAIL_ID")
        self.AUDIT_PLAN_ID = parse_value(self.schema, column_value_map, "AUDIT_PLAN_ID")
        self.DAYS_BETWEEN_AUDIT = parse_value(self.schema, column_value_map, "DAYS_BETWEEN_AUDIT")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.RANDOM_FACTOR = parse_value(self.schema, column_value_map, "RANDOM_FACTOR")
        self.AUDIT_COORDINATOR_USERID = parse_value(self.schema, column_value_map, "AUDIT_COORDINATOR_USERID")
        self.LAST_AUDIT_DATE = parse_value(self.schema, column_value_map, "LAST_AUDIT_DATE")
        self.LAST_AUDIT_NO = parse_value(self.schema, column_value_map, "LAST_AUDIT_NO")
        self.NEXT_AUDIT_FROM_DATE = parse_value(self.schema, column_value_map, "NEXT_AUDIT_FROM_DATE")
        self.NEXT_AUDIT_THRU_DATE = parse_value(self.schema, column_value_map, "NEXT_AUDIT_THRU_DATE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        self.DEPARTMENT_ID = parse_value(self.schema, column_value_map, "DEPARTMENT_ID")
        self.CENTER_ID = parse_value(self.schema, column_value_map, "CENTER_ID")
        self.UCF_AUD_PLPR_SHD_DTL_VCH1 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH1")
        self.UCF_AUD_PLPR_SHD_DTL_VCH2 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH2")
        self.UCF_AUD_PLPR_SHD_DTL_VCH3 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH3")
        self.UCF_AUD_PLPR_SHD_DTL_VCH4 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH4")
        self.UCF_AUD_PLPR_SHD_DTL_VCH5 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH5")
        self.UCF_AUD_PLPR_SHD_DTL_VCH6 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH6")
        self.UCF_AUD_PLPR_SHD_DTL_VCH7 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH7")
        self.UCF_AUD_PLPR_SHD_DTL_VCH8 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH8")
        self.UCF_AUD_PLPR_SHD_DTL_VCH9 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH9")
        self.UCF_AUD_PLPR_SHD_DTL_VCH10 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH10")
        self.UCF_AUD_PLPR_SHD_DTL_VCH11 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH11")
        self.UCF_AUD_PLPR_SHD_DTL_VCH12 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH12")
        self.UCF_AUD_PLPR_SHD_DTL_VCH13 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH13")
        self.UCF_AUD_PLPR_SHD_DTL_VCH14 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH14")
        self.UCF_AUD_PLPR_SHD_DTL_VCH15 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH15")
        self.UCF_AUD_PLPR_SHD_DTL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_FLAG1")
        self.UCF_AUD_PLPR_SHD_DTL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_FLAG2")
        self.UCF_AUD_PLPR_SHD_DTL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_FLAG3")
        self.UCF_AUD_PLPR_SHD_DTL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_FLAG4")
        self.UCF_AUD_PLPR_SHD_DTL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_FLAG5")
        self.UCF_AUD_PLPR_SHD_DTL_NUM1 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_NUM1")
        self.UCF_AUD_PLPR_SHD_DTL_NUM2 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_NUM2")
        self.UCF_AUD_PLPR_SHD_DTL_NUM3 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_NUM3")
        self.UCF_AUD_PLPR_SHD_DTL_NUM4 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_NUM4")
        self.UCF_AUD_PLPR_SHD_DTL_NUM5 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_NUM5")
        self.UCF_AUD_PLPR_SHD_DTL_DATE1 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_DATE1")
        self.UCF_AUD_PLPR_SHD_DTL_DATE2 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_DATE2")
        self.UCF_AUD_PLPR_SHD_DTL_DATE3 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_DATE3")
        self.UCF_AUD_PLPR_SHD_DTL_DATE4 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_DATE4")
        self.UCF_AUD_PLPR_SHD_DTL_DATE5 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_DATE5")
        self.UCF_AUD_PLPR_SHD_DTL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH255_1")
        self.UCF_AUD_PLPR_SHD_DTL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH255_2")
        self.UCF_AUD_PLPR_SHD_DTL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH255_3")
        self.UCF_AUD_PLPR_SHD_DTL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH4000_1")
        self.UCF_AUD_PLPR_SHD_DTL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_AUD_PLPR_SHD_DTL_VCH4000_2")

class SFWID_OPER_DESC_ALT:
    schema = {
        "OPER_DESC_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "AUTO_EXCLUDE_FLAG": "STRING",
        "OPER_OPT_FLAG": "STRING",
        "ALTER_FLAG": "STRING",
        "OPER_NO": "STRING",
        "OPER_UPDT_NO": "NUMBER",
        "STEP_NO": "STRING",
        "STEP_UPDT_NO": "NUMBER",
        "PLND_MACHINE_NO": "STRING",
        "ASGND_MACHINE_ID": "STRING",
        "OPER_STATUS": "STRING",
        "OPER_HOLD_STATUS": "STRING",
        "OPER_TYPE": "STRING",
        "TITLE": "STRING",
        "ALTER_TYPE": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "STATUS_CHG_NOTES": "STRING",
        "OSP_FLAG": "STRING",
        "REWORK_FLAG": "STRING",
        "AUTO_COMPLETE_FLAG": "STRING",
        "AUTO_START_FLAG": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "REVISED_CREW_QTY_SETUP": "NUMBER",
        "REVISED_CREW_QTY": "NUMBER",
        "ACTUAL_CREW_QTY_SETUP": "NUMBER",
        "ACTUAL_CREW_QTY": "NUMBER",
        "SCHED_LABOR_HOURS_SETUP": "NUMBER",
        "SCHED_DUR_HOURS_SETUP": "NUMBER",
        "SCHED_LABOR_HOURS_INSPECT": "NUMBER",
        "SCHED_DUR_HOURS_INSPECT": "NUMBER",
        "SCHED_LABOR_HOURS_PER_UNIT": "NUMBER",
        "SCHED_DUR_HOURS_PER_UNIT": "NUMBER",
        "SCHED_CREW_QTY_SETUP": "NUMBER",
        "SCHED_CREW_QTY": "NUMBER",
        "SCHED_MACHINE_HOURS_PER_UNIT": "NUMBER",
        "SCHED_UNITS_PER_RUN": "NUMBER",
        "SCHED_SETUP_TYPE": "STRING",
        "SCHED_MACHINE_HOURS_SETUP": "NUMBER",
        "SCHED_ENG_STD_FLAG": "STRING",
        "SCHED_MOVE_HOURS": "NUMBER",
        "OCCUR_RATE": "NUMBER",
        "OSP_DAYS": "NUMBER",
        "SUPPLIER_CODE": "STRING",
        "OSP_COST_PER_UNIT": "NUMBER",
        "UCF_PLAN_OPER_VCH1": "STRING",
        "UCF_PLAN_OPER_VCH2": "STRING",
        "UCF_PLAN_OPER_VCH3": "STRING",
        "UCF_PLAN_OPER_VCH4": "STRING",
        "UCF_PLAN_OPER_VCH5": "STRING",
        "UCF_PLAN_OPER_NUM1": "NUMBER",
        "UCF_PLAN_OPER_NUM2": "NUMBER",
        "UCF_PLAN_OPER_FLAG1": "STRING",
        "UCF_PLAN_OPER_FLAG2": "STRING",
        "UCF_ORDER_OPER_VCH1": "STRING",
        "UCF_ORDER_OPER_VCH2": "STRING",
        "UCF_ORDER_OPER_NUM1": "NUMBER",
        "UCF_ORDER_OPER_NUM2": "NUMBER",
        "UCF_ORDER_OPER_FLAG1": "STRING",
        "UCF_ORDER_OPER_DATE1": "STRING",
        "STATUS_CHG_REASON": "STRING",
        "STDOPER_OBJECT_ID": "STRING",
        "OOC_CAUSE_FLAG": "STRING",
        "OOC_REASON": "STRING",
        "OOC_REASON_NUM": "NUMBER",
        "UCHART_UBAR_VALUE": "NUMBER",
        "UCHART_UCL_VALUE": "NUMBER",
        "UCHART_LCL_VALUE": "NUMBER",
        "TEST_TYPE": "STRING",
        "OUTLIER_FLAG": "STRING",
        "ALT_STATUS": "STRING",
        "LAST_OPER_HDR_CHG_ALT_ID": "STRING",
        "UCF_PLAN_OPER_VCH6": "STRING",
        "UCF_PLAN_OPER_VCH7": "STRING",
        "UCF_PLAN_OPER_VCH8": "STRING",
        "UCF_PLAN_OPER_VCH9": "STRING",
        "UCF_PLAN_OPER_VCH10": "STRING",
        "UCF_PLAN_OPER_VCH11": "STRING",
        "UCF_PLAN_OPER_VCH12": "STRING",
        "UCF_PLAN_OPER_VCH13": "STRING",
        "UCF_PLAN_OPER_VCH14": "STRING",
        "UCF_PLAN_OPER_VCH15": "STRING",
        "UCF_PLAN_OPER_NUM3": "NUMBER",
        "UCF_PLAN_OPER_NUM4": "NUMBER",
        "UCF_PLAN_OPER_NUM5": "NUMBER",
        "UCF_PLAN_OPER_DATE1": "STRING",
        "UCF_PLAN_OPER_DATE2": "STRING",
        "UCF_PLAN_OPER_DATE3": "STRING",
        "UCF_PLAN_OPER_DATE4": "STRING",
        "UCF_PLAN_OPER_DATE5": "STRING",
        "UCF_PLAN_OPER_FLAG3": "STRING",
        "UCF_PLAN_OPER_FLAG4": "STRING",
        "UCF_PLAN_OPER_FLAG5": "STRING",
        "UCF_PLAN_OPER_VCH255_1": "STRING",
        "UCF_PLAN_OPER_VCH255_2": "STRING",
        "UCF_PLAN_OPER_VCH255_3": "STRING",
        "UCF_PLAN_OPER_VCH4000_1": "STRING",
        "UCF_PLAN_OPER_VCH4000_2": "STRING",
        "UCF_ORDER_OPER_VCH3": "STRING",
        "UCF_ORDER_OPER_VCH4": "STRING",
        "UCF_ORDER_OPER_VCH5": "STRING",
        "UCF_ORDER_OPER_VCH6": "STRING",
        "UCF_ORDER_OPER_VCH7": "STRING",
        "UCF_ORDER_OPER_VCH8": "STRING",
        "UCF_ORDER_OPER_VCH9": "STRING",
        "UCF_ORDER_OPER_VCH10": "STRING",
        "UCF_ORDER_OPER_VCH11": "STRING",
        "UCF_ORDER_OPER_VCH12": "STRING",
        "UCF_ORDER_OPER_VCH13": "STRING",
        "UCF_ORDER_OPER_VCH14": "STRING",
        "UCF_ORDER_OPER_VCH15": "STRING",
        "UCF_ORDER_OPER_NUM3": "NUMBER",
        "UCF_ORDER_OPER_NUM4": "NUMBER",
        "UCF_ORDER_OPER_NUM5": "NUMBER",
        "UCF_ORDER_OPER_DATE2": "STRING",
        "UCF_ORDER_OPER_DATE3": "STRING",
        "UCF_ORDER_OPER_DATE4": "STRING",
        "UCF_ORDER_OPER_DATE5": "STRING",
        "UCF_ORDER_OPER_FLAG2": "STRING",
        "UCF_ORDER_OPER_FLAG3": "STRING",
        "UCF_ORDER_OPER_FLAG4": "STRING",
        "UCF_ORDER_OPER_FLAG5": "STRING",
        "UCF_ORDER_OPER_VCH255_1": "STRING",
        "UCF_ORDER_OPER_VCH255_2": "STRING",
        "UCF_ORDER_OPER_VCH255_3": "STRING",
        "UCF_ORDER_OPER_VCH4000_1": "STRING",
        "UCF_ORDER_OPER_VCH4000_2": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "SEQ_STEPS_FLAG": "STRING",
        "EXE_ORDER": "NUMBER",
        "OPER_CHANGE_LEVEL": "STRING",
        "INCLUDED": "STRING",
        "STANDARD_FLAG": "STRING",
        "PERCENT_COMPLETE": "NUMBER",
        "PERCENT_COMPLETE_COMMENTS": "STRING",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "MUST_ISSUE_PARTS_FLAG": "STRING",
        "ACTIVITY": "STRING",
        "ACCOUNT_LABOR": "STRING",
        "COMPLETE_QTY": "NUMBER",
        "SCRAP_QTY": "NUMBER",
        "MISSING_QTY": "NUMBER",
        "UNITS_PER_CYCLE": "NUMBER",
        "AUTO_CYCLE_FLAG": "STRING",
        "PRINT_LABEL": "STRING",
        "NUMBER_OF_LABELS": "NUMBER",
        "RECONCILE_SCRAP": "STRING",
        "UNIT_PROCESSING": "STRING",
        "UNITS_PER_CYCLE_ACTUAL": "NUMBER",
        "ACTUAL_MACHINE_NO": "STRING",
        "AVAILABLE_QTY": "NUMBER",
        "ACTUAL_MACHINE_ID": "STRING",
        "COMPLETE_CYCLE_QTY": "NUMBER",
        "REPORT_ID": "STRING",
        "BATCH_FLAG": "STRING",
        "ASGND_DEPARTMENT_ID": "STRING",
        "ACTUAL_INQUEUE_DATE": "STRING",
        "ASGND_LOCATION_ID": "STRING",
        "ASGND_CENTER_ID": "STRING",
        "PLND_MACHINE_REV": "STRING",
        "ACTUAL_MACHINE_REV": "STRING",
    }
    primary_key_columns = [
        "OPER_DESC_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_DESC_ALT_FK5", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFWID_OPER_DESC_ALT_FK2", ["ASGND_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFWID_OPER_DESC_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_DESC_ALT_FK4", ["ASGND_LOCATION_ID","ASGND_DEPARTMENT_ID","ASGND_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFWID_OPER_DESC_ALT_FK3", ["ASGND_LOCATION_ID","ASGND_DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_DESC_ALT = parse_value(self.schema, column_value_map, "OPER_DESC_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.AUTO_EXCLUDE_FLAG = parse_value(self.schema, column_value_map, "AUTO_EXCLUDE_FLAG")
        "A flag (Y/N) indicating that the given operation is part of an alternate (unchosen) branch following a decision node and is therefore excluded from the manufacturing process."
        self.OPER_OPT_FLAG = parse_value(self.schema, column_value_map, "OPER_OPT_FLAG")
        "A flag (Y/N) that indicates whether a given operation is optional."
        self.ALTER_FLAG = parse_value(self.schema, column_value_map, "ALTER_FLAG")
        "A flag (Y/N) that indicates whether the operation is currently in alteration mode."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given operation description."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.PLND_MACHINE_NO = parse_value(self.schema, column_value_map, "PLND_MACHINE_NO")
        "The planned machine category for a given operation."
        self.ASGND_MACHINE_ID = parse_value(self.schema, column_value_map, "ASGND_MACHINE_ID")
        "The ID of the machine assigned to the given operation."
        self.OPER_STATUS = parse_value(self.schema, column_value_map, "OPER_STATUS")
        "Status of the operation, e.g., IN QUEUE, ACTIVE, COMPLETE, HOLD, CANCEL."
        self.OPER_HOLD_STATUS = parse_value(self.schema, column_value_map, "OPER_HOLD_STATUS")
        "Status of the hold on the operation, e.g., OPEN, CLOSED."
        self.OPER_TYPE = parse_value(self.schema, column_value_map, "OPER_TYPE")
        "Type or class of operation, e.g., MFG."
        self.TITLE = parse_value(self.schema, column_value_map, "TITLE")
        "Title or name of the given operation."
        self.ALTER_TYPE = parse_value(self.schema, column_value_map, "ALTER_TYPE")
        "Type or classification of the last alteration on the associated work order."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated operation."
        self.OSP_FLAG = parse_value(self.schema, column_value_map, "OSP_FLAG")
        "A flag (Y/N) that indicates whether the operation process is performed by an outside vendor or center."
        self.REWORK_FLAG = parse_value(self.schema, column_value_map, "REWORK_FLAG")
        "A flag (Y/N) that indicates whether the given operation is rework."
        self.AUTO_COMPLETE_FLAG = parse_value(self.schema, column_value_map, "AUTO_COMPLETE_FLAG")
        "Indicates (Y/N) whether the status of the given operation is automatically set to COMPLETE on startup of the following operation."
        self.AUTO_START_FLAG = parse_value(self.schema, column_value_map, "AUTO_START_FLAG")
        "Indicates (Y/N) whether the given operation is automatically started on completion of the previous operation."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which work for the operation is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which work for the operation is scheduled to complete."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised start date for the given operation."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised end date for the given operation."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which work for the operation was actually started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which work for the operation was actually completed."
        self.REVISED_CREW_QTY_SETUP = parse_value(self.schema, column_value_map, "REVISED_CREW_QTY_SETUP")
        "The revised number of people in the setup crew for the given operation."
        self.REVISED_CREW_QTY = parse_value(self.schema, column_value_map, "REVISED_CREW_QTY")
        "The revised number of people in the crew for the given operation"
        self.ACTUAL_CREW_QTY_SETUP = parse_value(self.schema, column_value_map, "ACTUAL_CREW_QTY_SETUP")
        "The actual number of people in the setup crew for the given operation."
        self.ACTUAL_CREW_QTY = parse_value(self.schema, column_value_map, "ACTUAL_CREW_QTY")
        "The actual number of people in the crew for the given operation"
        self.SCHED_LABOR_HOURS_SETUP = parse_value(self.schema, column_value_map, "SCHED_LABOR_HOURS_SETUP")
        "The scheduled number of hours for labor setup of a given operation."
        self.SCHED_DUR_HOURS_SETUP = parse_value(self.schema, column_value_map, "SCHED_DUR_HOURS_SETUP")
        "The scheduled number of hours for all types of setup for a given operation."
        self.SCHED_LABOR_HOURS_INSPECT = parse_value(self.schema, column_value_map, "SCHED_LABOR_HOURS_INSPECT")
        "The scheduled number of labor hours for inspection of a given operation."
        self.SCHED_DUR_HOURS_INSPECT = parse_value(self.schema, column_value_map, "SCHED_DUR_HOURS_INSPECT")
        "The scheduled number of duration hours for inspection of a given operation."
        self.SCHED_LABOR_HOURS_PER_UNIT = parse_value(self.schema, column_value_map, "SCHED_LABOR_HOURS_PER_UNIT")
        "The scheduled number of labor hours per unit for a given operation."
        self.SCHED_DUR_HOURS_PER_UNIT = parse_value(self.schema, column_value_map, "SCHED_DUR_HOURS_PER_UNIT")
        "The scheduled number of duration hours per unit for a given operation."
        self.SCHED_CREW_QTY_SETUP = parse_value(self.schema, column_value_map, "SCHED_CREW_QTY_SETUP")
        "The scheduled number of people in the setup crew for the given operation."
        self.SCHED_CREW_QTY = parse_value(self.schema, column_value_map, "SCHED_CREW_QTY")
        "The scheduled number of people in the crew for the given operation."
        self.SCHED_MACHINE_HOURS_PER_UNIT = parse_value(self.schema, column_value_map, "SCHED_MACHINE_HOURS_PER_UNIT")
        "The number of machine hours per unit."
        self.SCHED_UNITS_PER_RUN = parse_value(self.schema, column_value_map, "SCHED_UNITS_PER_RUN")
        "The number of units per production run."
        self.SCHED_SETUP_TYPE = parse_value(self.schema, column_value_map, "SCHED_SETUP_TYPE")
        "The type of setup."
        self.SCHED_MACHINE_HOURS_SETUP = parse_value(self.schema, column_value_map, "SCHED_MACHINE_HOURS_SETUP")
        "The number hours required for machine setup."
        self.SCHED_ENG_STD_FLAG = parse_value(self.schema, column_value_map, "SCHED_ENG_STD_FLAG")
        "A flag (Y/N) that indicates whether engineering standards must be set up for a given operation."
        self.SCHED_MOVE_HOURS = parse_value(self.schema, column_value_map, "SCHED_MOVE_HOURS")
        "The number of hours required to move the setup."
        self.OCCUR_RATE = parse_value(self.schema, column_value_map, "OCCUR_RATE")
        "The probability of a given operation occurring in a work order, where a value of 1 = 100%. A value < 1 indicates that the operation follows a decision node and will occur at the assigned rate."
        self.OSP_DAYS = parse_value(self.schema, column_value_map, "OSP_DAYS")
        "The number of days the operation is expected to take at a given outside vendor."
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        "User definable unique identifier for a given supplier."
        self.OSP_COST_PER_UNIT = parse_value(self.schema, column_value_map, "OSP_COST_PER_UNIT")
        "The cost per unit at a given outside vendor."
        self.UCF_PLAN_OPER_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_OPER_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_OPER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_OPER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_OPER_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_OPER_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_OPER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_OPER_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE1")
        "User-configurable field for DATE data type."
        self.STATUS_CHG_REASON = parse_value(self.schema, column_value_map, "STATUS_CHG_REASON")
        "Reason for a change in status."
        self.STDOPER_OBJECT_ID = parse_value(self.schema, column_value_map, "STDOPER_OBJECT_ID")
        "Standard Operation object associated with given operation."
        self.OOC_CAUSE_FLAG = parse_value(self.schema, column_value_map, "OOC_CAUSE_FLAG")
        self.OOC_REASON = parse_value(self.schema, column_value_map, "OOC_REASON")
        self.OOC_REASON_NUM = parse_value(self.schema, column_value_map, "OOC_REASON_NUM")
        self.UCHART_UBAR_VALUE = parse_value(self.schema, column_value_map, "UCHART_UBAR_VALUE")
        self.UCHART_UCL_VALUE = parse_value(self.schema, column_value_map, "UCHART_UCL_VALUE")
        self.UCHART_LCL_VALUE = parse_value(self.schema, column_value_map, "UCHART_LCL_VALUE")
        self.TEST_TYPE = parse_value(self.schema, column_value_map, "TEST_TYPE")
        self.OUTLIER_FLAG = parse_value(self.schema, column_value_map, "OUTLIER_FLAG")
        self.ALT_STATUS = parse_value(self.schema, column_value_map, "ALT_STATUS")
        "Status of the given work order alteration, e.g., ORDER_AUTHORING."
        self.LAST_OPER_HDR_CHG_ALT_ID = parse_value(self.schema, column_value_map, "LAST_OPER_HDR_CHG_ALT_ID")
        self.UCF_PLAN_OPER_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_OPER_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_OPER_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_OPER_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_OPER_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_OPER_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_OPER_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_OPER_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_OPER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_OPER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG4")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_OPER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG5")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_OPER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PLAN_OPER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PLAN_OPER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PLAN_OPER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_PLAN_OPER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ORDER_OPER_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_OPER_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_OPER_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_OPER_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_OPER_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_OPER_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_OPER_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_OPER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_OPER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_OPER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG4")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_OPER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG5")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_OPER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_OPER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_OPER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_OPER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ORDER_OPER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        "A Number identifier which identifies that this record comes from Plam Device."
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        "A Number identifier which identifies that this record comes from ERP System"
        self.SEQ_STEPS_FLAG = parse_value(self.schema, column_value_map, "SEQ_STEPS_FLAG")
        self.EXE_ORDER = parse_value(self.schema, column_value_map, "EXE_ORDER")
        self.OPER_CHANGE_LEVEL = parse_value(self.schema, column_value_map, "OPER_CHANGE_LEVEL")
        self.INCLUDED = parse_value(self.schema, column_value_map, "INCLUDED")
        self.STANDARD_FLAG = parse_value(self.schema, column_value_map, "STANDARD_FLAG")
        self.PERCENT_COMPLETE = parse_value(self.schema, column_value_map, "PERCENT_COMPLETE")
        self.PERCENT_COMPLETE_COMMENTS = parse_value(self.schema, column_value_map, "PERCENT_COMPLETE_COMMENTS")
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.MUST_ISSUE_PARTS_FLAG = parse_value(self.schema, column_value_map, "MUST_ISSUE_PARTS_FLAG")
        self.ACTIVITY = parse_value(self.schema, column_value_map, "ACTIVITY")
        self.ACCOUNT_LABOR = parse_value(self.schema, column_value_map, "ACCOUNT_LABOR")
        self.COMPLETE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_QTY")
        "Total Number of Units completed at an operation. Only applicable when continuous_flow_flag is Y at order level."
        self.SCRAP_QTY = parse_value(self.schema, column_value_map, "SCRAP_QTY")
        "Total Number of Units scrapped at an operation. Only applicable when continuous_flow_flag is Y at order level."
        self.MISSING_QTY = parse_value(self.schema, column_value_map, "MISSING_QTY")
        "Total Number of Units missing to be completed at an operation. Only applicable when continuous_flow_flag is Y at order level."
        self.UNITS_PER_CYCLE = parse_value(self.schema, column_value_map, "UNITS_PER_CYCLE")
        "This is the Number of units to be process per cycle. Not Applicable during Work order execution. Only used for planning purpose. This value can be different than units_per_cycle_actual."
        self.AUTO_CYCLE_FLAG = parse_value(self.schema, column_value_map, "AUTO_CYCLE_FLAG")
        "This flag can only be Y when material_handling = CYCLE. Y means user can process cycles through external process."
        self.PRINT_LABEL = parse_value(self.schema, column_value_map, "PRINT_LABEL")
        "Action on which the Labels are generated. Possible actions are OFF, CYCLE COMPLETE and OPERATION COMPLETE."
        self.NUMBER_OF_LABELS = parse_value(self.schema, column_value_map, "NUMBER_OF_LABELS")
        "Number of Labels to be generated after each print_label action."
        self.RECONCILE_SCRAP = parse_value(self.schema, column_value_map, "RECONCILE_SCRAP")
        "Possible values are OFF, AUTO and PROMPT. If value is AUTO at the operation, the available units will be scrapped without a prompt. Only applicable when continuous_flow_flag is Y at order level."
        self.UNIT_PROCESSING = parse_value(self.schema, column_value_map, "UNIT_PROCESSING")
        "Defines how does units get processed. Possible values are NORMAL, CYCLE and LOW TOUCH. CYCLE value is only applicable when continuous_flow_flag is Y at order level."
        self.UNITS_PER_CYCLE_ACTUAL = parse_value(self.schema, column_value_map, "UNITS_PER_CYCLE_ACTUAL")
        "Number of units to be processed per cycle. Applicable during Work order execution. Only applicable when continuous_flow_flag is Y at order level."
        self.ACTUAL_MACHINE_NO = parse_value(self.schema, column_value_map, "ACTUAL_MACHINE_NO")
        "The identifying number of the required Machine as actually assigned to the given operation."
        self.AVAILABLE_QTY = parse_value(self.schema, column_value_map, "AVAILABLE_QTY")
        "Total Number of Units available for processing at an operation. Only applicable when continuous_flow_flag is Y at order level."
        self.ACTUAL_MACHINE_ID = parse_value(self.schema, column_value_map, "ACTUAL_MACHINE_ID")
        "The Machine ID related to required Machine No as actually assigned to the given operation."
        self.COMPLETE_CYCLE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_CYCLE_QTY")
        "Total Units arrived at an operation through cycles. Only applicable when continuous_flow_flag is Y at order level."
        self.REPORT_ID = parse_value(self.schema, column_value_map, "REPORT_ID")
        "OBJECT_ID of the Report to be invoked, i.e. the Labels to be generated after each print_label action."
        self.BATCH_FLAG = parse_value(self.schema, column_value_map, "BATCH_FLAG")
        self.ASGND_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "ASGND_DEPARTMENT_ID")
        "Unique, system-generated identifier of the given Work Department."
        self.ACTUAL_INQUEUE_DATE = parse_value(self.schema, column_value_map, "ACTUAL_INQUEUE_DATE")
        "The actual time on which the status of the operation is set to IN QUEUE."
        self.ASGND_LOCATION_ID = parse_value(self.schema, column_value_map, "ASGND_LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.ASGND_CENTER_ID = parse_value(self.schema, column_value_map, "ASGND_CENTER_ID")
        self.PLND_MACHINE_REV = parse_value(self.schema, column_value_map, "PLND_MACHINE_REV")
        self.ACTUAL_MACHINE_REV = parse_value(self.schema, column_value_map, "ACTUAL_MACHINE_REV")

class SFFND_COMM_MM_OBJECTS:
    schema = {
        "COMM_ID": "STRING",
        "OBJECT_DAT_COL_ID": "STRING",
        "OBJECT_ID": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UCF_COMM_MM_OBJ_VCH1": "STRING",
        "UCF_COMM_MM_OBJ_VCH2": "STRING",
        "UCF_COMM_MM_OBJ_VCH3": "STRING",
        "UCF_COMM_MM_OBJ_VCH4": "STRING",
        "UCF_COMM_MM_OBJ_VCH5": "STRING",
        "UCF_COMM_MM_OBJ_NUM1": "NUMBER",
        "UCF_COMM_MM_OBJ_NUM2": "NUMBER",
        "UCF_COMM_MM_OBJ_NUM3": "NUMBER",
        "UCF_COMM_MM_OBJ_DATE1": "STRING",
        "UCF_COMM_MM_OBJ_DATE2": "STRING",
        "UCF_COMM_MM_OBJ_FLAG1": "STRING",
        "UCF_COMM_MM_OBJ_FLAG2": "STRING",
        "UCF_COMM_MM_OBJ_FLAG3": "STRING",
        "UCF_COMM_MM_OBJ_VCH255_1": "STRING",
        "UCF_COMM_MM_OBJ_VCH255_2": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "RTF_LINK_ID": "STRING",
    }
    primary_key_columns = [
        "COMM_ID",
        "OBJECT_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_COMM_MM_OBJECTS_FK2", ["COMM_ID"], "SFFND_COMM", ["COMM_ID"]),
        DbForeignKey("SFFND_COMM_MM_OBJECTS_FK1", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.COMM_ID = parse_value(self.schema, column_value_map, "COMM_ID")
        "Unique system generated identifier for a given communication record."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UCF_COMM_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMM_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_COMM_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_COMM_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_COMM_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_COMM_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_COMM_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_COMM_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_COMM_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_COMM_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_COMM_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_COMM_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."

class SFWID_ORDER_NODE:
    schema = {
        "ORDER_ID": "STRING",
        "NODE_ID": "STRING",
        "NODE_NO": "STRING",
        "NODE_TYPE": "STRING",
        "NODE_COLUMN": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STATUS": "STRING",
        "NODE_TITLE": "STRING",
        "NODE_ROW": "NUMBER",
        "NODE_DESC": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "RETURN_TO_OPER_NO": "STRING",
        "DECISION_TYPE": "STRING",
        "RETURN_TO_OPER_KEY": "NUMBER",
        "ALTER_FLAG": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "NODE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_NODE_NODE_TYPE_FK", ["NODE_TYPE"], "SFFND_NODE_TYPE_DEF", ["NODE_TYPE"]),
        DbForeignKey("SFWID_ORDER_NODE_DT_FK", ["DECISION_TYPE"], "SFFND_DECISION_TYPE_DEF", ["DECISION_TYPE"]),
        DbForeignKey("SFWID_ORDER_NODE_FK", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_NODE_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
        "SFWID_SERIAL_NODE_FK1",
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.NODE_ID = parse_value(self.schema, column_value_map, "NODE_ID")
        "The unique system-generated identifier of a node in a Operation Flow Diagram."
        self.NODE_NO = parse_value(self.schema, column_value_map, "NODE_NO")
        "User-changeable sequence number identifying a node."
        self.NODE_TYPE = parse_value(self.schema, column_value_map, "NODE_TYPE")
        "Type or classification of node (Operation or Decision)."
        self.NODE_COLUMN = parse_value(self.schema, column_value_map, "NODE_COLUMN")
        "The number of the grid column containing the node."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Status of the given node."
        self.NODE_TITLE = parse_value(self.schema, column_value_map, "NODE_TITLE")
        "A name/short description of a node."
        self.NODE_ROW = parse_value(self.schema, column_value_map, "NODE_ROW")
        "The number of the grid row containing the node."
        self.NODE_DESC = parse_value(self.schema, column_value_map, "NODE_DESC")
        "A description of the node."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.RETURN_TO_OPER_NO = parse_value(self.schema, column_value_map, "RETURN_TO_OPER_NO")
        self.DECISION_TYPE = parse_value(self.schema, column_value_map, "DECISION_TYPE")
        "Type or classification of decision."
        self.RETURN_TO_OPER_KEY = parse_value(self.schema, column_value_map, "RETURN_TO_OPER_KEY")
        self.ALTER_FLAG = parse_value(self.schema, column_value_map, "ALTER_FLAG")
        "Flag that indicates if the given node can be altered."
        self.SFWID_SERIAL_NODE_FK1 = []

class SFSQA_ITEM_MANDATES:
    schema = {
        "ITEM_ID": "STRING",
        "MANDATE_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "MANDATE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_ITEM_MANDATES_FK2", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFSQA_ITEM_MANDATES_FK1", ["MANDATE_ID"], "SFSQA_OWNER", ["OWNER_CODE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.MANDATE_ID = parse_value(self.schema, column_value_map, "MANDATE_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")

class SFFND_COMPANY_DEF:
    schema = {
        "COMPANY_ID": "STRING",
        "COMPANY": "STRING",
        "COMPANY_TITLE": "STRING",
        "RATING_TIMEFRAME": "NUMBER",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "ADDRESS": "STRING",
        "CITY": "STRING",
        "STATE": "STRING",
        "ZIPCODE": "STRING",
        "COUNTRY_CODE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_COMPANY_VCH1": "STRING",
        "UCF_COMPANY_VCH2": "STRING",
        "UCF_COMPANY_VCH3": "STRING",
        "UCF_COMPANY_VCH4": "STRING",
        "UCF_COMPANY_VCH5": "STRING",
        "UCF_COMPANY_NUM1": "NUMBER",
        "UCF_COMPANY_NUM2": "NUMBER",
        "UCF_COMPANY_NUM3": "NUMBER",
        "UCF_COMPANY_DATE1": "STRING",
        "UCF_COMPANY_DATE2": "STRING",
        "UCF_COMPANY_FLAG1": "STRING",
        "UCF_COMPANY_FLAG2": "STRING",
        "UCF_COMPANY_FLAG3": "STRING",
        "UCF_COMPANY_VCH255_1": "STRING",
        "UCF_COMPANY_VCH255_2": "STRING",
        "ADDRESS_LINE_2": "STRING",
    }
    primary_key_columns = [
        "COMPANY_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_WORK_LOC_DEF_COMPANY_FK",
    ]
    def __init__(self, column_value_map):
        self.COMPANY_ID = parse_value(self.schema, column_value_map, "COMPANY_ID")
        "Unique Identifier for Compny."
        self.COMPANY = parse_value(self.schema, column_value_map, "COMPANY")
        "Company Name."
        self.COMPANY_TITLE = parse_value(self.schema, column_value_map, "COMPANY_TITLE")
        "Company Title."
        self.RATING_TIMEFRAME = parse_value(self.schema, column_value_map, "RATING_TIMEFRAME")
        "Rating Timeframe."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.ADDRESS = parse_value(self.schema, column_value_map, "ADDRESS")
        "Supplier Address."
        self.CITY = parse_value(self.schema, column_value_map, "CITY")
        "City."
        self.STATE = parse_value(self.schema, column_value_map, "STATE")
        "State."
        self.ZIPCODE = parse_value(self.schema, column_value_map, "ZIPCODE")
        "Zip Code."
        self.COUNTRY_CODE = parse_value(self.schema, column_value_map, "COUNTRY_CODE")
        "Country."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_COMPANY_VCH1 = parse_value(self.schema, column_value_map, "UCF_COMPANY_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMPANY_VCH2 = parse_value(self.schema, column_value_map, "UCF_COMPANY_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMPANY_VCH3 = parse_value(self.schema, column_value_map, "UCF_COMPANY_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMPANY_VCH4 = parse_value(self.schema, column_value_map, "UCF_COMPANY_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMPANY_VCH5 = parse_value(self.schema, column_value_map, "UCF_COMPANY_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_COMPANY_NUM1 = parse_value(self.schema, column_value_map, "UCF_COMPANY_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_COMPANY_NUM2 = parse_value(self.schema, column_value_map, "UCF_COMPANY_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_COMPANY_NUM3 = parse_value(self.schema, column_value_map, "UCF_COMPANY_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_COMPANY_DATE1 = parse_value(self.schema, column_value_map, "UCF_COMPANY_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_COMPANY_DATE2 = parse_value(self.schema, column_value_map, "UCF_COMPANY_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_COMPANY_FLAG1 = parse_value(self.schema, column_value_map, "UCF_COMPANY_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_COMPANY_FLAG2 = parse_value(self.schema, column_value_map, "UCF_COMPANY_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_COMPANY_FLAG3 = parse_value(self.schema, column_value_map, "UCF_COMPANY_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_COMPANY_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_COMPANY_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_COMPANY_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_COMPANY_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.ADDRESS_LINE_2 = parse_value(self.schema, column_value_map, "ADDRESS_LINE_2")
        "Street address Line 2."
        self.SFFND_WORK_LOC_DEF_COMPANY_FK = []

class SFSQA_CONTACT_TYPE_DEF:
    schema = {
        "CONTACT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "CONTACT_TYPE_DESC": "STRING",
    }
    primary_key_columns = [
        "CONTACT_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_SUP_CONTACT_INFO_FK1",
    ]
    def __init__(self, column_value_map):
        self.CONTACT_TYPE = parse_value(self.schema, column_value_map, "CONTACT_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.CONTACT_TYPE_DESC = parse_value(self.schema, column_value_map, "CONTACT_TYPE_DESC")
        self.SFSQA_SUP_CONTACT_INFO_FK1 = []

class SFPL_STEP_DESC:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "STEP_NO": "STRING",
        "STEP_STATE": "STRING",
        "STEP_TITLE": "STRING",
        "UCF_PLAN_STEP_VCH1": "STRING",
        "UCF_PLAN_STEP_VCH2": "STRING",
        "UCF_PLAN_STEP_VCH3": "STRING",
        "UCF_PLAN_STEP_VCH4": "STRING",
        "UCF_PLAN_STEP_VCH5": "STRING",
        "UCF_PLAN_STEP_FLAG1": "STRING",
        "UCF_PLAN_STEP_FLAG2": "STRING",
        "UCF_PLAN_STEP_NUM1": "NUMBER",
        "UCF_PLAN_STEP_NUM2": "NUMBER",
        "STDOPER_OBJECT_ID": "STRING",
        "UCF_PLAN_STEP_VCH6": "STRING",
        "UCF_PLAN_STEP_VCH7": "STRING",
        "UCF_PLAN_STEP_VCH8": "STRING",
        "UCF_PLAN_STEP_VCH9": "STRING",
        "UCF_PLAN_STEP_VCH10": "STRING",
        "UCF_PLAN_STEP_VCH11": "STRING",
        "UCF_PLAN_STEP_VCH12": "STRING",
        "UCF_PLAN_STEP_VCH13": "STRING",
        "UCF_PLAN_STEP_VCH14": "STRING",
        "UCF_PLAN_STEP_VCH15": "STRING",
        "UCF_PLAN_STEP_NUM3": "NUMBER",
        "UCF_PLAN_STEP_NUM4": "NUMBER",
        "UCF_PLAN_STEP_NUM5": "NUMBER",
        "UCF_PLAN_STEP_DATE1": "STRING",
        "UCF_PLAN_STEP_DATE2": "STRING",
        "UCF_PLAN_STEP_DATE3": "STRING",
        "UCF_PLAN_STEP_DATE4": "STRING",
        "UCF_PLAN_STEP_DATE5": "STRING",
        "UCF_PLAN_STEP_FLAG3": "STRING",
        "UCF_PLAN_STEP_FLAG4": "STRING",
        "UCF_PLAN_STEP_FLAG5": "STRING",
        "UCF_PLAN_STEP_VCH255_1": "STRING",
        "UCF_PLAN_STEP_VCH255_2": "STRING",
        "UCF_PLAN_STEP_VCH255_3": "STRING",
        "UCF_PLAN_STEP_VCH4000_1": "STRING",
        "UCF_PLAN_STEP_VCH4000_2": "STRING",
        "EXE_ORDER": "NUMBER",
        "EFF_GROUP_ID": "STRING",
        "LATEST_EFF_GRP_REV_FLAG": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEP_DESC_GROUP_FK", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
        DbForeignKey("SFPL_STEPDESC_STEPMAST_FK", ["PLAN_ID","OPER_KEY","STEP_KEY"], "SFPL_STEP_MASTER", ["PLAN_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
        "SFPL_STEPTOOL_STEPDESC_FK",
        "SFPL_STEP_MATERIAL_FK01",
        "SFPL_STPDATCOL_STPDESC_FK",
        "SFPL_STEPTEXT_STEPDESC_FK",
        "SFPL_STEP_MM_OBJECTS_FK1",
        "SFPL_STEP_BOM_LINES_FK1",
        "SFPL_STEPBUY_STEPDESC_FK",
        "SFPL_STEPITEMS_STEPDESC_FK",
        "SFPL_STEPREV_STEPDESC_FK",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.STEP_STATE = parse_value(self.schema, column_value_map, "STEP_STATE")
        "The editing state of the work operation step, EDIT or NO EDIT."
        self.STEP_TITLE = parse_value(self.schema, column_value_map, "STEP_TITLE")
        "A descriptive title or name of the step."
        self.UCF_PLAN_STEP_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_STEP_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_STEP_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_STEP_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_STEP_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_STEP_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_STEP_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_STEP_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_STEP_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_NUM2")
        "User-configurable field for NUM data type."
        self.STDOPER_OBJECT_ID = parse_value(self.schema, column_value_map, "STDOPER_OBJECT_ID")
        self.UCF_PLAN_STEP_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH6")
        self.UCF_PLAN_STEP_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH7")
        self.UCF_PLAN_STEP_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH8")
        self.UCF_PLAN_STEP_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH9")
        self.UCF_PLAN_STEP_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH10")
        self.UCF_PLAN_STEP_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH11")
        self.UCF_PLAN_STEP_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH12")
        self.UCF_PLAN_STEP_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH13")
        self.UCF_PLAN_STEP_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH14")
        self.UCF_PLAN_STEP_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH15")
        self.UCF_PLAN_STEP_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_NUM3")
        self.UCF_PLAN_STEP_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_NUM4")
        self.UCF_PLAN_STEP_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_NUM5")
        self.UCF_PLAN_STEP_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_DATE1")
        self.UCF_PLAN_STEP_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_DATE2")
        self.UCF_PLAN_STEP_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_DATE3")
        self.UCF_PLAN_STEP_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_DATE4")
        self.UCF_PLAN_STEP_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_DATE5")
        self.UCF_PLAN_STEP_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_FLAG3")
        self.UCF_PLAN_STEP_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_FLAG4")
        self.UCF_PLAN_STEP_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_FLAG5")
        self.UCF_PLAN_STEP_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH255_1")
        self.UCF_PLAN_STEP_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH255_2")
        self.UCF_PLAN_STEP_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH255_3")
        self.UCF_PLAN_STEP_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH4000_1")
        self.UCF_PLAN_STEP_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_STEP_VCH4000_2")
        self.EXE_ORDER = parse_value(self.schema, column_value_map, "EXE_ORDER")
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        self.LATEST_EFF_GRP_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_EFF_GRP_REV_FLAG")
        self.SFPL_STEPTOOL_STEPDESC_FK = []
        self.SFPL_STEP_MATERIAL_FK01 = []
        self.SFPL_STPDATCOL_STPDESC_FK = []
        self.SFPL_STEPTEXT_STEPDESC_FK = []
        self.SFPL_STEP_MM_OBJECTS_FK1 = []
        self.SFPL_STEP_BOM_LINES_FK1 = []
        self.SFPL_STEPBUY_STEPDESC_FK = []
        self.SFPL_STEPITEMS_STEPDESC_FK = []
        self.SFPL_STEPREV_STEPDESC_FK = []

class MOTT_MATERIAL_TYPE:
    schema = {
        "MATERIAL_TYPE_ID": "STRING",
        "MATERIAL_TYPE_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "DESCRIPTION": "STRING",
    }
    primary_key_columns = [
        "MATERIAL_TYPE_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "MOTT_TIME_MATERIAL_FK7",
    ]
    def __init__(self, column_value_map):
        self.MATERIAL_TYPE_ID = parse_value(self.schema, column_value_map, "MATERIAL_TYPE_ID")
        "Primary Key of the Material_Type"
        self.MATERIAL_TYPE_NAME = parse_value(self.schema, column_value_map, "MATERIAL_TYPE_NAME")
        "Text field holding the Name of the Material Type"
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the user"
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was modified."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation"
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.MOTT_TIME_MATERIAL_FK7 = []

class SFPL_ITEM_TYPE_DEF:
    schema = {
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "ITEM_TYPE_DESC": "STRING",
        "RAW_MATERIAL_FLAG": "STRING",
    }
    primary_key_columns = [
        "ITEM_TYPE",
        "ITEM_SUBTYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_STEP_TOOL_ITYPE_FK",
        "SFWID_OPER_TOOL_ITYPE_FK",
        "SFPL_PLAN_DESC_ITEM_TYPE_FK",
        "SFFND_PLG_TASK_ITYPE_FK",
        "SFWID_ORDER_DESC_ITYPE_FK",
        "SFPL_PLAN_MASTER_ITEM_TYPE_FK",
        "SFQA_DISC_ITEM_ITYPE_FK",
        "SFWID_AS_WORKED_BOM_ITYPE_FK",
        "SFPL_ITEM_DESC_MASTER_ALL_FK1",
        "SFFND_TOOL_ITYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.ITEM_TYPE_DESC = parse_value(self.schema, column_value_map, "ITEM_TYPE_DESC")
        self.RAW_MATERIAL_FLAG = parse_value(self.schema, column_value_map, "RAW_MATERIAL_FLAG")
        self.SFPL_STEP_TOOL_ITYPE_FK = []
        self.SFWID_OPER_TOOL_ITYPE_FK = []
        self.SFPL_PLAN_DESC_ITEM_TYPE_FK = []
        self.SFFND_PLG_TASK_ITYPE_FK = []
        self.SFWID_ORDER_DESC_ITYPE_FK = []
        self.SFPL_PLAN_MASTER_ITEM_TYPE_FK = []
        self.SFQA_DISC_ITEM_ITYPE_FK = []
        self.SFWID_AS_WORKED_BOM_ITYPE_FK = []
        self.SFPL_ITEM_DESC_MASTER_ALL_FK1 = []
        self.SFFND_TOOL_ITYPE_FK = []

class SFPL_OPERATION_TEXT_SV_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "OPER_UPDT_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        "The sequence number of a particular copy/description of the work plan operation."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_DISC_ITEM_ATTACHMENTS:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "OBJECT_ID": "STRING",
        "NOTES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_ITEM_ATTACHMENTS_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_ATTACHMENTS_FK1", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of the \"master\" object that contains the embedded/linked objects."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about an attachment."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_MBOM_NOTIFICATION:
    schema = {
        "ORDER_ID": "STRING",
        "BOM_NO": "STRING",
        "MFG_BOM_CHG": "STRING",
        "PROPAGATION_ACTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "CURRENT_MFG_BOM_CHG": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "BOM_NO",
        "MFG_BOM_CHG",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_MBOM_NOTIFICATION_FK1", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.BOM_NO = parse_value(self.schema, column_value_map, "BOM_NO")
        self.MFG_BOM_CHG = parse_value(self.schema, column_value_map, "MFG_BOM_CHG")
        self.PROPAGATION_ACTION = parse_value(self.schema, column_value_map, "PROPAGATION_ACTION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.CURRENT_MFG_BOM_CHG = parse_value(self.schema, column_value_map, "CURRENT_MFG_BOM_CHG")

class SFFND_USER_CERTS_XREF:
    schema = {
        "USER_ID": "STRING",
        "CERT": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "NOTES": "STRING",
    }
    primary_key_columns = [
        "USER_ID",
        "CERT",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_USER_CERTS_XREF_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFFND_USER_CERTS_XREF_FK1", ["USER_ID","CERT"], "SFFND_USER_CERTS", ["USERID","CERT"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USER_ID = parse_value(self.schema, column_value_map, "USER_ID")
        "Unique identifier of specific User."
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        "The unique identifier of a particular certification possessed by the user."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last Operation (UPDATE, INSERT, COPY, etc.) applied to the record."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "User certificate notes."

class SFQA_CA_ATTACHMENTS:
    schema = {
        "CA_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "NOTES": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_ATTACH_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CA_ATTACH_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")

class SFFND_NOTE_TYPE_DEF:
    schema = {
        "NOTE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "NOTE_TYPE_DESC": "STRING",
        "UCF_NOTE_TYPE_VCH1": "STRING",
        "UCF_NOTE_TYPE_VCH2": "STRING",
        "UCF_NOTE_TYPE_VCH3": "STRING",
        "UCF_NOTE_TYPE_VCH4": "STRING",
        "UCF_NOTE_TYPE_VCH5": "STRING",
        "UCF_NOTE_TYPE_FLAG1": "STRING",
        "UCF_NOTE_TYPE_FLAG2": "STRING",
        "UCF_NOTE_TYPE_NUM1": "NUMBER",
        "UCF_NOTE_TYPE_NUM2": "NUMBER",
        "UCF_NOTE_TYPE_DATE1": "STRING",
        "UCF_NOTE_TYPE_VCH6": "STRING",
        "UCF_NOTE_TYPE_VCH7": "STRING",
        "UCF_NOTE_TYPE_VCH8": "STRING",
        "UCF_NOTE_TYPE_VCH9": "STRING",
        "UCF_NOTE_TYPE_VCH10": "STRING",
        "UCF_NOTE_TYPE_VCH11": "STRING",
        "UCF_NOTE_TYPE_VCH12": "STRING",
        "UCF_NOTE_TYPE_VCH13": "STRING",
        "UCF_NOTE_TYPE_VCH14": "STRING",
        "UCF_NOTE_TYPE_VCH15": "STRING",
        "UCF_NOTE_TYPE_NUM3": "NUMBER",
        "UCF_NOTE_TYPE_NUM4": "NUMBER",
        "UCF_NOTE_TYPE_NUM5": "NUMBER",
        "UCF_NOTE_TYPE_DATE2": "STRING",
        "UCF_NOTE_TYPE_DATE3": "STRING",
        "UCF_NOTE_TYPE_DATE4": "STRING",
        "UCF_NOTE_TYPE_DATE5": "STRING",
        "UCF_NOTE_TYPE_FLAG3": "STRING",
        "UCF_NOTE_TYPE_FLAG4": "STRING",
        "UCF_NOTE_TYPE_FLAG5": "STRING",
        "UCF_NOTE_TYPE_VCH255_1": "STRING",
        "UCF_NOTE_TYPE_VCH255_2": "STRING",
        "UCF_NOTE_TYPE_VCH255_3": "STRING",
        "UCF_NOTE_TYPE_VCH4000_1": "STRING",
        "UCF_NOTE_TYPE_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "NOTE_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFWID_ORDER_NOTES_NOTE_TYPE",
        "SFSQA_INSP_ORDER_NOTES_FK2",
    ]
    def __init__(self, column_value_map):
        self.NOTE_TYPE = parse_value(self.schema, column_value_map, "NOTE_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.NOTE_TYPE_DESC = parse_value(self.schema, column_value_map, "NOTE_TYPE_DESC")
        self.UCF_NOTE_TYPE_VCH1 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_VCH2 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_VCH3 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_VCH4 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_VCH5 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_FLAG1 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_NOTE_TYPE_FLAG2 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_NOTE_TYPE_NUM1 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_NOTE_TYPE_NUM2 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_NOTE_TYPE_DATE1 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_NOTE_TYPE_VCH6 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_VCH7 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_VCH8 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_VCH9 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_VCH10 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_VCH11 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_VCH12 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_VCH13 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_VCH14 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_VCH15 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_NOTE_TYPE_NUM3 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_NOTE_TYPE_NUM4 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_NOTE_TYPE_NUM5 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_NOTE_TYPE_DATE2 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_NOTE_TYPE_DATE3 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_NOTE_TYPE_DATE4 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_NOTE_TYPE_DATE5 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_NOTE_TYPE_FLAG3 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_NOTE_TYPE_FLAG4 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_NOTE_TYPE_FLAG5 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_NOTE_TYPE_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_NOTE_TYPE_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_NOTE_TYPE_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_NOTE_TYPE_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_NOTE_TYPE_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_NOTE_TYPE_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.SFWID_ORDER_NOTES_NOTE_TYPE = []
        self.SFSQA_INSP_ORDER_NOTES_FK2 = []

class MOTT_SCRAP_REASONS:
    schema = {
        "SCRAP_REASON_ID": "STRING",
        "TIME_STAMP": "STRING",
        "SCRAP_REASON_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "STATUS": "STRING",
        "OBSOLATED_FLAG": "STRING",
    }
    primary_key_columns = [
        "SCRAP_REASON_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SCRAP_REASON_ID = parse_value(self.schema, column_value_map, "SCRAP_REASON_ID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.SCRAP_REASON_NAME = parse_value(self.schema, column_value_map, "SCRAP_REASON_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.OBSOLATED_FLAG = parse_value(self.schema, column_value_map, "OBSOLATED_FLAG")

class SFPL_MFG_BOM_TOOL_CONFIG:
    schema = {
        "BOM_ID": "STRING",
        "BOM_COMP_TOOL_ID": "STRING",
        "CONFIG_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
        "BOM_COMP_TOOL_ID",
        "CONFIG_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_TOOL_CONFIG_FK2", ["CONFIG_ID"], "SFFND_CONFIG_DEF", ["CONFIG_ID"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_CONFIG_FK1", ["BOM_ID","BOM_COMP_TOOL_ID"], "SFPL_MFG_BOM_TOOL", ["BOM_ID","BOM_COMP_TOOL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique, system-generated identifier of a given BOM."
        self.BOM_COMP_TOOL_ID = parse_value(self.schema, column_value_map, "BOM_COMP_TOOL_ID")
        "Unique, system-generated identifier of a given BOM tool."
        self.CONFIG_ID = parse_value(self.schema, column_value_map, "CONFIG_ID")
        "Unique system generated column to identify each configuration value."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_CA_REQ_AFFECTED_WORK_LDC:
    schema = {
        "CA_REQUEST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "LOCATION_ID": "STRING",
        "DEPARTMENT_ID": "STRING",
        "TIME_STAMP": "DATE",
        "CENTER_ID": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_REQUEST_ID",
        "LOCATION_ID",
        "DEPARTMENT_ID",
        "CENTER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_REQ_AFFECTEDWKLDC_FK1", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFQA_CA_REQ_AFFECTEDWKLDC_FK", ["CA_REQUEST_ID"], "SFQA_CA_REQUEST", ["CA_REQUEST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        self.DEPARTMENT_ID = parse_value(self.schema, column_value_map, "DEPARTMENT_ID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.CENTER_ID = parse_value(self.schema, column_value_map, "CENTER_ID")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_EXTERNAL_DAT_COL:
    schema = {
        "EXTERNAL_DAT_COL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BIS_TRANS_REF_ID": "STRING",
        "MACHINE_ID": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "SERIAL_NO": "STRING",
        "LOT_NO": "STRING",
        "STATUS": "STRING",
        "DATA_POINT": "STRING",
        "DATA_VALUE": "STRING",
        "DATA_FORMAT": "STRING",
        "DATA_UOM": "STRING",
        "FILE_OBJECT_ID": "STRING",
        "MACHINE_NO": "STRING",
        "UID_LABEL": "STRING",
        "DATA_BINARY_DATA": "STRING",
        "DATA_OBJECT_REFERENCE": "STRING",
        "DATA_FILE_FORMAT": "STRING",
    }
    primary_key_columns = [
        "EXTERNAL_DAT_COL_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFWID_EXTERNAL_DATCOL_DTL_FK1",
    ]
    def __init__(self, column_value_map):
        self.EXTERNAL_DAT_COL_ID = parse_value(self.schema, column_value_map, "EXTERNAL_DAT_COL_ID")
        "Generated unique identifier for the record. Primary key of the table."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BIS_TRANS_REF_ID = parse_value(self.schema, column_value_map, "BIS_TRANS_REF_ID")
        "Xref to BIS log tables, SFBIS_LOG_TABLES.TRANSACTION_ID."
        self.MACHINE_ID = parse_value(self.schema, column_value_map, "MACHINE_ID")
        "Machine ID of the machine collected the data."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "Part Number of the unit that data is collected on."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Part Change of the unit that data is collected on."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "Serial identifier of the unit that data is collected on."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "Lot or batch identifier of the unit that data is collected on."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Status of record."
        self.DATA_POINT = parse_value(self.schema, column_value_map, "DATA_POINT")
        "Identifier of the specific data collected. Matches dat col variable name in Solumina."
        self.DATA_VALUE = parse_value(self.schema, column_value_map, "DATA_VALUE")
        "Actual value of the data."
        self.DATA_FORMAT = parse_value(self.schema, column_value_map, "DATA_FORMAT")
        "Data type of the value, such as INTEGER, DATE, STRING, etc."
        self.DATA_UOM = parse_value(self.schema, column_value_map, "DATA_UOM")
        "Unit of measure of data."
        self.FILE_OBJECT_ID = parse_value(self.schema, column_value_map, "FILE_OBJECT_ID")
        "Ref ID for file object in Solumina if incoming data is a file for data collection."
        self.MACHINE_NO = parse_value(self.schema, column_value_map, "MACHINE_NO")
        "Machine number."
        self.UID_LABEL = parse_value(self.schema, column_value_map, "UID_LABEL")
        "Placeholder for scanned UID that identify unit that data is collected on."
        self.DATA_BINARY_DATA = parse_value(self.schema, column_value_map, "DATA_BINARY_DATA")
        "Stores binary data of file received in inbound message."
        self.DATA_OBJECT_REFERENCE = parse_value(self.schema, column_value_map, "DATA_OBJECT_REFERENCE")
        "Stores file name received in inbound message."
        self.DATA_FILE_FORMAT = parse_value(self.schema, column_value_map, "DATA_FILE_FORMAT")
        "Stores format of the file received in inbound message."
        self.SFWID_EXTERNAL_DATCOL_DTL_FK1 = []

class SFWID_OPER_BUYOFF:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "BUYOFF_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "BUYOFF_TYPE": "STRING",
        "BUYOFF_CERT": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "BLOCK_ID": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "REF_ID": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "SUSPECT_FLAG": "STRING",
        "UCF_OPER_BUYOFF_VCH1": "STRING",
        "UCF_OPER_BUYOFF_VCH2": "STRING",
        "UCF_OPER_BUYOFF_VCH3": "STRING",
        "UCF_OPER_BUYOFF_VCH4": "STRING",
        "UCF_OPER_BUYOFF_VCH5": "STRING",
        "UCF_OPER_BUYOFF_VCH6": "STRING",
        "UCF_OPER_BUYOFF_VCH7": "STRING",
        "UCF_OPER_BUYOFF_VCH8": "STRING",
        "UCF_OPER_BUYOFF_VCH9": "STRING",
        "UCF_OPER_BUYOFF_VCH10": "STRING",
        "UCF_OPER_BUYOFF_VCH11": "STRING",
        "UCF_OPER_BUYOFF_VCH12": "STRING",
        "UCF_OPER_BUYOFF_VCH13": "STRING",
        "UCF_OPER_BUYOFF_VCH14": "STRING",
        "UCF_OPER_BUYOFF_VCH15": "STRING",
        "UCF_OPER_BUYOFF_NUM1": "NUMBER",
        "UCF_OPER_BUYOFF_NUM2": "NUMBER",
        "UCF_OPER_BUYOFF_NUM3": "NUMBER",
        "UCF_OPER_BUYOFF_NUM4": "NUMBER",
        "UCF_OPER_BUYOFF_NUM5": "NUMBER",
        "UCF_OPER_BUYOFF_DATE1": "STRING",
        "UCF_OPER_BUYOFF_DATE2": "STRING",
        "UCF_OPER_BUYOFF_DATE3": "STRING",
        "UCF_OPER_BUYOFF_DATE4": "STRING",
        "UCF_OPER_BUYOFF_DATE5": "STRING",
        "UCF_OPER_BUYOFF_FLAG1": "STRING",
        "UCF_OPER_BUYOFF_FLAG2": "STRING",
        "UCF_OPER_BUYOFF_FLAG3": "STRING",
        "UCF_OPER_BUYOFF_FLAG4": "STRING",
        "UCF_OPER_BUYOFF_FLAG5": "STRING",
        "UCF_OPER_BUYOFF_VCH255_1": "STRING",
        "UCF_OPER_BUYOFF_VCH255_2": "STRING",
        "UCF_OPER_BUYOFF_VCH255_3": "STRING",
        "UCF_OPER_BUYOFF_VCH4000_1": "STRING",
        "UCF_OPER_BUYOFF_VCH4000_2": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "BUYOFF_TITLE": "STRING",
        "READY_TO_COLLECT_FLAG": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "BUYOFF_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_BUYOFF_CERT_FK", ["BUYOFF_CERT"], "SFFND_CERT_DEF", ["CERT"]),
        DbForeignKey("SFWID_OPER_BUYOFF_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_BUYOFF_OPERDESC_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
        "SFWID_SRLOPRBO_OPRBO_FK",
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.BUYOFF_ID = parse_value(self.schema, column_value_map, "BUYOFF_ID")
        "Unique, system-generated identifier of the buyoff."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.BUYOFF_TYPE = parse_value(self.schema, column_value_map, "BUYOFF_TYPE")
        "Type or classification of buyoff, e.g., MFG, MFG2, QA."
        self.BUYOFF_CERT = parse_value(self.schema, column_value_map, "BUYOFF_CERT")
        "The required certification for the given buyoff."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Block type/Block id where object exists within the text. For a full list of BLOCK_IDs see SFFND_HTREF_BLOCKID_DEF for full list. Not currently implemented."
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.UCF_OPER_BUYOFF_VCH1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH1")
        self.UCF_OPER_BUYOFF_VCH2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH2")
        self.UCF_OPER_BUYOFF_VCH3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH3")
        self.UCF_OPER_BUYOFF_VCH4 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH4")
        self.UCF_OPER_BUYOFF_VCH5 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH5")
        self.UCF_OPER_BUYOFF_VCH6 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH6")
        self.UCF_OPER_BUYOFF_VCH7 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH7")
        self.UCF_OPER_BUYOFF_VCH8 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH8")
        self.UCF_OPER_BUYOFF_VCH9 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH9")
        self.UCF_OPER_BUYOFF_VCH10 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH10")
        self.UCF_OPER_BUYOFF_VCH11 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH11")
        self.UCF_OPER_BUYOFF_VCH12 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH12")
        self.UCF_OPER_BUYOFF_VCH13 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH13")
        self.UCF_OPER_BUYOFF_VCH14 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH14")
        self.UCF_OPER_BUYOFF_VCH15 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH15")
        self.UCF_OPER_BUYOFF_NUM1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM1")
        self.UCF_OPER_BUYOFF_NUM2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM2")
        self.UCF_OPER_BUYOFF_NUM3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM3")
        self.UCF_OPER_BUYOFF_NUM4 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM4")
        self.UCF_OPER_BUYOFF_NUM5 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM5")
        self.UCF_OPER_BUYOFF_DATE1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE1")
        self.UCF_OPER_BUYOFF_DATE2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE2")
        self.UCF_OPER_BUYOFF_DATE3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE3")
        self.UCF_OPER_BUYOFF_DATE4 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE4")
        self.UCF_OPER_BUYOFF_DATE5 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE5")
        self.UCF_OPER_BUYOFF_FLAG1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG1")
        self.UCF_OPER_BUYOFF_FLAG2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG2")
        self.UCF_OPER_BUYOFF_FLAG3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG3")
        self.UCF_OPER_BUYOFF_FLAG4 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG4")
        self.UCF_OPER_BUYOFF_FLAG5 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG5")
        self.UCF_OPER_BUYOFF_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH255_1")
        self.UCF_OPER_BUYOFF_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH255_2")
        self.UCF_OPER_BUYOFF_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH255_3")
        self.UCF_OPER_BUYOFF_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH4000_1")
        self.UCF_OPER_BUYOFF_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH4000_2")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.BUYOFF_TITLE = parse_value(self.schema, column_value_map, "BUYOFF_TITLE")
        self.READY_TO_COLLECT_FLAG = parse_value(self.schema, column_value_map, "READY_TO_COLLECT_FLAG")
        "Determines if buyoff is available to collect or not."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Display line number for buyoff authoring."
        self.SFWID_SRLOPRBO_OPRBO_FK = []

class SFWID_OPER_NOTES_TEXT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
        "NOTE_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to core objects."
        self.NOTE_ID = parse_value(self.schema, column_value_map, "NOTE_ID")

class SFCORE_PLM_SERVER:
    schema = {
        "SERVER_ID": "STRING",
        "PLM_SYSTEM": "STRING",
        "SERVER_STATUS": "STRING",
        "IS_VALID": "STRING",
    }
    primary_key_columns = [
        "SERVER_ID",
        "PLM_SYSTEM",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SERVER_ID = parse_value(self.schema, column_value_map, "SERVER_ID")
        "Unique host server id for PLM system."
        self.PLM_SYSTEM = parse_value(self.schema, column_value_map, "PLM_SYSTEM")
        "External PLM System."
        self.SERVER_STATUS = parse_value(self.schema, column_value_map, "SERVER_STATUS")
        "Status of the host server."
        self.IS_VALID = parse_value(self.schema, column_value_map, "IS_VALID")
        "Indicate if the host server is valid or not."

class SFFND_EDITMODE_STATUS:
    schema = {
        "DOC_TYPE": "STRING",
        "DOC_SUB_TYPE": "STRING",
        "STATUS": "STRING",
        "WORK_FLOW": "STRING",
        "EDIT_MODE": "STRING",
        "BLOCK_ID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "USERID": "STRING",
        "BLOCK_VALIDATOR_PROC": "STRING",
    }
    primary_key_columns = [
        "DOC_TYPE",
        "DOC_SUB_TYPE",
        "WORK_FLOW",
        "EDIT_MODE",
        "BLOCK_ID",
        "STATUS",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_EDITMODE_STATUS_FK2", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
        DbForeignKey("SFFND_EDITMODE_STATUS_FK3", ["STATUS"], "SFFND_QUEUE_TYPE_DEF", ["QUEUE_TYPE"]),
        DbForeignKey("BLOCKID_FK1", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
        DbForeignKey("SFFND_EDITMODE_STATUS_FK1", ["DOC_TYPE","EDIT_MODE"], "SFFND_MODES_DEF", ["DOC_TYPE","EDIT_MODE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        "Name/unique identifier of a Solumina Document Type."
        self.DOC_SUB_TYPE = parse_value(self.schema, column_value_map, "DOC_SUB_TYPE")
        "Name/unique identifier of a Solumina Document Sub Type."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Edit status. For instance PLG AUTHORING, IE AUTHORING, QA AUTHORING, or QA_PR."
        self.WORK_FLOW = parse_value(self.schema, column_value_map, "WORK_FLOW")
        "Name/unique identifier of a Solumina Work Flow."
        self.EDIT_MODE = parse_value(self.schema, column_value_map, "EDIT_MODE")
        "Name/unique identifier of a Solumina edit mode, EDITMODES.EDIT_PL, EDITMODES.EDIT_IE, or EDITMODES.EDIT_QA."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Name/unique identifier of a text block type. For instance: PlanOperText, PlanStepText, PlanIEText, or PlanStepQAText."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.BLOCK_VALIDATOR_PROC = parse_value(self.schema, column_value_map, "BLOCK_VALIDATOR_PROC")
        "Procedure name that need to be executed when block is executed."

class SFWID_STAGING_LOCATION:
    schema = {
        "STAGING_UID": "STRING",
        "PART_NO": "STRING",
        "SERIAL_NO": "STRING",
        "LOT_NO": "STRING",
        "STAGING_LOCATION": "STRING",
        "CURR_LOCATION_ID": "STRING",
        "CURR_DEPARTMENT_ID": "STRING",
        "STAGING_QTY": "NUMBER",
        "CURR_CENTER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "AS_WORKED_BOM_ID": "STRING",
    }
    primary_key_columns = [
        "STAGING_UID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_STAGING_LOCATION_FK2", ["PART_NO","LOT_NO","SERIAL_NO"], "SFWID_AS_WORKED_ITEM", ["PART_NO","LOT_NO","SERIAL_NO"]),
        DbForeignKey("SFWID_STAGING_LOCATION_FK1", ["CURR_LOCATION_ID","CURR_DEPARTMENT_ID","CURR_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFWID_STAGING_LOCATION_FK3", ["AS_WORKED_BOM_ID"], "SFWID_AS_WORKED_BOM", ["AS_WORKED_BOM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.STAGING_UID = parse_value(self.schema, column_value_map, "STAGING_UID")
        "Unique Identification number."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier of the component/part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned Lot number of a given component/part."
        self.STAGING_LOCATION = parse_value(self.schema, column_value_map, "STAGING_LOCATION")
        "User-assigned Staging Location of a given component/part."
        self.CURR_LOCATION_ID = parse_value(self.schema, column_value_map, "CURR_LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.CURR_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "CURR_DEPARTMENT_ID")
        "Unique, system-generated identifier of the given Work Department."
        self.STAGING_QTY = parse_value(self.schema, column_value_map, "STAGING_QTY")
        "User-assigned Staging Qty of a given component/part."
        self.CURR_CENTER_ID = parse_value(self.schema, column_value_map, "CURR_CENTER_ID")
        "Unique, system-generated identifier of the given Work Center."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.AS_WORKED_BOM_ID = parse_value(self.schema, column_value_map, "AS_WORKED_BOM_ID")
        "System-generated identifier of the as-worked BOM."

class SFFND_DECISION_TYPE_DEF:
    schema = {
        "DECISION_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "DECISION_DESC": "STRING",
    }
    primary_key_columns = [
        "DECISION_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFWID_ORDER_NODE_DT_FK",
        "SFPL_PLAN_NODE_DT_FK",
    ]
    def __init__(self, column_value_map):
        self.DECISION_TYPE = parse_value(self.schema, column_value_map, "DECISION_TYPE")
        "Type or classification of decision."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.DECISION_DESC = parse_value(self.schema, column_value_map, "DECISION_DESC")
        "Description of the decision type."
        self.SFWID_ORDER_NODE_DT_FK = []
        self.SFPL_PLAN_NODE_DT_FK = []

class SFCORE_TEMPLATE_DEF:
    schema = {
        "TEMPLATE_NAME": "STRING",
        "TEMPLATE_TYPE": "STRING",
        "TEMPLATE_BODY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "SUBJECT_LINE": "STRING",
        "DESCRIPTION": "STRING",
    }
    primary_key_columns = [
        "TEMPLATE_NAME",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_TEMPLATE_DEF_FK1", ["TEMPLATE_TYPE"], "SFCORE_TEMPLATE_TYPE_DEF", ["TEMPLATE_TYPE"]),
    ]
    refs = [
        "SFFND_ALERT_TYPE_DEF_FK1",
    ]
    def __init__(self, column_value_map):
        self.TEMPLATE_NAME = parse_value(self.schema, column_value_map, "TEMPLATE_NAME")
        self.TEMPLATE_TYPE = parse_value(self.schema, column_value_map, "TEMPLATE_TYPE")
        self.TEMPLATE_BODY = parse_value(self.schema, column_value_map, "TEMPLATE_BODY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.SUBJECT_LINE = parse_value(self.schema, column_value_map, "SUBJECT_LINE")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.SFFND_ALERT_TYPE_DEF_FK1 = []

class SFFND_SOLUMINA_REPORT_DEF:
    schema = {
        "REPORT_ID": "STRING",
        "REPORT_LEVEL": "STRING",
        "ACTIVE_REPORT_FLAG": "STRING",
        "COMPANY_LOGO_IMAGE_FLAG": "STRING",
        "BUS_UNIT_DIV_FLAG": "STRING",
        "PARENT_COMPANY_SHORT_NAME_FLAG": "STRING",
        "PARENT_COMPANY_FULL_NAME_FLAG": "STRING",
        "PROPRIETARY_INFO_FLAG": "STRING",
        "OOC_OPERATOR_CONTROL_FLAG": "STRING",
        "OOC_INITIATE_DI_FLAG": "STRING",
        "OOC_SET_CA_FLAG": "STRING",
        "OOC_AUTO_WO_STOP_FLAG": "STRING",
        "OOC_AUTO_WO_REMOVAL_FLAG": "STRING",
        "OOC_TRIGGER_DC_SUPERGRP_FLAG": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "COMPANY_NAME": "STRING",
        "COMPANY_LOGO_IMAGE_OBJECT_ID": "STRING",
        "BUS_UNIT_DIV_NAME": "STRING",
        "PARENT_COMPANY_SHORT_NAME": "STRING",
        "PARENT_COMPANY_FULL_NAME": "STRING",
        "PROPRIETARY_INFO_STATEMENT": "STRING",
    }
    primary_key_columns = [
        "REPORT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_REP_DESC_IMAGE_OBJECT_ID", ["COMPANY_LOGO_IMAGE_OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REPORT_ID = parse_value(self.schema, column_value_map, "REPORT_ID")
        self.REPORT_LEVEL = parse_value(self.schema, column_value_map, "REPORT_LEVEL")
        self.ACTIVE_REPORT_FLAG = parse_value(self.schema, column_value_map, "ACTIVE_REPORT_FLAG")
        self.COMPANY_LOGO_IMAGE_FLAG = parse_value(self.schema, column_value_map, "COMPANY_LOGO_IMAGE_FLAG")
        self.BUS_UNIT_DIV_FLAG = parse_value(self.schema, column_value_map, "BUS_UNIT_DIV_FLAG")
        self.PARENT_COMPANY_SHORT_NAME_FLAG = parse_value(self.schema, column_value_map, "PARENT_COMPANY_SHORT_NAME_FLAG")
        self.PARENT_COMPANY_FULL_NAME_FLAG = parse_value(self.schema, column_value_map, "PARENT_COMPANY_FULL_NAME_FLAG")
        self.PROPRIETARY_INFO_FLAG = parse_value(self.schema, column_value_map, "PROPRIETARY_INFO_FLAG")
        self.OOC_OPERATOR_CONTROL_FLAG = parse_value(self.schema, column_value_map, "OOC_OPERATOR_CONTROL_FLAG")
        self.OOC_INITIATE_DI_FLAG = parse_value(self.schema, column_value_map, "OOC_INITIATE_DI_FLAG")
        self.OOC_SET_CA_FLAG = parse_value(self.schema, column_value_map, "OOC_SET_CA_FLAG")
        self.OOC_AUTO_WO_STOP_FLAG = parse_value(self.schema, column_value_map, "OOC_AUTO_WO_STOP_FLAG")
        self.OOC_AUTO_WO_REMOVAL_FLAG = parse_value(self.schema, column_value_map, "OOC_AUTO_WO_REMOVAL_FLAG")
        self.OOC_TRIGGER_DC_SUPERGRP_FLAG = parse_value(self.schema, column_value_map, "OOC_TRIGGER_DC_SUPERGRP_FLAG")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.COMPANY_NAME = parse_value(self.schema, column_value_map, "COMPANY_NAME")
        self.COMPANY_LOGO_IMAGE_OBJECT_ID = parse_value(self.schema, column_value_map, "COMPANY_LOGO_IMAGE_OBJECT_ID")
        "Unique identifier for the multimedia object with a company's logo."
        self.BUS_UNIT_DIV_NAME = parse_value(self.schema, column_value_map, "BUS_UNIT_DIV_NAME")
        self.PARENT_COMPANY_SHORT_NAME = parse_value(self.schema, column_value_map, "PARENT_COMPANY_SHORT_NAME")
        self.PARENT_COMPANY_FULL_NAME = parse_value(self.schema, column_value_map, "PARENT_COMPANY_FULL_NAME")
        self.PROPRIETARY_INFO_STATEMENT = parse_value(self.schema, column_value_map, "PROPRIETARY_INFO_STATEMENT")

class SFWID_QA_OPER_BUYOFFS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_NO": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "BUYOFF_ID": "STRING",
        "STEP_NO": "STRING",
        "BUYOFF_TYPE": "STRING",
        "BUYOFF_CERT": "STRING",
        "BUYOFF_TITLE": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_NO",
        "OPER_KEY",
        "STEP_KEY",
        "BUYOFF_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.BUYOFF_ID = parse_value(self.schema, column_value_map, "BUYOFF_ID")
        "Unique, system-generated identifier of the buyoff."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.BUYOFF_TYPE = parse_value(self.schema, column_value_map, "BUYOFF_TYPE")
        "Type or classification of buyoff, e.g., MFG, MFG2, QA."
        self.BUYOFF_CERT = parse_value(self.schema, column_value_map, "BUYOFF_CERT")
        "The required certification for the given buyoff."
        self.BUYOFF_TITLE = parse_value(self.schema, column_value_map, "BUYOFF_TITLE")

class SFCORE_CFG_LIB:
    schema = {
        "CFG_ID": "STRING",
        "STYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DESCRIPTION": "STRING",
        "CFG_TEXT": "STRING",
    }
    primary_key_columns = [
        "CFG_ID",
        "STYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_CFG_LIB_FK1", ["STYPE"], "SFCORE_MODULES", ["GROUP_NAME"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CFG_ID = parse_value(self.schema, column_value_map, "CFG_ID")
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.CFG_TEXT = parse_value(self.schema, column_value_map, "CFG_TEXT")

class SFSQA_SAMPLE_PLAN_DETAILS:
    schema = {
        "SAMPLE_PLAN_ID": "STRING",
        "SAMPLE_PLAN_DETAIL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "LOT_SIZE_FROM": "NUMBER",
        "LOT_SIZE_THRU": "NUMBER",
        "AQL": "NUMBER",
        "SAMPLE_SIZE": "NUMBER",
        "ALLOWABLE_FAILURES": "NUMBER",
        "INITIALIZATION": "NUMBER",
        "NUMBER_TO_SKIP": "NUMBER",
        "NOTES": "STRING",
    }
    primary_key_columns = [
        "SAMPLE_PLAN_ID",
        "SAMPLE_PLAN_DETAIL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_SAMPL_PLAN_DESC_FK", ["SAMPLE_PLAN_ID"], "SFSQA_SAMPLE_PLAN_DESC", ["SAMPLE_PLAN_ID"]),
        DbForeignKey("SFSQA_SAMPLE_PLAN_DETAILS_FK2", ["AQL"], "SFSQA_AQL_DEF", ["AQL"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SAMPLE_PLAN_ID = parse_value(self.schema, column_value_map, "SAMPLE_PLAN_ID")
        "System generated unique identifier for a given sampling plan."
        self.SAMPLE_PLAN_DETAIL_ID = parse_value(self.schema, column_value_map, "SAMPLE_PLAN_DETAIL_ID")
        "System generated unique identifier for a given sampling plan detail record."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.LOT_SIZE_FROM = parse_value(self.schema, column_value_map, "LOT_SIZE_FROM")
        self.LOT_SIZE_THRU = parse_value(self.schema, column_value_map, "LOT_SIZE_THRU")
        self.AQL = parse_value(self.schema, column_value_map, "AQL")
        "Acceptable Quality Level."
        self.SAMPLE_SIZE = parse_value(self.schema, column_value_map, "SAMPLE_SIZE")
        self.ALLOWABLE_FAILURES = parse_value(self.schema, column_value_map, "ALLOWABLE_FAILURES")
        self.INITIALIZATION = parse_value(self.schema, column_value_map, "INITIALIZATION")
        self.NUMBER_TO_SKIP = parse_value(self.schema, column_value_map, "NUMBER_TO_SKIP")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about the task."

class SFPL_MFG_BOM_MM_OBJECT:
    schema = {
        "BOM_ID": "STRING",
        "OBJECT_ID": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BOM_LINE_ID": "STRING",
        "DEFAULT_FLAG": "STRING",
        "EFF_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
        "LATEST_EFF_GRP_REV_FLAG": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_MM_OBJECT_FK3", ["BOM_ID","BOM_LINE_ID"], "SFPL_MFG_BOM_REV_LINE_NO", ["BOM_ID","BOM_LINE_ID"]),
        DbForeignKey("SFPL_MFG_BOM_MM_OBJECT_FK4", ["EFF_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFPL_MFG_BOM_MM_OBJECT_FK2", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_MM_OBJECT_FK5", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
        DbForeignKey("SFPL_MFG_BOM_MM_OBJECT_FK1", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
        "SFPL_MFG_BOM_MM_OBJ_CONFIG_FK1",
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Corresponding BOM for which multimedia object is added."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BOM_LINE_ID = parse_value(self.schema, column_value_map, "BOM_LINE_ID")
        "Reference of BOM Line of the BOM Document."
        self.DEFAULT_FLAG = parse_value(self.schema, column_value_map, "DEFAULT_FLAG")
        "Value Y means the MM Object is default for that BOM. Only 1 MM Object can have DEFAULT_FLAG=Y for a particular BOM."
        self.EFF_TYPE = parse_value(self.schema, column_value_map, "EFF_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        "EFF Group Id"
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        "Next Higher Assembly given by User"
        self.LATEST_EFF_GRP_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_EFF_GRP_REV_FLAG")
        "Latest Eff Group Rev Flag"
        self.SFPL_MFG_BOM_MM_OBJ_CONFIG_FK1 = []

class SFFND_CONFIG_MODULE_DEF:
    schema = {
        "CONFIG_MODULE_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "CONFIG_MODULE_DESC": "STRING",
    }
    primary_key_columns = [
        "CONFIG_MODULE_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_GLOBALCONF_CONFMODULE_FK",
    ]
    def __init__(self, column_value_map):
        self.CONFIG_MODULE_NAME = parse_value(self.schema, column_value_map, "CONFIG_MODULE_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.CONFIG_MODULE_DESC = parse_value(self.schema, column_value_map, "CONFIG_MODULE_DESC")
        self.SFFND_GLOBALCONF_CONFMODULE_FK = []

class SFSQA_INSP_ORDER_HOLD_SERIALS:
    schema = {
        "HOLD_ID": "STRING",
        "INSP_ORDER_ID": "STRING",
        "INSP_ORDER_UNIT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "HOLD_SERIAL_STATUS": "STRING",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "HOLD_ID",
        "INSP_ORDER_ID",
        "ITEM_ID",
        "INSP_ORDER_UNIT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_IO_HOLD_SRLS_FK1", ["HOLD_ID","INSP_ORDER_ID"], "SFSQA_INSP_ORDER_HOLDS", ["HOLD_ID","INSP_ORDER_ID"]),
        DbForeignKey("SFSQA_IO_HOLD_SRLS_FK2", ["INSP_ORDER_ID","ITEM_ID","INSP_ORDER_UNIT_ID"], "SFSQA_INSP_ORDER_UNITS", ["INSP_ORDER_ID","ITEM_ID","UNIT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HOLD_ID = parse_value(self.schema, column_value_map, "HOLD_ID")
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_ORDER_UNIT_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_UNIT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.HOLD_SERIAL_STATUS = parse_value(self.schema, column_value_map, "HOLD_SERIAL_STATUS")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")

class SFFND_MODEL_DEF:
    schema = {
        "MODEL": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "MODEL_DESC": "STRING",
        "PROGRAM": "STRING",
    }
    primary_key_columns = [
        "MODEL",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_MODEL_DEF_FK1", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
    ]
    refs = [
        "SFWID_OWP_DEF_FK1",
        "SFPL_PLAN_DESC_MODEL_FK",
        "SFWID_ORDER_DESC_MDL_FK",
        "SFWID_ORDER_DESC_ALT_FK5",
    ]
    def __init__(self, column_value_map):
        self.MODEL = parse_value(self.schema, column_value_map, "MODEL")
        "Unique identifier of a model/product line."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.MODEL_DESC = parse_value(self.schema, column_value_map, "MODEL_DESC")
        "A description or name of the model."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "A specific project or program."
        self.SFWID_OWP_DEF_FK1 = []
        self.SFPL_PLAN_DESC_MODEL_FK = []
        self.SFWID_ORDER_DESC_MDL_FK = []
        self.SFWID_ORDER_DESC_ALT_FK5 = []

class SFPL_MATERIAL_NOTES_TEXT:
    schema = {
        "NOTE_ID": "STRING",
        "MATERIAL_ID": "STRING",
        "NOTE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
    }
    primary_key_columns = [
        "NOTE_ID",
        "NOTE_TYPE",
        "MATERIAL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MATERIAL_NOTES_TEXT_FK1", ["MATERIAL_ID"], "MOTT_TIME_MATERIAL", ["MATERIAL_ID"]),
    ]
    refs = [
        "SFPL_MATERIAL_HTREF_NOTES_FK1",
    ]
    def __init__(self, column_value_map):
        self.NOTE_ID = parse_value(self.schema, column_value_map, "NOTE_ID")
        "Unique, system-generated identifier of a note."
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        "Unique, system-generated identifier of a given material."
        self.NOTE_TYPE = parse_value(self.schema, column_value_map, "NOTE_TYPE")
        "Type of note which denotes from where its inserted like SCRAP, TEST_RESULT, INCREASE_TIME."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to core objects."
        self.SFPL_MATERIAL_HTREF_NOTES_FK1 = []

class SFSQA_INSP_METHOD_DEF:
    schema = {
        "INSPECTION_METHOD": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "TIME_STAMP": "DATE",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "INSPECTION_METHOD",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_IDP_IC_CDCS_ACTUAL_INSP",
        "SFFND_STD_DATCOL_TYPE_DEF_FK3",
        "SFSQA_IDP_IC_PREFISMETH_FK",
        "SFSQA_INSP_ITEMS_FK6",
        "SFSQA_CLIST_II_FK6",
    ]
    def __init__(self, column_value_map):
        self.INSPECTION_METHOD = parse_value(self.schema, column_value_map, "INSPECTION_METHOD")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFSQA_IDP_IC_CDCS_ACTUAL_INSP = []
        self.SFFND_STD_DATCOL_TYPE_DEF_FK3 = []
        self.SFSQA_IDP_IC_PREFISMETH_FK = []
        self.SFSQA_INSP_ITEMS_FK6 = []
        self.SFSQA_CLIST_II_FK6 = []

class SFFND_BARCODE_FORMATS:
    schema = {
        "BARCODE_FORMAT": "STRING",
        "BARCODE_DESC": "STRING",
        "BARCODE_TYPE": "STRING",
        "FORMAT_SYNTAX": "STRING",
        "RECORD_SEPARATOR": "STRING",
        "GROUP_SEPARATOR": "STRING",
        "PREAMBLE": "STRING",
        "POSTAMBLE": "STRING",
        "DEFAULT_FLAG": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_BARCODEFORMAT_VCH1": "STRING",
        "UCF_BARCODEFORMAT_VCH2": "STRING",
        "UCF_BARCODEFORMAT_VCH3": "STRING",
        "UCF_BARCODEFORMAT_VCH4": "STRING",
        "UCF_BARCODEFORMAT_VCH5": "STRING",
        "UCF_BARCODEFORMAT_VCH6": "STRING",
        "UCF_BARCODEFORMAT_VCH7": "STRING",
        "UCF_BARCODEFORMAT_VCH8": "STRING",
        "UCF_BARCODEFORMAT_VCH9": "STRING",
        "UCF_BARCODEFORMAT_VCH10": "STRING",
        "UCF_BARCODEFORMAT_VCH11": "STRING",
        "UCF_BARCODEFORMAT_VCH12": "STRING",
        "UCF_BARCODEFORMAT_VCH13": "STRING",
        "UCF_BARCODEFORMAT_VCH14": "STRING",
        "UCF_BARCODEFORMAT_VCH15": "STRING",
        "UCF_BARCODEFORMAT_NUM1": "NUMBER",
        "UCF_BARCODEFORMAT_NUM2": "NUMBER",
        "UCF_BARCODEFORMAT_NUM3": "NUMBER",
        "UCF_BARCODEFORMAT_NUM4": "NUMBER",
        "UCF_BARCODEFORMAT_NUM5": "NUMBER",
        "UCF_BARCODEFORMAT_FLAG1": "STRING",
        "UCF_BARCODEFORMAT_FLAG2": "STRING",
        "UCF_BARCODEFORMAT_FLAG3": "STRING",
        "UCF_BARCODEFORMAT_FLAG4": "STRING",
        "UCF_BARCODEFORMAT_FLAG5": "STRING",
        "UCF_BARCODEFORMAT_DATE1": "STRING",
        "UCF_BARCODEFORMAT_DATE2": "STRING",
        "UCF_BARCODEFORMAT_DATE3": "STRING",
        "UCF_BARCODEFORMAT_DATE4": "STRING",
        "UCF_BARCODEFORMAT_DATE5": "STRING",
        "UCF_BARCODEFORMAT_VCH255_1": "STRING",
        "UCF_BARCODEFORMAT_VCH255_2": "STRING",
        "UCF_BARCODEFORMAT_VCH255_3": "STRING",
        "UCF_BARCODEFORMAT_VCH4000_1": "STRING",
        "UCF_BARCODEFORMAT_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "BARCODE_FORMAT",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_BARCODE_DETAILS_FK1",
        "SFFND_WORK_LOC_DEF_FK2",
    ]
    def __init__(self, column_value_map):
        self.BARCODE_FORMAT = parse_value(self.schema, column_value_map, "BARCODE_FORMAT")
        self.BARCODE_DESC = parse_value(self.schema, column_value_map, "BARCODE_DESC")
        self.BARCODE_TYPE = parse_value(self.schema, column_value_map, "BARCODE_TYPE")
        self.FORMAT_SYNTAX = parse_value(self.schema, column_value_map, "FORMAT_SYNTAX")
        self.RECORD_SEPARATOR = parse_value(self.schema, column_value_map, "RECORD_SEPARATOR")
        self.GROUP_SEPARATOR = parse_value(self.schema, column_value_map, "GROUP_SEPARATOR")
        self.PREAMBLE = parse_value(self.schema, column_value_map, "PREAMBLE")
        self.POSTAMBLE = parse_value(self.schema, column_value_map, "POSTAMBLE")
        self.DEFAULT_FLAG = parse_value(self.schema, column_value_map, "DEFAULT_FLAG")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.UCF_BARCODEFORMAT_VCH1 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH1")
        self.UCF_BARCODEFORMAT_VCH2 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH2")
        self.UCF_BARCODEFORMAT_VCH3 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH3")
        self.UCF_BARCODEFORMAT_VCH4 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH4")
        self.UCF_BARCODEFORMAT_VCH5 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH5")
        self.UCF_BARCODEFORMAT_VCH6 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH6")
        self.UCF_BARCODEFORMAT_VCH7 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH7")
        self.UCF_BARCODEFORMAT_VCH8 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH8")
        self.UCF_BARCODEFORMAT_VCH9 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH9")
        self.UCF_BARCODEFORMAT_VCH10 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH10")
        self.UCF_BARCODEFORMAT_VCH11 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH11")
        self.UCF_BARCODEFORMAT_VCH12 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH12")
        self.UCF_BARCODEFORMAT_VCH13 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH13")
        self.UCF_BARCODEFORMAT_VCH14 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH14")
        self.UCF_BARCODEFORMAT_VCH15 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH15")
        self.UCF_BARCODEFORMAT_NUM1 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_NUM1")
        self.UCF_BARCODEFORMAT_NUM2 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_NUM2")
        self.UCF_BARCODEFORMAT_NUM3 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_NUM3")
        self.UCF_BARCODEFORMAT_NUM4 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_NUM4")
        self.UCF_BARCODEFORMAT_NUM5 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_NUM5")
        self.UCF_BARCODEFORMAT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_FLAG1")
        self.UCF_BARCODEFORMAT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_FLAG2")
        self.UCF_BARCODEFORMAT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_FLAG3")
        self.UCF_BARCODEFORMAT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_FLAG4")
        self.UCF_BARCODEFORMAT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_FLAG5")
        self.UCF_BARCODEFORMAT_DATE1 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_DATE1")
        self.UCF_BARCODEFORMAT_DATE2 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_DATE2")
        self.UCF_BARCODEFORMAT_DATE3 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_DATE3")
        self.UCF_BARCODEFORMAT_DATE4 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_DATE4")
        self.UCF_BARCODEFORMAT_DATE5 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_DATE5")
        self.UCF_BARCODEFORMAT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH255_1")
        self.UCF_BARCODEFORMAT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH255_2")
        self.UCF_BARCODEFORMAT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH255_3")
        self.UCF_BARCODEFORMAT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH4000_1")
        self.UCF_BARCODEFORMAT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_BARCODEFORMAT_VCH4000_2")
        self.SFFND_BARCODE_DETAILS_FK1 = []
        self.SFFND_WORK_LOC_DEF_FK2 = []

class SFQA_CA_REQUEST_TEXT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_REQUEST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."

class SFFND_HTREF_WID_OPER_TEXT:
    schema = {
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "OBJECT_TYPE": "STRING",
        "OBJECT_NAME": "STRING",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
        "ALT_COUNT": "NUMBER",
        "ALT_ID": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_HTREF_WIDOPRTXT_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("BLOCKID_FK14", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
        DbForeignKey("SFFND_HTREF_WID_OPERTXT_FK", ["ORDER_ID","OPER_KEY","STEP_KEY","TEXT_TYPE"], "SFWID_OPER_TEXT", ["ORDER_ID","OPER_KEY","STEP_KEY","TEXT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "The system generated unique identifier of an object link embedded in a work plan operation text block."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "The unique identifier of a referenced object."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The type/class of the object, CAD drawing, still image, slide, UDV, standard text, audio, or video."
        self.OBJECT_NAME = parse_value(self.schema, column_value_map, "OBJECT_NAME")
        "A descriptive tag or name of the object."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "The protocol Id of a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "The host Id of a Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "The file location of a Universal Resource Locator."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."

class SFFND_OPER_TYPE_DEF:
    schema = {
        "OPER_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "OPER_TYPE_DESC": "STRING",
        "UCF_OPER_TYPE_VCH1": "STRING",
        "UCF_OPER_TYPE_VCH2": "STRING",
        "UCF_OPER_TYPE_VCH3": "STRING",
        "UCF_OPER_TYPE_VCH4": "STRING",
        "UCF_OPER_TYPE_VCH5": "STRING",
        "UCF_OPER_TYPE_NUM1": "NUMBER",
        "UCF_OPER_TYPE_NUM2": "NUMBER",
        "UCF_OPER_TYPE_NUM3": "NUMBER",
        "UCF_OPER_TYPE_DATE1": "STRING",
        "UCF_OPER_TYPE_DATE2": "STRING",
        "UCF_OPER_TYPE_FLAG1": "STRING",
        "UCF_OPER_TYPE_FLAG2": "STRING",
        "UCF_OPER_TYPE_FLAG3": "STRING",
        "UCF_OPER_TYPE_VCH255_1": "STRING",
        "UCF_OPER_TYPE_VCH255_2": "STRING",
        "LABOR_SIGNON_TYPE": "STRING",
        "OPER_TYPE_ROLE": "STRING",
    }
    primary_key_columns = [
        "OPER_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_OPER_TYPE_DEF_FK1", ["LABOR_SIGNON_TYPE"], "SFFND_LABOR_SIGNON_TYPE_DEF", ["LABOR_SIGNON_TYPE"]),
    ]
    refs = [
        "SFWID_OPER_DESC_OPER_TYP_FK",
        "SFPL_OPER_DESC_OPER_TYP_FK",
    ]
    def __init__(self, column_value_map):
        self.OPER_TYPE = parse_value(self.schema, column_value_map, "OPER_TYPE")
        "Type or class of operation, e.g., MFG."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.OPER_TYPE_DESC = parse_value(self.schema, column_value_map, "OPER_TYPE_DESC")
        "A description of the manufacturing operation type/class."
        self.UCF_OPER_TYPE_VCH1 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_VCH1")
        self.UCF_OPER_TYPE_VCH2 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_VCH2")
        self.UCF_OPER_TYPE_VCH3 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_VCH3")
        self.UCF_OPER_TYPE_VCH4 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_VCH4")
        self.UCF_OPER_TYPE_VCH5 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_VCH5")
        self.UCF_OPER_TYPE_NUM1 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_NUM1")
        self.UCF_OPER_TYPE_NUM2 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_NUM2")
        self.UCF_OPER_TYPE_NUM3 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_NUM3")
        self.UCF_OPER_TYPE_DATE1 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_DATE1")
        self.UCF_OPER_TYPE_DATE2 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_DATE2")
        self.UCF_OPER_TYPE_FLAG1 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_FLAG1")
        self.UCF_OPER_TYPE_FLAG2 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_FLAG2")
        self.UCF_OPER_TYPE_FLAG3 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_FLAG3")
        self.UCF_OPER_TYPE_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_VCH255_1")
        self.UCF_OPER_TYPE_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_OPER_TYPE_VCH255_2")
        self.LABOR_SIGNON_TYPE = parse_value(self.schema, column_value_map, "LABOR_SIGNON_TYPE")
        "Type of Labor SignOn,e.g. RUN."
        self.OPER_TYPE_ROLE = parse_value(self.schema, column_value_map, "OPER_TYPE_ROLE")
        "Operation Type Role associated with the Operation Type."
        self.SFWID_OPER_DESC_OPER_TYP_FK = []
        self.SFPL_OPER_DESC_OPER_TYP_FK = []

class SFWID_OPER_TOOL_ALT:
    schema = {
        "OPER_TOOL_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_NO": "STRING",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
        "OPER_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "TOOL_TITLE": "STRING",
        "TOOL_NOTES": "STRING",
        "SERIAL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "QTY": "NUMBER",
        "TOOL_MODEL": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "MANUFACTURER": "STRING",
        "UCF_PLAN_TOOL_VCH1": "STRING",
        "UCF_PLAN_TOOL_VCH2": "STRING",
        "UCF_PLAN_TOOL_VCH3": "STRING",
        "UCF_PLAN_TOOL_FLAG1": "STRING",
        "UCF_PLAN_TOOL_DATE1": "STRING",
        "UCF_PLAN_TOOL_NUM1": "NUMBER",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "SUSPECT_FLAG": "STRING",
        "UCF_PLAN_TOOL_VCH4": "STRING",
        "UCF_PLAN_TOOL_VCH5": "STRING",
        "UCF_PLAN_TOOL_VCH6": "STRING",
        "UCF_PLAN_TOOL_VCH7": "STRING",
        "UCF_PLAN_TOOL_VCH8": "STRING",
        "UCF_PLAN_TOOL_VCH9": "STRING",
        "UCF_PLAN_TOOL_VCH10": "STRING",
        "UCF_PLAN_TOOL_VCH11": "STRING",
        "UCF_PLAN_TOOL_VCH12": "STRING",
        "UCF_PLAN_TOOL_VCH13": "STRING",
        "UCF_PLAN_TOOL_VCH14": "STRING",
        "UCF_PLAN_TOOL_VCH15": "STRING",
        "UCF_PLAN_TOOL_NUM2": "NUMBER",
        "UCF_PLAN_TOOL_NUM3": "NUMBER",
        "UCF_PLAN_TOOL_NUM4": "NUMBER",
        "UCF_PLAN_TOOL_NUM5": "NUMBER",
        "UCF_PLAN_TOOL_DATE2": "STRING",
        "UCF_PLAN_TOOL_DATE3": "STRING",
        "UCF_PLAN_TOOL_DATE4": "STRING",
        "UCF_PLAN_TOOL_DATE5": "STRING",
        "UCF_PLAN_TOOL_FLAG2": "STRING",
        "UCF_PLAN_TOOL_FLAG3": "STRING",
        "UCF_PLAN_TOOL_FLAG4": "STRING",
        "UCF_PLAN_TOOL_FLAG5": "STRING",
        "UCF_PLAN_TOOL_VCH255_1": "STRING",
        "UCF_PLAN_TOOL_VCH255_2": "STRING",
        "UCF_PLAN_TOOL_VCH255_3": "STRING",
        "UCF_PLAN_TOOL_VCH4000_1": "STRING",
        "UCF_PLAN_TOOL_VCH4000_2": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "IS_TOOL_KITTED": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "SECURITY_GROUP": "STRING",
        "SERIAL_KITTED": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "OVERUSE_FLAG": "STRING",
        "TOOL_ID": "STRING",
        "BOM_COMP_TOOL_ID": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "BOM_LINE_NO": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
    }
    primary_key_columns = [
        "OPER_TOOL_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_TOOL_ALT_FK5", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFWID_OPER_TOOL_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_TOOL_ALT_FK3", ["TOOL_NO","TOOL_CHG","MANUFACTURER"], "SFFND_TOOL_MANUFACTURER", ["TOOL_NO","TOOL_CHG","MANUFACTURER"]),
        DbForeignKey("SFWID_OPER_TOOL_ALT_FK2", ["TOOL_NO","TOOL_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
        DbForeignKey("SFWID_OPER_TOOL_ALT_FK7", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
        DbForeignKey("SFWID_OPER_TOOL_ALT_FK4", ["TOOL_NO","TOOL_CHG","SERIAL_KITTED"], "SFFND_TOOL_SERIAL_DEF", ["TOOL_NO","TOOL_CHG","TOOL_SERIAL_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_TOOL_ALT = parse_value(self.schema, column_value_map, "OPER_TOOL_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "Identifying number of the tool required for the given operation."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of the given tool."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TOOL_TITLE = parse_value(self.schema, column_value_map, "TOOL_TITLE")
        "Title or name of the given tool."
        self.TOOL_NOTES = parse_value(self.schema, column_value_map, "TOOL_NOTES")
        "Additional information about the tool."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the tool is or should be tracked by serial number."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the tool is or should be tracked by expiration date."
        self.QTY = parse_value(self.schema, column_value_map, "QTY")
        "The quantity of a given tool required for a given operation."
        self.TOOL_MODEL = parse_value(self.schema, column_value_map, "TOOL_MODEL")
        "The manufacturer's model of the given tool."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.MANUFACTURER = parse_value(self.schema, column_value_map, "MANUFACTURER")
        "The manufacturer/maker of the given tool."
        self.UCF_PLAN_TOOL_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_TOOL_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_TOOL_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM1")
        "User-configurable field for NUM data type."
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.UCF_PLAN_TOOL_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_TOOL_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_TOOL_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_TOOL_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_TOOL_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_TOOL_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_TOOL_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_TOOL_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_TOOL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_TOOL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_TOOL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG4")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_TOOL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG5")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_TOOL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PLAN_TOOL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PLAN_TOOL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PLAN_TOOL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_PLAN_TOOL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        "A Number identifier which identifies that this record comes from Plam Device."
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        "A Number identifier which identifies that this record comes from ERP System"
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.IS_TOOL_KITTED = parse_value(self.schema, column_value_map, "IS_TOOL_KITTED")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        "Security group assigned."
        self.SERIAL_KITTED = parse_value(self.schema, column_value_map, "SERIAL_KITTED")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.OVERUSE_FLAG = parse_value(self.schema, column_value_map, "OVERUSE_FLAG")
        self.TOOL_ID = parse_value(self.schema, column_value_map, "TOOL_ID")
        "Unique, system-generated identifier of the tool."
        self.BOM_COMP_TOOL_ID = parse_value(self.schema, column_value_map, "BOM_COMP_TOOL_ID")
        "Determines if tool is authored from BOM or not. Contains value if tool is authored from BOM."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        "EFF Group Id"
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        "Next Higher Assembly given by User"

class SFQA_CA_ACTION_ITEM_DESC:
    schema = {
        "CA_ID": "STRING",
        "CA_ACTION_ITEM_ID": "STRING",
        "ACTION_ITEM_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PRIORITY": "STRING",
        "ASSIGNEE": "STRING",
        "ACTION_ITEM_STATUS": "STRING",
        "COMPLETION_DATE": "STRING",
        "COMMIT_TARGET_DATE": "STRING",
        "ACTION_ITEM_TITLE": "STRING",
        "ACTION_ITEM_DESC": "STRING",
        "ACCEPTANCE_DATE": "STRING",
        "IMPL_VERIF_ASSIGNEE": "STRING",
        "ACCEPTANCE_STATUS": "STRING",
        "ACCEPTANCE_COMMENTS": "STRING",
        "COMPLETION_COMMENTS": "STRING",
        "VERIFICATION_COMMENTS": "STRING",
        "VERIFICATION_DATE": "STRING",
        "INCLUDE_IMPL_VERIF_FLAG": "STRING",
        "EXE_ORDER": "NUMBER",
        "IMPL_DUE_DATE_CHG_COMMENTS": "STRING",
        "VERIFICATION_DUE_DATE": "STRING",
        "ACTION_ITEM_TYPE": "STRING",
        "VERIF_DUE_DATE_CHG_COMMENTS": "STRING",
        "UCF_CA_ACTION_ITEM_VCH1": "STRING",
        "UCF_CA_ACTION_ITEM_VCH2": "STRING",
        "UCF_CA_ACTION_ITEM_VCH3": "STRING",
        "UCF_CA_ACTION_ITEM_VCH4": "STRING",
        "UCF_CA_ACTION_ITEM_VCH5": "STRING",
        "UCF_CA_ACTION_ITEM_VCH6": "STRING",
        "UCF_CA_ACTION_ITEM_VCH7": "STRING",
        "UCF_CA_ACTION_ITEM_VCH8": "STRING",
        "UCF_CA_ACTION_ITEM_VCH9": "STRING",
        "UCF_CA_ACTION_ITEM_VCH10": "STRING",
        "UCF_CA_ACTION_ITEM_VCH11": "STRING",
        "UCF_CA_ACTION_ITEM_VCH12": "STRING",
        "UCF_CA_ACTION_ITEM_VCH13": "STRING",
        "UCF_CA_ACTION_ITEM_VCH14": "STRING",
        "UCF_CA_ACTION_ITEM_VCH15": "STRING",
        "UCF_CA_ACTION_ITEM_NUM1": "NUMBER",
        "UCF_CA_ACTION_ITEM_NUM2": "NUMBER",
        "UCF_CA_ACTION_ITEM_NUM3": "NUMBER",
        "UCF_CA_ACTION_ITEM_NUM4": "NUMBER",
        "UCF_CA_ACTION_ITEM_NUM5": "NUMBER",
        "UCF_CA_ACTION_ITEM_DATE1": "STRING",
        "UCF_CA_ACTION_ITEM_DATE2": "STRING",
        "UCF_CA_ACTION_ITEM_DATE3": "STRING",
        "UCF_CA_ACTION_ITEM_DATE4": "STRING",
        "UCF_CA_ACTION_ITEM_DATE5": "STRING",
        "UCF_CA_ACTION_ITEM_FLAG1": "STRING",
        "UCF_CA_ACTION_ITEM_FLAG2": "STRING",
        "UCF_CA_ACTION_ITEM_FLAG3": "STRING",
        "UCF_CA_ACTION_ITEM_FLAG4": "STRING",
        "UCF_CA_ACTION_ITEM_FLAG5": "STRING",
        "UCF_CA_ACTION_ITEM_VCH255_1": "STRING",
        "UCF_CA_ACTION_ITEM_VCH255_2": "STRING",
        "UCF_CA_ACTION_ITEM_VCH255_3": "STRING",
        "UCF_CA_ACTION_ITEM_VCH4000_1": "STRING",
        "UCF_CA_ACTION_ITEM_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "CA_ACTION_ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_ACTION_ITEM_DESC_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CA_ACTION_ITEM_DESC_FK5", ["IMPL_VERIF_ASSIGNEE"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFQA_CA_ACTION_ITEM_DESC_FK7", ["ACTION_ITEM_TYPE"], "SFFND_ACTION_ITEM_TYPE_DEF", ["ACTION_ITEM_TYPE"]),
        DbForeignKey("SFQA_CA_ACTION_ITEM_DESC_FK4", ["ASSIGNEE"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
        "SFQA_CA_ACTITEM_CMNT_FK",
        "SFFND_CA_ACTION_ITEM_TASK_FK1",
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.CA_ACTION_ITEM_ID = parse_value(self.schema, column_value_map, "CA_ACTION_ITEM_ID")
        self.ACTION_ITEM_NO = parse_value(self.schema, column_value_map, "ACTION_ITEM_NO")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        self.ASSIGNEE = parse_value(self.schema, column_value_map, "ASSIGNEE")
        self.ACTION_ITEM_STATUS = parse_value(self.schema, column_value_map, "ACTION_ITEM_STATUS")
        self.COMPLETION_DATE = parse_value(self.schema, column_value_map, "COMPLETION_DATE")
        self.COMMIT_TARGET_DATE = parse_value(self.schema, column_value_map, "COMMIT_TARGET_DATE")
        self.ACTION_ITEM_TITLE = parse_value(self.schema, column_value_map, "ACTION_ITEM_TITLE")
        self.ACTION_ITEM_DESC = parse_value(self.schema, column_value_map, "ACTION_ITEM_DESC")
        self.ACCEPTANCE_DATE = parse_value(self.schema, column_value_map, "ACCEPTANCE_DATE")
        self.IMPL_VERIF_ASSIGNEE = parse_value(self.schema, column_value_map, "IMPL_VERIF_ASSIGNEE")
        self.ACCEPTANCE_STATUS = parse_value(self.schema, column_value_map, "ACCEPTANCE_STATUS")
        self.ACCEPTANCE_COMMENTS = parse_value(self.schema, column_value_map, "ACCEPTANCE_COMMENTS")
        self.COMPLETION_COMMENTS = parse_value(self.schema, column_value_map, "COMPLETION_COMMENTS")
        self.VERIFICATION_COMMENTS = parse_value(self.schema, column_value_map, "VERIFICATION_COMMENTS")
        self.VERIFICATION_DATE = parse_value(self.schema, column_value_map, "VERIFICATION_DATE")
        self.INCLUDE_IMPL_VERIF_FLAG = parse_value(self.schema, column_value_map, "INCLUDE_IMPL_VERIF_FLAG")
        self.EXE_ORDER = parse_value(self.schema, column_value_map, "EXE_ORDER")
        self.IMPL_DUE_DATE_CHG_COMMENTS = parse_value(self.schema, column_value_map, "IMPL_DUE_DATE_CHG_COMMENTS")
        "Comments on changing the Action Item Implementation due date."
        self.VERIFICATION_DUE_DATE = parse_value(self.schema, column_value_map, "VERIFICATION_DUE_DATE")
        "The date and time when an Action Item Verification is due."
        self.ACTION_ITEM_TYPE = parse_value(self.schema, column_value_map, "ACTION_ITEM_TYPE")
        self.VERIF_DUE_DATE_CHG_COMMENTS = parse_value(self.schema, column_value_map, "VERIF_DUE_DATE_CHG_COMMENTS")
        "Comments on changing the Action Item Verification due date."
        self.UCF_CA_ACTION_ITEM_VCH1 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH2 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH3 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH4 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH5 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH6 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH7 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH8 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH9 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH10 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH11 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH12 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH13 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH14 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH15 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_NUM1 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CA_ACTION_ITEM_NUM2 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_CA_ACTION_ITEM_NUM3 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CA_ACTION_ITEM_NUM4 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_CA_ACTION_ITEM_NUM5 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_CA_ACTION_ITEM_DATE1 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CA_ACTION_ITEM_DATE2 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CA_ACTION_ITEM_DATE3 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_CA_ACTION_ITEM_DATE4 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_CA_ACTION_ITEM_DATE5 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_CA_ACTION_ITEM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_ACTION_ITEM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_ACTION_ITEM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_ACTION_ITEM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_ACTION_ITEM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_ACTION_ITEM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_ACTION_ITEM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_ACTION_ITEM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_ACTION_ITEM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_CA_ACTION_ITEM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.SFQA_CA_ACTITEM_CMNT_FK = []
        self.SFFND_CA_ACTION_ITEM_TASK_FK1 = []

class SFDB_EMBEDDED_UDVS:
    schema = {
        "UDV_ID": "STRING",
        "UDV_USE": "STRING",
        "REPLACEMENT_TYPE": "STRING",
    }
    primary_key_columns = [
        "UDV_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.UDV_ID = parse_value(self.schema, column_value_map, "UDV_ID")
        self.UDV_USE = parse_value(self.schema, column_value_map, "UDV_USE")
        self.REPLACEMENT_TYPE = parse_value(self.schema, column_value_map, "REPLACEMENT_TYPE")

class SFFND_PROJECT_ACTIVITY_XREF:
    schema = {
        "PROJECT": "STRING",
        "ACTIVITY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PROJECT",
        "ACTIVITY",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_PROJACT_XREF_PRJ_FK", ["PROJECT"], "SFFND_PROJECT_DEF", ["PROJECT"]),
        DbForeignKey("SFFND_PROJACT_XREF_ACT_FK", ["ACTIVITY"], "SFFND_LABOR_ACTIVITY_DEF", ["ACTIVITY"]),
    ]
    refs = [
        "SFFND_PRJACTGRP_PRJACT_FK",
    ]
    def __init__(self, column_value_map):
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of a project."
        self.ACTIVITY = parse_value(self.schema, column_value_map, "ACTIVITY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFFND_PRJACTGRP_PRJACT_FK = []

class SFWID_PGPJ_PARTS_SERIALS_LOTS:
    schema = {
        "PROGRAM": "STRING",
        "PROJECT": "STRING",
        "PART_NO": "STRING",
        "SERIAL_NO": "STRING",
        "LOT_NO": "STRING",
        "ORDER_ID": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "ITEM_ID": "STRING",
        "SERIAL_STATUS": "STRING",
        "SERIAL_HOLD_STATUS": "STRING",
    }
    primary_key_columns = [
        "PROGRAM",
        "PROJECT",
        "PART_NO",
        "SERIAL_NO",
        "LOT_NO",
        "ORDER_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the associated lot number."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of the item/part to be made upon the work order."
        self.SERIAL_STATUS = parse_value(self.schema, column_value_map, "SERIAL_STATUS")
        "Status of the given serial number, e.g., COMPLETE, SCRAP"
        self.SERIAL_HOLD_STATUS = parse_value(self.schema, column_value_map, "SERIAL_HOLD_STATUS")
        "Status of the hold on the given serial number."

class SFPL_ITEM_HOLDS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HOLD_ID": "STRING",
        "ITEM_ID": "STRING",
        "PROGRAM": "STRING",
        "HOLD_TYPE": "STRING",
        "HOLD_STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "HOLD_DESC": "STRING",
        "SUPPLIER_CODE": "STRING",
        "LOCATION_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.HOLD_ID = parse_value(self.schema, column_value_map, "HOLD_ID")
        "Unique, system-generated identifier of the hold."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.HOLD_TYPE = parse_value(self.schema, column_value_map, "HOLD_TYPE")
        "Type or classification of hold."
        self.HOLD_STATUS = parse_value(self.schema, column_value_map, "HOLD_STATUS")
        "The status of the hold, OPEN or CLOSED."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which the manufacturing work for the work order is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which the manufacturing work for the work order is scheduled to complete."
        self.HOLD_DESC = parse_value(self.schema, column_value_map, "HOLD_DESC")
        "Description of the item hold."
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")

class SFFND_DOC_TYPE_DEF:
    schema = {
        "DOC_TYPE": "STRING",
        "DOC_SUB_TYPE": "STRING",
        "WORK_FLOW": "STRING",
        "INSTRUCTIONS_TYPE": "STRING",
        "TASK_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DESCRIPTION": "STRING",
        "RESERVED_FLAG": "STRING",
        "IS_VISIBLE": "STRING",
        "NUM_GEN_NAME": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "IS_DEFAULT": "STRING",
        "WORK_FLOW_DESC": "STRING",
        "SETUP_STATUS": "STRING",
        "GEN_TASK_PROC": "STRING",
        "COMP_TASK_PROC": "STRING",
        "STOP_CREATEORDER_ON_SAMEUNIT": "STRING",
        "TAKE_ACTION_QUEUE": "STRING",
    }
    primary_key_columns = [
        "DOC_TYPE",
        "DOC_SUB_TYPE",
        "WORK_FLOW",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_DOC_TYPE_DEF_FK1", ["NUM_GEN_NAME"], "SFFND_AUTO_NUM_GEN_DEF", ["NUM_GEN_NAME"]),
    ]
    refs = [
        "SFPL_MFG_BOM_REV_FK8",
        "SFCORE_MM_OBJECT_FK1",
        "SFQA_DISC_TYPE_DEF_FK3",
        "SFPL_PLAN_DESC_FK4",
        "SFQA_CA_CAT_TEMPATT_CATYPE_FK2",
        "SFFND_EDITMODE_STATUS_FK2",
        "SFSQA_INSP_DEFINITION_REV_FK3",
        "SFQA_CA_DESC_FK9",
        "SFSQA_INSP_PLAN_DESC_FK2",
        "SFBIS_ERP_ORDER_TYPE_DEF_FK2",
        "SFBIS_ERP_ORDER_TYPE_DEF_FK1",
        "SFQA_DISC_ITEM_FK21",
        "SFPL_CHANGE_REQUEST_FK2",
        "SFWID_ORDER_TYPE_DEF_FK1",
        "SFSQA_PLAN_TYPE_DEF_FK1",
    ]
    def __init__(self, column_value_map):
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        self.DOC_SUB_TYPE = parse_value(self.schema, column_value_map, "DOC_SUB_TYPE")
        self.WORK_FLOW = parse_value(self.schema, column_value_map, "WORK_FLOW")
        self.INSTRUCTIONS_TYPE = parse_value(self.schema, column_value_map, "INSTRUCTIONS_TYPE")
        self.TASK_TYPE = parse_value(self.schema, column_value_map, "TASK_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.RESERVED_FLAG = parse_value(self.schema, column_value_map, "RESERVED_FLAG")
        self.IS_VISIBLE = parse_value(self.schema, column_value_map, "IS_VISIBLE")
        self.NUM_GEN_NAME = parse_value(self.schema, column_value_map, "NUM_GEN_NAME")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.IS_DEFAULT = parse_value(self.schema, column_value_map, "IS_DEFAULT")
        self.WORK_FLOW_DESC = parse_value(self.schema, column_value_map, "WORK_FLOW_DESC")
        self.SETUP_STATUS = parse_value(self.schema, column_value_map, "SETUP_STATUS")
        self.GEN_TASK_PROC = parse_value(self.schema, column_value_map, "GEN_TASK_PROC")
        self.COMP_TASK_PROC = parse_value(self.schema, column_value_map, "COMP_TASK_PROC")
        self.STOP_CREATEORDER_ON_SAMEUNIT = parse_value(self.schema, column_value_map, "STOP_CREATEORDER_ON_SAMEUNIT")
        self.TAKE_ACTION_QUEUE = parse_value(self.schema, column_value_map, "TAKE_ACTION_QUEUE")
        self.SFPL_MFG_BOM_REV_FK8 = []
        self.SFCORE_MM_OBJECT_FK1 = []
        self.SFQA_DISC_TYPE_DEF_FK3 = []
        self.SFPL_PLAN_DESC_FK4 = []
        self.SFQA_CA_CAT_TEMPATT_CATYPE_FK2 = []
        self.SFFND_EDITMODE_STATUS_FK2 = []
        self.SFSQA_INSP_DEFINITION_REV_FK3 = []
        self.SFQA_CA_DESC_FK9 = []
        self.SFSQA_INSP_PLAN_DESC_FK2 = []
        self.SFBIS_ERP_ORDER_TYPE_DEF_FK2 = []
        self.SFBIS_ERP_ORDER_TYPE_DEF_FK1 = []
        self.SFQA_DISC_ITEM_FK21 = []
        self.SFPL_CHANGE_REQUEST_FK2 = []
        self.SFWID_ORDER_TYPE_DEF_FK1 = []
        self.SFSQA_PLAN_TYPE_DEF_FK1 = []

class SFFND_CONDITION_DEF:
    schema = {
        "CONDITION": "STRING",
        "CONDITION_DESC": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CONDITION",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_PLAN_DESC_FK02",
        "SFWID_AS_WORKED_ITEM_FK04",
        "SFWID_ORDER_DESC_FK02",
        "SFWID_ORDER_DESC_ALT_FK4",
    ]
    def __init__(self, column_value_map):
        self.CONDITION = parse_value(self.schema, column_value_map, "CONDITION")
        self.CONDITION_DESC = parse_value(self.schema, column_value_map, "CONDITION_DESC")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFPL_PLAN_DESC_FK02 = []
        self.SFWID_AS_WORKED_ITEM_FK04 = []
        self.SFWID_ORDER_DESC_FK02 = []
        self.SFWID_ORDER_DESC_ALT_FK4 = []

class SFWID_ORDER_NODE_ALT:
    schema = {
        "ORDER_NODE_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "NODE_ID": "STRING",
        "NODE_TYPE": "STRING",
        "NODE_NO": "STRING",
        "NODE_COLUMN": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STATUS": "STRING",
        "NODE_TITLE": "STRING",
        "NODE_ROW": "NUMBER",
        "NODE_DESC": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "DECISION_TYPE": "STRING",
        "RETURN_TO_OPER_NO": "STRING",
        "RETURN_TO_OPER_KEY": "NUMBER",
        "ALTER_FLAG": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "OPER_URC": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_NODE_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_NODE_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_NODE_ALT = parse_value(self.schema, column_value_map, "ORDER_NODE_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.NODE_ID = parse_value(self.schema, column_value_map, "NODE_ID")
        "The unique system-generated identifier of a node in a Operation Flow Diagram."
        self.NODE_TYPE = parse_value(self.schema, column_value_map, "NODE_TYPE")
        "Type or classification of node (Operation or Decision)."
        self.NODE_NO = parse_value(self.schema, column_value_map, "NODE_NO")
        "User-changeable sequence number identifying a node."
        self.NODE_COLUMN = parse_value(self.schema, column_value_map, "NODE_COLUMN")
        "The number of the grid column containing the node."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Status of the given node."
        self.NODE_TITLE = parse_value(self.schema, column_value_map, "NODE_TITLE")
        "A name/short description of a node."
        self.NODE_ROW = parse_value(self.schema, column_value_map, "NODE_ROW")
        "The number of the grid row containing the node."
        self.NODE_DESC = parse_value(self.schema, column_value_map, "NODE_DESC")
        "A description of the node."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.DECISION_TYPE = parse_value(self.schema, column_value_map, "DECISION_TYPE")
        "Type or classification of decision."
        self.RETURN_TO_OPER_NO = parse_value(self.schema, column_value_map, "RETURN_TO_OPER_NO")
        "User-changeable identifier of a given operation."
        self.RETURN_TO_OPER_KEY = parse_value(self.schema, column_value_map, "RETURN_TO_OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.ALTER_FLAG = parse_value(self.schema, column_value_map, "ALTER_FLAG")
        "Flag that indicates if the given node can be altered."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.OPER_URC = parse_value(self.schema, column_value_map, "OPER_URC")
        "When executing a work order with returns (iterative branching) this is a user configurable counter."

class SFWID_OPER_DC_FORMULA_DESC:
    schema = {
        "DAT_COL_ID": "STRING",
        "ORDER_ID": "STRING",
        "USE_RANGE": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "EXECUTION_ORDER": "NUMBER",
        "FORMULA": "STRING",
        "EXTERNAL_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "DAT_COL_ID",
        "USE_RANGE",
        "EXECUTION_ORDER",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_DC_FORMULA_DESC_FK1", ["ORDER_ID","OPER_KEY","STEP_KEY","DAT_COL_ID"], "SFWID_OPER_DAT_COL", ["ORDER_ID","OPER_KEY","STEP_KEY","DAT_COL_ID"]),
    ]
    refs = [
        "SFWID_OPER_DC_EXPRESS_VARS_FK2",
    ]
    def __init__(self, column_value_map):
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.USE_RANGE = parse_value(self.schema, column_value_map, "USE_RANGE")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.EXECUTION_ORDER = parse_value(self.schema, column_value_map, "EXECUTION_ORDER")
        self.FORMULA = parse_value(self.schema, column_value_map, "FORMULA")
        self.EXTERNAL_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        self.SFWID_OPER_DC_EXPRESS_VARS_FK2 = []

class SFPL_PLAN_EFF:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "EFF_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "NOTES": "STRING",
        "EFF_GROUP_ID": "STRING",
        "LATEST_EFF_GRP_REV_FLAG": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_VERSION",
        "PLAN_REVISION",
        "PLAN_ALTERATIONS",
        "EFF_TYPE",
        "EFF_FROM",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLAN_EFF_GROUP_FK", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
        DbForeignKey("SFPL_PLAN_EFF_UNIT_FK", ["EFF_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFPL_PLAN_EFF_PLAN_REV_FK", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.EFF_TYPE = parse_value(self.schema, column_value_map, "EFF_TYPE")
        "A type of work plan version.revision effectivity. For example: time period, or finishing product."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "The upper bound of the effectivity range for a effectivity type other than time period."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "The lower bound of the effectivity range for a effectivity type other than time period."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "The starting date of the time period during which the plan version.revision is effective."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "The ending date of the time period during which the plan version.revision is effective."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about the task."
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        self.LATEST_EFF_GRP_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_EFF_GRP_REV_FLAG")

class SFBIS_SERVICE_DEST_DEF:
    schema = {
        "SERVICE_NAME": "STRING",
        "DESTINATION_NAME": "STRING",
        "COMMUNICATION_MODE": "STRING",
        "FAILOVER_FLAG": "STRING",
        "ENABLED": "STRING",
        "LOGGING": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TRANSPORT_OPTION": "STRING",
    }
    primary_key_columns = [
        "SERVICE_NAME",
        "DESTINATION_NAME",
    ]
    foreign_keys = [
        DbForeignKey("SFBIS_SERVICE_DEST_DEF_FK1", ["SERVICE_NAME"], "SFBIS_SERVICE_DEF", ["SERVICE_NAME"]),
    ]
    refs = [
        "SFBIS_DESTINATION_DEF_FK1",
    ]
    def __init__(self, column_value_map):
        self.SERVICE_NAME = parse_value(self.schema, column_value_map, "SERVICE_NAME")
        self.DESTINATION_NAME = parse_value(self.schema, column_value_map, "DESTINATION_NAME")
        self.COMMUNICATION_MODE = parse_value(self.schema, column_value_map, "COMMUNICATION_MODE")
        self.FAILOVER_FLAG = parse_value(self.schema, column_value_map, "FAILOVER_FLAG")
        self.ENABLED = parse_value(self.schema, column_value_map, "ENABLED")
        self.LOGGING = parse_value(self.schema, column_value_map, "LOGGING")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.TRANSPORT_OPTION = parse_value(self.schema, column_value_map, "TRANSPORT_OPTION")
        self.SFBIS_DESTINATION_DEF_FK1 = []

class SFOR_SFWID_OPER_SUBJECT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "SUBJECT_NO": "NUMBER",
        "SUBJECT_REV": "NUMBER",
        "OPER_KEY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "INCLUDED_FLAG": "STRING",
        "STANDARD_FLAG": "STRING",
        "FILTERED_FLAG": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "NOTES": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.SUBJECT_NO = parse_value(self.schema, column_value_map, "SUBJECT_NO")
        self.SUBJECT_REV = parse_value(self.schema, column_value_map, "SUBJECT_REV")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.INCLUDED_FLAG = parse_value(self.schema, column_value_map, "INCLUDED_FLAG")
        self.STANDARD_FLAG = parse_value(self.schema, column_value_map, "STANDARD_FLAG")
        self.FILTERED_FLAG = parse_value(self.schema, column_value_map, "FILTERED_FLAG")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")

class SFFND_ENG_GROUP_DEF:
    schema = {
        "ENG_GROUP": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "GROUP_DESC": "STRING",
    }
    primary_key_columns = [
        "ENG_GROUP",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_MFG_BOM_REV_FK5",
        "SFPL_PLAN_DESC_ENG_GRP_FK",
        "SFPL_MFG_BOM_REV_ORIG_FK4",
    ]
    def __init__(self, column_value_map):
        self.ENG_GROUP = parse_value(self.schema, column_value_map, "ENG_GROUP")
        "The unique identifier of an engineering group."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.GROUP_DESC = parse_value(self.schema, column_value_map, "GROUP_DESC")
        "A description or name of the engineering group."
        self.SFPL_MFG_BOM_REV_FK5 = []
        self.SFPL_PLAN_DESC_ENG_GRP_FK = []
        self.SFPL_MFG_BOM_REV_ORIG_FK4 = []

class SFQA_CA_AFFECTED_TOOLS:
    schema = {
        "CA_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "TOOL_NO",
        "TOOL_CHG",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_AFFECTED_TOOLS_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CA_AFFECTED_TOOLS_FK2", ["TOOL_NO","TOOL_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The change number, secondary identifier, of the tool."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFQA_CA_REQ_SRC_GROUP_DEF:
    schema = {
        "SOURCE_GROUP": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "SOURCE_GROUP_DESC": "STRING",
    }
    primary_key_columns = [
        "SOURCE_GROUP",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_CA_REQ_SRC_GRP_FK",
    ]
    def __init__(self, column_value_map):
        self.SOURCE_GROUP = parse_value(self.schema, column_value_map, "SOURCE_GROUP")
        "The group that generated the Corrective Action Request."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.SOURCE_GROUP_DESC = parse_value(self.schema, column_value_map, "SOURCE_GROUP_DESC")
        "A description of the group."
        self.SFQA_CA_REQ_SRC_GRP_FK = []

class SFQA_CA_LAST_FILTER_CONTEXT:
    schema = {
        "CONTEXT_ID": "STRING",
        "CA_ID": "STRING",
        "USERID": "STRING",
        "LAST_FILTER": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CONTEXT_ID",
        "CA_ID",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_LAST_FILTER_CONTEXT_F1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONTEXT_ID = parse_value(self.schema, column_value_map, "CONTEXT_ID")
        "Value of variable @ContextId. Usually it contains [select source name - select SQL ID]."
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.LAST_FILTER = parse_value(self.schema, column_value_map, "LAST_FILTER")
        "Value of last filter applied on the grid."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_ITEM_CERT:
    schema = {
        "ITEM_ID": "STRING",
        "CERT": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "EFF_DATE": "STRING",
        "EXP_DATE": "STRING",
        "CERT_STAMP_NO": "STRING",
        "UCF_ITEM_CERT_VCH1": "STRING",
        "UCF_ITEM_CERT_VCH2": "STRING",
        "UCF_ITEM_CERT_VCH3": "STRING",
        "UCF_ITEM_CERT_VCH4": "STRING",
        "UCF_ITEM_CERT_VCH5": "STRING",
        "UCF_ITEM_CERT_VCH6": "STRING",
        "UCF_ITEM_CERT_VCH7": "STRING",
        "UCF_ITEM_CERT_VCH8": "STRING",
        "UCF_ITEM_CERT_VCH9": "STRING",
        "UCF_ITEM_CERT_VCH10": "STRING",
        "UCF_ITEM_CERT_VCH11": "STRING",
        "UCF_ITEM_CERT_VCH12": "STRING",
        "UCF_ITEM_CERT_VCH13": "STRING",
        "UCF_ITEM_CERT_VCH14": "STRING",
        "UCF_ITEM_CERT_VCH15": "STRING",
        "UCF_ITEM_CERT_NUM1": "NUMBER",
        "UCF_ITEM_CERT_NUM2": "NUMBER",
        "UCF_ITEM_CERT_NUM3": "NUMBER",
        "UCF_ITEM_CERT_NUM4": "NUMBER",
        "UCF_ITEM_CERT_NUM5": "NUMBER",
        "UCF_ITEM_CERT_DATE1": "STRING",
        "UCF_ITEM_CERT_DATE2": "STRING",
        "UCF_ITEM_CERT_DATE3": "STRING",
        "UCF_ITEM_CERT_DATE4": "STRING",
        "UCF_ITEM_CERT_DATE5": "STRING",
        "UCF_ITEM_CERT_FLAG1": "STRING",
        "UCF_ITEM_CERT_FLAG2": "STRING",
        "UCF_ITEM_CERT_FLAG3": "STRING",
        "UCF_ITEM_CERT_FLAG4": "STRING",
        "UCF_ITEM_CERT_FLAG5": "STRING",
        "UCF_ITEM_CERT_VCH255_1": "STRING",
        "UCF_ITEM_CERT_VCH255_2": "STRING",
        "UCF_ITEM_CERT_VCH255_3": "STRING",
        "UCF_ITEM_CERT_VCH4000_1": "STRING",
        "UCF_ITEM_CERT_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "CERT",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_ITEM_CERT_FK2", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_ITEM_CERT_FK1", ["CERT"], "SFFND_CERT_DEF", ["CERT"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.EFF_DATE = parse_value(self.schema, column_value_map, "EFF_DATE")
        self.EXP_DATE = parse_value(self.schema, column_value_map, "EXP_DATE")
        self.CERT_STAMP_NO = parse_value(self.schema, column_value_map, "CERT_STAMP_NO")
        self.UCF_ITEM_CERT_VCH1 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH2 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH3 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH4 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH5 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH6 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH7 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH8 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH9 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH10 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH11 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH12 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH13 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH14 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH15 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_NUM1 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_CERT_NUM2 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_CERT_NUM3 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_CERT_NUM4 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_CERT_NUM5 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_CERT_DATE1 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_CERT_DATE2 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_CERT_DATE3 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_CERT_DATE4 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_CERT_DATE5 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_CERT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_CERT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_CERT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_CERT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_CERT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_CERT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH255_1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH255_2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH255_3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH4000_1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_CERT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_CERT_VCH4000_2")
        "User-configurable field for VARCHAR data type."

class SFQA_DISC_TEXT_SV_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFRPT_SNAPSHOT:
    schema = {
        "SNAPSHOT_ID": "NUMBER",
        "SNAPSHOT_DATE": "STRING",
        "PREVIOUS_SNAPSHOT_DATE": "STRING",
    }
    primary_key_columns = [
        "SNAPSHOT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFRPT_HOLD_SNAPSHOT_FK",
        "SFRPT_OPERATION_SNAPSHOT_FK",
    ]
    def __init__(self, column_value_map):
        self.SNAPSHOT_ID = parse_value(self.schema, column_value_map, "SNAPSHOT_ID")
        self.SNAPSHOT_DATE = parse_value(self.schema, column_value_map, "SNAPSHOT_DATE")
        self.PREVIOUS_SNAPSHOT_DATE = parse_value(self.schema, column_value_map, "PREVIOUS_SNAPSHOT_DATE")
        self.SFRPT_HOLD_SNAPSHOT_FK = []
        self.SFRPT_OPERATION_SNAPSHOT_FK = []

class SFCORE_MESSAGES:
    schema = {
        "LANGUAGE_CODE": "STRING",
        "MSG_ID": "STRING",
        "CAPT_TRANS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "MSG_TEXT": "STRING",
        "STYPE": "STRING",
    }
    primary_key_columns = [
        "LANGUAGE_CODE",
        "MSG_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_MESSAGES_FK1", ["LANGUAGE_CODE"], "SFFND_LANGUAGE", ["LANGUAGE_CODE"]),
        DbForeignKey("SFCORE_MESSAGES_STYPE_FK", ["STYPE"], "SFCORE_MODULES", ["GROUP_NAME"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.LANGUAGE_CODE = parse_value(self.schema, column_value_map, "LANGUAGE_CODE")
        "Language code as per ISO639 standard."
        self.MSG_ID = parse_value(self.schema, column_value_map, "MSG_ID")
        "Unique identifier, all uppercase, of the SFCORE_MESSAGES entry."
        self.CAPT_TRANS = parse_value(self.schema, column_value_map, "CAPT_TRANS")
        "Translation for captions, NULL for messages."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.MSG_TEXT = parse_value(self.schema, column_value_map, "MSG_TEXT")
        "A detailed description of the message, which may include substitution variables %1 and %2 that are filled in at execution time."
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")

class SFWID_AS_WORKED_ITEM:
    schema = {
        "SERIAL_ID": "STRING",
        "LOT_ID": "STRING",
        "PART_NO": "STRING",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
        "AS_WORKED_ITEM_STATUS": "STRING",
        "ORDER_TYPE": "STRING",
        "SCRAP_FLAG": "STRING",
        "MULTI_ORDER_OPEN_FLAG": "STRING",
        "LOT_QTY": "NUMBER",
        "LOT_SCRAP_QTY": "NUMBER",
        "LOT_STOP_QTY": "NUMBER",
        "TIME_STAMP": "DATE",
        "LOT_FLAG": "STRING",
        "SERIAL_FLAG": "STRING",
        "ORDER_ID": "STRING",
        "SPLIT_FLAG": "STRING",
        "PARENT_LOT_ID": "STRING",
        "ORIG_LOT_ID": "STRING",
        "UCF_ASWRKD_ITEM_VCH1": "STRING",
        "UCF_ASWRKD_ITEM_VCH2": "STRING",
        "UCF_ASWRKD_ITEM_VCH3": "STRING",
        "UCF_ASWRKD_ITEM_VCH4": "STRING",
        "UCF_ASWRKD_ITEM_VCH5": "STRING",
        "UCF_ASWRKD_ITEM_VCH6": "STRING",
        "UCF_ASWRKD_ITEM_VCH7": "STRING",
        "UCF_ASWRKD_ITEM_VCH8": "STRING",
        "UCF_ASWRKD_ITEM_VCH9": "STRING",
        "UCF_ASWRKD_ITEM_VCH10": "STRING",
        "UCF_ASWRKD_ITEM_VCH11": "STRING",
        "UCF_ASWRKD_ITEM_VCH12": "STRING",
        "UCF_ASWRKD_ITEM_VCH13": "STRING",
        "UCF_ASWRKD_ITEM_VCH14": "STRING",
        "UCF_ASWRKD_ITEM_VCH15": "STRING",
        "UCF_ASWRKD_ITEM_NUM1": "NUMBER",
        "UCF_ASWRKD_ITEM_NUM2": "NUMBER",
        "UCF_ASWRKD_ITEM_NUM3": "NUMBER",
        "UCF_ASWRKD_ITEM_NUM4": "NUMBER",
        "UCF_ASWRKD_ITEM_NUM5": "NUMBER",
        "UCF_ASWRKD_ITEM_DATE1": "STRING",
        "UCF_ASWRKD_ITEM_DATE2": "STRING",
        "UCF_ASWRKD_ITEM_DATE3": "STRING",
        "UCF_ASWRKD_ITEM_DATE4": "STRING",
        "UCF_ASWRKD_ITEM_DATE5": "STRING",
        "UCF_ASWRKD_ITEM_FLAG1": "STRING",
        "UCF_ASWRKD_ITEM_FLAG2": "STRING",
        "UCF_ASWRKD_ITEM_FLAG3": "STRING",
        "UCF_ASWRKD_ITEM_FLAG4": "STRING",
        "UCF_ASWRKD_ITEM_FLAG5": "STRING",
        "UCF_ASWRKD_ITEM_VCH255_1": "STRING",
        "UCF_ASWRKD_ITEM_VCH255_2": "STRING",
        "UCF_ASWRKD_ITEM_VCH255_3": "STRING",
        "UCF_ASWRKD_ITEM_VCH4000_1": "STRING",
        "UCF_ASWRKD_ITEM_VCH4000_2": "STRING",
        "SCHED_END_DATE": "STRING",
        "ASSIGNED_TO": "STRING",
        "CONDITION": "STRING",
        "ACCUMULATED_FLIGHT_HOURS": "NUMBER",
        "ACCUMULATED_FLIGHT_CYCLES": "NUMBER",
        "EXPIRATION_DATE": "STRING",
        "SECURITY_GROUP": "STRING",
        "DISC_INH_LIEN_ENTIRE_LOT_FLAG": "STRING",
        "DESIGN_AUTHORITY": "STRING",
        "MANUFACTURER_CODE": "STRING",
        "MANUFACTURER_PART_NO": "STRING",
        "MANUFACTURER_SERIAL_NO": "STRING",
        "MANUFACTURER_LOT_NO": "STRING",
        "SPOOL_NO": "STRING",
    }
    primary_key_columns = [
        "PART_NO",
        "LOT_NO",
        "SERIAL_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_AS_WORKED_ITEM_FK04", ["CONDITION"], "SFFND_CONDITION_DEF", ["CONDITION"]),
    ]
    refs = [
        "SFWID_ORDER_LIENS_FK1",
        "SFWID_ITEM_ALIAS_FK2",
        "SFWID_ITEM_ALIAS_FK3",
        "SFWID_ITEM_ALIAS_FK1",
        "SFWID_STAGING_LOCATION_FK2",
        "SFQA_DISC_LIENS_FK1",
        "SFSQA_INSP_ORDER_LIENS_FK2",
    ]
    def __init__(self, column_value_map):
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.AS_WORKED_ITEM_STATUS = parse_value(self.schema, column_value_map, "AS_WORKED_ITEM_STATUS")
        "Status of the as-worked component/part."
        self.ORDER_TYPE = parse_value(self.schema, column_value_map, "ORDER_TYPE")
        "Type or classification of order."
        self.SCRAP_FLAG = parse_value(self.schema, column_value_map, "SCRAP_FLAG")
        "A flag (Y/N) indicating whether the component/part should be or has been scrapped."
        self.MULTI_ORDER_OPEN_FLAG = parse_value(self.schema, column_value_map, "MULTI_ORDER_OPEN_FLAG")
        "A flag (Y/N) indication whether the as-worked item is associated with multiple open orders."
        self.LOT_QTY = parse_value(self.schema, column_value_map, "LOT_QTY")
        "The number of components/parts in the lot."
        self.LOT_SCRAP_QTY = parse_value(self.schema, column_value_map, "LOT_SCRAP_QTY")
        "The number of scrapped components/parts in the lot."
        self.LOT_STOP_QTY = parse_value(self.schema, column_value_map, "LOT_STOP_QTY")
        "The number of stopped components/parts in the lot."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.SPLIT_FLAG = parse_value(self.schema, column_value_map, "SPLIT_FLAG")
        "A flag (Y/N) that indicates whether or not the work order is a split of another work order."
        self.PARENT_LOT_ID = parse_value(self.schema, column_value_map, "PARENT_LOT_ID")
        "Unique, system-generated identifier of a lot number assigned to the parent component/part."
        self.ORIG_LOT_ID = parse_value(self.schema, column_value_map, "ORIG_LOT_ID")
        "System-generated identifier of the original lot number assigned to a given component/part."
        self.UCF_ASWRKD_ITEM_VCH1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH1")
        self.UCF_ASWRKD_ITEM_VCH2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH2")
        self.UCF_ASWRKD_ITEM_VCH3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH3")
        self.UCF_ASWRKD_ITEM_VCH4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH4")
        self.UCF_ASWRKD_ITEM_VCH5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH5")
        self.UCF_ASWRKD_ITEM_VCH6 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH6")
        self.UCF_ASWRKD_ITEM_VCH7 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH7")
        self.UCF_ASWRKD_ITEM_VCH8 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH8")
        self.UCF_ASWRKD_ITEM_VCH9 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH9")
        self.UCF_ASWRKD_ITEM_VCH10 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH10")
        self.UCF_ASWRKD_ITEM_VCH11 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH11")
        self.UCF_ASWRKD_ITEM_VCH12 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH12")
        self.UCF_ASWRKD_ITEM_VCH13 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH13")
        self.UCF_ASWRKD_ITEM_VCH14 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH14")
        self.UCF_ASWRKD_ITEM_VCH15 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH15")
        self.UCF_ASWRKD_ITEM_NUM1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_NUM1")
        self.UCF_ASWRKD_ITEM_NUM2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_NUM2")
        self.UCF_ASWRKD_ITEM_NUM3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_NUM3")
        self.UCF_ASWRKD_ITEM_NUM4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_NUM4")
        self.UCF_ASWRKD_ITEM_NUM5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_NUM5")
        self.UCF_ASWRKD_ITEM_DATE1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_DATE1")
        self.UCF_ASWRKD_ITEM_DATE2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_DATE2")
        self.UCF_ASWRKD_ITEM_DATE3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_DATE3")
        self.UCF_ASWRKD_ITEM_DATE4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_DATE4")
        self.UCF_ASWRKD_ITEM_DATE5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_DATE5")
        self.UCF_ASWRKD_ITEM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_FLAG1")
        self.UCF_ASWRKD_ITEM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_FLAG2")
        self.UCF_ASWRKD_ITEM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_FLAG3")
        self.UCF_ASWRKD_ITEM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_FLAG4")
        self.UCF_ASWRKD_ITEM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_FLAG5")
        self.UCF_ASWRKD_ITEM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH255_1")
        self.UCF_ASWRKD_ITEM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH255_2")
        self.UCF_ASWRKD_ITEM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH255_3")
        self.UCF_ASWRKD_ITEM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH4000_1")
        self.UCF_ASWRKD_ITEM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_ITEM_VCH4000_2")
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        self.ASSIGNED_TO = parse_value(self.schema, column_value_map, "ASSIGNED_TO")
        self.CONDITION = parse_value(self.schema, column_value_map, "CONDITION")
        self.ACCUMULATED_FLIGHT_HOURS = parse_value(self.schema, column_value_map, "ACCUMULATED_FLIGHT_HOURS")
        self.ACCUMULATED_FLIGHT_CYCLES = parse_value(self.schema, column_value_map, "ACCUMULATED_FLIGHT_CYCLES")
        self.EXPIRATION_DATE = parse_value(self.schema, column_value_map, "EXPIRATION_DATE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.DISC_INH_LIEN_ENTIRE_LOT_FLAG = parse_value(self.schema, column_value_map, "DISC_INH_LIEN_ENTIRE_LOT_FLAG")
        "A flag (Y/N) indicating whether lot discrepancy exists on entire LOT or not, this indicator will be used for inherited discrepancy unit."
        self.DESIGN_AUTHORITY = parse_value(self.schema, column_value_map, "DESIGN_AUTHORITY")
        self.MANUFACTURER_CODE = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE")
        self.MANUFACTURER_PART_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_PART_NO")
        self.MANUFACTURER_SERIAL_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_SERIAL_NO")
        self.MANUFACTURER_LOT_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_LOT_NO")
        self.SPOOL_NO = parse_value(self.schema, column_value_map, "SPOOL_NO")
        self.SFWID_ORDER_LIENS_FK1 = []
        self.SFWID_ITEM_ALIAS_FK2 = []
        self.SFWID_ITEM_ALIAS_FK3 = []
        self.SFWID_ITEM_ALIAS_FK1 = []
        self.SFWID_STAGING_LOCATION_FK2 = []
        self.SFQA_DISC_LIENS_FK1 = []
        self.SFSQA_INSP_ORDER_LIENS_FK2 = []

class SFWID_OPER_DESC:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "AUTO_EXCLUDE_FLAG": "STRING",
        "OPER_OPT_FLAG": "STRING",
        "ALTER_FLAG": "STRING",
        "OPER_NO": "STRING",
        "OPER_UPDT_NO": "NUMBER",
        "STEP_NO": "STRING",
        "STEP_UPDT_NO": "NUMBER",
        "PLND_MACHINE_NO": "STRING",
        "ASGND_MACHINE_ID": "STRING",
        "OPER_STATUS": "STRING",
        "OPER_HOLD_STATUS": "STRING",
        "TITLE": "STRING",
        "OPER_TYPE": "STRING",
        "ALTER_TYPE": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "STATUS_CHG_NOTES": "STRING",
        "OSP_FLAG": "STRING",
        "REWORK_FLAG": "STRING",
        "AUTO_COMPLETE_FLAG": "STRING",
        "AUTO_START_FLAG": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "REVISED_CREW_QTY_SETUP": "NUMBER",
        "REVISED_CREW_QTY": "NUMBER",
        "ACTUAL_CREW_QTY_SETUP": "NUMBER",
        "ACTUAL_CREW_QTY": "NUMBER",
        "SCHED_LABOR_HOURS_SETUP": "NUMBER",
        "SCHED_DUR_HOURS_SETUP": "NUMBER",
        "SCHED_LABOR_HOURS_INSPECT": "NUMBER",
        "SCHED_DUR_HOURS_INSPECT": "NUMBER",
        "SCHED_LABOR_HOURS_PER_UNIT": "NUMBER",
        "SCHED_DUR_HOURS_PER_UNIT": "NUMBER",
        "SCHED_CREW_QTY_SETUP": "NUMBER",
        "SCHED_CREW_QTY": "NUMBER",
        "SCHED_MACHINE_HOURS_PER_UNIT": "NUMBER",
        "SCHED_UNITS_PER_RUN": "NUMBER",
        "SCHED_SETUP_TYPE": "STRING",
        "SCHED_MACHINE_HOURS_SETUP": "NUMBER",
        "SCHED_ENG_STD_FLAG": "STRING",
        "SCHED_MOVE_HOURS": "NUMBER",
        "OCCUR_RATE": "NUMBER",
        "OSP_DAYS": "NUMBER",
        "SUPPLIER_CODE": "STRING",
        "OSP_COST_PER_UNIT": "NUMBER",
        "UCF_PLAN_OPER_VCH1": "STRING",
        "UCF_PLAN_OPER_VCH2": "STRING",
        "UCF_PLAN_OPER_VCH3": "STRING",
        "UCF_PLAN_OPER_VCH4": "STRING",
        "UCF_PLAN_OPER_VCH5": "STRING",
        "UCF_PLAN_OPER_NUM1": "NUMBER",
        "UCF_PLAN_OPER_NUM2": "NUMBER",
        "UCF_PLAN_OPER_FLAG1": "STRING",
        "UCF_PLAN_OPER_FLAG2": "STRING",
        "UCF_ORDER_OPER_VCH1": "STRING",
        "UCF_ORDER_OPER_VCH2": "STRING",
        "UCF_ORDER_OPER_NUM1": "NUMBER",
        "UCF_ORDER_OPER_NUM2": "NUMBER",
        "UCF_ORDER_OPER_FLAG1": "STRING",
        "UCF_ORDER_OPER_DATE1": "STRING",
        "STATUS_CHG_REASON": "STRING",
        "STDOPER_OBJECT_ID": "STRING",
        "OOC_CAUSE_FLAG": "STRING",
        "OOC_REASON": "STRING",
        "OOC_REASON_NUM": "NUMBER",
        "UCHART_UBAR_VALUE": "NUMBER",
        "UCHART_UCL_VALUE": "NUMBER",
        "UCHART_LCL_VALUE": "NUMBER",
        "OUTLIER_FLAG": "STRING",
        "ALT_STATUS": "STRING",
        "LAST_OPER_HDR_CHG_ALT_ID": "STRING",
        "TEST_TYPE": "STRING",
        "UCF_PLAN_OPER_VCH6": "STRING",
        "UCF_PLAN_OPER_VCH7": "STRING",
        "UCF_PLAN_OPER_VCH8": "STRING",
        "UCF_PLAN_OPER_VCH9": "STRING",
        "UCF_PLAN_OPER_VCH10": "STRING",
        "UCF_PLAN_OPER_VCH11": "STRING",
        "UCF_PLAN_OPER_VCH12": "STRING",
        "UCF_PLAN_OPER_VCH13": "STRING",
        "UCF_PLAN_OPER_VCH14": "STRING",
        "UCF_PLAN_OPER_VCH15": "STRING",
        "UCF_PLAN_OPER_NUM3": "NUMBER",
        "UCF_PLAN_OPER_NUM4": "NUMBER",
        "UCF_PLAN_OPER_NUM5": "NUMBER",
        "UCF_PLAN_OPER_DATE1": "STRING",
        "UCF_PLAN_OPER_DATE2": "STRING",
        "UCF_PLAN_OPER_DATE3": "STRING",
        "UCF_PLAN_OPER_DATE4": "STRING",
        "UCF_PLAN_OPER_DATE5": "STRING",
        "UCF_PLAN_OPER_FLAG3": "STRING",
        "UCF_PLAN_OPER_FLAG4": "STRING",
        "UCF_PLAN_OPER_FLAG5": "STRING",
        "UCF_PLAN_OPER_VCH255_1": "STRING",
        "UCF_PLAN_OPER_VCH255_2": "STRING",
        "UCF_PLAN_OPER_VCH255_3": "STRING",
        "UCF_PLAN_OPER_VCH4000_1": "STRING",
        "UCF_PLAN_OPER_VCH4000_2": "STRING",
        "UCF_ORDER_OPER_VCH3": "STRING",
        "UCF_ORDER_OPER_VCH4": "STRING",
        "UCF_ORDER_OPER_VCH5": "STRING",
        "UCF_ORDER_OPER_VCH6": "STRING",
        "UCF_ORDER_OPER_VCH7": "STRING",
        "UCF_ORDER_OPER_VCH8": "STRING",
        "UCF_ORDER_OPER_VCH9": "STRING",
        "UCF_ORDER_OPER_VCH10": "STRING",
        "UCF_ORDER_OPER_VCH11": "STRING",
        "UCF_ORDER_OPER_VCH12": "STRING",
        "UCF_ORDER_OPER_VCH13": "STRING",
        "UCF_ORDER_OPER_VCH14": "STRING",
        "UCF_ORDER_OPER_VCH15": "STRING",
        "UCF_ORDER_OPER_NUM3": "NUMBER",
        "UCF_ORDER_OPER_NUM4": "NUMBER",
        "UCF_ORDER_OPER_NUM5": "NUMBER",
        "UCF_ORDER_OPER_DATE2": "STRING",
        "UCF_ORDER_OPER_DATE3": "STRING",
        "UCF_ORDER_OPER_DATE4": "STRING",
        "UCF_ORDER_OPER_DATE5": "STRING",
        "UCF_ORDER_OPER_FLAG2": "STRING",
        "UCF_ORDER_OPER_FLAG3": "STRING",
        "UCF_ORDER_OPER_FLAG4": "STRING",
        "UCF_ORDER_OPER_FLAG5": "STRING",
        "UCF_ORDER_OPER_VCH255_1": "STRING",
        "UCF_ORDER_OPER_VCH255_2": "STRING",
        "UCF_ORDER_OPER_VCH255_3": "STRING",
        "UCF_ORDER_OPER_VCH4000_1": "STRING",
        "UCF_ORDER_OPER_VCH4000_2": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "SEQ_STEPS_FLAG": "STRING",
        "EXE_ORDER": "NUMBER",
        "OPER_CHANGE_LEVEL": "STRING",
        "INCLUDED": "STRING",
        "STANDARD_FLAG": "STRING",
        "PERCENT_COMPLETE": "NUMBER",
        "PERCENT_COMPLETE_COMMENTS": "STRING",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "MUST_ISSUE_PARTS_FLAG": "STRING",
        "ACTIVITY": "STRING",
        "ACCOUNT_LABOR": "STRING",
        "COMPLETE_QTY": "NUMBER",
        "SCRAP_QTY": "NUMBER",
        "MISSING_QTY": "NUMBER",
        "UNITS_PER_CYCLE": "NUMBER",
        "AUTO_CYCLE_FLAG": "STRING",
        "PRINT_LABEL": "STRING",
        "NUMBER_OF_LABELS": "NUMBER",
        "RECONCILE_SCRAP": "STRING",
        "UNIT_PROCESSING": "STRING",
        "UNITS_PER_CYCLE_ACTUAL": "NUMBER",
        "ACTUAL_MACHINE_NO": "STRING",
        "AVAILABLE_QTY": "NUMBER",
        "ACTUAL_MACHINE_ID": "STRING",
        "COMPLETE_CYCLE_QTY": "NUMBER",
        "BATCH_FLAG": "STRING",
        "ACTUAL_INQUEUE_DATE": "STRING",
        "LOCK_FLAG": "STRING",
        "LOAD_EMB_CONTROL_FLAG": "STRING",
        "REPORT_ID": "STRING",
        "ASGND_DEPARTMENT_ID": "STRING",
        "ASGND_LOCATION_ID": "STRING",
        "ASGND_CENTER_ID": "STRING",
        "TOTAL_COMPLETE_SETUP_PERCENT": "NUMBER",
        "TOTAL_COMPLETE_RUN_PERCENT": "NUMBER",
        "ITEM_LOC": "STRING",
        "ARRIVED_DATE": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "STDOPER_TAG": "STRING",
        "STDOPER_REV": "NUMBER",
        "EFF_GROUP_ID": "STRING",
        "LATEST_EFF_GRP_REV_FLAG": "STRING",
        "PLND_MACHINE_REV": "STRING",
        "ACTUAL_MACHINE_REV": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_DESC_CENTER_FK", ["ASGND_LOCATION_ID","ASGND_DEPARTMENT_ID","ASGND_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFWID_OPER_DESC_DEPARTMENT_FK", ["ASGND_LOCATION_ID","ASGND_DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFWID_OPER_DESC_FK01", ["REPORT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_OPER_DESC_LOCATION_FK", ["ASGND_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFWID_OPER_DESC_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPERDESC_ORDRDESC_FK", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_OPER_DESC_OPER_TYP_FK", ["OPER_TYPE"], "SFFND_OPER_TYPE_DEF", ["OPER_TYPE"]),
        DbForeignKey("SFWID_OPER_DESC_SUPP_CODE_FK", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFWID_OPER_DESC_TEST_TYPE_FK", ["TEST_TYPE"], "SFFND_TEST_TYPE_DEF", ["TEST_TYPE"]),
        DbForeignKey("SFWID_OPER_DESC_FK03", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
    ]
    refs = [
        "SFWID_ORDER_MACH_ALT_XREF_FK1",
        "SFWID_OPER_DC_OPERDESC_FK",
        "SFWID_OPER_TOOL_OPERDESC_FK",
        "SFWID_OPER_MM_OBJECTS_FK1",
        "SFWID_OPER_TEXT_DESC_FK",
        "SFFND_COMM_OPER_FK",
        "SFWID_OPER_BUYOFF_OPERDESC_FK",
        "SFWID_USER_OVER_INSP_EVNT_FK2",
        "SFWID_SERIAL_NODE_FK3",
        "SFWID_USER_OPER_DEV_ACK_FK2",
        "SFWID_ORDITEMALT_OPER_FK",
        "SFWID_OPER_ITMES_OPERDESC_FK",
        "SFWID_OPER_MATERIAL_FK3",
        "SFWID_OPER_ASSIGNMENT_FK1",
        "SFWID_SEROPEROPERTL_OPER_FK",
        "SFWID_USER_OPER_LAST_POS_FK1",
        "SFWID_ORDER_INSP_STEP_LINK_FK3",
        "SFFND_USERACTIV_SIGNON_OPER_FK",
        "SFWID_HOLDS_OPER_DESC_FK",
        "SFWID_SERIAL_OPER_MATERIAL_FK1",
        "SFWID_ORDER_NOTES_FK2",
        "SFWID_SEROPERDC_OPER_FK",
        "SFWID_OPER_CREW_OPER_FK",
        "SFWID_OPER_PRECEDENCE_FK1",
        "SFWID_SEROPERITEMS_OPER_FK",
        "SFWID_USER_CURRENT_UNITS_FK1",
        "SFWID_SERIAL_OPER_OPER_DESC_FK",
        "SFWID_ORDER_TOOL_ALT_XREF_FK1",
        "SFWID_OPER_NOTES_MM_OBJECTS_F1",
        "SFWID_OPER_SKILL_DESC_FK",
        "SFWID_OPER_PROCESS_FK1",
        "SFWID_OPER_NOTES_TEXT_FK1",
        "SFWID_GROUP_JOB_SERIAL_FK1",
        "SFWID_EARNED_VALUE_CLAIM_FK01",
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.AUTO_EXCLUDE_FLAG = parse_value(self.schema, column_value_map, "AUTO_EXCLUDE_FLAG")
        "A flag (Y/N) indicating that the given operation is part of an alternate (unchosen) branch following a decision node and is therefore excluded from the manufacturing process."
        self.OPER_OPT_FLAG = parse_value(self.schema, column_value_map, "OPER_OPT_FLAG")
        "A flag (Y/N) that indicates whether a given operation is optional."
        self.ALTER_FLAG = parse_value(self.schema, column_value_map, "ALTER_FLAG")
        "A flag (Y/N) that indicates whether the operation is currently in alteration mode."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given operation description."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.PLND_MACHINE_NO = parse_value(self.schema, column_value_map, "PLND_MACHINE_NO")
        "The planned machine category for a given operation."
        self.ASGND_MACHINE_ID = parse_value(self.schema, column_value_map, "ASGND_MACHINE_ID")
        "The ID of the machine assigned to the given operation."
        self.OPER_STATUS = parse_value(self.schema, column_value_map, "OPER_STATUS")
        "Status of the operation, e.g., IN QUEUE, ACTIVE, COMPLETE, HOLD, CANCEL."
        self.OPER_HOLD_STATUS = parse_value(self.schema, column_value_map, "OPER_HOLD_STATUS")
        "Status of the hold on the operation, e.g., OPEN, CLOSED."
        self.TITLE = parse_value(self.schema, column_value_map, "TITLE")
        "Title or name of the given operation."
        self.OPER_TYPE = parse_value(self.schema, column_value_map, "OPER_TYPE")
        "Type or class of operation, e.g., MFG."
        self.ALTER_TYPE = parse_value(self.schema, column_value_map, "ALTER_TYPE")
        "Type or classification of the last alteration on the associated work order."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated operation."
        self.OSP_FLAG = parse_value(self.schema, column_value_map, "OSP_FLAG")
        "A flag (Y/N) that indicates whether the operation process is performed by an outside vendor or center."
        self.REWORK_FLAG = parse_value(self.schema, column_value_map, "REWORK_FLAG")
        "A flag (Y/N) that indicates whether the given operation is rework."
        self.AUTO_COMPLETE_FLAG = parse_value(self.schema, column_value_map, "AUTO_COMPLETE_FLAG")
        "Indicates (Y/N) whether the status of the given operation is automatically set to COMPLETE on startup of the following operation."
        self.AUTO_START_FLAG = parse_value(self.schema, column_value_map, "AUTO_START_FLAG")
        "Indicates (Y/N) whether the given operation is automatically started on completion of the previous operation."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which work for the operation is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which work for the operation is scheduled to complete."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised start date for the given operation."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised end date for the given operation."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which work for the operation was actually started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which work for the operation was actually completed."
        self.REVISED_CREW_QTY_SETUP = parse_value(self.schema, column_value_map, "REVISED_CREW_QTY_SETUP")
        "The revised number of people in the setup crew for the given operation."
        self.REVISED_CREW_QTY = parse_value(self.schema, column_value_map, "REVISED_CREW_QTY")
        "The revised number of people in the crew for the given operation"
        self.ACTUAL_CREW_QTY_SETUP = parse_value(self.schema, column_value_map, "ACTUAL_CREW_QTY_SETUP")
        "The actual number of people in the setup crew for the given operation."
        self.ACTUAL_CREW_QTY = parse_value(self.schema, column_value_map, "ACTUAL_CREW_QTY")
        "The actual number of people in the crew for the given operation"
        self.SCHED_LABOR_HOURS_SETUP = parse_value(self.schema, column_value_map, "SCHED_LABOR_HOURS_SETUP")
        "The scheduled number of hours for labor setup of a given operation."
        self.SCHED_DUR_HOURS_SETUP = parse_value(self.schema, column_value_map, "SCHED_DUR_HOURS_SETUP")
        "The scheduled number of hours for all types of setup for a given operation."
        self.SCHED_LABOR_HOURS_INSPECT = parse_value(self.schema, column_value_map, "SCHED_LABOR_HOURS_INSPECT")
        "The scheduled number of labor hours for inspection of a given operation."
        self.SCHED_DUR_HOURS_INSPECT = parse_value(self.schema, column_value_map, "SCHED_DUR_HOURS_INSPECT")
        "The scheduled number of duration hours for inspection of a given operation."
        self.SCHED_LABOR_HOURS_PER_UNIT = parse_value(self.schema, column_value_map, "SCHED_LABOR_HOURS_PER_UNIT")
        "The scheduled number of labor hours per unit for a given operation."
        self.SCHED_DUR_HOURS_PER_UNIT = parse_value(self.schema, column_value_map, "SCHED_DUR_HOURS_PER_UNIT")
        "The scheduled number of duration hours per unit for a given operation."
        self.SCHED_CREW_QTY_SETUP = parse_value(self.schema, column_value_map, "SCHED_CREW_QTY_SETUP")
        "The scheduled number of people in the setup crew for the given operation."
        self.SCHED_CREW_QTY = parse_value(self.schema, column_value_map, "SCHED_CREW_QTY")
        "The scheduled number of people in the crew for the given operation."
        self.SCHED_MACHINE_HOURS_PER_UNIT = parse_value(self.schema, column_value_map, "SCHED_MACHINE_HOURS_PER_UNIT")
        "The number of machine hours per unit."
        self.SCHED_UNITS_PER_RUN = parse_value(self.schema, column_value_map, "SCHED_UNITS_PER_RUN")
        "The number of units per production run."
        self.SCHED_SETUP_TYPE = parse_value(self.schema, column_value_map, "SCHED_SETUP_TYPE")
        "The type of setup."
        self.SCHED_MACHINE_HOURS_SETUP = parse_value(self.schema, column_value_map, "SCHED_MACHINE_HOURS_SETUP")
        "The number hours required for machine setup."
        self.SCHED_ENG_STD_FLAG = parse_value(self.schema, column_value_map, "SCHED_ENG_STD_FLAG")
        "A flag (Y/N) that indicates whether engineering standards must be set up for a given operation.."
        self.SCHED_MOVE_HOURS = parse_value(self.schema, column_value_map, "SCHED_MOVE_HOURS")
        "The number of hours required to move the setup."
        self.OCCUR_RATE = parse_value(self.schema, column_value_map, "OCCUR_RATE")
        "The probability of a given operation occurring in a work order, where a value of 1 = 100%. A value < 1 indicates that the operation follows a decision node and will occur at the assigned rate."
        self.OSP_DAYS = parse_value(self.schema, column_value_map, "OSP_DAYS")
        "The number of days the operation is expected to take at a given outside vendor."
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.OSP_COST_PER_UNIT = parse_value(self.schema, column_value_map, "OSP_COST_PER_UNIT")
        "The cost per unit at a given outside vendor."
        self.UCF_PLAN_OPER_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_OPER_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_OPER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_OPER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_OPER_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_OPER_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_OPER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_OPER_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE1")
        "User-configurable field for DATE data type."
        self.STATUS_CHG_REASON = parse_value(self.schema, column_value_map, "STATUS_CHG_REASON")
        "Reason for a change in status."
        self.STDOPER_OBJECT_ID = parse_value(self.schema, column_value_map, "STDOPER_OBJECT_ID")
        self.OOC_CAUSE_FLAG = parse_value(self.schema, column_value_map, "OOC_CAUSE_FLAG")
        self.OOC_REASON = parse_value(self.schema, column_value_map, "OOC_REASON")
        self.OOC_REASON_NUM = parse_value(self.schema, column_value_map, "OOC_REASON_NUM")
        self.UCHART_UBAR_VALUE = parse_value(self.schema, column_value_map, "UCHART_UBAR_VALUE")
        self.UCHART_UCL_VALUE = parse_value(self.schema, column_value_map, "UCHART_UCL_VALUE")
        self.UCHART_LCL_VALUE = parse_value(self.schema, column_value_map, "UCHART_LCL_VALUE")
        self.OUTLIER_FLAG = parse_value(self.schema, column_value_map, "OUTLIER_FLAG")
        self.ALT_STATUS = parse_value(self.schema, column_value_map, "ALT_STATUS")
        self.LAST_OPER_HDR_CHG_ALT_ID = parse_value(self.schema, column_value_map, "LAST_OPER_HDR_CHG_ALT_ID")
        self.TEST_TYPE = parse_value(self.schema, column_value_map, "TEST_TYPE")
        self.UCF_PLAN_OPER_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH6")
        self.UCF_PLAN_OPER_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH7")
        self.UCF_PLAN_OPER_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH8")
        self.UCF_PLAN_OPER_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH9")
        self.UCF_PLAN_OPER_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH10")
        self.UCF_PLAN_OPER_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH11")
        self.UCF_PLAN_OPER_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH12")
        self.UCF_PLAN_OPER_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH13")
        self.UCF_PLAN_OPER_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH14")
        self.UCF_PLAN_OPER_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH15")
        self.UCF_PLAN_OPER_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM3")
        self.UCF_PLAN_OPER_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM4")
        self.UCF_PLAN_OPER_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM5")
        self.UCF_PLAN_OPER_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE1")
        self.UCF_PLAN_OPER_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE2")
        self.UCF_PLAN_OPER_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE3")
        self.UCF_PLAN_OPER_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE4")
        self.UCF_PLAN_OPER_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE5")
        self.UCF_PLAN_OPER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG3")
        self.UCF_PLAN_OPER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG4")
        self.UCF_PLAN_OPER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG5")
        self.UCF_PLAN_OPER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH255_1")
        self.UCF_PLAN_OPER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH255_2")
        self.UCF_PLAN_OPER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH255_3")
        self.UCF_PLAN_OPER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH4000_1")
        self.UCF_PLAN_OPER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH4000_2")
        self.UCF_ORDER_OPER_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH3")
        self.UCF_ORDER_OPER_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH4")
        self.UCF_ORDER_OPER_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH5")
        self.UCF_ORDER_OPER_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH6")
        self.UCF_ORDER_OPER_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH7")
        self.UCF_ORDER_OPER_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH8")
        self.UCF_ORDER_OPER_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH9")
        self.UCF_ORDER_OPER_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH10")
        self.UCF_ORDER_OPER_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH11")
        self.UCF_ORDER_OPER_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH12")
        self.UCF_ORDER_OPER_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH13")
        self.UCF_ORDER_OPER_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH14")
        self.UCF_ORDER_OPER_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH15")
        self.UCF_ORDER_OPER_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM3")
        self.UCF_ORDER_OPER_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM4")
        self.UCF_ORDER_OPER_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM5")
        self.UCF_ORDER_OPER_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE2")
        self.UCF_ORDER_OPER_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE3")
        self.UCF_ORDER_OPER_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE4")
        self.UCF_ORDER_OPER_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE5")
        self.UCF_ORDER_OPER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG2")
        self.UCF_ORDER_OPER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG3")
        self.UCF_ORDER_OPER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG4")
        self.UCF_ORDER_OPER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG5")
        self.UCF_ORDER_OPER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH255_1")
        self.UCF_ORDER_OPER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH255_2")
        self.UCF_ORDER_OPER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH255_3")
        self.UCF_ORDER_OPER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH4000_1")
        self.UCF_ORDER_OPER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH4000_2")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.SEQ_STEPS_FLAG = parse_value(self.schema, column_value_map, "SEQ_STEPS_FLAG")
        self.EXE_ORDER = parse_value(self.schema, column_value_map, "EXE_ORDER")
        self.OPER_CHANGE_LEVEL = parse_value(self.schema, column_value_map, "OPER_CHANGE_LEVEL")
        self.INCLUDED = parse_value(self.schema, column_value_map, "INCLUDED")
        self.STANDARD_FLAG = parse_value(self.schema, column_value_map, "STANDARD_FLAG")
        self.PERCENT_COMPLETE = parse_value(self.schema, column_value_map, "PERCENT_COMPLETE")
        self.PERCENT_COMPLETE_COMMENTS = parse_value(self.schema, column_value_map, "PERCENT_COMPLETE_COMMENTS")
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.MUST_ISSUE_PARTS_FLAG = parse_value(self.schema, column_value_map, "MUST_ISSUE_PARTS_FLAG")
        self.ACTIVITY = parse_value(self.schema, column_value_map, "ACTIVITY")
        self.ACCOUNT_LABOR = parse_value(self.schema, column_value_map, "ACCOUNT_LABOR")
        self.COMPLETE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_QTY")
        "Total Number of Units completed at an operation. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.SCRAP_QTY = parse_value(self.schema, column_value_map, "SCRAP_QTY")
        "Total Number of Units scrapped at an operation. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.MISSING_QTY = parse_value(self.schema, column_value_map, "MISSING_QTY")
        "Total Number of Units missing to be completed at an operation. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.UNITS_PER_CYCLE = parse_value(self.schema, column_value_map, "UNITS_PER_CYCLE")
        "This is the Number of units to be process per cycle. Not Applicable during Work order execution. Only used for planning purpose. This value can be different than units_per_cycle_actual."
        self.AUTO_CYCLE_FLAG = parse_value(self.schema, column_value_map, "AUTO_CYCLE_FLAG")
        "This flag can only be 'Y' when material_handling = CYCLE. 'Y' means user can process cycles through external process."
        self.PRINT_LABEL = parse_value(self.schema, column_value_map, "PRINT_LABEL")
        "Action on which the Labels are generated. Possible actions are OFF, CYCLE COMPLETE and OPERATION COMPLETE."
        self.NUMBER_OF_LABELS = parse_value(self.schema, column_value_map, "NUMBER_OF_LABELS")
        "Number of Labels to be generated after each print_label action."
        self.RECONCILE_SCRAP = parse_value(self.schema, column_value_map, "RECONCILE_SCRAP")
        "Possible values are OFF, AUTO and PROMPT. If value is AUTO at the operation, the available units will be scrapped without a prompt. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.UNIT_PROCESSING = parse_value(self.schema, column_value_map, "UNIT_PROCESSING")
        "Defines how does units get processed. Possible values are NORMAL, CYCLE and LOW TOUCH. CYCLE value is only applicable when continuous_flow_flag is 'Y' at order level."
        self.UNITS_PER_CYCLE_ACTUAL = parse_value(self.schema, column_value_map, "UNITS_PER_CYCLE_ACTUAL")
        "Number of units to be processed per cycle. Applicable during Work order execution. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.ACTUAL_MACHINE_NO = parse_value(self.schema, column_value_map, "ACTUAL_MACHINE_NO")
        "The identifying number of the required Machine as actually assigned to the given operation."
        self.AVAILABLE_QTY = parse_value(self.schema, column_value_map, "AVAILABLE_QTY")
        "Total Number of Units available for processing at an operation. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.ACTUAL_MACHINE_ID = parse_value(self.schema, column_value_map, "ACTUAL_MACHINE_ID")
        "The Machine ID related to required Machine No as actually assigned to the given operation."
        self.COMPLETE_CYCLE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_CYCLE_QTY")
        "Total Units arrived at an operation through cycles. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.BATCH_FLAG = parse_value(self.schema, column_value_map, "BATCH_FLAG")
        self.ACTUAL_INQUEUE_DATE = parse_value(self.schema, column_value_map, "ACTUAL_INQUEUE_DATE")
        "The actual time on which the status of the operation is set to IN QUEUE."
        self.LOCK_FLAG = parse_value(self.schema, column_value_map, "LOCK_FLAG")
        "A flag (Y/N) that indicates whether the operation is locked or not."
        self.LOAD_EMB_CONTROL_FLAG = parse_value(self.schema, column_value_map, "LOAD_EMB_CONTROL_FLAG")
        "Reload Order Embedded Control records for this operation when this flag is 'Y'."
        self.REPORT_ID = parse_value(self.schema, column_value_map, "REPORT_ID")
        "OBJECT_ID of the Report to be invoked, i.e. the Labels to be generated after each print_label action."
        self.ASGND_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "ASGND_DEPARTMENT_ID")
        "Unique, system-generated identifier of the given Work Department."
        self.ASGND_LOCATION_ID = parse_value(self.schema, column_value_map, "ASGND_LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.ASGND_CENTER_ID = parse_value(self.schema, column_value_map, "ASGND_CENTER_ID")
        self.TOTAL_COMPLETE_SETUP_PERCENT = parse_value(self.schema, column_value_map, "TOTAL_COMPLETE_SETUP_PERCENT")
        self.TOTAL_COMPLETE_RUN_PERCENT = parse_value(self.schema, column_value_map, "TOTAL_COMPLETE_RUN_PERCENT")
        self.ITEM_LOC = parse_value(self.schema, column_value_map, "ITEM_LOC")
        "Item location of unit."
        self.ARRIVED_DATE = parse_value(self.schema, column_value_map, "ARRIVED_DATE")
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.STDOPER_TAG = parse_value(self.schema, column_value_map, "STDOPER_TAG")
        self.STDOPER_REV = parse_value(self.schema, column_value_map, "STDOPER_REV")
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        self.LATEST_EFF_GRP_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_EFF_GRP_REV_FLAG")
        self.PLND_MACHINE_REV = parse_value(self.schema, column_value_map, "PLND_MACHINE_REV")
        self.ACTUAL_MACHINE_REV = parse_value(self.schema, column_value_map, "ACTUAL_MACHINE_REV")
        self.SFWID_ORDER_MACH_ALT_XREF_FK1 = []
        self.SFWID_OPER_DC_OPERDESC_FK = []
        self.SFWID_OPER_TOOL_OPERDESC_FK = []
        self.SFWID_OPER_MM_OBJECTS_FK1 = []
        self.SFWID_OPER_TEXT_DESC_FK = []
        self.SFFND_COMM_OPER_FK = []
        self.SFWID_OPER_BUYOFF_OPERDESC_FK = []
        self.SFWID_USER_OVER_INSP_EVNT_FK2 = []
        self.SFWID_SERIAL_NODE_FK3 = []
        self.SFWID_USER_OPER_DEV_ACK_FK2 = []
        self.SFWID_ORDITEMALT_OPER_FK = []
        self.SFWID_OPER_ITMES_OPERDESC_FK = []
        self.SFWID_OPER_MATERIAL_FK3 = []
        self.SFWID_OPER_ASSIGNMENT_FK1 = []
        self.SFWID_SEROPEROPERTL_OPER_FK = []
        self.SFWID_USER_OPER_LAST_POS_FK1 = []
        self.SFWID_ORDER_INSP_STEP_LINK_FK3 = []
        self.SFFND_USERACTIV_SIGNON_OPER_FK = []
        self.SFWID_HOLDS_OPER_DESC_FK = []
        self.SFWID_SERIAL_OPER_MATERIAL_FK1 = []
        self.SFWID_ORDER_NOTES_FK2 = []
        self.SFWID_SEROPERDC_OPER_FK = []
        self.SFWID_OPER_CREW_OPER_FK = []
        self.SFWID_OPER_PRECEDENCE_FK1 = []
        self.SFWID_SEROPERITEMS_OPER_FK = []
        self.SFWID_USER_CURRENT_UNITS_FK1 = []
        self.SFWID_SERIAL_OPER_OPER_DESC_FK = []
        self.SFWID_ORDER_TOOL_ALT_XREF_FK1 = []
        self.SFWID_OPER_NOTES_MM_OBJECTS_F1 = []
        self.SFWID_OPER_SKILL_DESC_FK = []
        self.SFWID_OPER_PROCESS_FK1 = []
        self.SFWID_OPER_NOTES_TEXT_FK1 = []
        self.SFWID_GROUP_JOB_SERIAL_FK1 = []
        self.SFWID_EARNED_VALUE_CLAIM_FK01 = []

class SFSQA_INSP_ORDER_IS_NOTES:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "OWNER": "STRING",
        "NOTES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "INSP_STEP_ID",
        "OWNER",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_IDP_PROCESS_STATES_FK", ["INSP_ORDER_ID","INSP_STEP_ID"], "SFSQA_INSP_ORDER_INSP_STEPS", ["INSP_ORDER_ID","INSP_STEP_ID"]),
        DbForeignKey("SFSQA_IDP_PS_NOTE_OWNER_FK", ["OWNER"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.OWNER = parse_value(self.schema, column_value_map, "OWNER")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFQA_CA_REQ_AFFECTED_MACHINES:
    schema = {
        "CA_REQUEST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "MACHINE_NO": "STRING",
        "MACHINE_CHG": "STRING",
        "MACHINE_ID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_REQUEST_ID",
        "MACHINE_NO",
        "MACHINE_ID",
        "MACHINE_CHG",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_REQ_AFFECTED_MACH_FK", ["CA_REQUEST_ID"], "SFQA_CA_REQUEST", ["CA_REQUEST_ID"]),
        DbForeignKey("SFQA_CA_REQ_AFFECTED_MACH_FK2", ["MACHINE_NO","MACHINE_CHG","MACHINE_ID"], "SFFND_TOOL_SERIAL_DEF", ["TOOL_NO","TOOL_CHG","TOOL_SERIAL_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.MACHINE_NO = parse_value(self.schema, column_value_map, "MACHINE_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.MACHINE_CHG = parse_value(self.schema, column_value_map, "MACHINE_CHG")
        "The change number, secondary identifier, of the tool."
        self.MACHINE_ID = parse_value(self.schema, column_value_map, "MACHINE_ID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFSQA_INSP_PLAN_INSP_STEPS:
    schema = {
        "INSP_PLAN_ID": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "INSP_STEP_ID": "STRING",
        "STEP_NO": "STRING",
        "EXE_ORDER": "NUMBER",
        "ENFORCE_INSP_ITEM_SEQENCE_FLAG": "STRING",
        "SUBCOMP_PART_FLAG": "STRING",
        "APPLY_SEVERITY_RULE_FLAG": "STRING",
        "CHECKLIST_FLAG": "STRING",
        "FAI_ONLY_STATE_FLAG": "STRING",
        "FAILURE_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "APPLY_RANDOM_FLAG": "STRING",
        "ALLOW_OVERRIDE_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PRIORITY": "STRING",
        "LEAD_TIME": "NUMBER",
        "CERT": "STRING",
        "UCF_INSP_PLANIS_VCH1": "STRING",
        "UCF_INSP_PLANIS_VCH2": "STRING",
        "UCF_INSP_PLANIS_VCH3": "STRING",
        "UCF_INSP_PLANIS_VCH4": "STRING",
        "UCF_INSP_PLANIS_VCH5": "STRING",
        "UCF_INSP_PLANIS_VCH6": "STRING",
        "UCF_INSP_PLANIS_VCH7": "STRING",
        "UCF_INSP_PLANIS_VCH8": "STRING",
        "UCF_INSP_PLANIS_VCH9": "STRING",
        "UCF_INSP_PLANIS_VCH10": "STRING",
        "UCF_INSP_PLANIS_VCH11": "STRING",
        "UCF_INSP_PLANIS_VCH12": "STRING",
        "UCF_INSP_PLANIS_VCH13": "STRING",
        "UCF_INSP_PLANIS_VCH14": "STRING",
        "UCF_INSP_PLANIS_VCH15": "STRING",
        "UCF_INSP_PLANIS_DATE1": "STRING",
        "UCF_INSP_PLANIS_DATE2": "STRING",
        "UCF_INSP_PLANIS_DATE3": "STRING",
        "UCF_INSP_PLANIS_DATE4": "STRING",
        "UCF_INSP_PLANIS_DATE5": "STRING",
        "UCF_INSP_PLANIS_FLAG1": "STRING",
        "UCF_INSP_PLANIS_FLAG2": "STRING",
        "UCF_INSP_PLANIS_FLAG3": "STRING",
        "UCF_INSP_PLANIS_FLAG4": "STRING",
        "UCF_INSP_PLANIS_FLAG5": "STRING",
        "UCF_INSP_PLANIS_NUM1": "NUMBER",
        "UCF_INSP_PLANIS_NUM2": "NUMBER",
        "UCF_INSP_PLANIS_NUM3": "NUMBER",
        "UCF_INSP_PLANIS_NUM4": "NUMBER",
        "UCF_INSP_PLANIS_NUM5": "NUMBER",
        "UCF_INSP_PLANIS_VCH255_1": "STRING",
        "UCF_INSP_PLANIS_VCH255_2": "STRING",
        "UCF_INSP_PLANIS_VCH255_3": "STRING",
        "UCF_INSP_PLANIS_VCH4000_1": "STRING",
        "UCF_INSP_PLANIS_VCH4000_2": "STRING",
        "INCLUDE_COMP_INSP_FLAG": "STRING",
    }
    primary_key_columns = [
        "INSP_PLAN_ID",
        "INSP_PLAN_REV",
        "INSP_STEP_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_PLAN_INSP_STEPS_FK2", ["INSP_STEP_ID"], "SFSQA_INSP_STEP_DEF", ["INSP_STEP_ID"]),
        DbForeignKey("SFSQA_INSP_PLAN_INSP_STEPS_FK1", ["INSP_PLAN_ID","INSP_PLAN_REV"], "SFSQA_INSP_PLAN_DESC", ["INSP_PLAN_ID","INSP_PLAN_REV"]),
        DbForeignKey("SFSQA_IPIS_FK1", ["CERT"], "SFFND_CERT_DEF", ["CERT"]),
    ]
    refs = [
        "SFSQA_INSP_PLAN_IS_INCCTRL_FK1",
        "SFPL_PLAN_INSP_STEP_LINK_FK2",
        "SFWID_ORDER_INSP_STEP_LINK_FK2",
        "SFSQA_CLIST_IIID_FK",
    ]
    def __init__(self, column_value_map):
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        self.EXE_ORDER = parse_value(self.schema, column_value_map, "EXE_ORDER")
        self.ENFORCE_INSP_ITEM_SEQENCE_FLAG = parse_value(self.schema, column_value_map, "ENFORCE_INSP_ITEM_SEQENCE_FLAG")
        self.SUBCOMP_PART_FLAG = parse_value(self.schema, column_value_map, "SUBCOMP_PART_FLAG")
        self.APPLY_SEVERITY_RULE_FLAG = parse_value(self.schema, column_value_map, "APPLY_SEVERITY_RULE_FLAG")
        self.CHECKLIST_FLAG = parse_value(self.schema, column_value_map, "CHECKLIST_FLAG")
        self.FAI_ONLY_STATE_FLAG = parse_value(self.schema, column_value_map, "FAI_ONLY_STATE_FLAG")
        self.FAILURE_FLAG = parse_value(self.schema, column_value_map, "FAILURE_FLAG")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.APPLY_RANDOM_FLAG = parse_value(self.schema, column_value_map, "APPLY_RANDOM_FLAG")
        self.ALLOW_OVERRIDE_FLAG = parse_value(self.schema, column_value_map, "ALLOW_OVERRIDE_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        self.LEAD_TIME = parse_value(self.schema, column_value_map, "LEAD_TIME")
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        self.UCF_INSP_PLANIS_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH1")
        self.UCF_INSP_PLANIS_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH2")
        self.UCF_INSP_PLANIS_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH3")
        self.UCF_INSP_PLANIS_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH4")
        self.UCF_INSP_PLANIS_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH5")
        self.UCF_INSP_PLANIS_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH6")
        self.UCF_INSP_PLANIS_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH7")
        self.UCF_INSP_PLANIS_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH8")
        self.UCF_INSP_PLANIS_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH9")
        self.UCF_INSP_PLANIS_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH10")
        self.UCF_INSP_PLANIS_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH11")
        self.UCF_INSP_PLANIS_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH12")
        self.UCF_INSP_PLANIS_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH13")
        self.UCF_INSP_PLANIS_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH14")
        self.UCF_INSP_PLANIS_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH15")
        self.UCF_INSP_PLANIS_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_DATE1")
        self.UCF_INSP_PLANIS_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_DATE2")
        self.UCF_INSP_PLANIS_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_DATE3")
        self.UCF_INSP_PLANIS_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_DATE4")
        self.UCF_INSP_PLANIS_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_DATE5")
        self.UCF_INSP_PLANIS_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_FLAG1")
        self.UCF_INSP_PLANIS_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_FLAG2")
        self.UCF_INSP_PLANIS_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_FLAG3")
        self.UCF_INSP_PLANIS_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_FLAG4")
        self.UCF_INSP_PLANIS_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_FLAG5")
        self.UCF_INSP_PLANIS_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_NUM1")
        self.UCF_INSP_PLANIS_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_NUM2")
        self.UCF_INSP_PLANIS_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_NUM3")
        self.UCF_INSP_PLANIS_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_NUM4")
        self.UCF_INSP_PLANIS_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_NUM5")
        self.UCF_INSP_PLANIS_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH255_1")
        self.UCF_INSP_PLANIS_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH255_2")
        self.UCF_INSP_PLANIS_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH255_3")
        self.UCF_INSP_PLANIS_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH4000_1")
        self.UCF_INSP_PLANIS_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLANIS_VCH4000_2")
        self.INCLUDE_COMP_INSP_FLAG = parse_value(self.schema, column_value_map, "INCLUDE_COMP_INSP_FLAG")
        "If set Y, need to include Component Inspection in Inspection Step. If set N, no Component Inspection required."
        self.SFSQA_INSP_PLAN_IS_INCCTRL_FK1 = []
        self.SFPL_PLAN_INSP_STEP_LINK_FK2 = []
        self.SFWID_ORDER_INSP_STEP_LINK_FK2 = []
        self.SFSQA_CLIST_IIID_FK = []

class SFFND_DC_FORMAT_TYPE_DEF:
    schema = {
        "FORMAT": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "FORMAT_DESC": "STRING",
        "APPLICABLE_TO_SPC_DATA_FLAG": "STRING",
        "CDC_FLAG": "STRING",
    }
    primary_key_columns = [
        "FORMAT",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_DC_VARIABLE_DEF_FK2",
        "SFFND_UOM_DEF_FK1",
    ]
    def __init__(self, column_value_map):
        self.FORMAT = parse_value(self.schema, column_value_map, "FORMAT")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.FORMAT_DESC = parse_value(self.schema, column_value_map, "FORMAT_DESC")
        self.APPLICABLE_TO_SPC_DATA_FLAG = parse_value(self.schema, column_value_map, "APPLICABLE_TO_SPC_DATA_FLAG")
        self.CDC_FLAG = parse_value(self.schema, column_value_map, "CDC_FLAG")
        "FLAG(Y/N). Y: Valid format for CDC calculations. N: Not used for CDC caluclations."
        self.SFFND_DC_VARIABLE_DEF_FK2 = []
        self.SFFND_UOM_DEF_FK1 = []

class SFWID_OPER_BUYOFF_ALT:
    schema = {
        "OPER_BUYOFF_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "BUYOFF_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "BUYOFF_TYPE": "STRING",
        "BUYOFF_CERT": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "BLOCK_ID": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "REF_ID": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "SUSPECT_FLAG": "STRING",
        "UCF_OPER_BUYOFF_VCH1": "STRING",
        "UCF_OPER_BUYOFF_VCH2": "STRING",
        "UCF_OPER_BUYOFF_VCH3": "STRING",
        "UCF_OPER_BUYOFF_VCH4": "STRING",
        "UCF_OPER_BUYOFF_VCH5": "STRING",
        "UCF_OPER_BUYOFF_VCH6": "STRING",
        "UCF_OPER_BUYOFF_VCH7": "STRING",
        "UCF_OPER_BUYOFF_VCH8": "STRING",
        "UCF_OPER_BUYOFF_VCH9": "STRING",
        "UCF_OPER_BUYOFF_VCH10": "STRING",
        "UCF_OPER_BUYOFF_VCH11": "STRING",
        "UCF_OPER_BUYOFF_VCH12": "STRING",
        "UCF_OPER_BUYOFF_VCH13": "STRING",
        "UCF_OPER_BUYOFF_VCH14": "STRING",
        "UCF_OPER_BUYOFF_VCH15": "STRING",
        "UCF_OPER_BUYOFF_NUM1": "NUMBER",
        "UCF_OPER_BUYOFF_NUM2": "NUMBER",
        "UCF_OPER_BUYOFF_NUM3": "NUMBER",
        "UCF_OPER_BUYOFF_NUM4": "NUMBER",
        "UCF_OPER_BUYOFF_NUM5": "NUMBER",
        "UCF_OPER_BUYOFF_DATE1": "STRING",
        "UCF_OPER_BUYOFF_DATE2": "STRING",
        "UCF_OPER_BUYOFF_DATE3": "STRING",
        "UCF_OPER_BUYOFF_DATE4": "STRING",
        "UCF_OPER_BUYOFF_DATE5": "STRING",
        "UCF_OPER_BUYOFF_FLAG1": "STRING",
        "UCF_OPER_BUYOFF_FLAG2": "STRING",
        "UCF_OPER_BUYOFF_FLAG3": "STRING",
        "UCF_OPER_BUYOFF_FLAG4": "STRING",
        "UCF_OPER_BUYOFF_FLAG5": "STRING",
        "UCF_OPER_BUYOFF_VCH255_1": "STRING",
        "UCF_OPER_BUYOFF_VCH255_2": "STRING",
        "UCF_OPER_BUYOFF_VCH255_3": "STRING",
        "UCF_OPER_BUYOFF_VCH4000_1": "STRING",
        "UCF_OPER_BUYOFF_VCH4000_2": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "BUYOFF_TITLE": "STRING",
        "READY_TO_COLLECT_FLAG": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
    }
    primary_key_columns = [
        "OPER_BUYOFF_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_BUYOFF_ALT_FK2", ["BUYOFF_CERT"], "SFFND_CERT_DEF", ["CERT"]),
        DbForeignKey("SFWID_OPER_BUYOFF_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_BUYOFF_ALT = parse_value(self.schema, column_value_map, "OPER_BUYOFF_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.BUYOFF_ID = parse_value(self.schema, column_value_map, "BUYOFF_ID")
        "Unique, system-generated identifier of the buyoff."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.BUYOFF_TYPE = parse_value(self.schema, column_value_map, "BUYOFF_TYPE")
        "Type or classification of buyoff, e.g., MFG, MFG2, QA."
        self.BUYOFF_CERT = parse_value(self.schema, column_value_map, "BUYOFF_CERT")
        "The required certification for the given buyoff."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Block type/Block id where object exists within the text. For a full list of BLOCK_IDs see SFFND_HTREF_BLOCKID_DEF for full list. Not currently implemented."
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.UCF_OPER_BUYOFF_VCH1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH4 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH5 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH6 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH7 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH8 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH9 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH10 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH11 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH12 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH13 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH14 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_VCH15 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_BUYOFF_NUM1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_OPER_BUYOFF_NUM2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_OPER_BUYOFF_NUM3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_OPER_BUYOFF_NUM4 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_OPER_BUYOFF_NUM5 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_OPER_BUYOFF_DATE1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_OPER_BUYOFF_DATE2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_OPER_BUYOFF_DATE3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_OPER_BUYOFF_DATE4 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_OPER_BUYOFF_DATE5 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_OPER_BUYOFF_FLAG1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OPER_BUYOFF_FLAG2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OPER_BUYOFF_FLAG3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OPER_BUYOFF_FLAG4 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG4")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OPER_BUYOFF_FLAG5 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG5")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OPER_BUYOFF_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_OPER_BUYOFF_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_OPER_BUYOFF_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_OPER_BUYOFF_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_OPER_BUYOFF_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.BUYOFF_TITLE = parse_value(self.schema, column_value_map, "BUYOFF_TITLE")
        self.READY_TO_COLLECT_FLAG = parse_value(self.schema, column_value_map, "READY_TO_COLLECT_FLAG")
        "Determines if buyoff is available to collect or not."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Display line number for buyoff authoring."

class SFQA_DISC_DESC:
    schema = {
        "DISC_ID": "STRING",
        "DISC_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DISC_STATUS": "STRING",
        "PO_NO": "STRING",
        "DISC_START_DATE": "STRING",
        "DISC_TITLE": "STRING",
        "UCF_DISC_VCH1": "STRING",
        "UCF_DISC_VCH2": "STRING",
        "UCF_DISC_VCH3": "STRING",
        "UCF_DISC_FLAG1": "STRING",
        "UCF_DISC_VCH4": "STRING",
        "UCF_DISC_VCH5": "STRING",
        "UCF_DISC_VCH6": "STRING",
        "UCF_DISC_VCH7": "STRING",
        "UCF_DISC_VCH8": "STRING",
        "UCF_DISC_VCH9": "STRING",
        "UCF_DISC_VCH10": "STRING",
        "UCF_DISC_VCH11": "STRING",
        "UCF_DISC_VCH12": "STRING",
        "UCF_DISC_VCH13": "STRING",
        "UCF_DISC_VCH14": "STRING",
        "UCF_DISC_VCH15": "STRING",
        "UCF_DISC_NUM1": "NUMBER",
        "UCF_DISC_NUM2": "NUMBER",
        "UCF_DISC_NUM3": "NUMBER",
        "UCF_DISC_NUM4": "NUMBER",
        "UCF_DISC_NUM5": "NUMBER",
        "UCF_DISC_DATE1": "STRING",
        "UCF_DISC_DATE2": "STRING",
        "UCF_DISC_DATE3": "STRING",
        "UCF_DISC_DATE4": "STRING",
        "UCF_DISC_DATE5": "STRING",
        "UCF_DISC_FLAG2": "STRING",
        "UCF_DISC_FLAG3": "STRING",
        "UCF_DISC_FLAG4": "STRING",
        "UCF_DISC_FLAG5": "STRING",
        "UCF_DISC_VCH255_1": "STRING",
        "UCF_DISC_VCH255_2": "STRING",
        "UCF_DISC_VCH255_3": "STRING",
        "UCF_DISC_VCH4000_1": "STRING",
        "UCF_DISC_VCH4000_2": "STRING",
        "PO_RELEASE": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_DISC_NOTIF_DISC_FK",
        "SFQA_DISC_DESC_MM_OBJECTS_FK2",
        "SFQA_DISC_LAST_FILTER_CONTX_F1",
        "SFQA_DISCITEM_DISCDESC_FK",
        "SFQA_DISC_TEXT_DISCDESC_FK",
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_TYPE = parse_value(self.schema, column_value_map, "DISC_TYPE")
        "Type or classification of discrepancy, e.g., SCRAP, REWORK, REPAIR, AS IS, RETURN."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DISC_STATUS = parse_value(self.schema, column_value_map, "DISC_STATUS")
        "Current status of the discrepancy: PR (Preliminary Review) or MRB (Material Review Board)."
        self.PO_NO = parse_value(self.schema, column_value_map, "PO_NO")
        "Purchase Order Number associated with the discrepancy."
        self.DISC_START_DATE = parse_value(self.schema, column_value_map, "DISC_START_DATE")
        "The date on which the discrepancy was created."
        self.DISC_TITLE = parse_value(self.schema, column_value_map, "DISC_TITLE")
        "Title or name of the discrepancy."
        self.UCF_DISC_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_DISC_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH6 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH7 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH8 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH9 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH10 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH11 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH12 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH13 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH14 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_VCH15 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_DISC_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_DISC_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_DISC_NUM4 = parse_value(self.schema, column_value_map, "UCF_DISC_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_DISC_NUM5 = parse_value(self.schema, column_value_map, "UCF_DISC_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_DISC_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_DISC_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_DISC_DATE3 = parse_value(self.schema, column_value_map, "UCF_DISC_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_DISC_DATE4 = parse_value(self.schema, column_value_map, "UCF_DISC_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_DISC_DATE5 = parse_value(self.schema, column_value_map, "UCF_DISC_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_DISC_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_FLAG4 = parse_value(self.schema, column_value_map, "UCF_DISC_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_FLAG5 = parse_value(self.schema, column_value_map, "UCF_DISC_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH255_1")
        self.UCF_DISC_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH255_2")
        self.UCF_DISC_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH255_3")
        self.UCF_DISC_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH4000_1")
        self.UCF_DISC_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_DISC_VCH4000_2")
        self.PO_RELEASE = parse_value(self.schema, column_value_map, "PO_RELEASE")
        self.SFQA_DISC_NOTIF_DISC_FK = []
        self.SFQA_DISC_DESC_MM_OBJECTS_FK2 = []
        self.SFQA_DISC_LAST_FILTER_CONTX_F1 = []
        self.SFQA_DISCITEM_DISCDESC_FK = []
        self.SFQA_DISC_TEXT_DISCDESC_FK = []

class SFFND_DISPOSITION_TASK:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "TASK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "STATUS": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "TASK_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_DISPTASK_TASK_FK", ["TASK_ID"], "SFFND_TASK", ["TASK_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.TASK_ID = parse_value(self.schema, column_value_map, "TASK_ID")
        "The unique identifier of a task."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The status of the disposition/rework task. For example: IN PROCESS, DISPOSITIONED, or COMPLETE."

class SFSQA_AQL_DEF:
    schema = {
        "AQL_ID": "STRING",
        "AQL": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "AQL_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_SAMPLE_PLAN_DETAILS_FK2",
        "SFSQA_SAMPLING_RULE_DESC_FK5",
        "SFSQA_IDP_IC_AQL_FK",
        "SFSQA_INSP_ITEMS_FK15",
        "SFSQA_SR_DETAILS_FK2",
        "SFSQA_CHAR_CLASS_AQL_FK",
    ]
    def __init__(self, column_value_map):
        self.AQL_ID = parse_value(self.schema, column_value_map, "AQL_ID")
        "Unique system generated identifier."
        self.AQL = parse_value(self.schema, column_value_map, "AQL")
        "Acceptable Quality Level."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFSQA_SAMPLE_PLAN_DETAILS_FK2 = []
        self.SFSQA_SAMPLING_RULE_DESC_FK5 = []
        self.SFSQA_IDP_IC_AQL_FK = []
        self.SFSQA_INSP_ITEMS_FK15 = []
        self.SFSQA_SR_DETAILS_FK2 = []
        self.SFSQA_CHAR_CLASS_AQL_FK = []

class SFPL_OPERATION_MASTER:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "LOCK_STATE": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_OPERMAST_PLANMAST_FK", ["PLAN_ID"], "SFPL_PLAN_MASTER", ["PLAN_ID"]),
    ]
    refs = [
        "SFPL_OPERDESC_OPERMAST_FK",
        "SFPL_PLAN_NODE_OPER_FK",
        "SFWID_OPER_PRECEDENCE_FK2",
        "SFPL_OPERATION_PRECEDENCE_FK2",
        "SFPL_STEPMAST_OPERMAST_FK",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.LOCK_STATE = parse_value(self.schema, column_value_map, "LOCK_STATE")
        "The work Plan Revision lock state. Used for creating plan level user lock, GroupWare concept. Not in use."
        self.SFPL_OPERDESC_OPERMAST_FK = []
        self.SFPL_PLAN_NODE_OPER_FK = []
        self.SFWID_OPER_PRECEDENCE_FK2 = []
        self.SFPL_OPERATION_PRECEDENCE_FK2 = []
        self.SFPL_STEPMAST_OPERMAST_FK = []

class SFWID_USER_OVER_INSP_EVENTS:
    schema = {
        "EVENT_NO": "NUMBER",
        "USERID": "STRING",
        "EVENT_TYPE": "STRING",
        "ITEM_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "GROUP_NO": "NUMBER",
        "RAND_EVENTS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "IS_GROUP_COMPLETE_FLAG": "STRING",
        "GROUP_COMPLETE_NOTES": "STRING",
    }
    primary_key_columns = [
        "EVENT_NO",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_USER_OVER_INSP_EVNT_FK2", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_USER_OVER_INSP_EVNT_FK1", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.EVENT_NO = parse_value(self.schema, column_value_map, "EVENT_NO")
        "Unique, system-generated identifier of a given event."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "User Id for whom event is recorded for random over inspection check."
        self.EVENT_TYPE = parse_value(self.schema, column_value_map, "EVENT_TYPE")
        "Event Type set for global parameter ACTION_TO_CHECK_USER_FOR_OVER INSPECTION."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Item id of build part."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.GROUP_NO = parse_value(self.schema, column_value_map, "GROUP_NO")
        "Group No for list of events selection based upon specified over inspection frequencies."
        self.RAND_EVENTS = parse_value(self.schema, column_value_map, "RAND_EVENTS")
        "Random No(s) to choose events from specified Group No [i.e. 2,6,8]."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.IS_GROUP_COMPLETE_FLAG = parse_value(self.schema, column_value_map, "IS_GROUP_COMPLETE_FLAG")
        "A flag (Y/N) indicating rather the group is completed or not."
        self.GROUP_COMPLETE_NOTES = parse_value(self.schema, column_value_map, "GROUP_COMPLETE_NOTES")
        "Group completion notes to indicate if the group completion is partial or full."

class SFFND_PROJACTIVGRP_XREF_CHGLOG:
    schema = {
        "GROUP_ID": "STRING",
        "GROUP_REV": "NUMBER",
        "PROJECT": "STRING",
        "ACTIVITY": "STRING",
        "LAST_ACTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "GROUP_ID",
        "GROUP_REV",
        "PROJECT",
        "ACTIVITY",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.GROUP_ID = parse_value(self.schema, column_value_map, "GROUP_ID")
        "Unique, system generated identifier of a group."
        self.GROUP_REV = parse_value(self.schema, column_value_map, "GROUP_REV")
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of a project."
        self.ACTIVITY = parse_value(self.schema, column_value_map, "ACTIVITY")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFWID_SERIAL_NODE:
    schema = {
        "ORDER_ID": "STRING",
        "NODE_ID": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "OPER_URC": "NUMBER",
        "SERIAL_NODE_STATUS": "STRING",
        "STATUS_CHG_NOTES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "NODE_ID",
        "LOT_ID",
        "SERIAL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_SERIAL_NODE_FK3", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_SERIAL_NODE_FK1", ["ORDER_ID","NODE_ID"], "SFWID_ORDER_NODE", ["ORDER_ID","NODE_ID"]),
        DbForeignKey("SFWID_SERIAL_NODE_FK2", ["ORDER_ID","LOT_ID","SERIAL_ID"], "SFWID_SERIAL_DESC", ["ORDER_ID","LOT_ID","SERIAL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.NODE_ID = parse_value(self.schema, column_value_map, "NODE_ID")
        "The unique system-generated identifier of a node in a Operation Flow Diagram."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.OPER_URC = parse_value(self.schema, column_value_map, "OPER_URC")
        "When executing a work order with returns (iterative branching) this is a user configurable counter."
        self.SERIAL_NODE_STATUS = parse_value(self.schema, column_value_map, "SERIAL_NODE_STATUS")
        "Status of the node for the given Unit."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated operation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_INI_LIB_HIST:
    schema = {
        "HIST_ID": "STRING",
        "OLD_HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "INI_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "INI_ID_DISPL": "STRING",
        "STYPE": "STRING",
        "DESCRIPTION": "STRING",
        "INI_TEXT": "STRING",
        "INI_DATA": "STRING",
        "INI_DATA_KEY": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system generated identifier of the obsolete (history) entry."
        self.OLD_HIST_ID = parse_value(self.schema, column_value_map, "OLD_HIST_ID")
        "Original numeric system generated unqiue identifier of this historical record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "The Solumina login ID of the user who moved the Initialization Library entry to obsolete status (to history)."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the Initialization Library entry was moved to obsolete (history) status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.INI_ID = parse_value(self.schema, column_value_map, "INI_ID")
        "Unique identifier, all uppercase, of a Solumina application initialization entry."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.INI_ID_DISPL = parse_value(self.schema, column_value_map, "INI_ID_DISPL")
        "Reformatted initialization library entry ID for display."
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")
        "Type/class the initialization entry belongs to, indicating the intent/purpose of the entry."
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        "A detailed description of the Initialization Library entry."
        self.INI_TEXT = parse_value(self.schema, column_value_map, "INI_TEXT")
        "The actual text/content of the initialization entry."
        self.INI_DATA = parse_value(self.schema, column_value_map, "INI_DATA")
        "Binary representation of the given INI_TEXT."
        self.INI_DATA_KEY = parse_value(self.schema, column_value_map, "INI_DATA_KEY")
        "Application generated internal checksum/crc."

class SFPL_STEP_DC_FORMULA_DESC:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "DAT_COL_ID": "STRING",
        "USE_RANGE": "STRING",
        "EXECUTION_ORDER": "NUMBER",
        "FORMULA": "STRING",
        "EXTERNAL_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "DAT_COL_ID",
        "USE_RANGE",
        "EXECUTION_ORDER",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEP_DC_FORMULA_DESC_FK1", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO","DAT_COL_ID"], "SFPL_STEP_DAT_COL", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO","DAT_COL_ID"]),
    ]
    refs = [
        "SFPL_STEP_DC_FORMULA_VARS_FK1",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        self.USE_RANGE = parse_value(self.schema, column_value_map, "USE_RANGE")
        self.EXECUTION_ORDER = parse_value(self.schema, column_value_map, "EXECUTION_ORDER")
        self.FORMULA = parse_value(self.schema, column_value_map, "FORMULA")
        self.EXTERNAL_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFPL_STEP_DC_FORMULA_VARS_FK1 = []

class SFCORE_JOB_PARAMETERS:
    schema = {
        "JOB_ID": "NUMBER",
        "REQUEST_ID": "STRING",
        "JOB_TYPE": "STRING",
        "OBJECT_ID": "STRING",
        "REPORT_NAME": "STRING",
        "PRIORITY": "NUMBER",
        "UPDT_USERID": "STRING",
        "COPY_REQUEST_ID": "STRING",
        "COPIES": "NUMBER",
        "PAPER_WAIT": "STRING",
        "PRINTER_ID": "STRING",
    }
    primary_key_columns = [
        "JOB_ID",
        "REQUEST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.JOB_ID = parse_value(self.schema, column_value_map, "JOB_ID")
        "Identifier of the job executing the request."
        self.REQUEST_ID = parse_value(self.schema, column_value_map, "REQUEST_ID")
        "System generated unique identifier for a given request."
        self.JOB_TYPE = parse_value(self.schema, column_value_map, "JOB_TYPE")
        "The type of job."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.REPORT_NAME = parse_value(self.schema, column_value_map, "REPORT_NAME")
        "User defineable name for a given report."
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        "The priority of the task."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.COPY_REQUEST_ID = parse_value(self.schema, column_value_map, "COPY_REQUEST_ID")
        "Unique system generated identifier for a given report copy request."
        self.COPIES = parse_value(self.schema, column_value_map, "COPIES")
        "The number of copies."
        self.PAPER_WAIT = parse_value(self.schema, column_value_map, "PAPER_WAIT")
        "Control value for waiting for paper."
        self.PRINTER_ID = parse_value(self.schema, column_value_map, "PRINTER_ID")
        "Unique system generated identifier for a given printer."

class SFQA_CA_TYPE_DEF:
    schema = {
        "CA_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "ISSUE_DESC_UDV_ID": "STRING",
        "TIME_STAMP": "DATE",
        "SOLUTION_ACTION_PLAN_UDV_ID": "STRING",
        "LAST_ACTION": "STRING",
        "INVEST_UDV_ID": "STRING",
        "UCF_CA_TYPE_VCH1": "STRING",
        "UCF_CA_TYPE_VCH2": "STRING",
        "UCF_CA_TYPE_VCH3": "STRING",
        "TEAM_ASSIGNED_UDV_ID": "STRING",
        "UCF_CA_TYPE_VCH4": "STRING",
        "UCF_CA_TYPE_VCH5": "STRING",
        "RISK_ASSESSMENT_UDV_ID": "STRING",
        "RC_ANALYSIS_UDV_ID": "STRING",
        "UCF_CA_TYPE_NUM1": "NUMBER",
        "UCF_CA_TYPE_NUM2": "NUMBER",
        "NEXT_ISSUE_DESC_UDV_ID": "STRING",
        "NEXT_INVEST_UDV_ID": "STRING",
        "UCF_CA_TYPE_NUM3": "NUMBER",
        "UCF_CA_TYPE_DATE1": "STRING",
        "NEXT_SOLU_ACTION_PLAN_UDV_ID": "STRING",
        "NEXT_TEAM_ASSIGNED_UDV_ID": "STRING",
        "UCF_CA_TYPE_DATE2": "STRING",
        "UCF_CA_TYPE_FLAG1": "STRING",
        "NEXT_RISK_ASSESSMENT_UDV_ID": "STRING",
        "NEXT_RC_ANALYSIS_UDV_ID": "STRING",
        "UCF_CA_TYPE_FLAG2": "STRING",
        "UCF_CA_TYPE_FLAG3": "STRING",
        "UCF_CA_TYPE_VCH255_1": "STRING",
        "UCF_CA_TYPE_VCH255_2": "STRING",
    }
    primary_key_columns = [
        "CA_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_TYPE_DEF_FK9", ["NEXT_INVEST_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_TYPE_DEF_FK12", ["NEXT_RISK_ASSESSMENT_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_TYPE_DEF_FK8", ["NEXT_ISSUE_DESC_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_TYPE_DEF_FK10", ["NEXT_SOLU_ACTION_PLAN_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_TYPE_DEF_FK11", ["NEXT_TEAM_ASSIGNED_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_TYPE_DEF_FK13", ["NEXT_RC_ANALYSIS_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_TYPE_DEF_FK2", ["ISSUE_DESC_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_TYPE_DEF_FK4", ["SOLUTION_ACTION_PLAN_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_TYPE_DEF_FK5", ["TEAM_ASSIGNED_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_TYPE_DEF_FK6", ["RISK_ASSESSMENT_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_TYPE_DEF_FK7", ["RC_ANALYSIS_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_TYPE_DEF_FK3", ["INVEST_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_TYPE = parse_value(self.schema, column_value_map, "CA_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.ISSUE_DESC_UDV_ID = parse_value(self.schema, column_value_map, "ISSUE_DESC_UDV_ID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.SOLUTION_ACTION_PLAN_UDV_ID = parse_value(self.schema, column_value_map, "SOLUTION_ACTION_PLAN_UDV_ID")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.INVEST_UDV_ID = parse_value(self.schema, column_value_map, "INVEST_UDV_ID")
        self.UCF_CA_TYPE_VCH1 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_TYPE_VCH2 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_TYPE_VCH3 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_VCH3")
        "User-configurable field for VARCHAR data type."
        self.TEAM_ASSIGNED_UDV_ID = parse_value(self.schema, column_value_map, "TEAM_ASSIGNED_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.UCF_CA_TYPE_VCH4 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_TYPE_VCH5 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_VCH5")
        "User-configurable field for VARCHAR data type."
        self.RISK_ASSESSMENT_UDV_ID = parse_value(self.schema, column_value_map, "RISK_ASSESSMENT_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.RC_ANALYSIS_UDV_ID = parse_value(self.schema, column_value_map, "RC_ANALYSIS_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.UCF_CA_TYPE_NUM1 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CA_TYPE_NUM2 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_NUM2")
        "User-configurable field for NUM data type."
        self.NEXT_ISSUE_DESC_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_ISSUE_DESC_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_INVEST_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_INVEST_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.UCF_CA_TYPE_NUM3 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CA_TYPE_DATE1 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_DATE1")
        "User-configurable field for DATE data type."
        self.NEXT_SOLU_ACTION_PLAN_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_SOLU_ACTION_PLAN_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_TEAM_ASSIGNED_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_TEAM_ASSIGNED_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.UCF_CA_TYPE_DATE2 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CA_TYPE_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.NEXT_RISK_ASSESSMENT_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_RISK_ASSESSMENT_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_RC_ANALYSIS_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_RC_ANALYSIS_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.UCF_CA_TYPE_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_TYPE_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_TYPE_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_TYPE_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CA_TYPE_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."

class SFPL_PLANNED_ACTIONS:
    schema = {
        "PLANNED_ACTION_ID": "STRING",
        "CHANGE_REQUEST_ID": "STRING",
        "IMPACTED_OBJECT_ID": "STRING",
        "AFFECTED_OBJECT_ID": "STRING",
        "RESULTING_OBJECT_ID": "STRING",
        "USED_IN_FLAG": "STRING",
        "PLANNED_ACTION": "STRING",
        "ACTION_STATUS": "STRING",
        "ACTION_OBJECT_TYPE": "STRING",
        "PLANNED_ACTION_NOTE": "STRING",
        "ASSIGNED_TO": "STRING",
        "PRIORITY": "STRING",
        "SCH_START_DATE": "STRING",
        "SCH_END_DATE": "STRING",
        "ITEM_ID": "STRING",
        "BOM_ID": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "OBJECT_ID": "STRING",
        "PLAN_ALTERATIONS": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PWP_ID": "STRING",
        "ORDER_ID": "STRING",
        "INSP_PLAN_ID": "STRING",
        "ACTUAL_DATE": "STRING",
        "PLANNED_FLAG": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "INSP_ORDER_ID": "STRING",
        "INSP_ITEM_ID": "STRING",
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "SOURCE": "STRING",
    }
    primary_key_columns = [
        "PLANNED_ACTION_ID",
        "CHANGE_REQUEST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK1", ["CHANGE_REQUEST_ID"], "SFPL_CHANGE_REQUEST", ["CHANGE_REQUEST_ID"]),
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK10", ["RESULTING_OBJECT_ID","CHANGE_REQUEST_ID"], "SFPL_RESULTING_OBJECTS", ["RESULTING_OBJECT_ID","CHANGE_REQUEST_ID"]),
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK6", ["INSP_PLAN_ID","INSP_PLAN_REV"], "SFSQA_INSP_PLAN_DESC", ["INSP_PLAN_ID","INSP_PLAN_REV"]),
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK11", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK8", ["IMPACTED_OBJECT_ID","CHANGE_REQUEST_ID"], "SFPL_IMPACTED_OBJECTS", ["IMPACTED_OBJECT_ID","CHANGE_REQUEST_ID"]),
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK9", ["AFFECTED_OBJECT_ID","CHANGE_REQUEST_ID"], "SFPL_AFFECTED_OBJECTS", ["AFFECTED_OBJECT_ID","CHANGE_REQUEST_ID"]),
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK14", ["PWP_ID"], "SFPL_PWP_DESC", ["PWP_ID"]),
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK2", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK3", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK5", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK12", ["INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK13", ["SOURCE","PLANNED_ACTION","ACTION_OBJECT_TYPE"], "SFFND_PLANNED_ACTIONS_DEF", ["SOURCE","PLANNED_ACTION","ACTION_OBJECT_TYPE"]),
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK4", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFPL_PLANNED_ACTIONS_FK7", ["INSP_ITEM_ID","OWNER_CODE","INSP_DEF_REV"], "SFSQA_INSP_DEFINITION_REV", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLANNED_ACTION_ID = parse_value(self.schema, column_value_map, "PLANNED_ACTION_ID")
        "Unique System Generated Identifier of an Planned Action of and Impacted, Resulting or Affected Object."
        self.CHANGE_REQUEST_ID = parse_value(self.schema, column_value_map, "CHANGE_REQUEST_ID")
        "Unique System Generated Identifier of a Change Request."
        self.IMPACTED_OBJECT_ID = parse_value(self.schema, column_value_map, "IMPACTED_OBJECT_ID")
        "Unique System Generated Identifier of an Impacted Object of Change Request."
        self.AFFECTED_OBJECT_ID = parse_value(self.schema, column_value_map, "AFFECTED_OBJECT_ID")
        "Unique System Generated Identifier of an Affected Object of Change Request."
        self.RESULTING_OBJECT_ID = parse_value(self.schema, column_value_map, "RESULTING_OBJECT_ID")
        "Unique System Generated Identifier of an Resulting Object of Change Request."
        self.USED_IN_FLAG = parse_value(self.schema, column_value_map, "USED_IN_FLAG")
        "Whether this impacted object is used in that particular OBJECT_TYPE or not; By default, it will be N, means the impacted object is created from that particular OBJECT_TYPE."
        self.PLANNED_ACTION = parse_value(self.schema, column_value_map, "PLANNED_ACTION")
        "Action to be Taken on the selected Impacted, Affected or Resulting Object."
        self.ACTION_STATUS = parse_value(self.schema, column_value_map, "ACTION_STATUS")
        "Action Status for Planned Action. Value can be like PENDING, COMPLETE."
        self.ACTION_OBJECT_TYPE = parse_value(self.schema, column_value_map, "ACTION_OBJECT_TYPE")
        "The Type of Object on which Action is to be taken. It can be: Bom, Work Order, Work Plan, Standard Operation, Standard Text, Inspection Plan, Inspection Order, All Types of MM Objects. Based on this field, the other Key ID fields will be populated."
        self.PLANNED_ACTION_NOTE = parse_value(self.schema, column_value_map, "PLANNED_ACTION_NOTE")
        "Notes for Planned Action."
        self.ASSIGNED_TO = parse_value(self.schema, column_value_map, "ASSIGNED_TO")
        "USERID of the user requesting this Planned Action."
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        "High, Low, Medium (Lookup). Value stored will be 1=High, 2=Medium, 3=Low."
        self.SCH_START_DATE = parse_value(self.schema, column_value_map, "SCH_START_DATE")
        "Date on which action is to be started."
        self.SCH_END_DATE = parse_value(self.schema, column_value_map, "SCH_END_DATE")
        "Date by which action is to be completed."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Key Field for Part, Tool, Machine, etc."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Key Field for MBOM / EBOM / PLIST."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Key Field for Standard Operation, Work Plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "Key Field for Standard Operation, Work Plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "Key Field for Standard Operation, Work Plan."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Key Field for For File, Illustration, Standard Text, Standard Operation."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Key Field for Standard Operation, Work Plan."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PWP_ID = parse_value(self.schema, column_value_map, "PWP_ID")
        "Contains the specific Release Package of Planned Action."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Key Field for Work Order."
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        "Key Field for Inspection Plan."
        self.ACTUAL_DATE = parse_value(self.schema, column_value_map, "ACTUAL_DATE")
        "Actual date of Planned Action."
        self.PLANNED_FLAG = parse_value(self.schema, column_value_map, "PLANNED_FLAG")
        "Value is Y if there is any planned action otherwise N."
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        "Key Field for Inspection Plan."
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        "Key Field for Inspection Order."
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        "Key Field for Inspection Definition."
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        "Key Field for Inspection Definition."
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        "Key Field for Inspection Definition."
        self.SOURCE = parse_value(self.schema, column_value_map, "SOURCE")
        "Possible Values can be Impacted or Resulting."

class SFWID_USER_OPER_DEV_ACK:
    schema = {
        "USERID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "ALT_ID": "STRING",
        "ALT_REV": "NUMBER",
        "NOTES": "STRING",
        "WARNING_READ_FLAG": "STRING",
        "ACKNOWLEDGE_REQ": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "USERID",
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "ALT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_USER_OPER_DEV_ACK_FK3", ["USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFWID_USER_OPER_DEV_ACK_FK1", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_USER_OPER_DEV_ACK_FK2", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "User acknowledging the operation."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Order ID of operation."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Operation Key of operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Step Key will be -1."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "Alteration Id of Alteration getting acknowledged."
        self.ALT_REV = parse_value(self.schema, column_value_map, "ALT_REV")
        "Alteration Revision of Alteration getting acknowledged."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "User operation change acknowledgement notes."
        self.WARNING_READ_FLAG = parse_value(self.schema, column_value_map, "WARNING_READ_FLAG")
        "Y/N, Y Indicates Instruction changes are read by the user otherwise N."
        self.ACKNOWLEDGE_REQ = parse_value(self.schema, column_value_map, "ACKNOWLEDGE_REQ")
        "Y/N, Y Indicates Instructions read acknowledgment required otherwise N."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFOR_SFPL_PLAN_SUBJECT_PART:
    schema = {
        "SUBJECT_NO": "NUMBER",
        "SUBJECT_REV": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PART_NO": "STRING",
        "ITEM_ID": "STRING",
        "PART_CHG": "STRING",
        "PART_TITLE": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_UPDT_NO",
        "SUBJECT_NO",
        "ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFOR_SFPL_PLAN_SUBJECT_PART_F1", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFOR_PLAN_SUBJPART_PLANSUBJ_FK", ["PLAN_ID","PLAN_UPDT_NO","SUBJECT_NO"], "SFOR_SFPL_PLAN_SUBJECT", ["PLAN_ID","PLAN_UPDT_NO","SUBJECT_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SUBJECT_NO = parse_value(self.schema, column_value_map, "SUBJECT_NO")
        self.SUBJECT_REV = parse_value(self.schema, column_value_map, "SUBJECT_REV")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier of the component/part."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of an item/part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.PART_TITLE = parse_value(self.schema, column_value_map, "PART_TITLE")
        "A descriptive title or name of the part."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."

class SFWID_ORDER_REQUEST:
    schema = {
        "REQUEST_ID": "STRING",
        "PART_NO": "STRING",
        "CUSTOMER_ORDER_NO": "STRING",
        "PART_CHG": "STRING",
        "ORDER_QTY": "NUMBER",
        "ORDER_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PLAN_NO": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PROGRAM": "STRING",
        "ACCOUNT_LABOR": "STRING",
        "REQUEST_NOTES": "STRING",
        "REQUEST_STATUS": "STRING",
        "LOT_NO": "STRING",
        "SERIAL_NO_LIST": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "UCF_ORDER_REQUEST_VCH1": "STRING",
        "UCF_ORDER_REQUEST_VCH2": "STRING",
        "UCF_ORDER_REQUEST_VCH3": "STRING",
        "UCF_ORDER_REQUEST_VCH4": "STRING",
        "UCF_ORDER_REQUEST_VCH5": "STRING",
        "UCF_ORDER_REQUEST_VCH6": "STRING",
        "UCF_ORDER_REQUEST_VCH7": "STRING",
        "UCF_ORDER_REQUEST_VCH8": "STRING",
        "UCF_ORDER_REQUEST_VCH9": "STRING",
        "UCF_ORDER_REQUEST_VCH10": "STRING",
        "UCF_ORDER_REQUEST_VCH11": "STRING",
        "UCF_ORDER_REQUEST_VCH12": "STRING",
        "UCF_ORDER_REQUEST_VCH13": "STRING",
        "UCF_ORDER_REQUEST_VCH14": "STRING",
        "UCF_ORDER_REQUEST_VCH15": "STRING",
        "UCF_ORDER_REQUEST_NUM1": "NUMBER",
        "UCF_ORDER_REQUEST_NUM2": "NUMBER",
        "UCF_ORDER_REQUEST_NUM3": "NUMBER",
        "UCF_ORDER_REQUEST_NUM4": "NUMBER",
        "UCF_ORDER_REQUEST_NUM5": "NUMBER",
        "UCF_ORDER_REQUEST_DATE1": "STRING",
        "UCF_ORDER_REQUEST_DATE2": "STRING",
        "UCF_ORDER_REQUEST_DATE3": "STRING",
        "UCF_ORDER_REQUEST_DATE4": "STRING",
        "UCF_ORDER_REQUEST_DATE5": "STRING",
        "UCF_ORDER_REQUEST_FLAG1": "STRING",
        "UCF_ORDER_REQUEST_FLAG2": "STRING",
        "UCF_ORDER_REQUEST_FLAG3": "STRING",
        "UCF_ORDER_REQUEST_FLAG4": "STRING",
        "UCF_ORDER_REQUEST_FLAG5": "STRING",
        "UCF_ORDER_REQUEST_VCH255_1": "STRING",
        "UCF_ORDER_REQUEST_VCH255_2": "STRING",
        "UCF_ORDER_REQUEST_VCH255_3": "STRING",
        "UCF_ORDER_REQUEST_VCH4000_1": "STRING",
        "UCF_ORDER_REQUEST_VCH4000_2": "STRING",
        "ASGND_WORK_LOC": "STRING",
        "ALIAS_PART_NO": "STRING",
        "PROJECT": "STRING",
        "ERP_ORDER_TYPE": "STRING",
        "ALIAS_PART_CHG": "STRING",
        "BOM_COMP_CONFIG_LIST": "STRING",
        "ERP_ROUTING_ID": "STRING",
        "EFFECTIVE_START_DATE": "STRING",
        "END_UNIT_NO": "STRING",
        "OWP_ID": "STRING",
    }
    primary_key_columns = [
        "REQUEST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_REQUEST_FK1", ["PROJECT"], "SFFND_PROJECT_DEF", ["PROJECT"]),
        DbForeignKey("SFWID_ORDER_REQUEST_FK2", ["OWP_ID"], "SFWID_OWP_DEF", ["OWP_ID"]),
    ]
    refs = [
        "SFQA_DISC_ITEM_REQUEST_FK",
    ]
    def __init__(self, column_value_map):
        self.REQUEST_ID = parse_value(self.schema, column_value_map, "REQUEST_ID")
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        self.CUSTOMER_ORDER_NO = parse_value(self.schema, column_value_map, "CUSTOMER_ORDER_NO")
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        self.ORDER_QTY = parse_value(self.schema, column_value_map, "ORDER_QTY")
        self.ORDER_TYPE = parse_value(self.schema, column_value_map, "ORDER_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.PLAN_NO = parse_value(self.schema, column_value_map, "PLAN_NO")
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        self.ACCOUNT_LABOR = parse_value(self.schema, column_value_map, "ACCOUNT_LABOR")
        self.REQUEST_NOTES = parse_value(self.schema, column_value_map, "REQUEST_NOTES")
        self.REQUEST_STATUS = parse_value(self.schema, column_value_map, "REQUEST_STATUS")
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        self.SERIAL_NO_LIST = parse_value(self.schema, column_value_map, "SERIAL_NO_LIST")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        self.UCF_ORDER_REQUEST_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_REQUEST_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_REQUEST_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_REQUEST_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_REQUEST_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_REQUEST_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_REQUEST_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_REQUEST_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_REQUEST_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_REQUEST_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_REQUEST_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_REQUEST_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_REQUEST_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_REQUEST_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_REQUEST_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_REQUEST_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_REQUEST_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_REQUEST_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_REQUEST_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_REQUEST_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ORDER_REQUEST_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_REQUEST_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.ASGND_WORK_LOC = parse_value(self.schema, column_value_map, "ASGND_WORK_LOC")
        self.ALIAS_PART_NO = parse_value(self.schema, column_value_map, "ALIAS_PART_NO")
        "Part No of alias/Starting Part."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.ERP_ORDER_TYPE = parse_value(self.schema, column_value_map, "ERP_ORDER_TYPE")
        "Used to maintain ERP order type (based on solumina order type) when WO request is created."
        self.ALIAS_PART_CHG = parse_value(self.schema, column_value_map, "ALIAS_PART_CHG")
        "Part Chagne of alias/Starting Part."
        self.BOM_COMP_CONFIG_LIST = parse_value(self.schema, column_value_map, "BOM_COMP_CONFIG_LIST")
        "The column will store BOM Component Configuration values provided during order creation. The configuration values will be semi-colon seperated."
        self.ERP_ROUTING_ID = parse_value(self.schema, column_value_map, "ERP_ROUTING_ID")
        "Store ERP routing ID for selected Plan."
        self.EFFECTIVE_START_DATE = parse_value(self.schema, column_value_map, "EFFECTIVE_START_DATE")
        "Store Effective start Date for date Effectivity."
        self.END_UNIT_NO = parse_value(self.schema, column_value_map, "END_UNIT_NO")
        "Store End Unit NO for other Effectivity."
        self.OWP_ID = parse_value(self.schema, column_value_map, "OWP_ID")
        self.SFQA_DISC_ITEM_REQUEST_FK = []

class SFCORE_HOST_COUNT:
    schema = {
        "SYSTEM_TYPE": "STRING",
        "HOST_COUNT": "STRING",
        "HOST_MAX": "STRING",
    }
    primary_key_columns = [
        "SYSTEM_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SYSTEM_TYPE = parse_value(self.schema, column_value_map, "SYSTEM_TYPE")
        "External PLM System."
        self.HOST_COUNT = parse_value(self.schema, column_value_map, "HOST_COUNT")
        "The encrypted value in an alphanumeric string."
        self.HOST_MAX = parse_value(self.schema, column_value_map, "HOST_MAX")
        "The encrypted value in an alphanumeric string."

class SFCORE_CONCURRENT_USER_DETAILS:
    schema = {
        "CONCURRENT_USER_DETAIL_ID": "NUMBER",
        "CONCURRENT_USER_ID": "NUMBER",
        "CONNECTION_ID": "STRING",
        "HEARTBEAT_TIMESTAMP": "DATE",
        "USER_ID": "STRING",
    }
    primary_key_columns = [
        "CONCURRENT_USER_DETAIL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_CONCURRENT_USER_DTL_FK2", ["USER_ID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFCORE_CONCURRENT_USER_DTL_FK1", ["CONCURRENT_USER_ID"], "SFCORE_CONCURRENT_USERS", ["CONCURRENT_USER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONCURRENT_USER_DETAIL_ID = parse_value(self.schema, column_value_map, "CONCURRENT_USER_DETAIL_ID")
        "Unique system generated identifier for the concurrent user details."
        self.CONCURRENT_USER_ID = parse_value(self.schema, column_value_map, "CONCURRENT_USER_ID")
        "Unique system generated identifier for the Concurrent User."
        self.CONNECTION_ID = parse_value(self.schema, column_value_map, "CONNECTION_ID")
        "Unique system generated identifier for a given application connection."
        self.HEARTBEAT_TIMESTAMP = parse_value(self.schema, column_value_map, "HEARTBEAT_TIMESTAMP")
        "HEARTBEAT_TIMESTAMP is to store active session timestamp when client connects to Middle Tier."
        self.USER_ID = parse_value(self.schema, column_value_map, "USER_ID")
        "Solumina login ID of the user."

class SFOR_SFPL_PLAN_SUBJECT:
    schema = {
        "SUBJECT_NO": "NUMBER",
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "SUBJECT_REV": "NUMBER",
        "TITLE": "STRING",
        "AUTHORITY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "SUBJECT_STATUS": "STRING",
        "CHG_AUTH_TYPE": "STRING",
        "CHG_AUTH_NUM": "STRING",
        "IS_DEFAULT": "STRING",
        "SUBJECT_STATE": "STRING",
        "UCF_PLAN_SUBJECT_VCH1": "STRING",
        "OBJECT_ID": "STRING",
        "UCF_PLAN_SUBJECT_VCH2": "STRING",
        "UCF_PLAN_SUBJECT_VCH3": "STRING",
        "UCF_PLAN_SUBJECT_VCH4": "STRING",
        "UCF_PLAN_SUBJECT_VCH5": "STRING",
        "UCF_PLAN_SUBJECT_VCH6": "STRING",
        "UCF_PLAN_SUBJECT_VCH7": "STRING",
        "UCF_PLAN_SUBJECT_VCH8": "STRING",
        "UCF_PLAN_SUBJECT_VCH9": "STRING",
        "UCF_PLAN_SUBJECT_VCH10": "STRING",
        "UCF_PLAN_SUBJECT_VCH11": "STRING",
        "UCF_PLAN_SUBJECT_VCH12": "STRING",
        "UCF_PLAN_SUBJECT_VCH13": "STRING",
        "UCF_PLAN_SUBJECT_VCH14": "STRING",
        "UCF_PLAN_SUBJECT_VCH15": "STRING",
        "UCF_PLAN_SUBJECT_NUM1": "NUMBER",
        "UCF_PLAN_SUBJECT_NUM2": "NUMBER",
        "UCF_PLAN_SUBJECT_NUM3": "NUMBER",
        "UCF_PLAN_SUBJECT_NUM4": "NUMBER",
        "UCF_PLAN_SUBJECT_NUM5": "NUMBER",
        "UCF_PLAN_SUBJECT_FLAG1": "STRING",
        "UCF_PLAN_SUBJECT_FLAG2": "STRING",
        "UCF_PLAN_SUBJECT_FLAG3": "STRING",
        "UCF_PLAN_SUBJECT_FLAG4": "STRING",
        "UCF_PLAN_SUBJECT_FLAG5": "STRING",
        "UCF_PLAN_SUBJECT_DATE1": "STRING",
        "UCF_PLAN_SUBJECT_DATE2": "STRING",
        "UCF_PLAN_SUBJECT_DATE3": "STRING",
        "UCF_PLAN_SUBJECT_DATE4": "STRING",
        "UCF_PLAN_SUBJECT_DATE5": "DATE",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_UPDT_NO",
        "SUBJECT_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFOR_SFPL_PLAN_SUBJECT_FK01", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFOR_SFPL_PLAN_SUBJECT_PLAN_FK", ["PLAN_ID","PLAN_UPDT_NO"], "SFPL_PLAN_DESC", ["PLAN_ID","PLAN_UPDT_NO"]),
    ]
    refs = [
        "SFOR_PLAN_SUBJOPER_PLANSUBJ_FK",
        "SFOR_PLAN_SUBJPART_PLANSUBJ_FK",
    ]
    def __init__(self, column_value_map):
        self.SUBJECT_NO = parse_value(self.schema, column_value_map, "SUBJECT_NO")
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.SUBJECT_REV = parse_value(self.schema, column_value_map, "SUBJECT_REV")
        self.TITLE = parse_value(self.schema, column_value_map, "TITLE")
        "Title or name of the given operation."
        self.AUTHORITY = parse_value(self.schema, column_value_map, "AUTHORITY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.SUBJECT_STATUS = parse_value(self.schema, column_value_map, "SUBJECT_STATUS")
        self.CHG_AUTH_TYPE = parse_value(self.schema, column_value_map, "CHG_AUTH_TYPE")
        self.CHG_AUTH_NUM = parse_value(self.schema, column_value_map, "CHG_AUTH_NUM")
        self.IS_DEFAULT = parse_value(self.schema, column_value_map, "IS_DEFAULT")
        self.SUBJECT_STATE = parse_value(self.schema, column_value_map, "SUBJECT_STATE")
        self.UCF_PLAN_SUBJECT_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UCF_PLAN_SUBJECT_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_SUBJECT_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_SUBJECT_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_SUBJECT_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_SUBJECT_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_SUBJECT_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_SUBJECT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PLAN_SUBJECT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PLAN_SUBJECT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PLAN_SUBJECT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PLAN_SUBJECT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PLAN_SUBJECT_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_SUBJECT_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_SUBJECT_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_SUBJECT_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_SUBJECT_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_SUBJECT_DATE5")
        "User-configurable field for DATE data type."
        self.SFOR_PLAN_SUBJOPER_PLANSUBJ_FK = []
        self.SFOR_PLAN_SUBJPART_PLANSUBJ_FK = []

class SFPL_ENG_BOM_REF_DES:
    schema = {
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "PARENT_PART_NO": "STRING",
        "PARENT_PART_CHG": "STRING",
        "REF_DES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "REF_DES_QTY": "NUMBER",
    }
    primary_key_columns = [
        "PART_NO",
        "PART_CHG",
        "PARENT_PART_NO",
        "PARENT_PART_CHG",
        "REF_DES",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_ENG_BOM_REF_BOM_FK", ["PART_NO","PART_CHG","PARENT_PART_NO","PARENT_PART_CHG"], "SFPL_ENG_BOM", ["PART_NO","PART_CHG","PARENT_PART_NO","PARENT_PART_CHG"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The engineering part number of a component part that is used to build the parent part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.PARENT_PART_NO = parse_value(self.schema, column_value_map, "PARENT_PART_NO")
        "The part number of the parent part."
        self.PARENT_PART_CHG = parse_value(self.schema, column_value_map, "PARENT_PART_CHG")
        "The change letter of the parent part."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "The identifier of the physical location/position on the parent part where the component part is to be installed."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.REF_DES_QTY = parse_value(self.schema, column_value_map, "REF_DES_QTY")
        "The quantity of component item/parts to be installed at the reference designator location."

class SFQA_DEFECT_TYPE_DEF:
    schema = {
        "PROCESS_TYPE": "STRING",
        "DEFECT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "DEFECT_DESC": "STRING",
        "UCF_DEFECT_TYPE_VCH1": "STRING",
        "UCF_DEFECT_TYPE_FLAG1": "STRING",
        "UCF_DEFECT_TYPE_FLAG2": "STRING",
        "APPROVED_FLAG": "STRING",
        "UCF_DEFECT_TYPE_VCH2": "STRING",
        "UCF_DEFECT_TYPE_VCH3": "STRING",
        "UCF_DEFECT_TYPE_VCH4": "STRING",
        "UCF_DEFECT_TYPE_VCH5": "STRING",
        "UCF_DEFECT_TYPE_VCH6": "STRING",
        "UCF_DEFECT_TYPE_VCH7": "STRING",
        "UCF_DEFECT_TYPE_VCH8": "STRING",
        "UCF_DEFECT_TYPE_VCH9": "STRING",
        "UCF_DEFECT_TYPE_VCH10": "STRING",
        "UCF_DEFECT_TYPE_VCH11": "STRING",
        "UCF_DEFECT_TYPE_VCH12": "STRING",
        "UCF_DEFECT_TYPE_VCH13": "STRING",
        "UCF_DEFECT_TYPE_VCH14": "STRING",
        "UCF_DEFECT_TYPE_VCH15": "STRING",
        "UCF_DEFECT_TYPE_NUM1": "NUMBER",
        "UCF_DEFECT_TYPE_NUM2": "NUMBER",
        "UCF_DEFECT_TYPE_NUM3": "NUMBER",
        "UCF_DEFECT_TYPE_NUM4": "NUMBER",
        "UCF_DEFECT_TYPE_NUM5": "NUMBER",
        "UCF_DEFECT_TYPE_DATE1": "STRING",
        "UCF_DEFECT_TYPE_DATE2": "STRING",
        "UCF_DEFECT_TYPE_DATE3": "STRING",
        "UCF_DEFECT_TYPE_DATE4": "STRING",
        "UCF_DEFECT_TYPE_DATE5": "STRING",
        "UCF_DEFECT_TYPE_FLAG3": "STRING",
        "UCF_DEFECT_TYPE_FLAG4": "STRING",
        "UCF_DEFECT_TYPE_FLAG5": "STRING",
        "UCF_DEFECT_TYPE_VCH255_1": "STRING",
        "UCF_DEFECT_TYPE_VCH255_2": "STRING",
        "UCF_DEFECT_TYPE_VCH255_3": "STRING",
        "UCF_DEFECT_TYPE_VCH4000_1": "STRING",
        "UCF_DEFECT_TYPE_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "PROCESS_TYPE",
        "DEFECT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DEFECT_PROCESS_FK", ["PROCESS_TYPE"], "SFFND_PROCESS_TYPE_DEF", ["PROCESS_TYPE"]),
    ]
    refs = [
        "SFQA_DISC_CAUSE_FK3",
        "SFQA_CA_CAUSE_FK1",
    ]
    def __init__(self, column_value_map):
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        "A particular class/type of manufacturing process."
        self.DEFECT_TYPE = parse_value(self.schema, column_value_map, "DEFECT_TYPE")
        "Type or classification of defect."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.DEFECT_DESC = parse_value(self.schema, column_value_map, "DEFECT_DESC")
        "A detail description of the part defect type."
        self.UCF_DEFECT_TYPE_VCH1 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_DEFECT_TYPE_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.APPROVED_FLAG = parse_value(self.schema, column_value_map, "APPROVED_FLAG")
        self.UCF_DEFECT_TYPE_VCH2 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_VCH3 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_VCH4 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_VCH5 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_VCH6 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_VCH7 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_VCH8 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_VCH9 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_VCH10 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_VCH11 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_VCH12 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_VCH13 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_VCH14 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_VCH15 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_DEFECT_TYPE_NUM1 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_DEFECT_TYPE_NUM2 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_DEFECT_TYPE_NUM3 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_DEFECT_TYPE_NUM4 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_DEFECT_TYPE_NUM5 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_DEFECT_TYPE_DATE1 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_DEFECT_TYPE_DATE2 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_DEFECT_TYPE_DATE3 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_DEFECT_TYPE_DATE4 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_DEFECT_TYPE_DATE5 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_DEFECT_TYPE_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DEFECT_TYPE_FLAG4 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DEFECT_TYPE_FLAG5 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DEFECT_TYPE_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_DEFECT_TYPE_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_DEFECT_TYPE_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_DEFECT_TYPE_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_DEFECT_TYPE_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_DEFECT_TYPE_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.SFQA_DISC_CAUSE_FK3 = []
        self.SFQA_CA_CAUSE_FK1 = []

class SFFND_RISK_SEVERITY_RAT_DEF:
    schema = {
        "RISK_SEVERITY_RAT_ID": "STRING",
        "RISK_SEVERITY_RAT_DESC": "STRING",
        "RISK_SEVERITY_RAT_SCORE": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "RISK_SEVERITY_RAT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_CA_REQUEST_FK6",
        "SFQA_CA_DESC_RISK_SEVERITY_FK",
    ]
    def __init__(self, column_value_map):
        self.RISK_SEVERITY_RAT_ID = parse_value(self.schema, column_value_map, "RISK_SEVERITY_RAT_ID")
        self.RISK_SEVERITY_RAT_DESC = parse_value(self.schema, column_value_map, "RISK_SEVERITY_RAT_DESC")
        self.RISK_SEVERITY_RAT_SCORE = parse_value(self.schema, column_value_map, "RISK_SEVERITY_RAT_SCORE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFQA_CA_REQUEST_FK6 = []
        self.SFQA_CA_DESC_RISK_SEVERITY_FK = []

class SFWID_PENDING_ORDERS:
    schema = {
        "ORDER_NO": "STRING",
        "ORDER_ID": "STRING",
        "ORDER_TYPE": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "PROGRAM": "STRING",
        "ORDER_STATUS": "STRING",
        "ORDER_HOLD_STATUS": "STRING",
        "ORDER_QTY": "NUMBER",
        "ORIG_ORDER_ID": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "ITEM_ID": "STRING",
        "NEEDS_REVIEW_FLAG": "STRING",
        "ORDER_SCRAP_QTY": "NUMBER",
        "ORDER_COMPLETE_QTY": "NUMBER",
        "ORDER_STOP_QTY": "NUMBER",
        "SPLIT_FLAG": "STRING",
        "UNSCRAP_FLAG": "STRING",
        "PARENT_ORDER_ID": "STRING",
        "SUPERCEDED_ORDER_ID": "STRING",
        "SUPERCEDES_ORDER": "STRING",
        "ORDER_CUST_ID": "STRING",
        "SCHED_PRIORITY": "STRING",
        "ALT_ID": "STRING",
        "ALT_STATUS": "STRING",
        "ASGND_WORK_LOC": "STRING",
        "UNIT_TYPE": "STRING",
        "UNIT_NO": "STRING",
        "ORDER_UOM": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "PROJECT": "STRING",
        "PLAN_TYPE": "STRING",
        "LTA_SEND_FLAG": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "SECURITY_GROUP": "STRING",
    }
    primary_key_columns = [
        "ORDER_NO",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        "Unique, user-assigned identifier of a given work order."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.ORDER_TYPE = parse_value(self.schema, column_value_map, "ORDER_TYPE")
        "Type or classification of order."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.ORDER_STATUS = parse_value(self.schema, column_value_map, "ORDER_STATUS")
        "The status of the work order, e.g., ACTIVE, COMPLETE, IN QUEUE, or CANCEL."
        self.ORDER_HOLD_STATUS = parse_value(self.schema, column_value_map, "ORDER_HOLD_STATUS")
        "The on-hold status of the work order, OPEN or CLOSED."
        self.ORDER_QTY = parse_value(self.schema, column_value_map, "ORDER_QTY")
        "The quantity of the part to be made for the given work order. Defaults to PLND_ORDER_QTY but can be changed."
        self.ORIG_ORDER_ID = parse_value(self.schema, column_value_map, "ORIG_ORDER_ID")
        "The identifier of the original work order, which is the initial work order created from work plan release. Used to track splits, rework/dispositions, and supercedes."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which the manufacturing work for the work order is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which the manufacturing work for the work order is scheduled to complete."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised work start date."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised work complete date."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which the work for the manufacturing work order has been started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which the manufacturing work order has been completed."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of the item/part to be made upon the work order."
        self.NEEDS_REVIEW_FLAG = parse_value(self.schema, column_value_map, "NEEDS_REVIEW_FLAG")
        "A flag (Y/N) that indicates whether the associated Corrective Action Diagram requires review."
        self.ORDER_SCRAP_QTY = parse_value(self.schema, column_value_map, "ORDER_SCRAP_QTY")
        "Number of items/component parts that have been scrapped during the process of fulfilling the work order."
        self.ORDER_COMPLETE_QTY = parse_value(self.schema, column_value_map, "ORDER_COMPLETE_QTY")
        "Number of items/component parts that have been completed during the process of fulfilling the given work order."
        self.ORDER_STOP_QTY = parse_value(self.schema, column_value_map, "ORDER_STOP_QTY")
        "Number of items/component parts that have been stopped during the process of fulfilling the given work order."
        self.SPLIT_FLAG = parse_value(self.schema, column_value_map, "SPLIT_FLAG")
        "A flag (Y/N) that indicates whether or not the work order is a split of another work order."
        self.UNSCRAP_FLAG = parse_value(self.schema, column_value_map, "UNSCRAP_FLAG")
        "A flag (Y/N) indicating whether the component/part should be or has been unscrapped."
        self.PARENT_ORDER_ID = parse_value(self.schema, column_value_map, "PARENT_ORDER_ID")
        "The identifier of the parent work order, used to track order splits, and rework/dispositions"
        self.SUPERCEDED_ORDER_ID = parse_value(self.schema, column_value_map, "SUPERCEDED_ORDER_ID")
        "The identifier of the work order superceded by this work order."
        self.SUPERCEDES_ORDER = parse_value(self.schema, column_value_map, "SUPERCEDES_ORDER")
        "The identifier of the work order that supercedes this work order."
        self.ORDER_CUST_ID = parse_value(self.schema, column_value_map, "ORDER_CUST_ID")
        "The customer receiving the completed work, defaulted to PLND_CUST_ID but can be changed."
        self.SCHED_PRIORITY = parse_value(self.schema, column_value_map, "SCHED_PRIORITY")
        "The scheduled priority of the associated work order, e.g., High, Low, Medium."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_STATUS = parse_value(self.schema, column_value_map, "ALT_STATUS")
        "The status of the last alteration on this work order. For example: ORDER_AUTHORING."
        self.ASGND_WORK_LOC = parse_value(self.schema, column_value_map, "ASGND_WORK_LOC")
        "The work location where the manufacturing work order is executed."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.UNIT_NO = parse_value(self.schema, column_value_map, "UNIT_NO")
        "The unit number of the shipping product (e.g. airplane tail #) the work order is related to."
        self.ORDER_UOM = parse_value(self.schema, column_value_map, "ORDER_UOM")
        "The Unit Of Measure associated with PLND_ORDER_QTY and ORDER_QTY."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.PLAN_TYPE = parse_value(self.schema, column_value_map, "PLAN_TYPE")
        "Type or classification of the associated work plan."
        self.LTA_SEND_FLAG = parse_value(self.schema, column_value_map, "LTA_SEND_FLAG")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")

class SFBIS_PLM_BOM_TYPE_DEF:
    schema = {
        "PLM_BOM_TYPE": "STRING",
        "PLM_BOM_SUBTYPE": "STRING",
        "SOLUMINA_BOM_TYPE": "STRING",
        "SOLUMINA_BOM_SUBTYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PLM_BOM_TYPE",
        "PLM_BOM_SUBTYPE",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLM_BOM_TYPE = parse_value(self.schema, column_value_map, "PLM_BOM_TYPE")
        "PlmBomType which comes from external ERP."
        self.PLM_BOM_SUBTYPE = parse_value(self.schema, column_value_map, "PLM_BOM_SUBTYPE")
        "PlmBomSubType which comes from external ERP - Possibally external System passes NULL, we shuld match such record with value N/A."
        self.SOLUMINA_BOM_TYPE = parse_value(self.schema, column_value_map, "SOLUMINA_BOM_TYPE")
        "Solumina bom type which refers bomType in solumina."
        self.SOLUMINA_BOM_SUBTYPE = parse_value(self.schema, column_value_map, "SOLUMINA_BOM_SUBTYPE")
        "Solumina bom Sub type which refers bomSubType in solumina."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_LICENSE_FAILURES:
    schema = {
        "USERID": "STRING",
        "LICENSE_TYPE": "STRING",
        "TIME_STAMP": "STRING",
        "IDENTITY_COL": "NUMBER",
    }
    primary_key_columns = [
        "IDENTITY_COL",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.LICENSE_TYPE = parse_value(self.schema, column_value_map, "LICENSE_TYPE")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.IDENTITY_COL = parse_value(self.schema, column_value_map, "IDENTITY_COL")

class SFFND_DATA_MIGRATION_LOG:
    schema = {
        "DMLOG_ID": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "USERID": "STRING",
        "DIRECTION": "STRING",
        "STATUS": "STRING",
        "FILE_NAME": "STRING",
        "LOG_TEXT": "STRING",
        "START_DATE": "STRING",
        "END_DATE": "STRING",
        "TABLE_NAME": "STRING",
        "REF1": "STRING",
        "REF2": "STRING",
        "REF3": "STRING",
        "REF4": "STRING",
        "REF5": "STRING",
    }
    primary_key_columns = [
        "DMLOG_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DMLOG_ID = parse_value(self.schema, column_value_map, "DMLOG_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.DIRECTION = parse_value(self.schema, column_value_map, "DIRECTION")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.FILE_NAME = parse_value(self.schema, column_value_map, "FILE_NAME")
        self.LOG_TEXT = parse_value(self.schema, column_value_map, "LOG_TEXT")
        self.START_DATE = parse_value(self.schema, column_value_map, "START_DATE")
        self.END_DATE = parse_value(self.schema, column_value_map, "END_DATE")
        self.TABLE_NAME = parse_value(self.schema, column_value_map, "TABLE_NAME")
        self.REF1 = parse_value(self.schema, column_value_map, "REF1")
        self.REF2 = parse_value(self.schema, column_value_map, "REF2")
        self.REF3 = parse_value(self.schema, column_value_map, "REF3")
        self.REF4 = parse_value(self.schema, column_value_map, "REF4")
        self.REF5 = parse_value(self.schema, column_value_map, "REF5")

class SFQA_RESP_RESOURCE_TYPE_DEF:
    schema = {
        "RESP_RESOURCE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "RESP_RESOURCE_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_DISC_CAUSE_FK1",
        "SFWID_HOLDS_RESOURCE_TYPE_FK2",
        "SFQA_CAUSE_TYPE_DEF_FK1",
        "SFQA_CA_CAUSE_FK2",
    ]
    def __init__(self, column_value_map):
        self.RESP_RESOURCE_TYPE = parse_value(self.schema, column_value_map, "RESP_RESOURCE_TYPE")
        "Responsible resource type. Possible values are Part, Tool, Machine, Facilities, Skill, Process, System, and Other."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFQA_DISC_CAUSE_FK1 = []
        self.SFWID_HOLDS_RESOURCE_TYPE_FK2 = []
        self.SFQA_CAUSE_TYPE_DEF_FK1 = []
        self.SFQA_CA_CAUSE_FK2 = []

class SFFND_CUST_ID_DEF:
    schema = {
        "CUST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "CUST_DESC": "STRING",
        "ADDRESS_LINE_1": "STRING",
        "ADDRESS_LINE_2": "STRING",
        "CITY": "STRING",
        "STATE": "STRING",
        "POSTAL_CODE": "STRING",
        "UCF_CUST_ID_DATE1": "STRING",
        "UCF_CUST_ID_DATE2": "STRING",
        "UCF_CUST_ID_NUM1": "NUMBER",
        "UCF_CUST_ID_NUM2": "NUMBER",
        "UCF_CUST_ID_NUM3": "NUMBER",
        "UCF_CUST_ID_FLAG1": "STRING",
        "UCF_CUST_ID_FLAG2": "STRING",
        "UCF_CUST_ID_FLAG3": "STRING",
        "UCF_CUST_ID_VCH1": "STRING",
        "UCF_CUST_ID_VCH2": "STRING",
        "UCF_CUST_ID_VCH3": "STRING",
        "UCF_CUST_ID_VCH4": "STRING",
        "UCF_CUST_ID_VCH5": "STRING",
        "UCF_CUST_ID_VCH255_1": "STRING",
        "UCF_CUST_ID_VCH255_2": "STRING",
        "COUNTRY_CODE": "STRING",
    }
    primary_key_columns = [
        "CUST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_CUST_ID_DEF_FK", ["COUNTRY_CODE"], "SFFND_COUNTRY_CODE_DEF", ["COUNTRY_CODE"]),
    ]
    refs = [
        "SFPL_PLAN_DESC_CUST_FK",
        "SFWID_ORDER_DESC_CUST_FK",
        "SFQA_DISC_ITEM_CUST_FK",
        "SFFND_SHIP_TO_ID_DEF_FK1",
        "SFQA_CA_AFFECTED_CUSTOMERS_FK2",
        "SFFND_CUST_LOGO_XREF_FK1",
        "SFQA_CA_REQ_AFFECTED_CUST_FK1",
    ]
    def __init__(self, column_value_map):
        self.CUST_ID = parse_value(self.schema, column_value_map, "CUST_ID")
        "Unique identifier of a specific customer."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.CUST_DESC = parse_value(self.schema, column_value_map, "CUST_DESC")
        "A descriptive name or detail description of the customer."
        self.ADDRESS_LINE_1 = parse_value(self.schema, column_value_map, "ADDRESS_LINE_1")
        "Street address Line 1. (Includes house number and street or PO delivery)."
        self.ADDRESS_LINE_2 = parse_value(self.schema, column_value_map, "ADDRESS_LINE_2")
        "Street address Line 2."
        self.CITY = parse_value(self.schema, column_value_map, "CITY")
        "Name of the City for postal delivery or shipping address."
        self.STATE = parse_value(self.schema, column_value_map, "STATE")
        "Name of the state or region for shipping or postal delivery (state code in US, Canada, Australia; region or not used in Europe)."
        self.POSTAL_CODE = parse_value(self.schema, column_value_map, "POSTAL_CODE")
        "Postal code (Zip code) for the Customer address."
        self.UCF_CUST_ID_DATE1 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CUST_ID_DATE2 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CUST_ID_NUM1 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CUST_ID_NUM2 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_CUST_ID_NUM3 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CUST_ID_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CUST_ID_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CUST_ID_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CUST_ID_VCH1 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CUST_ID_VCH2 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CUST_ID_VCH3 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CUST_ID_VCH4 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CUST_ID_VCH5 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CUST_ID_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CUST_ID_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CUST_ID_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.COUNTRY_CODE = parse_value(self.schema, column_value_map, "COUNTRY_CODE")
        "ISO 3166 Alpha-3 code for Country - look up from SFFND_COUNTRY_CODE_DEF."
        self.SFPL_PLAN_DESC_CUST_FK = []
        self.SFWID_ORDER_DESC_CUST_FK = []
        self.SFQA_DISC_ITEM_CUST_FK = []
        self.SFFND_SHIP_TO_ID_DEF_FK1 = []
        self.SFQA_CA_AFFECTED_CUSTOMERS_FK2 = []
        self.SFFND_CUST_LOGO_XREF_FK1 = []
        self.SFQA_CA_REQ_AFFECTED_CUST_FK1 = []

class SFWID_ORDER_ITEM_ALT_XREF:
    schema = {
        "ORDER_ITEM_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "REF_DES": "STRING",
        "ASGND_ITEM_ID": "STRING",
        "PLND_ITEM_ID": "STRING",
        "FIND_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH1": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH2": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH3": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH4": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH5": "STRING",
        "UCF_ORDER_ITEM_ALT_NUM1": "NUMBER",
        "UCF_ORDER_ITEM_ALT_NUM2": "NUMBER",
        "UCF_ORDER_ITEM_ALT_FLAG1": "STRING",
        "UCF_ORDER_ITEM_ALT_FLAG2": "STRING",
        "UCF_ORDER_ITEM_ALT_DATE1": "STRING",
        "UCF_ORDER_ITEM_ALT_DATE2": "STRING",
        "ASSIGNED_ITEM_FLAG": "STRING",
        "PART_DAT_COL_ID": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH6": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH7": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH8": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH9": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH10": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH11": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH12": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH13": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH14": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH15": "STRING",
        "UCF_ORDER_ITEM_ALT_NUM3": "NUMBER",
        "UCF_ORDER_ITEM_ALT_NUM4": "NUMBER",
        "UCF_ORDER_ITEM_ALT_NUM5": "NUMBER",
        "UCF_ORDER_ITEM_ALT_DATE3": "STRING",
        "UCF_ORDER_ITEM_ALT_DATE4": "STRING",
        "UCF_ORDER_ITEM_ALT_DATE5": "STRING",
        "UCF_ORDER_ITEM_ALT_FLAG3": "STRING",
        "UCF_ORDER_ITEM_ALT_FLAG4": "STRING",
        "UCF_ORDER_ITEM_ALT_FLAG5": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH255_1": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH255_2": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH255_3": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH4000_1": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH4000_2": "STRING",
        "ALT_GROUP": "STRING",
        "PRIORITY": "NUMBER",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "BOM_COMP_ID": "STRING",
    }
    primary_key_columns = [
        "ORDER_ITEM_ALT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDITEMALT_ORDER_FK", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDITEMALT_AITEM_FK", ["ASGND_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFWID_ORDITEMALT_PITEM_FK", ["PLND_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFWID_ORDITEMALT_XREF_UNIT_FK", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFWID_ORDITEMALT_OPER_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ITEM_ALT_ID = parse_value(self.schema, column_value_map, "ORDER_ITEM_ALT_ID")
        "Unique system generated part identiifer that has been used as an alternate."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.ASGND_ITEM_ID = parse_value(self.schema, column_value_map, "ASGND_ITEM_ID")
        "Unique, system-generated ID of the given serialized component/part as used in the operation."
        self.PLND_ITEM_ID = parse_value(self.schema, column_value_map, "PLND_ITEM_ID")
        "Unique, system-generated ID of the given component/part."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_ORDER_ITEM_ALT_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH3")
        self.UCF_ORDER_ITEM_ALT_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH5")
        self.UCF_ORDER_ITEM_ALT_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_ITEM_ALT_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_ITEM_ALT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_ITEM_ALT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_ITEM_ALT_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_ITEM_ALT_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_DATE2")
        "User-configurable field for DATE data type."
        self.ASSIGNED_ITEM_FLAG = parse_value(self.schema, column_value_map, "ASSIGNED_ITEM_FLAG")
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.UCF_ORDER_ITEM_ALT_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_ITEM_ALT_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_ITEM_ALT_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_ITEM_ALT_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_ITEM_ALT_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_ITEM_ALT_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_ITEM_ALT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_ITEM_ALT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_ITEM_ALT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_ITEM_ALT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_ITEM_ALT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_ITEM_ALT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_ITEM_ALT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ORDER_ITEM_ALT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.ALT_GROUP = parse_value(self.schema, column_value_map, "ALT_GROUP")
        "It indicates Group Name of Component in BOM."
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        "The priority of the task."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "The upper bound of the effectivity range for effectivity type other than time period."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "The lower bound of the effectivity range for effectivity type other than time period."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "The starting date of the time period for a time period effectivity."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "The ending date of the time period for a time period effectivity."
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        "It indicates bom component Id for the BOM alternates."

class SFSQA_INSP_ORD_STEP_INCL_CTRL:
    schema = {
        "SUPPLIER_ID": "STRING",
        "INSP_PLAN_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "CYCLE_FREQUENCY": "NUMBER",
        "INSP_ORDER_COUNT": "NUMBER",
        "IS_INCLUDED": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "SUPPLIER_ID",
        "INSP_PLAN_ID",
        "INSP_STEP_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_ORD_STEP_INCL_FK2", ["INSP_STEP_ID"], "SFSQA_INSP_STEP_DEF", ["INSP_STEP_ID"]),
        DbForeignKey("SFSQA_INSP_ORD_STEP_INCL_FK1", ["ITEM_ID","SUPPLIER_ID"], "SFSQA_ITEM_OWNER", ["ITEM_ID","OWNER_CODE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SUPPLIER_ID = parse_value(self.schema, column_value_map, "SUPPLIER_ID")
        "The unique identifier of supplier."
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        "The unique identifier of an inspection plan."
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        "The identifier of an inspection step."
        self.CYCLE_FREQUENCY = parse_value(self.schema, column_value_map, "CYCLE_FREQUENCY")
        "Current cycle frequency for randomization."
        self.INSP_ORDER_COUNT = parse_value(self.schema, column_value_map, "INSP_ORDER_COUNT")
        "Inspection order counter for randomization."
        self.IS_INCLUDED = parse_value(self.schema, column_value_map, "IS_INCLUDED")
        "Flag to indicate if inspection step is already included or not."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of an item/part."

class SFQA_CA_CODE_XREF:
    schema = {
        "CA_ID": "STRING",
        "CA_CODE_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "CA_CODE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_CODE_XREF_FK2", ["CA_CODE_ID"], "SFQA_CA_CODE_DEF", ["CA_CODE_ID"]),
        DbForeignKey("SFQA_CA_CODE_XREF_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.CA_CODE_ID = parse_value(self.schema, column_value_map, "CA_CODE_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFFND_INSP_PLAN_TASK:
    schema = {
        "TASK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "INSP_PLAN_ID": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "TASK_ID",
        "INSP_PLAN_ID",
        "INSP_PLAN_REV",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_INSP_PLAN_TASK_FK2", ["TASK_ID"], "SFFND_TASK", ["TASK_ID"]),
        DbForeignKey("SFFND_INSP_PLAN_TASK_FK1", ["INSP_PLAN_ID","INSP_PLAN_REV"], "SFSQA_INSP_PLAN_DESC", ["INSP_PLAN_ID","INSP_PLAN_REV"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TASK_ID = parse_value(self.schema, column_value_map, "TASK_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFSQA_INSP_ORDER_SEC_GRP:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "SECURITY_GROUP": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "SECURITY_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_ORDER_SEC_GRP_FK1", ["INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_SEC_GRP_FK2", ["SECURITY_GROUP"], "SFFND_SECURITY_GROUP_DEF", ["SECURITY_GROUP"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        "The unique identifier of an inspection order."
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        "The unique identifier of a security group."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_CFG_LIB_HIST:
    schema = {
        "HIST_ID": "STRING",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CFG_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "STYPE": "STRING",
        "DESCRIPTION": "STRING",
        "CFG_TEXT": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.CFG_ID = parse_value(self.schema, column_value_map, "CFG_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.CFG_TEXT = parse_value(self.schema, column_value_map, "CFG_TEXT")

class SFQA_DISC_ITEM_MM_OBJECTS:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH1": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH2": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH3": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH4": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH5": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_NUM1": "NUMBER",
        "UCF_DISC_ITEM_MM_OBJ_NUM2": "NUMBER",
        "UCF_DISC_ITEM_MM_OBJ_NUM3": "NUMBER",
        "UCF_DISC_ITEM_MM_OBJ_DATE1": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_DATE2": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_FLAG1": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_FLAG2": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_FLAG3": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH255_1": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH255_2": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "RTF_LINK_ID": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "OBJECT_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_ITEM_MM_OBJECTS_FK1", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_MM_OBJECTS_FK2", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "Identifier of the discrepancy, including line number."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "Identifier of the discrepancy, including line number."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_DISC_ITEM_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_DISC_ITEM_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_DISC_ITEM_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_DISC_ITEM_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_DISC_ITEM_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_DISC_ITEM_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_ITEM_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_ITEM_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_ITEM_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_DISC_ITEM_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."

class SFWID_USER_GROUP_JOB_CHG_ACK:
    schema = {
        "GROUP_JOB_NO": "STRING",
        "USERID": "STRING",
        "NOTES": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "WARNING_READ_FLAG": "STRING",
        "PLAN_REVISION": "NUMBER",
        "ACKNOWLEDGE_REQ": "STRING",
        "PLAN_ALTERATIONS": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "USERID",
        "PLAN_ID",
        "PLAN_VERSION",
        "PLAN_REVISION",
        "PLAN_ALTERATIONS",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_USER_GRP_JOB_CHG_ACK_FK2", ["GROUP_JOB_NO"], "SFWID_GROUP_JOB", ["GROUP_JOB_NO"]),
        DbForeignKey("SFWID_USER_GRP_JOB_CHG_ACK_FK3", ["USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFWID_USER_GRP_JOB_CHG_ACK_FK1", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.GROUP_JOB_NO = parse_value(self.schema, column_value_map, "GROUP_JOB_NO")
        "Group Job No created on standard operation."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "User performing the Instruction Read Acknowledgement."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "User operation change acknowledgement notes."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier Stoper Plan Id."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "Std Oper Plan Version."
        self.WARNING_READ_FLAG = parse_value(self.schema, column_value_map, "WARNING_READ_FLAG")
        "Y/N, Y Indicates Instruction changes are read by the user otherwise N."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "Std Oper Plan Revision."
        self.ACKNOWLEDGE_REQ = parse_value(self.schema, column_value_map, "ACKNOWLEDGE_REQ")
        "Y/N, Y Indicates Instructions read acknowledgment required otherwise N."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Std Oper Plan Alterations."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_MFG_BOM_CONFIG_TRANSFORM:
    schema = {
        "CONFIG_TRANSFORMATION_ID": "STRING",
        "BOM_ID": "STRING",
        "IMPORTED_BOM_COMP_ID": "STRING",
        "TRANSFORMED_BOM_COMP_ID": "STRING",
        "IMPORTED_CONFIG_ID": "STRING",
        "TRANSFORMATION_STATUS": "STRING",
        "TRANSFORMED_CONFIG_ID": "STRING",
        "NOTES": "STRING",
        "TRANSFORMED_ON": "STRING",
        "TRANSFORMED_BY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CONFIG_TRANSFORMATION_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_CONFIG_TRANS_FK1", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_CONFIG_TRANS_FK3", ["TRANSFORMED_CONFIG_ID"], "SFFND_CONFIG_DEF", ["CONFIG_ID"]),
        DbForeignKey("SFPL_MFG_BOM_CONFIG_TRANS_FK2", ["IMPORTED_CONFIG_ID"], "SFFND_CONFIG_DEF", ["CONFIG_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONFIG_TRANSFORMATION_ID = parse_value(self.schema, column_value_map, "CONFIG_TRANSFORMATION_ID")
        "Unique system generated id for Configuration transformation."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "BOM_ID for which transformation is made."
        self.IMPORTED_BOM_COMP_ID = parse_value(self.schema, column_value_map, "IMPORTED_BOM_COMP_ID")
        "BOM_COMP_ID of Imported record. NULL in case of Transformation option ADD."
        self.TRANSFORMED_BOM_COMP_ID = parse_value(self.schema, column_value_map, "TRANSFORMED_BOM_COMP_ID")
        "BOM_COMP_ID of Transformed record. NULL in case of Transformation option DELETE."
        self.IMPORTED_CONFIG_ID = parse_value(self.schema, column_value_map, "IMPORTED_CONFIG_ID")
        "Configuration ID of Imported record."
        self.TRANSFORMATION_STATUS = parse_value(self.schema, column_value_map, "TRANSFORMATION_STATUS")
        "Transformation Status APPROVED or UNAPPROVED."
        self.TRANSFORMED_CONFIG_ID = parse_value(self.schema, column_value_map, "TRANSFORMED_CONFIG_ID")
        "Configuration ID of Transformed record."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Notes provided during transformation."
        self.TRANSFORMED_ON = parse_value(self.schema, column_value_map, "TRANSFORMED_ON")
        "The date and time the record was last transformed."
        self.TRANSFORMED_BY = parse_value(self.schema, column_value_map, "TRANSFORMED_BY")
        "Last user who transformed the record."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_ORDER_NOTES_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "NOTE_ID": "STRING",
        "NOTE_TYPE": "STRING",
        "NOTE_TEXT": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_ORDER_NOTE_VCH1": "STRING",
        "UCF_ORDER_NOTE_VCH2": "STRING",
        "UCF_ORDER_NOTE_VCH3": "STRING",
        "UCF_ORDER_NOTE_VCH4": "STRING",
        "UCF_ORDER_NOTE_VCH5": "STRING",
        "UCF_ORDER_NOTE_FLAG1": "STRING",
        "UCF_ORDER_NOTE_FLAG2": "STRING",
        "UCF_ORDER_NOTE_NUM1": "NUMBER",
        "UCF_ORDER_NOTE_NUM2": "NUMBER",
        "UCF_ORDER_NOTE_DATE1": "STRING",
        "NOTE_TITLE": "STRING",
        "NOTE_NO": "STRING",
        "NOTE_STATUS": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "OBJECT_ID": "STRING",
        "OBJECT_REFERENCE": "STRING",
        "UCF_ORDER_NOTE_VCH6": "STRING",
        "UCF_ORDER_NOTE_VCH7": "STRING",
        "UCF_ORDER_NOTE_VCH8": "STRING",
        "UCF_ORDER_NOTE_VCH9": "STRING",
        "UCF_ORDER_NOTE_VCH10": "STRING",
        "UCF_ORDER_NOTE_VCH11": "STRING",
        "UCF_ORDER_NOTE_VCH12": "STRING",
        "UCF_ORDER_NOTE_VCH13": "STRING",
        "UCF_ORDER_NOTE_VCH14": "STRING",
        "UCF_ORDER_NOTE_VCH15": "STRING",
        "UCF_ORDER_NOTE_NUM3": "NUMBER",
        "UCF_ORDER_NOTE_NUM4": "NUMBER",
        "UCF_ORDER_NOTE_NUM5": "NUMBER",
        "UCF_ORDER_NOTE_DATE2": "STRING",
        "UCF_ORDER_NOTE_DATE3": "STRING",
        "UCF_ORDER_NOTE_DATE4": "STRING",
        "UCF_ORDER_NOTE_DATE5": "STRING",
        "UCF_ORDER_NOTE_FLAG3": "STRING",
        "UCF_ORDER_NOTE_FLAG4": "STRING",
        "UCF_ORDER_NOTE_FLAG5": "STRING",
        "UCF_ORDER_NOTE_VCH255_1": "STRING",
        "UCF_ORDER_NOTE_VCH255_2": "STRING",
        "UCF_ORDER_NOTE_VCH255_3": "STRING",
        "UCF_ORDER_NOTE_VCH4000_1": "STRING",
        "UCF_ORDER_NOTE_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.NOTE_ID = parse_value(self.schema, column_value_map, "NOTE_ID")
        self.NOTE_TYPE = parse_value(self.schema, column_value_map, "NOTE_TYPE")
        self.NOTE_TEXT = parse_value(self.schema, column_value_map, "NOTE_TEXT")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_ORDER_NOTE_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_NOTE_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_NOTE_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NOTE_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NOTE_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_DATE1")
        "User-configurable field for DATE data type."
        self.NOTE_TITLE = parse_value(self.schema, column_value_map, "NOTE_TITLE")
        self.NOTE_NO = parse_value(self.schema, column_value_map, "NOTE_NO")
        self.NOTE_STATUS = parse_value(self.schema, column_value_map, "NOTE_STATUS")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.OBJECT_REFERENCE = parse_value(self.schema, column_value_map, "OBJECT_REFERENCE")
        self.UCF_ORDER_NOTE_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NOTE_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NOTE_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NOTE_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_NOTE_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_NOTE_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_NOTE_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_NOTE_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_NOTE_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_NOTE_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_NOTE_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_NOTE_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_NOTE_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_NOTE_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ORDER_NOTE_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."

class SFFND_LABOR_ACTIVITY_DEF:
    schema = {
        "ACTIVITY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "ACTIVITY_DESC": "STRING",
    }
    primary_key_columns = [
        "ACTIVITY",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_PROJACT_XREF_ACT_FK",
        "SFFND_USER_ACT_ACT_FK",
    ]
    def __init__(self, column_value_map):
        self.ACTIVITY = parse_value(self.schema, column_value_map, "ACTIVITY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.ACTIVITY_DESC = parse_value(self.schema, column_value_map, "ACTIVITY_DESC")
        self.SFFND_PROJACT_XREF_ACT_FK = []
        self.SFFND_USER_ACT_ACT_FK = []

class SFCORE_RAW_GUI_EVENT_DATA:
    schema = {
        "CONNECTION_ID": "STRING",
        "IP_ADDRESS": "STRING",
        "GUIEVENT_DATA": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "PROCESS_FLAG": "STRING",
        "IDENTITY_COL": "NUMBER",
    }
    primary_key_columns = [
        "IDENTITY_COL",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONNECTION_ID = parse_value(self.schema, column_value_map, "CONNECTION_ID")
        self.IP_ADDRESS = parse_value(self.schema, column_value_map, "IP_ADDRESS")
        self.GUIEVENT_DATA = parse_value(self.schema, column_value_map, "GUIEVENT_DATA")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.PROCESS_FLAG = parse_value(self.schema, column_value_map, "PROCESS_FLAG")
        self.IDENTITY_COL = parse_value(self.schema, column_value_map, "IDENTITY_COL")

class SFFND_TOOL_SERIAL_DEF:
    schema = {
        "TOOL_SERIAL_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "LAST_CALIB_DATE": "STRING",
        "CUMLATV_USE_CTR": "NUMBER",
        "CUMLATV_HOURS_CTR": "NUMBER",
        "STATUS": "STRING",
        "EXPIRATION_DATE": "STRING",
        "MAX_NUMBER_OF_USES": "NUMBER",
        "MAX_NUMBER_OF_HOURS": "NUMBER",
        "MANUFACTURER_CODE": "STRING",
        "CALIB_PROC": "STRING",
        "CERTIFICATE_NO": "STRING",
        "OUT_OF_SERVICE_DATE": "STRING",
        "MISSING_DATE": "STRING",
        "TO_REPAIR_DATE": "STRING",
        "EST_INSERVICE_DATE": "STRING",
        "COMMENTS": "STRING",
        "MAX_NUMBER_OF_DAYS": "NUMBER",
        "UCF_TOOLSRL_VCH1": "STRING",
        "UCF_TOOLSRL_VCH2": "STRING",
        "UCF_TOOLSRL_VCH3": "STRING",
        "UCF_TOOLSRL_VCH4": "STRING",
        "UCF_TOOLSRL_VCH5": "STRING",
        "UCF_TOOLSRL_VCH6": "STRING",
        "UCF_TOOLSRL_VCH7": "STRING",
        "UCF_TOOLSRL_VCH8": "STRING",
        "UCF_TOOLSRL_VCH9": "STRING",
        "UCF_TOOLSRL_VCH10": "STRING",
        "UCF_TOOLSRL_VCH11": "STRING",
        "UCF_TOOLSRL_VCH12": "STRING",
        "UCF_TOOLSRL_VCH13": "STRING",
        "UCF_TOOLSRL_VCH14": "STRING",
        "UCF_TOOLSRL_VCH15": "STRING",
        "UCF_TOOLSRL_NUM1": "NUMBER",
        "UCF_TOOLSRL_NUM2": "NUMBER",
        "UCF_TOOLSRL_NUM3": "NUMBER",
        "UCF_TOOLSRL_NUM4": "NUMBER",
        "UCF_TOOLSRL_NUM5": "NUMBER",
        "UCF_TOOLSRL_DATE1": "STRING",
        "UCF_TOOLSRL_DATE2": "STRING",
        "UCF_TOOLSRL_DATE3": "STRING",
        "UCF_TOOLSRL_DATE4": "STRING",
        "UCF_TOOLSRL_DATE5": "STRING",
        "UCF_TOOLSRL_FLAG1": "STRING",
        "UCF_TOOLSRL_FLAG2": "STRING",
        "UCF_TOOLSRL_FLAG3": "STRING",
        "UCF_TOOLSRL_FLAG4": "STRING",
        "UCF_TOOLSRL_FLAG5": "STRING",
        "TOOL_SERIAL_CALIBRATE_DAYS": "STRING",
        "TOOL_SERIAL_CALIBRATE_HOURS": "STRING",
        "TOOL_SERIAL_CALIBRATE_USES": "STRING",
        "TOOL_SERIAL_CALIB_DAYS_FREQ": "NUMBER",
        "TOOL_SERIAL_CALIB_HOURS_FREQ": "NUMBER",
        "TOOL_SERIAL_CALIB_USES_FREQ": "NUMBER",
        "TOTAL_HOURS": "NUMBER",
        "TOTAL_USES": "NUMBER",
        "IP_ADDRESS": "STRING",
        "ISSUED_TO_LOCATION_ID": "STRING",
        "ISSUED_TO_DEPARTMENT_ID": "STRING",
        "ISSUED_TO_CENTER_ID": "STRING",
        "CALIB_LOCATION_ID": "STRING",
        "CALIB_DEPARTMENT_ID": "STRING",
        "CALIB_CENTER_ID": "STRING",
        "HOME_LOCATION_ID": "STRING",
        "HOME_DEPARTMENT_ID": "STRING",
        "HOME_CENTER_ID": "STRING",
        "UCF_TOOLSRL_VCH255_1": "STRING",
        "UCF_TOOLSRL_VCH255_2": "STRING",
        "UCF_TOOLSRL_VCH255_3": "STRING",
        "UCF_TOOLSRL_VCH4000_1": "STRING",
        "UCF_TOOLSRL_VCH4000_2": "STRING",
        "USERID": "STRING",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
    }
    primary_key_columns = [
        "TOOL_NO",
        "TOOL_CHG",
        "TOOL_SERIAL_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_TL_SRL_HOME_DEPT_FK", ["HOME_LOCATION_ID","HOME_DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFFND_TL_SRL_HOME_LOC_FK", ["HOME_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFFND_TL_SRL_CALIB_DEPT_FK", ["CALIB_LOCATION_ID","CALIB_DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFFND_TL_SRL_CALIB_LOC_FK", ["CALIB_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFFND_TL_SRL_HOME_CENTER_FK", ["HOME_LOCATION_ID","HOME_DEPARTMENT_ID","HOME_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFFND_TL_SRL_CALIB_CENTER_FK", ["CALIB_LOCATION_ID","CALIB_DEPARTMENT_ID","CALIB_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFFND_TOOLSERIALS_TOOL_FK", ["TOOL_NO","TOOL_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
        DbForeignKey("SFFND_TL_SRL_ISSUED_LOC_FK", ["ISSUED_TO_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFFND_TL_SRL_ISSUED_CENTER_FK", ["ISSUED_TO_LOCATION_ID","ISSUED_TO_DEPARTMENT_ID","ISSUED_TO_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFFND_TL_SRL_ISSUED_DEPT_FK", ["ISSUED_TO_LOCATION_ID","ISSUED_TO_DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFFND_TOOL_SERIAL_DEF_FK1", ["USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
        "SFWID_OPER_TOOL_FK01",
        "SFFND_TOOL_SERIAL_DEF_XREF_FK2",
        "SFWID_OPER_TOOL_ALT_FK4",
        "SFQA_CA_REQ_AFFECTED_MACH_FK2",
        "SFQA_CA_AFFECTED_MACHINES_FK2",
    ]
    def __init__(self, column_value_map):
        self.TOOL_SERIAL_NO = parse_value(self.schema, column_value_map, "TOOL_SERIAL_NO")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.LAST_CALIB_DATE = parse_value(self.schema, column_value_map, "LAST_CALIB_DATE")
        self.CUMLATV_USE_CTR = parse_value(self.schema, column_value_map, "CUMLATV_USE_CTR")
        self.CUMLATV_HOURS_CTR = parse_value(self.schema, column_value_map, "CUMLATV_HOURS_CTR")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The status of the disposition/rework task. For example: IN PROCESS, DISPOSITIONED, or COMPLETE."
        self.EXPIRATION_DATE = parse_value(self.schema, column_value_map, "EXPIRATION_DATE")
        self.MAX_NUMBER_OF_USES = parse_value(self.schema, column_value_map, "MAX_NUMBER_OF_USES")
        self.MAX_NUMBER_OF_HOURS = parse_value(self.schema, column_value_map, "MAX_NUMBER_OF_HOURS")
        self.MANUFACTURER_CODE = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE")
        self.CALIB_PROC = parse_value(self.schema, column_value_map, "CALIB_PROC")
        self.CERTIFICATE_NO = parse_value(self.schema, column_value_map, "CERTIFICATE_NO")
        self.OUT_OF_SERVICE_DATE = parse_value(self.schema, column_value_map, "OUT_OF_SERVICE_DATE")
        self.MISSING_DATE = parse_value(self.schema, column_value_map, "MISSING_DATE")
        self.TO_REPAIR_DATE = parse_value(self.schema, column_value_map, "TO_REPAIR_DATE")
        self.EST_INSERVICE_DATE = parse_value(self.schema, column_value_map, "EST_INSERVICE_DATE")
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Comments about loading of the current product version."
        self.MAX_NUMBER_OF_DAYS = parse_value(self.schema, column_value_map, "MAX_NUMBER_OF_DAYS")
        self.UCF_TOOLSRL_VCH1 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH1")
        self.UCF_TOOLSRL_VCH2 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH2")
        self.UCF_TOOLSRL_VCH3 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH3")
        self.UCF_TOOLSRL_VCH4 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH4")
        self.UCF_TOOLSRL_VCH5 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH5")
        self.UCF_TOOLSRL_VCH6 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH6")
        self.UCF_TOOLSRL_VCH7 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH7")
        self.UCF_TOOLSRL_VCH8 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH8")
        self.UCF_TOOLSRL_VCH9 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH9")
        self.UCF_TOOLSRL_VCH10 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH10")
        self.UCF_TOOLSRL_VCH11 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH11")
        self.UCF_TOOLSRL_VCH12 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH12")
        self.UCF_TOOLSRL_VCH13 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH13")
        self.UCF_TOOLSRL_VCH14 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH14")
        self.UCF_TOOLSRL_VCH15 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH15")
        self.UCF_TOOLSRL_NUM1 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_NUM1")
        self.UCF_TOOLSRL_NUM2 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_NUM2")
        self.UCF_TOOLSRL_NUM3 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_NUM3")
        self.UCF_TOOLSRL_NUM4 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_NUM4")
        self.UCF_TOOLSRL_NUM5 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_NUM5")
        self.UCF_TOOLSRL_DATE1 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_DATE1")
        self.UCF_TOOLSRL_DATE2 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_DATE2")
        self.UCF_TOOLSRL_DATE3 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_DATE3")
        self.UCF_TOOLSRL_DATE4 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_DATE4")
        self.UCF_TOOLSRL_DATE5 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_DATE5")
        self.UCF_TOOLSRL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_FLAG1")
        self.UCF_TOOLSRL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_FLAG2")
        self.UCF_TOOLSRL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_FLAG3")
        self.UCF_TOOLSRL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_FLAG4")
        self.UCF_TOOLSRL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_FLAG5")
        self.TOOL_SERIAL_CALIBRATE_DAYS = parse_value(self.schema, column_value_map, "TOOL_SERIAL_CALIBRATE_DAYS")
        self.TOOL_SERIAL_CALIBRATE_HOURS = parse_value(self.schema, column_value_map, "TOOL_SERIAL_CALIBRATE_HOURS")
        self.TOOL_SERIAL_CALIBRATE_USES = parse_value(self.schema, column_value_map, "TOOL_SERIAL_CALIBRATE_USES")
        self.TOOL_SERIAL_CALIB_DAYS_FREQ = parse_value(self.schema, column_value_map, "TOOL_SERIAL_CALIB_DAYS_FREQ")
        self.TOOL_SERIAL_CALIB_HOURS_FREQ = parse_value(self.schema, column_value_map, "TOOL_SERIAL_CALIB_HOURS_FREQ")
        self.TOOL_SERIAL_CALIB_USES_FREQ = parse_value(self.schema, column_value_map, "TOOL_SERIAL_CALIB_USES_FREQ")
        self.TOTAL_HOURS = parse_value(self.schema, column_value_map, "TOTAL_HOURS")
        "Total number of hours the machine is used for. Incremented when calibration is HOURS."
        self.TOTAL_USES = parse_value(self.schema, column_value_map, "TOTAL_USES")
        "Total number of uses for the machine. Incremented when calibration is USES."
        self.IP_ADDRESS = parse_value(self.schema, column_value_map, "IP_ADDRESS")
        "IP address from which the user is logging in."
        self.ISSUED_TO_LOCATION_ID = parse_value(self.schema, column_value_map, "ISSUED_TO_LOCATION_ID")
        self.ISSUED_TO_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "ISSUED_TO_DEPARTMENT_ID")
        self.ISSUED_TO_CENTER_ID = parse_value(self.schema, column_value_map, "ISSUED_TO_CENTER_ID")
        self.CALIB_LOCATION_ID = parse_value(self.schema, column_value_map, "CALIB_LOCATION_ID")
        self.CALIB_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "CALIB_DEPARTMENT_ID")
        self.CALIB_CENTER_ID = parse_value(self.schema, column_value_map, "CALIB_CENTER_ID")
        self.HOME_LOCATION_ID = parse_value(self.schema, column_value_map, "HOME_LOCATION_ID")
        self.HOME_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "HOME_DEPARTMENT_ID")
        self.HOME_CENTER_ID = parse_value(self.schema, column_value_map, "HOME_CENTER_ID")
        self.UCF_TOOLSRL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_TOOLSRL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_TOOLSRL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_TOOLSRL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_TOOLSRL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_TOOLSRL_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The change number, secondary identifier, of the tool."
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.SFWID_OPER_TOOL_FK01 = []
        self.SFFND_TOOL_SERIAL_DEF_XREF_FK2 = []
        self.SFWID_OPER_TOOL_ALT_FK4 = []
        self.SFQA_CA_REQ_AFFECTED_MACH_FK2 = []
        self.SFQA_CA_AFFECTED_MACHINES_FK2 = []

class SFSQA_OVERIDE_RESULTS_TRACKER:
    schema = {
        "TRACKER_ID": "STRING",
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "ITEM_ID": "STRING",
        "INSP_ITEM_ID": "STRING",
        "INSP_ITEM_COUNT": "NUMBER",
        "SLOT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UNIT_ID": "STRING",
        "SAMPLE_NO": "NUMBER",
        "OCCURANCE_NO": "NUMBER",
        "OLD_CDC_VALUE": "STRING",
        "OLD_CDC_TEXT_VALUE": "STRING",
        "NOTES": "STRING",
        "CERT_STAMP_NO": "STRING",
    }
    primary_key_columns = [
        "TRACKER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_OVERIDE_RES_TRACKER_FK2", ["INSP_ORDER_ID","INSP_STEP_ID","ITEM_ID","INSP_ITEM_ID","INSP_ITEM_COUNT","SLOT_ID"], "SFSQA_INSP_ORDER_ISII_DC_DATA", ["INSP_ORDER_ID","INSP_STEP_ID","ITEM_ID","INSP_ITEM_ID","INSP_ITEM_COUNT","SLOT_ID"]),
        DbForeignKey("SFSQA_OVERIDE_RES_TRACKER_FK1", ["INSP_ORDER_ID","ITEM_ID","UNIT_ID"], "SFSQA_INSP_ORDER_UNITS", ["INSP_ORDER_ID","ITEM_ID","UNIT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TRACKER_ID = parse_value(self.schema, column_value_map, "TRACKER_ID")
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.INSP_ITEM_COUNT = parse_value(self.schema, column_value_map, "INSP_ITEM_COUNT")
        self.SLOT_ID = parse_value(self.schema, column_value_map, "SLOT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.UNIT_ID = parse_value(self.schema, column_value_map, "UNIT_ID")
        self.SAMPLE_NO = parse_value(self.schema, column_value_map, "SAMPLE_NO")
        self.OCCURANCE_NO = parse_value(self.schema, column_value_map, "OCCURANCE_NO")
        self.OLD_CDC_VALUE = parse_value(self.schema, column_value_map, "OLD_CDC_VALUE")
        self.OLD_CDC_TEXT_VALUE = parse_value(self.schema, column_value_map, "OLD_CDC_TEXT_VALUE")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.CERT_STAMP_NO = parse_value(self.schema, column_value_map, "CERT_STAMP_NO")

class SFDB_MASTER_VALIDATION_CONTROL:
    schema = {
        "PARAMETER_NAME": "STRING",
        "PARAMETER_VALUE": "STRING",
        "PARAMETER_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PARAMETER_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PARAMETER_NAME = parse_value(self.schema, column_value_map, "PARAMETER_NAME")
        self.PARAMETER_VALUE = parse_value(self.schema, column_value_map, "PARAMETER_VALUE")
        self.PARAMETER_DESC = parse_value(self.schema, column_value_map, "PARAMETER_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_PRORATE_GROUP:
    schema = {
        "PG_ID": "STRING",
        "PG_NAME": "STRING",
        "ACTIVE_FLAG": "STRING",
        "CREATED_USERID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_PG_VCH1": "STRING",
        "UCF_PG_VCH2": "STRING",
        "UCF_PG_VCH3": "STRING",
        "UCF_PG_VCH4": "STRING",
        "UCF_PG_VCH5": "STRING",
        "UCF_PG_VCH6": "STRING",
        "UCF_PG_VCH7": "STRING",
        "UCF_PG_VCH8": "STRING",
        "UCF_PG_VCH9": "STRING",
        "UCF_PG_VCH10": "STRING",
        "UCF_PG_VCH11": "STRING",
        "UCF_PG_VCH12": "STRING",
        "UCF_PG_VCH13": "STRING",
        "UCF_PG_VCH14": "STRING",
        "UCF_PG_VCH15": "STRING",
        "UCF_PG_FLAG1": "STRING",
        "UCF_PG_FLAG2": "STRING",
        "UCF_PG_FLAG3": "STRING",
        "UCF_PG_FLAG4": "STRING",
        "UCF_PG_FLAG5": "STRING",
        "UCF_PG_NUM1": "NUMBER",
        "UCF_PG_NUM2": "NUMBER",
        "UCF_PG_NUM3": "NUMBER",
        "UCF_PG_NUM4": "NUMBER",
        "UCF_PG_NUM5": "NUMBER",
        "UCF_PG_DATE1": "STRING",
        "UCF_PG_DATE2": "STRING",
        "UCF_PG_DATE3": "STRING",
        "UCF_PG_DATE4": "STRING",
        "UCF_PG_DATE5": "STRING",
        "UCF_PG_VCH255_1": "STRING",
        "UCF_PG_VCH255_2": "STRING",
        "UCF_PG_VCH255_3": "STRING",
        "UCF_PG_VCH4000_1": "STRING",
        "UCF_PG_VCH4000_2": "STRING",
        "CREATED_DATE": "DATE",
        "WAS_SIGNON": "STRING",
    }
    primary_key_columns = [
        "PG_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_PG_OPERATION_FK1",
        "SFFND_USER_ACTIVITY_FK5",
    ]
    def __init__(self, column_value_map):
        self.PG_ID = parse_value(self.schema, column_value_map, "PG_ID")
        "primary Key for prorate Group"
        self.PG_NAME = parse_value(self.schema, column_value_map, "PG_NAME")
        "Prorate Group Name"
        self.ACTIVE_FLAG = parse_value(self.schema, column_value_map, "ACTIVE_FLAG")
        "A flag (Y/N) indicating any user signon/off on this prorate Group"
        self.CREATED_USERID = parse_value(self.schema, column_value_map, "CREATED_USERID")
        "Solumina login ID of the which created the record."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        " Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated"
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record"
        self.UCF_PG_VCH1 = parse_value(self.schema, column_value_map, "UCF_PG_VCH1")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH2 = parse_value(self.schema, column_value_map, "UCF_PG_VCH2")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH3 = parse_value(self.schema, column_value_map, "UCF_PG_VCH3")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH4 = parse_value(self.schema, column_value_map, "UCF_PG_VCH4")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH5 = parse_value(self.schema, column_value_map, "UCF_PG_VCH5")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH6 = parse_value(self.schema, column_value_map, "UCF_PG_VCH6")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH7 = parse_value(self.schema, column_value_map, "UCF_PG_VCH7")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH8 = parse_value(self.schema, column_value_map, "UCF_PG_VCH8")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH9 = parse_value(self.schema, column_value_map, "UCF_PG_VCH9")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH10 = parse_value(self.schema, column_value_map, "UCF_PG_VCH10")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH11 = parse_value(self.schema, column_value_map, "UCF_PG_VCH11")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH12 = parse_value(self.schema, column_value_map, "UCF_PG_VCH12")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH13 = parse_value(self.schema, column_value_map, "UCF_PG_VCH13")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH14 = parse_value(self.schema, column_value_map, "UCF_PG_VCH14")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH15 = parse_value(self.schema, column_value_map, "UCF_PG_VCH15")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PG_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag"
        self.UCF_PG_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PG_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag"
        self.UCF_PG_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PG_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag"
        self.UCF_PG_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PG_FLAG4")
        "User-configurable field for CHAR(1) data type serving as flag"
        self.UCF_PG_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PG_FLAG5")
        "User-configurable field for CHAR(1) data type serving as flag"
        self.UCF_PG_NUM1 = parse_value(self.schema, column_value_map, "UCF_PG_NUM1")
        "User-configurable field for NUM data type"
        self.UCF_PG_NUM2 = parse_value(self.schema, column_value_map, "UCF_PG_NUM2")
        "User-configurable field for NUM data type"
        self.UCF_PG_NUM3 = parse_value(self.schema, column_value_map, "UCF_PG_NUM3")
        "User-configurable field for NUM data type"
        self.UCF_PG_NUM4 = parse_value(self.schema, column_value_map, "UCF_PG_NUM4")
        "User-configurable field for NUM data type"
        self.UCF_PG_NUM5 = parse_value(self.schema, column_value_map, "UCF_PG_NUM5")
        "User-configurable field for NUM data type"
        self.UCF_PG_DATE1 = parse_value(self.schema, column_value_map, "UCF_PG_DATE1")
        "User-configurable field for DATE data type"
        self.UCF_PG_DATE2 = parse_value(self.schema, column_value_map, "UCF_PG_DATE2")
        "User-configurable field for DATE data type"
        self.UCF_PG_DATE3 = parse_value(self.schema, column_value_map, "UCF_PG_DATE3")
        "User-configurable field for DATE data type"
        self.UCF_PG_DATE4 = parse_value(self.schema, column_value_map, "UCF_PG_DATE4")
        "User-configurable field for DATE data type"
        self.UCF_PG_DATE5 = parse_value(self.schema, column_value_map, "UCF_PG_DATE5")
        "User-configurable field for DATE data type"
        self.UCF_PG_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PG_VCH255_1")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PG_VCH255_2")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PG_VCH255_3")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PG_VCH4000_1")
        "User-configurable field for VARCHAR data type"
        self.UCF_PG_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PG_VCH4000_2")
        "User-configurable field for VARCHAR data type"
        self.CREATED_DATE = parse_value(self.schema, column_value_map, "CREATED_DATE")
        self.WAS_SIGNON = parse_value(self.schema, column_value_map, "WAS_SIGNON")
        self.SFFND_PG_OPERATION_FK1 = []
        self.SFFND_USER_ACTIVITY_FK5 = []

class SFCORE_ROLES:
    schema = {
        "ROLE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "ROLE_DESC": "STRING",
        "STYPE": "STRING",
    }
    primary_key_columns = [
        "ROLE",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_ROLES_STYPE_FK", ["STYPE"], "SFCORE_MODULES", ["GROUP_NAME"]),
    ]
    refs = [
        "SFCORE_APP_ROLE_PRIVS_ROLE_FK",
        "SFCORE_USER_ROLES_FK1",
    ]
    def __init__(self, column_value_map):
        self.ROLE = parse_value(self.schema, column_value_map, "ROLE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.ROLE_DESC = parse_value(self.schema, column_value_map, "ROLE_DESC")
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")
        self.SFCORE_APP_ROLE_PRIVS_ROLE_FK = []
        self.SFCORE_USER_ROLES_FK1 = []

class SFFND_WORK_FLOW_SETUP:
    schema = {
        "TASK_TYPE": "STRING",
        "QUEUE": "STRING",
        "TASK_CLASS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "NEXT_QUEUE": "STRING",
        "REJECT_QUEUE": "STRING",
    }
    primary_key_columns = [
        "TASK_TYPE",
        "QUEUE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_WORK_FLOW_SETUP_FK2", ["NEXT_QUEUE"], "SFFND_QUEUE_TYPE_DEF", ["QUEUE_TYPE"]),
        DbForeignKey("SFFND_WORK_FLOW_SETUP_FK3", ["REJECT_QUEUE"], "SFFND_QUEUE_TYPE_DEF", ["QUEUE_TYPE"]),
        DbForeignKey("SFFND_WORK_FLOW_SETUP_FK1", ["QUEUE"], "SFFND_QUEUE_TYPE_DEF", ["QUEUE_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TASK_TYPE = parse_value(self.schema, column_value_map, "TASK_TYPE")
        "The user-assigned name of a given work flow. For CA Items, consists of a prefix (CA_ITEM) and item type (e.g., INIT). For discrepancies, consists of a prefix (DISC), a discrepancy type (e.g., WO) and a route type (e.g., INIT)."
        self.QUEUE = parse_value(self.schema, column_value_map, "QUEUE")
        "A queue associated with the work flow."
        self.TASK_CLASS = parse_value(self.schema, column_value_map, "TASK_CLASS")
        "The function of a queue's associated tasks: ACTION for a queue whose tasks perform actions, or APPROVAL for a queue whose tasks evaluate other tasks."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.NEXT_QUEUE = parse_value(self.schema, column_value_map, "NEXT_QUEUE")
        "The next queue in the work flow."
        self.REJECT_QUEUE = parse_value(self.schema, column_value_map, "REJECT_QUEUE")
        "In the case of an APPROVAL queue, the queue to which a rejected task passes."

class SFCORE_PRINTER_EQUIV_XREF:
    schema = {
        "PRINTER_ID": "STRING",
        "ALT_PRINTER_ID": "STRING",
        "RANK": "NUMBER",
        "OBSOLETE": "STRING",
        "OFFLINE_TIME": "NUMBER",
        "BUSY_TIME": "NUMBER",
        "OOP_TIME": "NUMBER",
        "SUBST_ANY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "PRINTER_ID",
        "ALT_PRINTER_ID",
    ]
    foreign_keys = [
        DbForeignKey("FWPEDEF_FWPDEF_FK", ["PRINTER_ID"], "SFCORE_PRINTER_DEF", ["PRINTER_ID"]),
        DbForeignKey("FWPEDEF_FWPDEF_FK2", ["ALT_PRINTER_ID"], "SFCORE_PRINTER_DEF", ["PRINTER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PRINTER_ID = parse_value(self.schema, column_value_map, "PRINTER_ID")
        "Unique system generated identifier for a given printer."
        self.ALT_PRINTER_ID = parse_value(self.schema, column_value_map, "ALT_PRINTER_ID")
        "Unique identifer of an alternate printer."
        self.RANK = parse_value(self.schema, column_value_map, "RANK")
        "Is the position/ranking of a serial within a given order across time."
        self.OBSOLETE = parse_value(self.schema, column_value_map, "OBSOLETE")
        "Flag that indicates if the given record is obsolete."
        self.OFFLINE_TIME = parse_value(self.schema, column_value_map, "OFFLINE_TIME")
        "Amount of time a printer can be offline before an alternate is chosen."
        self.BUSY_TIME = parse_value(self.schema, column_value_map, "BUSY_TIME")
        "The amount of busy time allowed before choosing an alternate printer."
        self.OOP_TIME = parse_value(self.schema, column_value_map, "OOP_TIME")
        "Amount of time a printer can be out of paper before an alternate is chosen."
        self.SUBST_ANY = parse_value(self.schema, column_value_map, "SUBST_ANY")
        "Flag that indicates any substitutions are possible."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFQA_DISC_ITEM_TEXT_SUBVAR:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "TEXT_TYPE",
        "TAG",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_ITEM_TEXT_SUBVAR_FK1", ["DISC_ID","DISC_LINE_NO","TEXT_TYPE"], "SFQA_DISC_ITEM_TEXT", ["DISC_ID","DISC_LINE_NO","TEXT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFSQA_INSP_ORDER_DESC:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "INSP_ORDER_NO": "STRING",
        "STATUS": "STRING",
        "INSP_ORDER_TYPE": "STRING",
        "INSPECTION_TYPE": "STRING",
        "DATE_CREATED": "DATE",
        "ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "INSP_ORDER_QTY": "NUMBER",
        "RESUME_FLAG": "STRING",
        "INSP_PLAN_ID": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "ASSOCIATED_ORDER_ID": "STRING",
        "REJECTED_QTY": "NUMBER",
        "DATE_STARTED": "STRING",
        "DATE_COMPLETE": "STRING",
        "ORIGINAL_INSP_ORDER_ID": "STRING",
        "NOTES": "STRING",
        "PO_QTY": "NUMBER",
        "NONCONFORMING_QTY": "NUMBER",
        "UCF_INSP_ORDER_VCH1": "STRING",
        "UCF_INSP_ORDER_VCH2": "STRING",
        "UCF_INSP_ORDER_VCH3": "STRING",
        "UCF_INSP_ORDER_VCH4": "STRING",
        "UCF_INSP_ORDER_VCH5": "STRING",
        "UCF_INSP_ORDER_VCH6": "STRING",
        "UCF_INSP_ORDER_VCH7": "STRING",
        "UCF_INSP_ORDER_VCH8": "STRING",
        "UCF_INSP_ORDER_VCH9": "STRING",
        "UCF_INSP_ORDER_VCH10": "STRING",
        "UCF_INSP_ORDER_VCH11": "STRING",
        "UCF_INSP_ORDER_VCH12": "STRING",
        "UCF_INSP_ORDER_VCH13": "STRING",
        "UCF_INSP_ORDER_VCH14": "STRING",
        "UCF_INSP_ORDER_VCH15": "STRING",
        "UCF_INSP_ORDER_NUM1": "NUMBER",
        "UCF_INSP_ORDER_NUM2": "NUMBER",
        "UCF_INSP_ORDER_NUM3": "NUMBER",
        "UCF_INSP_ORDER_NUM4": "NUMBER",
        "UCF_INSP_ORDER_NUM5": "NUMBER",
        "UCF_INSP_ORDER_DATE1": "STRING",
        "UCF_INSP_ORDER_DATE2": "STRING",
        "UCF_INSP_ORDER_DATE3": "STRING",
        "UCF_INSP_ORDER_DATE4": "STRING",
        "UCF_INSP_ORDER_DATE5": "STRING",
        "UCF_INSP_ORDER_FLAG1": "STRING",
        "UCF_INSP_ORDER_FLAG2": "STRING",
        "UCF_INSP_ORDER_FLAG3": "STRING",
        "UCF_INSP_ORDER_FLAG4": "STRING",
        "UCF_INSP_ORDER_FLAG5": "STRING",
        "PO_ID": "STRING",
        "PO_LINE_ITEM": "STRING",
        "ORDER_HOLD_STATUS": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "SCHED_PRIORITY": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "ATS_NO": "STRING",
        "PACKING_SLIP_ID": "STRING",
        "ATS_COMPLETED_DATE": "STRING",
        "REVISED_START_DATE": "STRING",
        "ATS_COMP_BY_USERID": "STRING",
        "REVISED_END_DATE": "STRING",
        "AUDIT_COORDINATOR_USERID": "STRING",
        "RESP_USERID": "STRING",
        "LAST_ACTIVITY_TIME_STAMP": "DATE",
        "RECEIPT_NO": "STRING",
        "RECEIPT_DATE": "STRING",
        "RECEIVED_LOCATION": "STRING",
        "UCF_INSP_ORDER_VCH255_1": "STRING",
        "UCF_INSP_ORDER_VCH255_2": "STRING",
        "UCF_INSP_ORDER_VCH255_3": "STRING",
        "UCF_INSP_ORDER_VCH4000_1": "STRING",
        "UCF_INSP_ORDER_VCH4000_2": "STRING",
        "UCF_INSP_PLAN_VCH1": "STRING",
        "UCF_INSP_PLAN_VCH2": "STRING",
        "UCF_INSP_PLAN_VCH3": "STRING",
        "UCF_INSP_PLAN_VCH4": "STRING",
        "UCF_INSP_PLAN_VCH5": "STRING",
        "UCF_INSP_PLAN_VCH6": "STRING",
        "UCF_INSP_PLAN_VCH7": "STRING",
        "UCF_INSP_PLAN_VCH8": "STRING",
        "UCF_INSP_PLAN_VCH9": "STRING",
        "UCF_INSP_PLAN_VCH10": "STRING",
        "UCF_INSP_PLAN_VCH11": "STRING",
        "UCF_INSP_PLAN_VCH12": "STRING",
        "UCF_INSP_PLAN_VCH13": "STRING",
        "UCF_INSP_PLAN_VCH14": "STRING",
        "UCF_INSP_PLAN_VCH15": "STRING",
        "UCF_INSP_PLAN_DATE1": "STRING",
        "UCF_INSP_PLAN_DATE2": "STRING",
        "UCF_INSP_PLAN_DATE3": "STRING",
        "UCF_INSP_PLAN_DATE4": "STRING",
        "UCF_INSP_PLAN_DATE5": "STRING",
        "UCF_INSP_PLAN_FLAG1": "STRING",
        "UCF_INSP_PLAN_FLAG2": "STRING",
        "UCF_INSP_PLAN_FLAG3": "STRING",
        "UCF_INSP_PLAN_FLAG4": "STRING",
        "UCF_INSP_PLAN_FLAG5": "STRING",
        "UCF_INSP_PLAN_NUM1": "NUMBER",
        "UCF_INSP_PLAN_NUM2": "NUMBER",
        "UCF_INSP_PLAN_NUM3": "NUMBER",
        "UCF_INSP_PLAN_NUM4": "NUMBER",
        "UCF_INSP_PLAN_NUM5": "NUMBER",
        "UCF_INSP_PLAN_VCH255_1": "STRING",
        "UCF_INSP_PLAN_VCH255_2": "STRING",
        "UCF_INSP_PLAN_VCH255_3": "STRING",
        "UCF_INSP_PLAN_VCH4000_1": "STRING",
        "UCF_INSP_PLAN_VCH4000_2": "STRING",
        "PRIORITY_DATE": "STRING",
        "PART_DRAWING_NO_CHG": "STRING",
        "SUPP_PART_DRAWING_NO_CHG": "STRING",
        "REQ_GROUP_DRAWING_NO_CHG": "STRING",
        "PARENT_INSP_ORDER_ID": "STRING",
        "SPLIT_FLAG": "STRING",
        "SHIP_TO_ADDRESS": "STRING",
        "RECEIVING_UOM": "STRING",
        "BOM_NO": "STRING",
        "MFG_BOM_CHG": "STRING",
        "DELIVERY_NO": "STRING",
        "ACTUAL_DELIVERY_DATE": "STRING",
        "ACTUAL_QTY": "NUMBER",
        "RESP_LOCATION_ID": "STRING",
        "COMMODITY_JURISDICTION": "STRING",
        "COMMODITY_CLASSIFICATION": "STRING",
        "RESP_DEPARTMENT_ID": "STRING",
        "RESP_CENTER_ID": "STRING",
        "SECURITY_GROUP": "STRING",
        "STOP_QTY": "NUMBER",
        "CANCEL_QTY": "NUMBER",
        "SCRAP_QTY": "NUMBER",
        "RETURN_QTY": "NUMBER",
        "REPLACE_QTY": "NUMBER",
        "SPLIT_QTY": "NUMBER",
        "COMPLETE_QTY": "NUMBER",
        "BUYER": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_IDP_ORIG_IDP_FK", ["ORIGINAL_INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_DESC_FK1", ["INSP_PLAN_ID","INSP_PLAN_REV"], "SFSQA_INSP_PLAN_DESC", ["INSP_PLAN_ID","INSP_PLAN_REV"]),
        DbForeignKey("SFSQA_INSP_ORDER_DESC_FK9", ["RESP_LOCATION_ID","RESP_DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_DESC_ITEM_FK", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_DESC_FK10", ["RESP_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_DESC_FK11", ["PARENT_INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_DESC_FK13", ["PO_ID","PO_LINE_ITEM","DELIVERY_NO"], "SFSQA_PO_DELIVERY_SCHED", ["PO_ID","PO_LINE_ITEM","DELIVERY_NO"]),
        DbForeignKey("SFSQA_IDP_INSP_TYPE_FK", ["INSPECTION_TYPE"], "SFSQA_INSP_ORDER_INSP_TYPE_DEF", ["INSPECTION_TYPE"]),
        DbForeignKey("SFSQA_INSP_ORDER_DESC_FK12", ["RESP_LOCATION_ID","RESP_DEPARTMENT_ID","RESP_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_DESC_FK7", ["ATS_COMP_BY_USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFSQA_INSP_ORDER_DESC_FK8", ["RESP_USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFSQA_INSP_ORDER_DESC_FK2", ["PO_ID","PO_LINE_ITEM"], "SFSQA_PO_LINE", ["PO_ID","PO_LINE_ITEM"]),
        DbForeignKey("SFSQA_IDP_DESC_ITYPE_FK", ["INSP_ORDER_TYPE"], "SFSQA_INSP_ORDER_TYPE_DEF", ["INSP_ORDER_TYPE"]),
        DbForeignKey("SFSQA_INSP_ORDER_DESC_FK14", ["BUYER"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
        "SFPL_IMPACTED_OBJECTS_FK10",
        "SFPL_PLANNED_ACTIONS_FK12",
        "SFSQA_INSP_ORDER_SEC_GRP_FK1",
        "SFSQA_IDP_ORIG_IDP_FK",
        "SFSQA_INSP_ORDER_DESC_FK11",
        "SFSQA_IDP_DESC_FK3",
        "SFWID_ORDER_INSP_STEP_LINK_FK4",
        "SFQA_CA_DESC_INSP_ORDER_ID_FK",
        "SFSQA_INSP_ORDER_NOTES_FK3",
        "SFSQA_INSP_ORDER_ATTMT_FK2",
        "SFSQA_IDP_PSTATE_IDP_FK",
        "SFSQA_IDP_HOLDS_RELATED_IDP_ID",
        "SFSQA_INSP_ORDER_INSP_DEF_FK2",
        "SFSQA_ITEM_SUPPLIER_DATA_FK3",
        "SFSQA_INSP_ORDER_LIENS_FK1",
        "SFSQA_INSP_ORD_DELVRY_INFO_FK1",
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_ORDER_NO = parse_value(self.schema, column_value_map, "INSP_ORDER_NO")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.INSP_ORDER_TYPE = parse_value(self.schema, column_value_map, "INSP_ORDER_TYPE")
        self.INSPECTION_TYPE = parse_value(self.schema, column_value_map, "INSPECTION_TYPE")
        self.DATE_CREATED = parse_value(self.schema, column_value_map, "DATE_CREATED")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.INSP_ORDER_QTY = parse_value(self.schema, column_value_map, "INSP_ORDER_QTY")
        self.RESUME_FLAG = parse_value(self.schema, column_value_map, "RESUME_FLAG")
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        self.ASSOCIATED_ORDER_ID = parse_value(self.schema, column_value_map, "ASSOCIATED_ORDER_ID")
        self.REJECTED_QTY = parse_value(self.schema, column_value_map, "REJECTED_QTY")
        self.DATE_STARTED = parse_value(self.schema, column_value_map, "DATE_STARTED")
        self.DATE_COMPLETE = parse_value(self.schema, column_value_map, "DATE_COMPLETE")
        self.ORIGINAL_INSP_ORDER_ID = parse_value(self.schema, column_value_map, "ORIGINAL_INSP_ORDER_ID")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.PO_QTY = parse_value(self.schema, column_value_map, "PO_QTY")
        self.NONCONFORMING_QTY = parse_value(self.schema, column_value_map, "NONCONFORMING_QTY")
        self.UCF_INSP_ORDER_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH1")
        self.UCF_INSP_ORDER_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH2")
        self.UCF_INSP_ORDER_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH3")
        self.UCF_INSP_ORDER_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH4")
        self.UCF_INSP_ORDER_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH5")
        self.UCF_INSP_ORDER_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH6")
        self.UCF_INSP_ORDER_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH7")
        self.UCF_INSP_ORDER_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH8")
        self.UCF_INSP_ORDER_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH9")
        self.UCF_INSP_ORDER_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH10")
        self.UCF_INSP_ORDER_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH11")
        self.UCF_INSP_ORDER_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH12")
        self.UCF_INSP_ORDER_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH13")
        self.UCF_INSP_ORDER_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH14")
        self.UCF_INSP_ORDER_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH15")
        self.UCF_INSP_ORDER_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NUM1")
        self.UCF_INSP_ORDER_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NUM2")
        self.UCF_INSP_ORDER_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NUM3")
        self.UCF_INSP_ORDER_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NUM4")
        self.UCF_INSP_ORDER_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NUM5")
        self.UCF_INSP_ORDER_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_DATE1")
        self.UCF_INSP_ORDER_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_DATE2")
        self.UCF_INSP_ORDER_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_DATE3")
        self.UCF_INSP_ORDER_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_DATE4")
        self.UCF_INSP_ORDER_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_DATE5")
        self.UCF_INSP_ORDER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_FLAG1")
        self.UCF_INSP_ORDER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_FLAG2")
        self.UCF_INSP_ORDER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_FLAG3")
        self.UCF_INSP_ORDER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_FLAG4")
        self.UCF_INSP_ORDER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_FLAG5")
        self.PO_ID = parse_value(self.schema, column_value_map, "PO_ID")
        self.PO_LINE_ITEM = parse_value(self.schema, column_value_map, "PO_LINE_ITEM")
        self.ORDER_HOLD_STATUS = parse_value(self.schema, column_value_map, "ORDER_HOLD_STATUS")
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        self.SCHED_PRIORITY = parse_value(self.schema, column_value_map, "SCHED_PRIORITY")
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        self.ATS_NO = parse_value(self.schema, column_value_map, "ATS_NO")
        self.PACKING_SLIP_ID = parse_value(self.schema, column_value_map, "PACKING_SLIP_ID")
        self.ATS_COMPLETED_DATE = parse_value(self.schema, column_value_map, "ATS_COMPLETED_DATE")
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        self.ATS_COMP_BY_USERID = parse_value(self.schema, column_value_map, "ATS_COMP_BY_USERID")
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        self.AUDIT_COORDINATOR_USERID = parse_value(self.schema, column_value_map, "AUDIT_COORDINATOR_USERID")
        self.RESP_USERID = parse_value(self.schema, column_value_map, "RESP_USERID")
        self.LAST_ACTIVITY_TIME_STAMP = parse_value(self.schema, column_value_map, "LAST_ACTIVITY_TIME_STAMP")
        self.RECEIPT_NO = parse_value(self.schema, column_value_map, "RECEIPT_NO")
        self.RECEIPT_DATE = parse_value(self.schema, column_value_map, "RECEIPT_DATE")
        self.RECEIVED_LOCATION = parse_value(self.schema, column_value_map, "RECEIVED_LOCATION")
        self.UCF_INSP_ORDER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH255_1")
        self.UCF_INSP_ORDER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH255_2")
        self.UCF_INSP_ORDER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH255_3")
        self.UCF_INSP_ORDER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH4000_1")
        self.UCF_INSP_ORDER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_VCH4000_2")
        self.UCF_INSP_PLAN_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH1")
        self.UCF_INSP_PLAN_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH2")
        self.UCF_INSP_PLAN_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH3")
        self.UCF_INSP_PLAN_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH4")
        self.UCF_INSP_PLAN_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH5")
        self.UCF_INSP_PLAN_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH6")
        self.UCF_INSP_PLAN_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH7")
        self.UCF_INSP_PLAN_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH8")
        self.UCF_INSP_PLAN_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH9")
        self.UCF_INSP_PLAN_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH10")
        self.UCF_INSP_PLAN_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH11")
        self.UCF_INSP_PLAN_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH12")
        self.UCF_INSP_PLAN_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH13")
        self.UCF_INSP_PLAN_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH14")
        self.UCF_INSP_PLAN_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH15")
        self.UCF_INSP_PLAN_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_DATE1")
        self.UCF_INSP_PLAN_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_DATE2")
        self.UCF_INSP_PLAN_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_DATE3")
        self.UCF_INSP_PLAN_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_DATE4")
        self.UCF_INSP_PLAN_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_DATE5")
        self.UCF_INSP_PLAN_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_FLAG1")
        self.UCF_INSP_PLAN_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_FLAG2")
        self.UCF_INSP_PLAN_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_FLAG3")
        self.UCF_INSP_PLAN_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_FLAG4")
        self.UCF_INSP_PLAN_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_FLAG5")
        self.UCF_INSP_PLAN_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_NUM1")
        self.UCF_INSP_PLAN_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_NUM2")
        self.UCF_INSP_PLAN_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_NUM3")
        self.UCF_INSP_PLAN_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_NUM4")
        self.UCF_INSP_PLAN_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_NUM5")
        self.UCF_INSP_PLAN_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH255_1")
        self.UCF_INSP_PLAN_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH255_2")
        self.UCF_INSP_PLAN_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH255_3")
        self.UCF_INSP_PLAN_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH4000_1")
        self.UCF_INSP_PLAN_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH4000_2")
        self.PRIORITY_DATE = parse_value(self.schema, column_value_map, "PRIORITY_DATE")
        self.PART_DRAWING_NO_CHG = parse_value(self.schema, column_value_map, "PART_DRAWING_NO_CHG")
        self.SUPP_PART_DRAWING_NO_CHG = parse_value(self.schema, column_value_map, "SUPP_PART_DRAWING_NO_CHG")
        self.REQ_GROUP_DRAWING_NO_CHG = parse_value(self.schema, column_value_map, "REQ_GROUP_DRAWING_NO_CHG")
        self.PARENT_INSP_ORDER_ID = parse_value(self.schema, column_value_map, "PARENT_INSP_ORDER_ID")
        self.SPLIT_FLAG = parse_value(self.schema, column_value_map, "SPLIT_FLAG")
        self.SHIP_TO_ADDRESS = parse_value(self.schema, column_value_map, "SHIP_TO_ADDRESS")
        self.RECEIVING_UOM = parse_value(self.schema, column_value_map, "RECEIVING_UOM")
        self.BOM_NO = parse_value(self.schema, column_value_map, "BOM_NO")
        "Bill Of Material Number."
        self.MFG_BOM_CHG = parse_value(self.schema, column_value_map, "MFG_BOM_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given BOM."
        self.DELIVERY_NO = parse_value(self.schema, column_value_map, "DELIVERY_NO")
        "Delivery Number of an Inspection Order."
        self.ACTUAL_DELIVERY_DATE = parse_value(self.schema, column_value_map, "ACTUAL_DELIVERY_DATE")
        "Actual Delivery Date of an Inspection Order."
        self.ACTUAL_QTY = parse_value(self.schema, column_value_map, "ACTUAL_QTY")
        "Actual Quantity of an Inspection Order."
        self.RESP_LOCATION_ID = parse_value(self.schema, column_value_map, "RESP_LOCATION_ID")
        self.COMMODITY_JURISDICTION = parse_value(self.schema, column_value_map, "COMMODITY_JURISDICTION")
        "Commodity Jurisdiction of Inspection Order."
        self.COMMODITY_CLASSIFICATION = parse_value(self.schema, column_value_map, "COMMODITY_CLASSIFICATION")
        "Commodity Classification of Inspection Order."
        self.RESP_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "RESP_DEPARTMENT_ID")
        self.RESP_CENTER_ID = parse_value(self.schema, column_value_map, "RESP_CENTER_ID")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        "security group(s) assigned to inspection order."
        self.STOP_QTY = parse_value(self.schema, column_value_map, "STOP_QTY")
        "Inspection Order Stop Quantity."
        self.CANCEL_QTY = parse_value(self.schema, column_value_map, "CANCEL_QTY")
        "Inspection Order Cancel Quantity."
        self.SCRAP_QTY = parse_value(self.schema, column_value_map, "SCRAP_QTY")
        "Inspection Order Scrap Quantity."
        self.RETURN_QTY = parse_value(self.schema, column_value_map, "RETURN_QTY")
        "Inspection Order Return Quantity."
        self.REPLACE_QTY = parse_value(self.schema, column_value_map, "REPLACE_QTY")
        "Inspection Order Replace Quantity."
        self.SPLIT_QTY = parse_value(self.schema, column_value_map, "SPLIT_QTY")
        "Inspection Order Split Quantity."
        self.COMPLETE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_QTY")
        "Inspection Order Complete Quantity."
        self.BUYER = parse_value(self.schema, column_value_map, "BUYER")
        "Solumina login ID of the user."
        self.SFPL_IMPACTED_OBJECTS_FK10 = []
        self.SFPL_PLANNED_ACTIONS_FK12 = []
        self.SFSQA_INSP_ORDER_SEC_GRP_FK1 = []
        self.SFSQA_IDP_ORIG_IDP_FK = []
        self.SFSQA_INSP_ORDER_DESC_FK11 = []
        self.SFSQA_IDP_DESC_FK3 = []
        self.SFWID_ORDER_INSP_STEP_LINK_FK4 = []
        self.SFQA_CA_DESC_INSP_ORDER_ID_FK = []
        self.SFSQA_INSP_ORDER_NOTES_FK3 = []
        self.SFSQA_INSP_ORDER_ATTMT_FK2 = []
        self.SFSQA_IDP_PSTATE_IDP_FK = []
        self.SFSQA_IDP_HOLDS_RELATED_IDP_ID = []
        self.SFSQA_INSP_ORDER_INSP_DEF_FK2 = []
        self.SFSQA_ITEM_SUPPLIER_DATA_FK3 = []
        self.SFSQA_INSP_ORDER_LIENS_FK1 = []
        self.SFSQA_INSP_ORD_DELVRY_INFO_FK1 = []

class SFPL_OPERATION_DESC:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "OPER_UPDT_NO": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OPER_NO": "STRING",
        "OPER_STATE": "STRING",
        "SCHED_MACHINE_HOURS_PER_UNIT": "NUMBER",
        "SCHED_UNITS_PER_RUN": "NUMBER",
        "SCHED_MACHINE_HOURS_SETUP": "NUMBER",
        "SCHED_ENG_STD_FLAG": "STRING",
        "OCCUR_RATE": "NUMBER",
        "OSP_FLAG": "STRING",
        "OSP_COST_PER_UNIT": "NUMBER",
        "OSP_DAYS": "NUMBER",
        "AUTO_COMPLETE_FLAG": "STRING",
        "SCHED_MOVE_HOURS": "NUMBER",
        "AUTO_START_FLAG": "STRING",
        "OPER_OPT_FLAG": "STRING",
        "OPER_TYPE": "STRING",
        "OPER_TITLE": "STRING",
        "PLND_MACHINE_NO": "STRING",
        "SCHED_LABOR_HOURS_SETUP": "NUMBER",
        "SCHED_DUR_HOURS_SETUP": "NUMBER",
        "SCHED_LABOR_HOURS_INSPECT": "NUMBER",
        "SCHED_DUR_HOURS_INSPECT": "NUMBER",
        "SCHED_LABOR_HOURS_PER_UNIT": "NUMBER",
        "SCHED_DUR_HOURS_PER_UNIT": "NUMBER",
        "SCHED_CREW_QTY_SETUP": "NUMBER",
        "SCHED_CREW_QTY": "NUMBER",
        "SCHED_SETUP_TYPE": "STRING",
        "UCF_PLAN_OPER_VCH1": "STRING",
        "SUPPLIER_CODE": "STRING",
        "UCF_PLAN_OPER_VCH2": "STRING",
        "UCF_PLAN_OPER_VCH3": "STRING",
        "UCF_PLAN_OPER_VCH4": "STRING",
        "UCF_PLAN_OPER_VCH5": "STRING",
        "UCF_PLAN_OPER_FLAG1": "STRING",
        "UCF_PLAN_OPER_FLAG2": "STRING",
        "UCF_PLAN_OPER_NUM1": "NUMBER",
        "UCF_PLAN_OPER_NUM2": "NUMBER",
        "STDOPER_OBJECT_ID": "STRING",
        "UCF_PLAN_OPER_VCH6": "STRING",
        "UCF_PLAN_OPER_VCH7": "STRING",
        "UCF_PLAN_OPER_VCH8": "STRING",
        "TEST_TYPE": "STRING",
        "UCF_PLAN_OPER_VCH9": "STRING",
        "UCF_PLAN_OPER_VCH10": "STRING",
        "UCF_PLAN_OPER_VCH11": "STRING",
        "UCF_PLAN_OPER_VCH12": "STRING",
        "UCF_PLAN_OPER_VCH13": "STRING",
        "UCF_PLAN_OPER_VCH14": "STRING",
        "UCF_PLAN_OPER_VCH15": "STRING",
        "UCF_PLAN_OPER_NUM3": "NUMBER",
        "UCF_PLAN_OPER_NUM4": "NUMBER",
        "UCF_PLAN_OPER_NUM5": "NUMBER",
        "UCF_PLAN_OPER_DATE1": "STRING",
        "UCF_PLAN_OPER_DATE2": "STRING",
        "UCF_PLAN_OPER_DATE3": "STRING",
        "UCF_PLAN_OPER_DATE4": "STRING",
        "UCF_PLAN_OPER_DATE5": "STRING",
        "UCF_PLAN_OPER_FLAG3": "STRING",
        "UCF_PLAN_OPER_FLAG4": "STRING",
        "UCF_PLAN_OPER_FLAG5": "STRING",
        "UCF_PLAN_OPER_VCH255_1": "STRING",
        "UCF_PLAN_OPER_VCH255_2": "STRING",
        "UCF_PLAN_OPER_VCH255_3": "STRING",
        "UCF_PLAN_OPER_VCH4000_1": "STRING",
        "UCF_PLAN_OPER_VCH4000_2": "STRING",
        "SEQ_STEPS_FLAG": "STRING",
        "CHG_AUTH_TYPE": "STRING",
        "CHG_AUTH_NUM": "STRING",
        "OPER_CHANGE_LEVEL": "STRING",
        "EXE_ORDER": "NUMBER",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "OBJECT_ID": "STRING",
        "MUST_ISSUE_PARTS_FLAG": "STRING",
        "UNITS_PER_CYCLE": "NUMBER",
        "AUTO_CYCLE_FLAG": "STRING",
        "PRINT_LABEL": "STRING",
        "NUMBER_OF_LABELS": "NUMBER",
        "RECONCILE_SCRAP": "STRING",
        "UNIT_PROCESSING": "STRING",
        "LATEST_REV_FLAG": "STRING",
        "BATCH_FLAG": "STRING",
        "REPORT_ID": "STRING",
        "PLND_LOCATION_ID": "STRING",
        "PLND_DEPARTMENT_ID": "STRING",
        "PLND_CENTER_ID": "STRING",
        "PLND_MACHINE_REV": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "OPER_UPDT_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_OPER_DESC_SUPP_CODE_FK", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFPL_OPER_DESC_TTYPE_FK", ["TEST_TYPE"], "SFFND_TEST_TYPE_DEF", ["TEST_TYPE"]),
        DbForeignKey("SFPL_OPERDESC_OPERMAST_FK", ["PLAN_ID","OPER_KEY"], "SFPL_OPERATION_MASTER", ["PLAN_ID","OPER_KEY"]),
        DbForeignKey("SFPL_OPER_DESC_LOC_FK", ["PLND_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFPL_OPER_DESC_OPER_TYP_FK", ["OPER_TYPE"], "SFFND_OPER_TYPE_DEF", ["OPER_TYPE"]),
        DbForeignKey("SFPL_OPERATION_DESC_FK02", ["REPORT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFPL_OPER_DESC_CENTER_FK", ["PLND_LOCATION_ID","PLND_DEPARTMENT_ID","PLND_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFPL_OPER_DESC_DEPT_FK", ["PLND_LOCATION_ID","PLND_DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFPL_OPERATION_DESC_FK01", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
        "SFPL_OPERREV_PLANDESC_FK",
        "SFPL_OPER_SKILL_OPER_FK",
        "SFPL_OPERTXT_PLANDESC_FK",
        "SFPL_OPER_PROCESS_FK1",
        "SFPL_OPERATION_PRECEDENCE_FK1",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        "An updated user-assigned operation number."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.OPER_STATE = parse_value(self.schema, column_value_map, "OPER_STATE")
        "The editing state of the work plan operation, EDIT or NO EDIT."
        self.SCHED_MACHINE_HOURS_PER_UNIT = parse_value(self.schema, column_value_map, "SCHED_MACHINE_HOURS_PER_UNIT")
        "The number of machine hours per unit."
        self.SCHED_UNITS_PER_RUN = parse_value(self.schema, column_value_map, "SCHED_UNITS_PER_RUN")
        "The number of units per production run."
        self.SCHED_MACHINE_HOURS_SETUP = parse_value(self.schema, column_value_map, "SCHED_MACHINE_HOURS_SETUP")
        "The number hours required for machine setup."
        self.SCHED_ENG_STD_FLAG = parse_value(self.schema, column_value_map, "SCHED_ENG_STD_FLAG")
        "A flag (Y/N) that indicates whether engineering standards must be set up for a given operation.."
        self.OCCUR_RATE = parse_value(self.schema, column_value_map, "OCCUR_RATE")
        "The probability of a given operation occurring in a work order, where a value of 1 = 100%. A value < 1 indicates that the operation follows a decision node and will occur at the assigned rate."
        self.OSP_FLAG = parse_value(self.schema, column_value_map, "OSP_FLAG")
        "A flag (Y/N) that indicates whether the operation process is performed by an outside vendor or center."
        self.OSP_COST_PER_UNIT = parse_value(self.schema, column_value_map, "OSP_COST_PER_UNIT")
        "The cost per unit at a given outside vendor."
        self.OSP_DAYS = parse_value(self.schema, column_value_map, "OSP_DAYS")
        "The number of days the operation is expected to take at a given outside vendor."
        self.AUTO_COMPLETE_FLAG = parse_value(self.schema, column_value_map, "AUTO_COMPLETE_FLAG")
        "Indicates (Y/N) whether the status of the given operation is automatically set to COMPLETE on startup of the following operation."
        self.SCHED_MOVE_HOURS = parse_value(self.schema, column_value_map, "SCHED_MOVE_HOURS")
        "The number of hours required to move the setup."
        self.AUTO_START_FLAG = parse_value(self.schema, column_value_map, "AUTO_START_FLAG")
        "Indicates (Y/N) whether the given operation is automatically started on completion of the previous operation."
        self.OPER_OPT_FLAG = parse_value(self.schema, column_value_map, "OPER_OPT_FLAG")
        "A flag (Y/N) that indicates whether a given operation is optional."
        self.OPER_TYPE = parse_value(self.schema, column_value_map, "OPER_TYPE")
        "Type or class of operation, e.g., MFG."
        self.OPER_TITLE = parse_value(self.schema, column_value_map, "OPER_TITLE")
        "A descriptive title or name of a given operation."
        self.PLND_MACHINE_NO = parse_value(self.schema, column_value_map, "PLND_MACHINE_NO")
        "The planned machine category for a given operation."
        self.SCHED_LABOR_HOURS_SETUP = parse_value(self.schema, column_value_map, "SCHED_LABOR_HOURS_SETUP")
        "The scheduled number of hours for labor setup of a given operation."
        self.SCHED_DUR_HOURS_SETUP = parse_value(self.schema, column_value_map, "SCHED_DUR_HOURS_SETUP")
        "The scheduled number of hours for all types of setup for a given operation."
        self.SCHED_LABOR_HOURS_INSPECT = parse_value(self.schema, column_value_map, "SCHED_LABOR_HOURS_INSPECT")
        "The scheduled number of labor hours for inspection of a given operation."
        self.SCHED_DUR_HOURS_INSPECT = parse_value(self.schema, column_value_map, "SCHED_DUR_HOURS_INSPECT")
        "The scheduled number of duration hours for inspection of a given operation."
        self.SCHED_LABOR_HOURS_PER_UNIT = parse_value(self.schema, column_value_map, "SCHED_LABOR_HOURS_PER_UNIT")
        "The scheduled number of labor hours per unit for a given operation."
        self.SCHED_DUR_HOURS_PER_UNIT = parse_value(self.schema, column_value_map, "SCHED_DUR_HOURS_PER_UNIT")
        "The scheduled number of duration hours per unit for a given operation."
        self.SCHED_CREW_QTY_SETUP = parse_value(self.schema, column_value_map, "SCHED_CREW_QTY_SETUP")
        "The scheduled number of people in the setup crew for the given operation."
        self.SCHED_CREW_QTY = parse_value(self.schema, column_value_map, "SCHED_CREW_QTY")
        "The scheduled number of people in the crew for the given operation"
        self.SCHED_SETUP_TYPE = parse_value(self.schema, column_value_map, "SCHED_SETUP_TYPE")
        "The type of setup."
        self.UCF_PLAN_OPER_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.UCF_PLAN_OPER_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_OPER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_OPER_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_OPER_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM2")
        "User-configurable field for NUM data type."
        self.STDOPER_OBJECT_ID = parse_value(self.schema, column_value_map, "STDOPER_OBJECT_ID")
        self.UCF_PLAN_OPER_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH6")
        self.UCF_PLAN_OPER_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH7")
        self.UCF_PLAN_OPER_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH8")
        self.TEST_TYPE = parse_value(self.schema, column_value_map, "TEST_TYPE")
        self.UCF_PLAN_OPER_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH9")
        self.UCF_PLAN_OPER_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH10")
        self.UCF_PLAN_OPER_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH11")
        self.UCF_PLAN_OPER_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH12")
        self.UCF_PLAN_OPER_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH13")
        self.UCF_PLAN_OPER_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH14")
        self.UCF_PLAN_OPER_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH15")
        self.UCF_PLAN_OPER_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM3")
        self.UCF_PLAN_OPER_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM4")
        self.UCF_PLAN_OPER_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM5")
        self.UCF_PLAN_OPER_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE1")
        self.UCF_PLAN_OPER_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE2")
        self.UCF_PLAN_OPER_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE3")
        self.UCF_PLAN_OPER_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE4")
        self.UCF_PLAN_OPER_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE5")
        self.UCF_PLAN_OPER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG3")
        self.UCF_PLAN_OPER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG4")
        self.UCF_PLAN_OPER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG5")
        self.UCF_PLAN_OPER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH255_1")
        self.UCF_PLAN_OPER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH255_2")
        self.UCF_PLAN_OPER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH255_3")
        self.UCF_PLAN_OPER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH4000_1")
        self.UCF_PLAN_OPER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH4000_2")
        self.SEQ_STEPS_FLAG = parse_value(self.schema, column_value_map, "SEQ_STEPS_FLAG")
        self.CHG_AUTH_TYPE = parse_value(self.schema, column_value_map, "CHG_AUTH_TYPE")
        self.CHG_AUTH_NUM = parse_value(self.schema, column_value_map, "CHG_AUTH_NUM")
        self.OPER_CHANGE_LEVEL = parse_value(self.schema, column_value_map, "OPER_CHANGE_LEVEL")
        self.EXE_ORDER = parse_value(self.schema, column_value_map, "EXE_ORDER")
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.MUST_ISSUE_PARTS_FLAG = parse_value(self.schema, column_value_map, "MUST_ISSUE_PARTS_FLAG")
        self.UNITS_PER_CYCLE = parse_value(self.schema, column_value_map, "UNITS_PER_CYCLE")
        "This is the Number of units to be process per cycle."
        self.AUTO_CYCLE_FLAG = parse_value(self.schema, column_value_map, "AUTO_CYCLE_FLAG")
        "This flag can only be 'Y' when material_handling = CYCLE. 'Y' means user can process cycles through external process."
        self.PRINT_LABEL = parse_value(self.schema, column_value_map, "PRINT_LABEL")
        "Action on which the Labels are generated. Possible actions are OFF, CYCLE COMPLETE and OPERATION COMPLETE."
        self.NUMBER_OF_LABELS = parse_value(self.schema, column_value_map, "NUMBER_OF_LABELS")
        "Number of Labels to be generated after each print_label action."
        self.RECONCILE_SCRAP = parse_value(self.schema, column_value_map, "RECONCILE_SCRAP")
        "Possible values are OFF, AUTO and PROMPT. If value is AUTO at the operation, the available units will be scrapped without a prompt. Only applicable when continuous_flow_flag is 'Y' at plan/order level."
        self.UNIT_PROCESSING = parse_value(self.schema, column_value_map, "UNIT_PROCESSING")
        "Defines how does units get processed. Possible values are NORMAL, CYCLE and LOW TOUCH. CYCLE value is only applicable when continuous_flow_flag is 'Y' at plan level."
        self.LATEST_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_REV_FLAG")
        "Flag indicating if authored object is of latest revision or not."
        self.BATCH_FLAG = parse_value(self.schema, column_value_map, "BATCH_FLAG")
        self.REPORT_ID = parse_value(self.schema, column_value_map, "REPORT_ID")
        "OBJECT_ID of the Report to be invoked, i.e. the Labels to be generated after each print_label action."
        self.PLND_LOCATION_ID = parse_value(self.schema, column_value_map, "PLND_LOCATION_ID")
        self.PLND_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "PLND_DEPARTMENT_ID")
        self.PLND_CENTER_ID = parse_value(self.schema, column_value_map, "PLND_CENTER_ID")
        self.PLND_MACHINE_REV = parse_value(self.schema, column_value_map, "PLND_MACHINE_REV")
        self.SFPL_OPERREV_PLANDESC_FK = []
        self.SFPL_OPER_SKILL_OPER_FK = []
        self.SFPL_OPERTXT_PLANDESC_FK = []
        self.SFPL_OPER_PROCESS_FK1 = []
        self.SFPL_OPERATION_PRECEDENCE_FK1 = []

class SFPL_MFG_BOM_COMP_CONFIG:
    schema = {
        "BOM_ID": "STRING",
        "BOM_COMP_ID": "STRING",
        "CONFIG_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
        "BOM_COMP_ID",
        "CONFIG_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_COMP_CONFIG_FK2", ["BOM_ID","BOM_COMP_ID"], "SFPL_MFG_BOM_COMP", ["BOM_ID","BOM_COMP_ID"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_CONFIG_FK1", ["CONFIG_ID"], "SFFND_CONFIG_DEF", ["CONFIG_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique, system-generated identifier of a given BOM."
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        "Unique, system-generated identifier of a given BOM component."
        self.CONFIG_ID = parse_value(self.schema, column_value_map, "CONFIG_ID")
        "Unique system generated column to identify each configuration value."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_DISC_TEXT_SUBVAR:
    schema = {
        "DISC_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "TEXT_TYPE",
        "TAG",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_TEXT_SUBVAR_FK1", ["DISC_ID","TEXT_TYPE"], "SFQA_DISC_TEXT", ["DISC_ID","TEXT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFPL_MFG_BOM_COMP_ALT_XREF:
    schema = {
        "BOM_ID": "STRING",
        "BOM_COMP_ID": "STRING",
        "ALT_ITEM_ID": "STRING",
        "PRIORITY": "NUMBER",
        "UNIT_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "UCF_MBOM_COMP_ALT_VCH1": "STRING",
        "UCF_MBOM_COMP_ALT_VCH2": "STRING",
        "UCF_MBOM_COMP_ALT_VCH3": "STRING",
        "UCF_MBOM_COMP_ALT_VCH4": "STRING",
        "UCF_MBOM_COMP_ALT_VCH5": "STRING",
        "UCF_MBOM_COMP_ALT_VCH6": "STRING",
        "UCF_MBOM_COMP_ALT_VCH7": "STRING",
        "UCF_MBOM_COMP_ALT_VCH8": "STRING",
        "UCF_MBOM_COMP_ALT_VCH9": "STRING",
        "UCF_MBOM_COMP_ALT_VCH10": "STRING",
        "UCF_MBOM_COMP_ALT_VCH11": "STRING",
        "UCF_MBOM_COMP_ALT_VCH12": "STRING",
        "UCF_MBOM_COMP_ALT_VCH13": "STRING",
        "UCF_MBOM_COMP_ALT_VCH14": "STRING",
        "UCF_MBOM_COMP_ALT_VCH15": "STRING",
        "UCF_MBOM_COMP_ALT_NUM1": "NUMBER",
        "UCF_MBOM_COMP_ALT_NUM2": "NUMBER",
        "UCF_MBOM_COMP_ALT_NUM3": "NUMBER",
        "UCF_MBOM_COMP_ALT_NUM4": "NUMBER",
        "UCF_MBOM_COMP_ALT_NUM5": "NUMBER",
        "UCF_MBOM_COMP_ALT_DATE1": "STRING",
        "UCF_MBOM_COMP_ALT_DATE2": "STRING",
        "UCF_MBOM_COMP_ALT_DATE3": "STRING",
        "UCF_MBOM_COMP_ALT_DATE4": "STRING",
        "UCF_MBOM_COMP_ALT_DATE5": "STRING",
        "UCF_MBOM_COMP_ALT_FLAG1": "STRING",
        "UCF_MBOM_COMP_ALT_FLAG2": "STRING",
        "UCF_MBOM_COMP_ALT_FLAG3": "STRING",
        "UCF_MBOM_COMP_ALT_FLAG4": "STRING",
        "UCF_MBOM_COMP_ALT_FLAG5": "STRING",
        "UCF_MBOM_COMP_ALT_VCH255_1": "STRING",
        "UCF_MBOM_COMP_ALT_VCH255_2": "STRING",
        "UCF_MBOM_COMP_ALT_VCH255_3": "STRING",
        "UCF_MBOM_COMP_ALT_VCH4000_1": "STRING",
        "UCF_MBOM_COMP_ALT_VCH4000_2": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "RAW_MATERIAL_LENGTH": "NUMBER",
        "RAW_MATERIAL_WIDTH": "NUMBER",
        "NO_OF_PCS": "NUMBER",
    }
    primary_key_columns = [
        "BOM_ID",
        "BOM_COMP_ID",
        "ALT_ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_COMP_ALT_XREF_FK2", ["ALT_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_ALT_XREF_FK1", ["BOM_ID","BOM_COMP_ID"], "SFPL_MFG_BOM_COMP", ["BOM_ID","BOM_COMP_ID"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_ALT_XREF_FK3", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Corresponding BOM for which BOM Component is added."
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        "Unique, system-generated identifier of a given BOM component."
        self.ALT_ITEM_ID = parse_value(self.schema, column_value_map, "ALT_ITEM_ID")
        "Alternate part as identified by its unique system generated identifier."
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        "The priority of the task."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "The upper bound of the effectivity range for effectivity type other than time period."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "The lower bound of the effectivity range for effectivity type other than time period."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "The starting date of the time period for a time period effectivity."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "The ending date of the time period for a time period effectivity."
        self.UCF_MBOM_COMP_ALT_VCH1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH4 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH5 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH6 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH7 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH8 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH9 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH10 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH11 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH12 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH13 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH14 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_VCH15 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_COMP_ALT_NUM1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_COMP_ALT_NUM2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_COMP_ALT_NUM3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_COMP_ALT_NUM4 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_COMP_ALT_NUM5 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_COMP_ALT_DATE1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_COMP_ALT_DATE2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_COMP_ALT_DATE3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_COMP_ALT_DATE4 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_COMP_ALT_DATE5 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_COMP_ALT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_COMP_ALT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_COMP_ALT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_COMP_ALT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_COMP_ALT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_COMP_ALT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_COMP_ALT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_COMP_ALT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_COMP_ALT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_MBOM_COMP_ALT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_ALT_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.RAW_MATERIAL_LENGTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_LENGTH")
        self.RAW_MATERIAL_WIDTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_WIDTH")
        self.NO_OF_PCS = parse_value(self.schema, column_value_map, "NO_OF_PCS")

class SFCORE_MM_HTREF:
    schema = {
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "EMBEDDED_OBJECT_TYPE": "STRING",
        "EMBEDDED_OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "UCF_MMOBJHTREF_VCH1": "STRING",
        "UCF_MMOBJHTREF_VCH2": "STRING",
        "UCF_MMOBJHTREF_VCH3": "STRING",
        "UCF_MMOBJHTREF_VCH4": "STRING",
        "UCF_MMOBJHTREF_VCH5": "STRING",
        "UCF_MMOBJHTREF_NUM1": "NUMBER",
        "UCF_MMOBJHTREF_DATE1": "STRING",
        "UCF_MMOBJHTREF_FLAG1": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_MM_HTREF_OBJ_TYPE_FK", ["EMBEDDED_OBJECT_TYPE"], "SFCORE_OBJECT_TYPE_DEF", ["OBJECT_TYPE"]),
        DbForeignKey("SFCORE_MM_HTREF_OBJECT_FK", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "The system generated identifier of the multimedia object link."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of the \"master\" object that contains the embedded/linked objects."
        self.EMBEDDED_OBJECT_TYPE = parse_value(self.schema, column_value_map, "EMBEDDED_OBJECT_TYPE")
        "Type of linked object."
        self.EMBEDDED_OBJECT_ID = parse_value(self.schema, column_value_map, "EMBEDDED_OBJECT_ID")
        "Unique identifier of the linked object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Type of text block that contains the object link. For instance: PlanOperText, PlanStepText, PlanIEText, or PlanStepQAText."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "Protocol ID in a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "Host ID in the Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "File location in a Universal Resource Locator."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.UCF_MMOBJHTREF_VCH1 = parse_value(self.schema, column_value_map, "UCF_MMOBJHTREF_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_MMOBJHTREF_VCH2 = parse_value(self.schema, column_value_map, "UCF_MMOBJHTREF_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_MMOBJHTREF_VCH3 = parse_value(self.schema, column_value_map, "UCF_MMOBJHTREF_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_MMOBJHTREF_VCH4 = parse_value(self.schema, column_value_map, "UCF_MMOBJHTREF_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_MMOBJHTREF_VCH5 = parse_value(self.schema, column_value_map, "UCF_MMOBJHTREF_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_MMOBJHTREF_NUM1 = parse_value(self.schema, column_value_map, "UCF_MMOBJHTREF_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_MMOBJHTREF_DATE1 = parse_value(self.schema, column_value_map, "UCF_MMOBJHTREF_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_MMOBJHTREF_FLAG1 = parse_value(self.schema, column_value_map, "UCF_MMOBJHTREF_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."

class SFFND_VARIABLE_VISIBILITY_DEF:
    schema = {
        "VISIBILITY": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "VARIABLE_SCOPE_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "VISIBILITY",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_DC_VARIABLE_DEF_FK1",
    ]
    def __init__(self, column_value_map):
        self.VISIBILITY = parse_value(self.schema, column_value_map, "VISIBILITY")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.VARIABLE_SCOPE_DESC = parse_value(self.schema, column_value_map, "VARIABLE_SCOPE_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFFND_DC_VARIABLE_DEF_FK1 = []

class SFCORE_SQL_LIB_FOLDER:
    schema = {
        "SQL_ID": "STRING",
        "FOLDER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "SQL_ID",
        "FOLDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_SQLFLDR_FLDRORG_FK", ["FOLDER_ID"], "SFCORE_SQLLIB_FOLDER_ORG", ["FOLDER_ID"]),
        DbForeignKey("SFCORE_SQLFLDR_SQLLIB_FK", ["SQL_ID"], "SFCORE_SQL_LIB", ["SQL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SQL_ID = parse_value(self.schema, column_value_map, "SQL_ID")
        "Unique identifier, all uppercase, of a piece of a SQL script."
        self.FOLDER_ID = parse_value(self.schema, column_value_map, "FOLDER_ID")
        "Unique, system generated identifier of the folder."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFPL_EFF_GROUP_CHANGE_LOG:
    schema = {
        "LOG_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "OLD_EFF_GROUP_ID": "STRING",
        "OLD_EFF_GROUP_NO": "STRING",
        "OLD_EFF_GROUP_REV": "STRING",
        "NEW_EFF_GROUP_ID": "STRING",
        "NEW_EFF_GROUP_NO": "STRING",
        "NEW_EFF_GROUP_REV": "STRING",
    }
    primary_key_columns = [
        "LOG_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.LOG_ID = parse_value(self.schema, column_value_map, "LOG_ID")
        "Unique, System-generated identifier of given claim."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The RevISion number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revISion. Not in use."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given Step."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.OLD_EFF_GROUP_ID = parse_value(self.schema, column_value_map, "OLD_EFF_GROUP_ID")
        "old Unique, System-generated identifier of given claim."
        self.OLD_EFF_GROUP_NO = parse_value(self.schema, column_value_map, "OLD_EFF_GROUP_NO")
        "old Unique, Effectivity Group No given by User."
        self.OLD_EFF_GROUP_REV = parse_value(self.schema, column_value_map, "OLD_EFF_GROUP_REV")
        "old Effectivity Group Rev."
        self.NEW_EFF_GROUP_ID = parse_value(self.schema, column_value_map, "NEW_EFF_GROUP_ID")
        "new Unique, System-generated identifier of given claim."
        self.NEW_EFF_GROUP_NO = parse_value(self.schema, column_value_map, "NEW_EFF_GROUP_NO")
        "new  Unique, Effectivity Group No given by User."
        self.NEW_EFF_GROUP_REV = parse_value(self.schema, column_value_map, "NEW_EFF_GROUP_REV")
        "new Effectivity Group Rev."

class SFCORE_ROLES_HIST:
    schema = {
        "HIST_ID": "STRING",
        "HIST_TIME_STAMP": "STRING",
        "HIST_USERID": "STRING",
        "HIST_ACTION": "STRING",
        "ROLE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "ROLE_DESC": "STRING",
        "STYPE": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.ROLE = parse_value(self.schema, column_value_map, "ROLE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.ROLE_DESC = parse_value(self.schema, column_value_map, "ROLE_DESC")
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")

class SFWID_HOLDS_RESOURCE_TYPE_DTL:
    schema = {
        "HOLD_ID": "STRING",
        "ORDER_ID": "STRING",
        "CAUSE_TYPE": "STRING",
        "RESP_RESOURCE_TYPE": "STRING",
        "RESP_RESOURCE_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HOLD_ID",
        "ORDER_ID",
        "CAUSE_TYPE",
        "RESP_RESOURCE_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_HOLDS_RESOURCE_TYPE_FK1", ["HOLD_ID","ORDER_ID"], "SFWID_HOLDS", ["HOLD_ID","ORDER_ID"]),
        DbForeignKey("SFWID_HOLDS_RESOURCE_TYPE_FK2", ["RESP_RESOURCE_TYPE"], "SFQA_RESP_RESOURCE_TYPE_DEF", ["RESP_RESOURCE_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HOLD_ID = parse_value(self.schema, column_value_map, "HOLD_ID")
        "Unique, system-generated identifier of the hold."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.CAUSE_TYPE = parse_value(self.schema, column_value_map, "CAUSE_TYPE")
        "Type or classification of cause/origin leading to a discrepancy."
        self.RESP_RESOURCE_TYPE = parse_value(self.schema, column_value_map, "RESP_RESOURCE_TYPE")
        "Responsible resource type. Possible values are Part, Tool, Machine, Facilities, Skill, Process, System, and Other."
        self.RESP_RESOURCE_NO = parse_value(self.schema, column_value_map, "RESP_RESOURCE_NO")
        "Responsible resource No. Possible value depends on RESP_RESOURCE_TYPE."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_STEP_DC_FORMULA_VARS:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "DAT_COL_ID": "STRING",
        "USE_RANGE": "STRING",
        "EXECUTION_ORDER": "NUMBER",
        "TEST_VALUE": "STRING",
        "VARIABLE_NAME": "STRING",
        "VISIBILITY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "FORMAT": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "DAT_COL_ID",
        "USE_RANGE",
        "EXECUTION_ORDER",
        "VARIABLE_NAME",
        "VISIBILITY",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEP_DC_FORMULA_VARS_FK1", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO","DAT_COL_ID","USE_RANGE","EXECUTION_ORDER"], "SFPL_STEP_DC_FORMULA_DESC", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO","DAT_COL_ID","USE_RANGE","EXECUTION_ORDER"]),
        DbForeignKey("SFPL_STEP_DC_FORMULA_VARS_FK2", ["VARIABLE_NAME","VISIBILITY"], "SFFND_DC_VARIABLE_DEF", ["VARIABLE_NAME","VISIBILITY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        self.USE_RANGE = parse_value(self.schema, column_value_map, "USE_RANGE")
        self.EXECUTION_ORDER = parse_value(self.schema, column_value_map, "EXECUTION_ORDER")
        self.TEST_VALUE = parse_value(self.schema, column_value_map, "TEST_VALUE")
        self.VARIABLE_NAME = parse_value(self.schema, column_value_map, "VARIABLE_NAME")
        self.VISIBILITY = parse_value(self.schema, column_value_map, "VISIBILITY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.FORMAT = parse_value(self.schema, column_value_map, "FORMAT")

class SFQA_CA_AFFECTED_CUSTOMER_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "CUST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.CUST_ID = parse_value(self.schema, column_value_map, "CUST_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFQA_DISC_ALT_ID_LINK:
    schema = {
        "DISC_ALT_ID": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "ALT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "DISC_ALT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_ALT_ID_LINK_FK1", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
        DbForeignKey("SFQA_DISC_ALT_ID_LINK_FK2", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ALT_ID = parse_value(self.schema, column_value_map, "DISC_ALT_ID")
        "The unique identifier of the discrepancy, work order alteration relation."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "Discrepancy ID having disposition action which attached to order alteration."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "Discrepancy Line Number having disposition action which attached to order alteration."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "Alteration ID which is generated by Discrepancy Item disposition action."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_COMM_ROUTING:
    schema = {
        "COMM_ID": "STRING",
        "TO_QUEUE": "STRING",
        "REPLY_REQMT": "STRING",
        "REPLY_STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ASSIGNED_TO_USERID": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "SCH_DAYS": "NUMBER",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "REV_DAYS": "NUMBER",
        "CREATE_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "DATE",
    }
    primary_key_columns = [
        "COMM_ID",
        "TO_QUEUE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_COMM_ROUTING_COMM_FK", ["COMM_ID"], "SFFND_COMM", ["COMM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.COMM_ID = parse_value(self.schema, column_value_map, "COMM_ID")
        "Unique system generated identifier for a given communication record."
        self.TO_QUEUE = parse_value(self.schema, column_value_map, "TO_QUEUE")
        self.REPLY_REQMT = parse_value(self.schema, column_value_map, "REPLY_REQMT")
        self.REPLY_STATUS = parse_value(self.schema, column_value_map, "REPLY_STATUS")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ASSIGNED_TO_USERID = parse_value(self.schema, column_value_map, "ASSIGNED_TO_USERID")
        "Unique identifier of the person the communication is assigned to."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which the manufacturing work for the work order is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which the manufacturing work for the work order is scheduled to complete."
        self.SCH_DAYS = parse_value(self.schema, column_value_map, "SCH_DAYS")
        "The scheduled duration in number of days of the task."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised work start date."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised work complete date."
        self.REV_DAYS = parse_value(self.schema, column_value_map, "REV_DAYS")
        "The revised duration in number of days of the task."
        self.CREATE_DATE = parse_value(self.schema, column_value_map, "CREATE_DATE")
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The actual date the activity started on."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The actual date the activity was completed as opposed to the scheduled one."

class SFFND_USER_LEVEL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "USERID": "STRING",
        "CURRENT_LEVEL": "NUMBER",
        "MAX_LEVEL": "NUMBER",
        "LEVEL_START_DATE": "STRING",
        "STATUS": "STRING",
        "UNDER_REVIEW_FLAG": "STRING",
        "PRODUCTION_COUNT": "NUMBER",
        "PRODUCTION_RATE": "NUMBER",
        "OI_NO_OF_UNITS": "NUMBER",
        "OI_NO_OF_DATA_COLLECTIONS": "NUMBER",
        "NO_OF_REJECTS": "NUMBER",
        "LAST_ACTIVITY_DATE": "STRING",
        "LAST_DECERTIFICATION_DATE": "STRING",
        "NOTES": "STRING",
        "LEVEL_UPDT_USERID": "STRING",
        "LEVEL_TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.CURRENT_LEVEL = parse_value(self.schema, column_value_map, "CURRENT_LEVEL")
        "User Start Level."
        self.MAX_LEVEL = parse_value(self.schema, column_value_map, "MAX_LEVEL")
        "Max level this user can get to."
        self.LEVEL_START_DATE = parse_value(self.schema, column_value_map, "LEVEL_START_DATE")
        "Date when current level was assigned."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "User Level status."
        self.UNDER_REVIEW_FLAG = parse_value(self.schema, column_value_map, "UNDER_REVIEW_FLAG")
        "Flag for whether this Operator-Inspector  is under review."
        self.PRODUCTION_COUNT = parse_value(self.schema, column_value_map, "PRODUCTION_COUNT")
        "No of times the operator inspection logic is invoked at this level/status."
        self.PRODUCTION_RATE = parse_value(self.schema, column_value_map, "PRODUCTION_RATE")
        "Calculated value from Operator Audit to be used to determine threshold. This is calculated when the operator is moved to a new level/status."
        self.OI_NO_OF_UNITS = parse_value(self.schema, column_value_map, "OI_NO_OF_UNITS")
        "Number of units or lots of successful over-inspected at the current level. Number of inspections at the current level. (An inspection is when a user has completed at least 50% of the operator inspection data collections in an op)."
        self.OI_NO_OF_DATA_COLLECTIONS = parse_value(self.schema, column_value_map, "OI_NO_OF_DATA_COLLECTIONS")
        "Number of data collections of successful over-inspected at the current level."
        self.NO_OF_REJECTS = parse_value(self.schema, column_value_map, "NO_OF_REJECTS")
        "Number of rejects at the current level."
        self.LAST_ACTIVITY_DATE = parse_value(self.schema, column_value_map, "LAST_ACTIVITY_DATE")
        "The last recorded time stamp when data collection was performed."
        self.LAST_DECERTIFICATION_DATE = parse_value(self.schema, column_value_map, "LAST_DECERTIFICATION_DATE")
        "The last date when the status of the Operator-Inspector had a status of DECERTIFIED."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "User Level Notes."
        self.LEVEL_UPDT_USERID = parse_value(self.schema, column_value_map, "LEVEL_UPDT_USERID")
        "User Level Update user id."
        self.LEVEL_TIME_STAMP = parse_value(self.schema, column_value_map, "LEVEL_TIME_STAMP")
        "User Level Update time stamp."

class SFQA_CA_REQ_AFFECTED_TOOLS:
    schema = {
        "CA_REQUEST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_REQUEST_ID",
        "TOOL_NO",
        "TOOL_CHG",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_REQ_AFFECTED_TOOLS_FK1", ["TOOL_NO","TOOL_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
        DbForeignKey("SFQA_CA_REQ_AFFECTED_TOOLS_FK", ["CA_REQUEST_ID"], "SFQA_CA_REQUEST", ["CA_REQUEST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "The primary identifier of a particular line of an affected tool."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The change number, secondary idetifier, of the an affected tool."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_RESULTING_OBJECTS:
    schema = {
        "RESULTING_OBJECT_ID": "STRING",
        "CHANGE_REQUEST_ID": "STRING",
        "RESULTING_OBJECT_TYPE": "STRING",
        "ITEM_ID": "STRING",
        "BOM_ID": "STRING",
        "PLAN_ID": "STRING",
        "OBJECT_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "UPDT_USERID": "STRING",
        "INSP_PLAN_ID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "INSP_ITEM_ID": "STRING",
        "REF1": "STRING",
        "REF2": "STRING",
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "REF3": "STRING",
        "REF4": "STRING",
        "REF5": "STRING",
        "REF6": "NUMBER",
    }
    primary_key_columns = [
        "RESULTING_OBJECT_ID",
        "CHANGE_REQUEST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_RESULTING_OBJECTS_FK2", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_RESULTING_OBJECTS_FK3", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFPL_RESULTING_OBJECTS_FK5", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
        DbForeignKey("SFPL_RESULTING_OBJECTS_FK1", ["CHANGE_REQUEST_ID"], "SFPL_CHANGE_REQUEST", ["CHANGE_REQUEST_ID"]),
        DbForeignKey("SFPL_RESULTING_OBJECTS_FK7", ["INSP_ITEM_ID","OWNER_CODE","INSP_DEF_REV"], "SFSQA_INSP_DEFINITION_REV", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"]),
        DbForeignKey("SFPL_RESULTING_OBJECTS_FK6", ["INSP_PLAN_ID","INSP_PLAN_REV"], "SFSQA_INSP_PLAN_DESC", ["INSP_PLAN_ID","INSP_PLAN_REV"]),
        DbForeignKey("SFPL_RESULTING_OBJECTS_FK4", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
        "SFPL_CHANGE_IMPL_TYPE_FK2",
        "SFPL_PLANNED_ACTIONS_FK10",
        "SFPL_AFFECTED_TO_RESULTING_FK3",
    ]
    def __init__(self, column_value_map):
        self.RESULTING_OBJECT_ID = parse_value(self.schema, column_value_map, "RESULTING_OBJECT_ID")
        "Unique System Generated Identifier of an Resulting Object of Change Request."
        self.CHANGE_REQUEST_ID = parse_value(self.schema, column_value_map, "CHANGE_REQUEST_ID")
        "Unique System Generated Identifier of a Change Request."
        self.RESULTING_OBJECT_TYPE = parse_value(self.schema, column_value_map, "RESULTING_OBJECT_TYPE")
        "The Type of Object as Resulting Output. It can be : Part, Tool, Machine, MBOM, EBOM, PLIST, File, Illustration, Standard Text, Standard Operation, Work Plan, Inspection Plan, Inspection Definition. Based on this field, the other Key ID fields will be populated."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Key Field for Part, Tool, Machine, etc."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Key Field for MBOM / EBOM / PLIST."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Key Field for Standard Operation, Work Plan."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Key Field for For File, Illustration, Standard Text, Standard Operation."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "Key Field for Standard Operation, Work Plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "Key Field for Standard Operation, Work Plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Key Field for Standard Operation, Work Plan."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        "Key Field for Inspection Plan."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        "Key Field for Inspection Plan."
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        "Key Field for Inspection Definition."
        self.REF1 = parse_value(self.schema, column_value_map, "REF1")
        "Object Number."
        self.REF2 = parse_value(self.schema, column_value_map, "REF2")
        "Object Revision."
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        "Key Field for Inspection Definition."
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        "Key Field for Inspection Definition."
        self.REF3 = parse_value(self.schema, column_value_map, "REF3")
        "Work Location of the BOM."
        self.REF4 = parse_value(self.schema, column_value_map, "REF4")
        "Revision date of the BOM."
        self.REF5 = parse_value(self.schema, column_value_map, "REF5")
        self.REF6 = parse_value(self.schema, column_value_map, "REF6")
        self.SFPL_CHANGE_IMPL_TYPE_FK2 = []
        self.SFPL_PLANNED_ACTIONS_FK10 = []
        self.SFPL_AFFECTED_TO_RESULTING_FK3 = []

class SFWID_SERIAL_DESC:
    schema = {
        "ORDER_ID": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SERIAL_NO": "STRING",
        "CUST_ORDER_ID": "STRING",
        "SERIAL_STATUS": "STRING",
        "ASGND_WORK_LOC": "STRING",
        "SCHED_PRIORITY": "STRING",
        "FINAL_STORES": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "SERIAL_HOLD_STATUS": "STRING",
        "STATUS_CHG_NOTES": "STRING",
        "STATUS_CHG_REASON": "STRING",
        "UCF_SERIAL_VCH1": "STRING",
        "UCF_SERIAL_VCH2": "STRING",
        "UCF_SERIAL_VCH3": "STRING",
        "UCF_SERIAL_VCH4": "STRING",
        "UCF_SERIAL_VCH5": "STRING",
        "UCF_SERIAL_VCH6": "STRING",
        "UCF_SERIAL_VCH7": "STRING",
        "UCF_SERIAL_VCH8": "STRING",
        "UCF_SERIAL_VCH9": "STRING",
        "UCF_SERIAL_VCH10": "STRING",
        "UCF_SERIAL_VCH11": "STRING",
        "UCF_SERIAL_VCH12": "STRING",
        "UCF_SERIAL_VCH13": "STRING",
        "UCF_SERIAL_VCH14": "STRING",
        "UCF_SERIAL_VCH15": "STRING",
        "UCF_SERIAL_NUM1": "NUMBER",
        "UCF_SERIAL_NUM2": "NUMBER",
        "UCF_SERIAL_NUM3": "NUMBER",
        "UCF_SERIAL_NUM4": "NUMBER",
        "UCF_SERIAL_NUM5": "NUMBER",
        "UCF_SERIAL_DATE1": "STRING",
        "UCF_SERIAL_DATE2": "STRING",
        "UCF_SERIAL_DATE3": "STRING",
        "UCF_SERIAL_DATE4": "STRING",
        "UCF_SERIAL_DATE5": "STRING",
        "UCF_SERIAL_FLAG1": "STRING",
        "UCF_SERIAL_FLAG2": "STRING",
        "UCF_SERIAL_FLAG3": "STRING",
        "UCF_SERIAL_FLAG4": "STRING",
        "UCF_SERIAL_FLAG5": "STRING",
        "UCF_SERIAL_VCH255_1": "STRING",
        "UCF_SERIAL_VCH255_2": "STRING",
        "UCF_SERIAL_VCH255_3": "STRING",
        "UCF_SERIAL_VCH4000_1": "STRING",
        "UCF_SERIAL_VCH4000_2": "STRING",
        "SERIAL_CONDITION": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "UID_COMPOSITE": "STRING",
        "UID_LABEL": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "LOT_ID",
        "SERIAL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_SERIAL_DESC_UID_FK1", ["UID_ENTRY_NAME"], "SFFND_UID_ENTRY", ["UID_ENTRY_NAME"]),
        DbForeignKey("SFWID_SERIAL_DESC_LOT_FK", ["ORDER_ID","LOT_ID"], "SFWID_LOT_DESC", ["ORDER_ID","LOT_ID"]),
    ]
    refs = [
        "SFWID_SERIAL_NODE_FK2",
        "SFWID_SERIAL_HOLDS_SER_DESC_FK",
        "SFSQA_IDP_UNITS_FK4",
        "SFWID_SEROPEROPERTL_SERL_FK",
        "SFWID_USER_OVER_INSP_UNITS_FK3",
        "SFWID_SERIAL_OPER_MATERIAL_FK2",
        "SFWID_SEROPERDC_SERL_FK",
        "SFWID_SEROPERITEMS_SERL_FK",
        "SFWID_SERIAL_OPER_SER_DESC_FK",
        "SFWID_GROUP_JOB_SERIAL_FK2",
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.CUST_ORDER_ID = parse_value(self.schema, column_value_map, "CUST_ORDER_ID")
        "System-generated identifier of a given order for a given customer."
        self.SERIAL_STATUS = parse_value(self.schema, column_value_map, "SERIAL_STATUS")
        "Status of the given serial number, e.g., COMPLETE, SCRAP"
        self.ASGND_WORK_LOC = parse_value(self.schema, column_value_map, "ASGND_WORK_LOC")
        "The assigned work location for the given work order."
        self.SCHED_PRIORITY = parse_value(self.schema, column_value_map, "SCHED_PRIORITY")
        "The scheduled priority of the associated component, e.g., High, Low, Medium."
        self.FINAL_STORES = parse_value(self.schema, column_value_map, "FINAL_STORES")
        "Storage or process location associated with the final phases of the given work plan or work order."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised start date for the given order."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised end date for the given order."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which work for the work order was actually started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which work for the work order was actually completed."
        self.SERIAL_HOLD_STATUS = parse_value(self.schema, column_value_map, "SERIAL_HOLD_STATUS")
        "Status of the hold on the given serial number."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated component/part."
        self.STATUS_CHG_REASON = parse_value(self.schema, column_value_map, "STATUS_CHG_REASON")
        "Reason for a change in status."
        self.UCF_SERIAL_VCH1 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH1")
        self.UCF_SERIAL_VCH2 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH2")
        self.UCF_SERIAL_VCH3 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH3")
        self.UCF_SERIAL_VCH4 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH4")
        self.UCF_SERIAL_VCH5 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH5")
        self.UCF_SERIAL_VCH6 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH6")
        self.UCF_SERIAL_VCH7 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH7")
        self.UCF_SERIAL_VCH8 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH8")
        self.UCF_SERIAL_VCH9 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH9")
        self.UCF_SERIAL_VCH10 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH10")
        self.UCF_SERIAL_VCH11 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH11")
        self.UCF_SERIAL_VCH12 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH12")
        self.UCF_SERIAL_VCH13 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH13")
        self.UCF_SERIAL_VCH14 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH14")
        self.UCF_SERIAL_VCH15 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH15")
        self.UCF_SERIAL_NUM1 = parse_value(self.schema, column_value_map, "UCF_SERIAL_NUM1")
        self.UCF_SERIAL_NUM2 = parse_value(self.schema, column_value_map, "UCF_SERIAL_NUM2")
        self.UCF_SERIAL_NUM3 = parse_value(self.schema, column_value_map, "UCF_SERIAL_NUM3")
        self.UCF_SERIAL_NUM4 = parse_value(self.schema, column_value_map, "UCF_SERIAL_NUM4")
        self.UCF_SERIAL_NUM5 = parse_value(self.schema, column_value_map, "UCF_SERIAL_NUM5")
        self.UCF_SERIAL_DATE1 = parse_value(self.schema, column_value_map, "UCF_SERIAL_DATE1")
        self.UCF_SERIAL_DATE2 = parse_value(self.schema, column_value_map, "UCF_SERIAL_DATE2")
        self.UCF_SERIAL_DATE3 = parse_value(self.schema, column_value_map, "UCF_SERIAL_DATE3")
        self.UCF_SERIAL_DATE4 = parse_value(self.schema, column_value_map, "UCF_SERIAL_DATE4")
        self.UCF_SERIAL_DATE5 = parse_value(self.schema, column_value_map, "UCF_SERIAL_DATE5")
        self.UCF_SERIAL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SERIAL_FLAG1")
        self.UCF_SERIAL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SERIAL_FLAG2")
        self.UCF_SERIAL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SERIAL_FLAG3")
        self.UCF_SERIAL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SERIAL_FLAG4")
        self.UCF_SERIAL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SERIAL_FLAG5")
        self.UCF_SERIAL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH255_1")
        self.UCF_SERIAL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH255_2")
        self.UCF_SERIAL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH255_3")
        self.UCF_SERIAL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH4000_1")
        self.UCF_SERIAL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH4000_2")
        self.SERIAL_CONDITION = parse_value(self.schema, column_value_map, "SERIAL_CONDITION")
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.UID_COMPOSITE = parse_value(self.schema, column_value_map, "UID_COMPOSITE")
        self.UID_LABEL = parse_value(self.schema, column_value_map, "UID_LABEL")
        self.SFWID_SERIAL_NODE_FK2 = []
        self.SFWID_SERIAL_HOLDS_SER_DESC_FK = []
        self.SFSQA_IDP_UNITS_FK4 = []
        self.SFWID_SEROPEROPERTL_SERL_FK = []
        self.SFWID_USER_OVER_INSP_UNITS_FK3 = []
        self.SFWID_SERIAL_OPER_MATERIAL_FK2 = []
        self.SFWID_SEROPERDC_SERL_FK = []
        self.SFWID_SEROPERITEMS_SERL_FK = []
        self.SFWID_SERIAL_OPER_SER_DESC_FK = []
        self.SFWID_GROUP_JOB_SERIAL_FK2 = []

class SFFND_MANUFACTURER:
    schema = {
        "MANUFACTURER": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "MANUFACTURER_NAME": "STRING",
    }
    primary_key_columns = [
        "MANUFACTURER",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_ITEM_MANUFACTURER_M_FK",
        "SFFND_TOOL_MANUFACTURER_M_FK",
    ]
    def __init__(self, column_value_map):
        self.MANUFACTURER = parse_value(self.schema, column_value_map, "MANUFACTURER")
        "The name and unique identifier of a manufacturer of parts and/or tools."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.MANUFACTURER_NAME = parse_value(self.schema, column_value_map, "MANUFACTURER_NAME")
        "A descriptive name of the manufacturer."
        self.SFPL_ITEM_MANUFACTURER_M_FK = []
        self.SFFND_TOOL_MANUFACTURER_M_FK = []

class SFLTA_JOB_USER_XREF:
    schema = {
        "JOB_ID": "STRING",
        "USERID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "JOB_ID",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFLTA_JOB_USER_FK", ["JOB_ID"], "SFLTA_JOB_DEF", ["JOB_ID"]),
        DbForeignKey("SFLTA_JOB_USERID_FK", ["USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.JOB_ID = parse_value(self.schema, column_value_map, "JOB_ID")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFWID_ORDER_ITEM_ISSUED_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_PART_ISSUE_ID": "STRING",
        "ORDER_TYPE": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "PLND_PART_NO": "STRING",
        "PLND_PART_CHG": "STRING",
        "PLND_ITEM_ID": "STRING",
        "REF_DES": "STRING",
        "ISSUED_PART_NO": "STRING",
        "ISSUED_PART_CHG": "STRING",
        "ISSUED_ITEM_ID": "STRING",
        "ISSUED_QTY": "NUMBER",
        "ISSUED_SERIAL_NO": "STRING",
        "ISSUED_LOT_NO": "STRING",
        "ISSUED_SPOOL_NO": "STRING",
        "ISSUED_WORK_LOC": "STRING",
        "ISSUED_WORK_DEPT": "STRING",
        "ISSUED_WORK_CENTER": "STRING",
        "ISSUED_EXTERNAL_ERP_NO": "STRING",
        "ISSUED_CONSUMED": "STRING",
        "COMMENTS": "STRING",
        "STORE_LOC": "STRING",
        "PART_LINE_NO": "NUMBER",
        "BOM_LINE_NO": "STRING",
        "PHANTOM_KIT_PART_NO": "STRING",
        "PHANTOM_KIT_NO": "STRING",
        "UCF_ITEM_ISSUED_VCH1": "STRING",
        "UCF_ITEM_ISSUED_VCH2": "STRING",
        "UCF_ITEM_ISSUED_VCH3": "STRING",
        "UCF_ITEM_ISSUED_VCH4": "STRING",
        "UCF_ITEM_ISSUED_VCH5": "STRING",
        "UCF_ITEM_ISSUED_VCH6": "STRING",
        "UCF_ITEM_ISSUED_VCH7": "STRING",
        "UCF_ITEM_ISSUED_VCH8": "STRING",
        "UCF_ITEM_ISSUED_VCH9": "STRING",
        "UCF_ITEM_ISSUED_VCH10": "STRING",
        "UCF_ITEM_ISSUED_VCH11": "STRING",
        "UCF_ITEM_ISSUED_VCH12": "STRING",
        "UCF_ITEM_ISSUED_VCH13": "STRING",
        "UCF_ITEM_ISSUED_VCH14": "STRING",
        "UCF_ITEM_ISSUED_VCH15": "STRING",
        "UCF_ITEM_ISSUED_NUM1": "NUMBER",
        "UCF_ITEM_ISSUED_NUM2": "NUMBER",
        "UCF_ITEM_ISSUED_NUM3": "NUMBER",
        "UCF_ITEM_ISSUED_NUM4": "NUMBER",
        "UCF_ITEM_ISSUED_NUM5": "NUMBER",
        "UCF_ITEM_ISSUED_DATE1": "STRING",
        "UCF_ITEM_ISSUED_DATE2": "STRING",
        "UCF_ITEM_ISSUED_DATE3": "STRING",
        "UCF_ITEM_ISSUED_DATE4": "STRING",
        "UCF_ITEM_ISSUED_DATE5": "STRING",
        "UCF_ITEM_ISSUED_FLAG1": "STRING",
        "UCF_ITEM_ISSUED_FLAG2": "STRING",
        "UCF_ITEM_ISSUED_FLAG3": "STRING",
        "UCF_ITEM_ISSUED_FLAG4": "STRING",
        "UCF_ITEM_ISSUED_FLAG5": "STRING",
        "UCF_ITEM_ISSUED_VCH255_1": "STRING",
        "UCF_ITEM_ISSUED_VCH255_2": "STRING",
        "UCF_ITEM_ISSUED_VCH255_3": "STRING",
        "UCF_ITEM_ISSUED_VCH4000_1": "STRING",
        "UCF_ITEM_ISSUED_VCH4000_2": "STRING",
        "KIT_ID": "STRING",
        "WAIV_DEV_REJ_NO": "STRING",
        "ACTIVITY_SEQ": "NUMBER",
        "HANDLING_UNIT_ID": "NUMBER",
        "LOCATION_NO": "STRING",
        "ORD_REF4": "STRING",
        "ENG_CHG_LEVEL": "STRING",
        "KIT_ID_STATUS": "STRING",
        "MATERIAL_ID": "STRING",
        "DESIGN_AUTHORITY": "STRING",
        "MANUFACTURER_CODE": "STRING",
        "MANUFACTURER_PART_NO": "STRING",
        "MANUFACTURER_SERIAL_NO": "STRING",
        "MANUFACTURER_LOT_NO": "STRING",
        "UID_COMPOSITE": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        self.ORDER_PART_ISSUE_ID = parse_value(self.schema, column_value_map, "ORDER_PART_ISSUE_ID")
        self.ORDER_TYPE = parse_value(self.schema, column_value_map, "ORDER_TYPE")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.PLND_PART_NO = parse_value(self.schema, column_value_map, "PLND_PART_NO")
        self.PLND_PART_CHG = parse_value(self.schema, column_value_map, "PLND_PART_CHG")
        self.PLND_ITEM_ID = parse_value(self.schema, column_value_map, "PLND_ITEM_ID")
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        self.ISSUED_PART_NO = parse_value(self.schema, column_value_map, "ISSUED_PART_NO")
        self.ISSUED_PART_CHG = parse_value(self.schema, column_value_map, "ISSUED_PART_CHG")
        self.ISSUED_ITEM_ID = parse_value(self.schema, column_value_map, "ISSUED_ITEM_ID")
        self.ISSUED_QTY = parse_value(self.schema, column_value_map, "ISSUED_QTY")
        self.ISSUED_SERIAL_NO = parse_value(self.schema, column_value_map, "ISSUED_SERIAL_NO")
        self.ISSUED_LOT_NO = parse_value(self.schema, column_value_map, "ISSUED_LOT_NO")
        self.ISSUED_SPOOL_NO = parse_value(self.schema, column_value_map, "ISSUED_SPOOL_NO")
        self.ISSUED_WORK_LOC = parse_value(self.schema, column_value_map, "ISSUED_WORK_LOC")
        self.ISSUED_WORK_DEPT = parse_value(self.schema, column_value_map, "ISSUED_WORK_DEPT")
        self.ISSUED_WORK_CENTER = parse_value(self.schema, column_value_map, "ISSUED_WORK_CENTER")
        self.ISSUED_EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "ISSUED_EXTERNAL_ERP_NO")
        self.ISSUED_CONSUMED = parse_value(self.schema, column_value_map, "ISSUED_CONSUMED")
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        self.STORE_LOC = parse_value(self.schema, column_value_map, "STORE_LOC")
        self.PART_LINE_NO = parse_value(self.schema, column_value_map, "PART_LINE_NO")
        "A unique sequential number that is assigned when the component part is authored in the order/plan."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        "A unique sequential number that is assigned to BOM component part."
        self.PHANTOM_KIT_PART_NO = parse_value(self.schema, column_value_map, "PHANTOM_KIT_PART_NO")
        "Parent phantom part no of component part."
        self.PHANTOM_KIT_NO = parse_value(self.schema, column_value_map, "PHANTOM_KIT_NO")
        "Unit Number of phantom."
        self.UCF_ITEM_ISSUED_VCH1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH4 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH5 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH6 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH7 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH8 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH9 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH10 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH11 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH12 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH13 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH14 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_VCH15 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ISSUED_NUM1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ISSUED_NUM2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ISSUED_NUM3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ISSUED_NUM4 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ISSUED_NUM5 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ISSUED_DATE1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ISSUED_DATE2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ISSUED_DATE3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ISSUED_DATE4 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ISSUED_DATE5 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ISSUED_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ISSUED_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ISSUED_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ISSUED_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ISSUED_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ISSUED_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_ISSUED_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_ISSUED_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_ISSUED_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ITEM_ISSUED_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ISSUED_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.KIT_ID = parse_value(self.schema, column_value_map, "KIT_ID")
        self.WAIV_DEV_REJ_NO = parse_value(self.schema, column_value_map, "WAIV_DEV_REJ_NO")
        self.ACTIVITY_SEQ = parse_value(self.schema, column_value_map, "ACTIVITY_SEQ")
        self.HANDLING_UNIT_ID = parse_value(self.schema, column_value_map, "HANDLING_UNIT_ID")
        self.LOCATION_NO = parse_value(self.schema, column_value_map, "LOCATION_NO")
        self.ORD_REF4 = parse_value(self.schema, column_value_map, "ORD_REF4")
        self.ENG_CHG_LEVEL = parse_value(self.schema, column_value_map, "ENG_CHG_LEVEL")
        self.KIT_ID_STATUS = parse_value(self.schema, column_value_map, "KIT_ID_STATUS")
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        self.DESIGN_AUTHORITY = parse_value(self.schema, column_value_map, "DESIGN_AUTHORITY")
        self.MANUFACTURER_CODE = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE")
        self.MANUFACTURER_PART_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_PART_NO")
        self.MANUFACTURER_SERIAL_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_SERIAL_NO")
        self.MANUFACTURER_LOT_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_LOT_NO")
        self.UID_COMPOSITE = parse_value(self.schema, column_value_map, "UID_COMPOSITE")

class SFWID_SERIAL_HOLDS:
    schema = {
        "ORDER_ID": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "HOLD_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_SRL_HOLD_VCH1": "STRING",
        "UCF_SRL_HOLD_VCH2": "STRING",
        "UCF_SRL_HOLD_VCH3": "STRING",
        "UCF_SRL_HOLD_VCH4": "STRING",
        "UCF_SRL_HOLD_VCH5": "STRING",
        "UCF_SRL_HOLD_VCH6": "STRING",
        "UCF_SRL_HOLD_VCH7": "STRING",
        "UCF_SRL_HOLD_VCH8": "STRING",
        "UCF_SRL_HOLD_VCH9": "STRING",
        "UCF_SRL_HOLD_VCH10": "STRING",
        "UCF_SRL_HOLD_VCH11": "STRING",
        "UCF_SRL_HOLD_VCH12": "STRING",
        "UCF_SRL_HOLD_VCH13": "STRING",
        "UCF_SRL_HOLD_VCH14": "STRING",
        "UCF_SRL_HOLD_VCH15": "STRING",
        "UCF_SRL_HOLD_NUM1": "NUMBER",
        "UCF_SRL_HOLD_NUM2": "NUMBER",
        "UCF_SRL_HOLD_NUM3": "NUMBER",
        "UCF_SRL_HOLD_NUM4": "NUMBER",
        "UCF_SRL_HOLD_NUM5": "NUMBER",
        "UCF_SRL_HOLD_DATE1": "STRING",
        "UCF_SRL_HOLD_DATE2": "STRING",
        "UCF_SRL_HOLD_DATE3": "STRING",
        "UCF_SRL_HOLD_DATE4": "STRING",
        "UCF_SRL_HOLD_DATE5": "STRING",
        "UCF_SRL_HOLD_FLAG1": "STRING",
        "UCF_SRL_HOLD_FLAG2": "STRING",
        "UCF_SRL_HOLD_FLAG3": "STRING",
        "UCF_SRL_HOLD_FLAG4": "STRING",
        "UCF_SRL_HOLD_FLAG5": "STRING",
        "UCF_SRL_HOLD_VCH255_1": "STRING",
        "UCF_SRL_HOLD_VCH255_2": "STRING",
        "UCF_SRL_HOLD_VCH255_3": "STRING",
        "UCF_SRL_HOLD_VCH4000_1": "STRING",
        "UCF_SRL_HOLD_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "LOT_ID",
        "SERIAL_ID",
        "HOLD_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_SRL_HOLDS_HOLDS_FK", ["HOLD_ID","ORDER_ID"], "SFWID_HOLDS", ["HOLD_ID","ORDER_ID"]),
        DbForeignKey("SFWID_SERIAL_HOLDS_SER_DESC_FK", ["ORDER_ID","LOT_ID","SERIAL_ID"], "SFWID_SERIAL_DESC", ["ORDER_ID","LOT_ID","SERIAL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.HOLD_ID = parse_value(self.schema, column_value_map, "HOLD_ID")
        "Unique, system-generated identifier of the hold."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_SRL_HOLD_VCH1 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH1")
        self.UCF_SRL_HOLD_VCH2 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH2")
        self.UCF_SRL_HOLD_VCH3 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH3")
        self.UCF_SRL_HOLD_VCH4 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH4")
        self.UCF_SRL_HOLD_VCH5 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH5")
        self.UCF_SRL_HOLD_VCH6 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH6")
        self.UCF_SRL_HOLD_VCH7 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH7")
        self.UCF_SRL_HOLD_VCH8 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH8")
        self.UCF_SRL_HOLD_VCH9 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH9")
        self.UCF_SRL_HOLD_VCH10 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH10")
        self.UCF_SRL_HOLD_VCH11 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH11")
        self.UCF_SRL_HOLD_VCH12 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH12")
        self.UCF_SRL_HOLD_VCH13 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH13")
        self.UCF_SRL_HOLD_VCH14 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH14")
        self.UCF_SRL_HOLD_VCH15 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH15")
        self.UCF_SRL_HOLD_NUM1 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_NUM1")
        self.UCF_SRL_HOLD_NUM2 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_NUM2")
        self.UCF_SRL_HOLD_NUM3 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_NUM3")
        self.UCF_SRL_HOLD_NUM4 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_NUM4")
        self.UCF_SRL_HOLD_NUM5 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_NUM5")
        self.UCF_SRL_HOLD_DATE1 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_DATE1")
        self.UCF_SRL_HOLD_DATE2 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_DATE2")
        self.UCF_SRL_HOLD_DATE3 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_DATE3")
        self.UCF_SRL_HOLD_DATE4 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_DATE4")
        self.UCF_SRL_HOLD_DATE5 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_DATE5")
        self.UCF_SRL_HOLD_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_FLAG1")
        self.UCF_SRL_HOLD_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_FLAG2")
        self.UCF_SRL_HOLD_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_FLAG3")
        self.UCF_SRL_HOLD_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_FLAG4")
        self.UCF_SRL_HOLD_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_FLAG5")
        self.UCF_SRL_HOLD_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH255_1")
        self.UCF_SRL_HOLD_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH255_2")
        self.UCF_SRL_HOLD_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH255_3")
        self.UCF_SRL_HOLD_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH4000_1")
        self.UCF_SRL_HOLD_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH4000_2")

class SFWID_OPER_ITEMS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "PART_DAT_COL_ID": "STRING",
        "REF_DES": "STRING",
        "PLND_ITEM_ID": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PLND_ITEM_QTY": "NUMBER",
        "PART_ACTION": "STRING",
        "OVER_CONSUMPTION_FLAG": "STRING",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "SPOOL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "OPT_DC1_FLAG": "STRING",
        "OPT_DC2_FLAG": "STRING",
        "OPT_DC3_FLAG": "STRING",
        "OPT_DC4_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "SUSPECT_FLAG": "STRING",
        "TRACKABLE_FLAG": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "UOM": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "ITEM_CATEGORY": "STRING",
        "STORE_LOC": "STRING",
        "UNLOADING_POINT": "STRING",
        "REF_DES_PREF_RANK": "NUMBER",
        "FIND_NO": "STRING",
        "ITEM_NOTES": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "UTILIZATION_RULE": "STRING",
        "REMOVE_ACTION": "STRING",
        "UCF_PLAN_ITEM_VCH1": "STRING",
        "UCF_PLAN_ITEM_VCH2": "STRING",
        "UCF_PLAN_ITEM_VCH3": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "UCF_PLAN_ITEM_VCH4": "STRING",
        "UCF_PLAN_ITEM_VCH5": "STRING",
        "UCF_PLAN_ITEM_VCH6": "STRING",
        "UCF_PLAN_ITEM_VCH7": "STRING",
        "UCF_PLAN_ITEM_VCH8": "STRING",
        "UCF_PLAN_ITEM_VCH9": "STRING",
        "UCF_PLAN_ITEM_VCH10": "STRING",
        "UCF_PLAN_ITEM_VCH11": "STRING",
        "UCF_PLAN_ITEM_VCH12": "STRING",
        "UCF_PLAN_ITEM_VCH13": "STRING",
        "UCF_PLAN_ITEM_VCH14": "STRING",
        "UCF_PLAN_ITEM_VCH15": "STRING",
        "UCF_PLAN_ITEM_NUM1": "NUMBER",
        "UCF_PLAN_ITEM_NUM3": "NUMBER",
        "UCF_PLAN_ITEM_NUM2": "NUMBER",
        "UCF_PLAN_ITEM_NUM4": "NUMBER",
        "UCF_PLAN_ITEM_NUM5": "NUMBER",
        "UCF_PLAN_ITEM_DATE1": "STRING",
        "UCF_PLAN_ITEM_DATE2": "STRING",
        "UCF_PLAN_ITEM_DATE3": "STRING",
        "UCF_PLAN_ITEM_DATE4": "STRING",
        "UCF_PLAN_ITEM_DATE5": "STRING",
        "UCF_PLAN_ITEM_FLAG1": "STRING",
        "UCF_PLAN_ITEM_FLAG2": "STRING",
        "UCF_PLAN_ITEM_FLAG3": "STRING",
        "UCF_PLAN_ITEM_FLAG4": "STRING",
        "UCF_PLAN_ITEM_FLAG5": "STRING",
        "UCF_PLAN_ITEM_VCH255_1": "STRING",
        "UCF_PLAN_ITEM_VCH255_2": "STRING",
        "UCF_PLAN_ITEM_VCH255_3": "STRING",
        "UCF_PLAN_ITEM_VCH4000_1": "STRING",
        "UCF_PLAN_ITEM_VCH4000_2": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "SECURITY_GROUP": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "PART_TITLE": "STRING",
        "STANDARD_PART_FLAG": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "DISP_PART_DAT_COL_ID": "STRING",
        "PART_LINE_NO": "NUMBER",
        "BOM_LINE_NO": "STRING",
        "PHANTOM_KIT_PART_NO": "STRING",
        "REPLACEMENT_PART_NO": "STRING",
        "REPLACEMENT_PART_CHG": "STRING",
        "BOM_COMP_ID": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
        "REF_DES_DESC": "STRING",
        "RAW_MATERIAL_LENGTH": "NUMBER",
        "RAW_MATERIAL_WIDTH": "NUMBER",
        "NO_OF_PCS": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "PART_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_ITEMS_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_ITEMS_FK03", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
        DbForeignKey("SFWID_OPER_ITMES_OPERDESC_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_OPER_ITEMS_FK02", ["REMOVE_ACTION"], "SFQA_COMP_DISP_TYPE_DEF", ["COMP_DISP_TYPE"]),
        DbForeignKey("SFWID_OPER_ITEMS_ITEM_FK", ["PLND_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFWID_OPER_ITEMS_UNIT_FK", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFWID_OPER_ITEMS_FK01", ["UID_ENTRY_NAME"], "SFFND_UID_ENTRY", ["UID_ENTRY_NAME"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.PLND_ITEM_ID = parse_value(self.schema, column_value_map, "PLND_ITEM_ID")
        "Unique, system-generated ID of the given component/part."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PLND_ITEM_QTY = parse_value(self.schema, column_value_map, "PLND_ITEM_QTY")
        "The planned quantity associated with a given component/part."
        self.PART_ACTION = parse_value(self.schema, column_value_map, "PART_ACTION")
        "The intended action of the component/part, i.e., USE or REMOVE."
        self.OVER_CONSUMPTION_FLAG = parse_value(self.schema, column_value_map, "OVER_CONSUMPTION_FLAG")
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.SPOOL_FLAG = parse_value(self.schema, column_value_map, "SPOOL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by a spool number."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by expiration date."
        self.OPT_DC1_FLAG = parse_value(self.schema, column_value_map, "OPT_DC1_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC2_FLAG = parse_value(self.schema, column_value_map, "OPT_DC2_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC3_FLAG = parse_value(self.schema, column_value_map, "OPT_DC3_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC4_FLAG = parse_value(self.schema, column_value_map, "OPT_DC4_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.TRACKABLE_FLAG = parse_value(self.schema, column_value_map, "TRACKABLE_FLAG")
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Denormalized UOM associated with the given object as derived from the specific order at the time the record was created."
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.ITEM_CATEGORY = parse_value(self.schema, column_value_map, "ITEM_CATEGORY")
        self.STORE_LOC = parse_value(self.schema, column_value_map, "STORE_LOC")
        self.UNLOADING_POINT = parse_value(self.schema, column_value_map, "UNLOADING_POINT")
        self.REF_DES_PREF_RANK = parse_value(self.schema, column_value_map, "REF_DES_PREF_RANK")
        "Where multiple candidate components are associated with a given reference designator, the rank of a given candidate, where the lowest number shows the highest preference for use."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.ITEM_NOTES = parse_value(self.schema, column_value_map, "ITEM_NOTES")
        "Additional information about a given component/part."
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.UTILIZATION_RULE = parse_value(self.schema, column_value_map, "UTILIZATION_RULE")
        self.REMOVE_ACTION = parse_value(self.schema, column_value_map, "REMOVE_ACTION")
        "Type or classification of disposition for a given component/part."
        self.UCF_PLAN_ITEM_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.UCF_PLAN_ITEM_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH6")
        self.UCF_PLAN_ITEM_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH7")
        self.UCF_PLAN_ITEM_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH8")
        self.UCF_PLAN_ITEM_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH9")
        self.UCF_PLAN_ITEM_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH10")
        self.UCF_PLAN_ITEM_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH11")
        self.UCF_PLAN_ITEM_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH12")
        self.UCF_PLAN_ITEM_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH13")
        self.UCF_PLAN_ITEM_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH14")
        self.UCF_PLAN_ITEM_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH15")
        self.UCF_PLAN_ITEM_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_ITEM_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM3")
        self.UCF_PLAN_ITEM_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_ITEM_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM4")
        self.UCF_PLAN_ITEM_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM5")
        self.UCF_PLAN_ITEM_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE1")
        self.UCF_PLAN_ITEM_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE2")
        self.UCF_PLAN_ITEM_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE3")
        self.UCF_PLAN_ITEM_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE4")
        self.UCF_PLAN_ITEM_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE5")
        self.UCF_PLAN_ITEM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PLAN_ITEM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PLAN_ITEM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG3")
        self.UCF_PLAN_ITEM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG4")
        self.UCF_PLAN_ITEM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG5")
        self.UCF_PLAN_ITEM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH255_1")
        self.UCF_PLAN_ITEM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH255_2")
        self.UCF_PLAN_ITEM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH255_3")
        self.UCF_PLAN_ITEM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH4000_1")
        self.UCF_PLAN_ITEM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH4000_2")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.PART_TITLE = parse_value(self.schema, column_value_map, "PART_TITLE")
        self.STANDARD_PART_FLAG = parse_value(self.schema, column_value_map, "STANDARD_PART_FLAG")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.DISP_PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "DISP_PART_DAT_COL_ID")
        self.PART_LINE_NO = parse_value(self.schema, column_value_map, "PART_LINE_NO")
        "A unique sequential number that is assigned when the component part is authored in the order/plan."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        "A unique sequential number that is assigned to BOM component part."
        self.PHANTOM_KIT_PART_NO = parse_value(self.schema, column_value_map, "PHANTOM_KIT_PART_NO")
        "Parent phantom part no of component part."
        self.REPLACEMENT_PART_NO = parse_value(self.schema, column_value_map, "REPLACEMENT_PART_NO")
        "Contains replacement part number."
        self.REPLACEMENT_PART_CHG = parse_value(self.schema, column_value_map, "REPLACEMENT_PART_CHG")
        "Contains replacement part revision."
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        "Contains BOM Component id if part is authored from BOM."
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        self.REF_DES_DESC = parse_value(self.schema, column_value_map, "REF_DES_DESC")
        self.RAW_MATERIAL_LENGTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_LENGTH")
        self.RAW_MATERIAL_WIDTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_WIDTH")
        self.NO_OF_PCS = parse_value(self.schema, column_value_map, "NO_OF_PCS")

class SFQA_DISC_DESC_MM_OBJECTS:
    schema = {
        "DISC_ID": "STRING",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH1": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH2": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH3": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH4": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH5": "STRING",
        "UCF_DISC_DESC_MM_OBJ_NUM1": "NUMBER",
        "UCF_DISC_DESC_MM_OBJ_NUM2": "NUMBER",
        "UCF_DISC_DESC_MM_OBJ_NUM3": "NUMBER",
        "UCF_DISC_DESC_MM_OBJ_DATE1": "STRING",
        "UCF_DISC_DESC_MM_OBJ_DATE2": "STRING",
        "UCF_DISC_DESC_MM_OBJ_FLAG1": "STRING",
        "UCF_DISC_DESC_MM_OBJ_FLAG2": "STRING",
        "UCF_DISC_DESC_MM_OBJ_FLAG3": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH255_1": "STRING",
        "UCF_DISC_DESC_MM_OBJ_VCH255_2": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "RTF_LINK_ID": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "OBJECT_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_DESC_MM_OBJECTS_FK1", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFQA_DISC_DESC_MM_OBJECTS_FK2", ["DISC_ID"], "SFQA_DISC_DESC", ["DISC_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "Identifier of the discrepancy, including line number."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_DISC_DESC_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_DESC_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_DESC_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_DESC_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_DESC_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_DESC_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_DISC_DESC_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_DISC_DESC_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_DISC_DESC_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_DISC_DESC_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_DISC_DESC_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_DESC_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_DESC_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_DESC_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_DISC_DESC_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_DESC_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."

class MOTT_MATERIAL_SERIAL:
    schema = {
        "MATERIAL_ID": "STRING",
        "SERIAL_ID": "STRING",
        "SERIAL_NO": "STRING",
        "LOT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "MATERIAL_ID",
        "SERIAL_ID",
        "LOT_ID",
    ]
    foreign_keys = [
        DbForeignKey("MOTT_MATERIAL_SERIAL_FK1", ["MATERIAL_ID","LOT_ID"], "MOTT_MATERIAL_LOT", ["MATERIAL_ID","LOT_ID"]),
        DbForeignKey("MOTT_MATERIAL_SERIAL_FK2", ["MATERIAL_ID"], "MOTT_TIME_MATERIAL", ["MATERIAL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        "Id of the Material"
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Id of the Serial"
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "Serial number."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Id for the Material Lot."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the user"
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was modified."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation"

class SFFND_CLASSIFICATION:
    schema = {
        "CLASSIFICATION_NAME": "STRING",
        "HEADER": "STRING",
        "FOOTER": "STRING",
        "IS_DEFAULT": "STRING",
        "NOTES": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CLASSIFICATION_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CLASSIFICATION_NAME = parse_value(self.schema, column_value_map, "CLASSIFICATION_NAME")
        self.HEADER = parse_value(self.schema, column_value_map, "HEADER")
        self.FOOTER = parse_value(self.schema, column_value_map, "FOOTER")
        self.IS_DEFAULT = parse_value(self.schema, column_value_map, "IS_DEFAULT")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFWID_ORDER_TEXT_SUBVAR:
    schema = {
        "ORDER_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "TEXT_TYPE",
        "TAG",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_TEXT_SV_FK1", ["ORDER_ID","TEXT_TYPE"], "SFWID_ORDER_TEXT", ["ORDER_ID","TEXT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFPL_MFG_BOM_REV_ORIG:
    schema = {
        "BOM_ID": "STRING",
        "ITEM_ID": "STRING",
        "MFG_BOM_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "COMMENTS": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "POSITION_FLAG": "STRING",
        "BOM_NO": "STRING",
        "MBOM_REV_DATE": "STRING",
        "BOM_TYPE": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "PROGRAM": "STRING",
        "PROJECT": "STRING",
        "UCF_MBOM_REV_VCH1": "STRING",
        "UCF_MBOM_REV_VCH2": "STRING",
        "PLG_GROUP": "STRING",
        "ENG_GROUP": "STRING",
        "UCF_MBOM_REV_VCH3": "STRING",
        "UCF_MBOM_REV_VCH4": "STRING",
        "UCF_MBOM_REV_VCH5": "STRING",
        "UCF_MBOM_REV_VCH6": "STRING",
        "UCF_MBOM_REV_VCH7": "STRING",
        "UCF_MBOM_REV_VCH8": "STRING",
        "UCF_MBOM_REV_VCH9": "STRING",
        "UCF_MBOM_REV_VCH10": "STRING",
        "UCF_MBOM_REV_VCH11": "STRING",
        "UCF_MBOM_REV_VCH12": "STRING",
        "UCF_MBOM_REV_VCH13": "STRING",
        "UCF_MBOM_REV_VCH14": "STRING",
        "UCF_MBOM_REV_VCH15": "STRING",
        "UCF_MBOM_REV_VCH255_1": "STRING",
        "UCF_MBOM_REV_VCH255_2": "STRING",
        "UCF_MBOM_REV_VCH255_3": "STRING",
        "UCF_MBOM_REV_VCH4000_1": "STRING",
        "UCF_MBOM_REV_VCH4000_2": "STRING",
        "UCF_MBOM_REV_NUM1": "NUMBER",
        "UCF_MBOM_REV_NUM2": "NUMBER",
        "UCF_MBOM_REV_NUM3": "NUMBER",
        "UCF_MBOM_REV_NUM4": "NUMBER",
        "UCF_MBOM_REV_NUM5": "NUMBER",
        "UCF_MBOM_REV_DATE1": "STRING",
        "UCF_MBOM_REV_DATE2": "STRING",
        "UCF_MBOM_REV_DATE3": "STRING",
        "UCF_MBOM_REV_DATE4": "STRING",
        "UCF_MBOM_REV_DATE5": "STRING",
        "UCF_MBOM_REV_FLAG1": "STRING",
        "UCF_MBOM_REV_FLAG2": "STRING",
        "UCF_MBOM_REV_FLAG3": "STRING",
        "UCF_MBOM_REV_FLAG4": "STRING",
        "UCF_MBOM_REV_FLAG5": "STRING",
        "SECURITY_GROUP": "STRING",
        "PHANTOM_KIT_FLAG": "STRING",
        "BOM_SUBTYPE": "STRING",
        "CREATED_FROM_BOM_ID": "STRING",
        "SOURCE": "STRING",
        "LOCATION_ID": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_REV_ORIG_FK2", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("SFPL_MFG_BOM_REV_ORIG_FK4", ["ENG_GROUP"], "SFFND_ENG_GROUP_DEF", ["ENG_GROUP"]),
        DbForeignKey("SFPL_MFG_BOM_REV_ORIG_FK5", ["PLG_GROUP"], "SFFND_PLG_GROUP_DEF", ["PLG_GROUP"]),
        DbForeignKey("SFPL_MFG_BOM_REV_ORIG_FK6", ["PROJECT"], "SFFND_PROJECT_DEF", ["PROJECT"]),
        DbForeignKey("SFPL_MFG_BOM_REV_ORIG_FK3", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFPL_MFG_BOM_REV_ORIG_FK1", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
    ]
    refs = [
        "SFPL_MFG_BOM_MM_OBJ_ORIG_FK1",
        "SFPL_MFG_BOM_REV_LINE_ORIG_FK1",
        "SFPL_MFG_BOM_TOOL_ORIG_FK1",
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique system generated identifier for BOM."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.MFG_BOM_CHG = parse_value(self.schema, column_value_map, "MFG_BOM_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given BOM."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Additional comments about a given BOM revision."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.POSITION_FLAG = parse_value(self.schema, column_value_map, "POSITION_FLAG")
        self.BOM_NO = parse_value(self.schema, column_value_map, "BOM_NO")
        "Bill Of Material Number."
        self.MBOM_REV_DATE = parse_value(self.schema, column_value_map, "MBOM_REV_DATE")
        self.BOM_TYPE = parse_value(self.schema, column_value_map, "BOM_TYPE")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        "A Number identifier which identifies that this record comes from Plam Device."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated program."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.UCF_MBOM_REV_VCH1 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH2 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH2")
        "User-configurable field for VARCHAR data type."
        self.PLG_GROUP = parse_value(self.schema, column_value_map, "PLG_GROUP")
        "Unique identifier of the associated process planning group."
        self.ENG_GROUP = parse_value(self.schema, column_value_map, "ENG_GROUP")
        "The unique identifier of the associated engineering group."
        self.UCF_MBOM_REV_VCH3 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH4 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH5 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH6 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH7 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH8 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH9 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH10 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH11 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH12 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH13 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH14 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH15 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_REV_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_REV_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_REV_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_REV_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_MBOM_REV_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_MBOM_REV_NUM1 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_REV_NUM2 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_REV_NUM3 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_REV_NUM4 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_REV_NUM5 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_REV_DATE1 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_REV_DATE2 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_REV_DATE3 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_REV_DATE4 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_REV_DATE5 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_REV_FLAG1 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_REV_FLAG2 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_REV_FLAG3 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_REV_FLAG4 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_REV_FLAG5 = parse_value(self.schema, column_value_map, "UCF_MBOM_REV_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        "Security group assigned to BOM revision."
        self.PHANTOM_KIT_FLAG = parse_value(self.schema, column_value_map, "PHANTOM_KIT_FLAG")
        "Determines if the item is phantom or not."
        self.BOM_SUBTYPE = parse_value(self.schema, column_value_map, "BOM_SUBTYPE")
        self.CREATED_FROM_BOM_ID = parse_value(self.schema, column_value_map, "CREATED_FROM_BOM_ID")
        self.SOURCE = parse_value(self.schema, column_value_map, "SOURCE")
        "Value can be part of the SyncBom inbound message that would indicate the source of the BOM."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.SFPL_MFG_BOM_MM_OBJ_ORIG_FK1 = []
        self.SFPL_MFG_BOM_REV_LINE_ORIG_FK1 = []
        self.SFPL_MFG_BOM_TOOL_ORIG_FK1 = []

class SFCORE_PASSWD_HIST:
    schema = {
        "HIST_ID": "STRING",
        "HIST_TIME_STAMP": "STRING",
        "HIST_USERID": "STRING",
        "USERID": "STRING",
        "PASSWORD": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_PASSWD_HIST_USER_FK", ["USERID"], "SFCORE_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.PASSWORD = parse_value(self.schema, column_value_map, "PASSWORD")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")

class SFWID_OPER_SKILL_ALT:
    schema = {
        "OPER_SKILL_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "SKILL_CATEGORY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "CREW_QTY": "NUMBER",
        "LABOR_HOURS": "NUMBER",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "MAIN_SKILL_FLAG": "STRING",
    }
    primary_key_columns = [
        "OPER_SKILL_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_SKILL_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_SKILL_ALT_FK2", ["SKILL_CATEGORY"], "SFFND_SKILL_CATEGORY_DEF", ["SKILL_CATEGORY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_SKILL_ALT = parse_value(self.schema, column_value_map, "OPER_SKILL_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.SKILL_CATEGORY = parse_value(self.schema, column_value_map, "SKILL_CATEGORY")
        "A category to which the required skill belongs."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.CREW_QTY = parse_value(self.schema, column_value_map, "CREW_QTY")
        "Number of workers as resource to perform the manufacturing operation."
        self.LABOR_HOURS = parse_value(self.schema, column_value_map, "LABOR_HOURS")
        "Labor hours required to perform the manufacturing operation."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.MAIN_SKILL_FLAG = parse_value(self.schema, column_value_map, "MAIN_SKILL_FLAG")
        "Value Y means the Skill is Main Skill. Only one Skill can have MAIN_SKILL_FLAG=Y for a particular Operation."

class SFQRTZ_SIMPLE_TRIGGERS:
    schema = {
        "SCHED_NAME": "STRING",
        "TRIGGER_NAME": "STRING",
        "TRIGGER_GROUP": "STRING",
        "REPEAT_COUNT": "NUMBER",
        "REPEAT_INTERVAL": "NUMBER",
        "TIMES_TRIGGERED": "NUMBER",
    }
    primary_key_columns = [
        "SCHED_NAME",
        "TRIGGER_NAME",
        "TRIGGER_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFQRTZ_SIMPLE_TRIG_TO_TRIG_FK", ["SCHED_NAME","TRIGGER_NAME","TRIGGER_GROUP"], "SFQRTZ_TRIGGERS", ["SCHED_NAME","TRIGGER_NAME","TRIGGER_GROUP"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SCHED_NAME = parse_value(self.schema, column_value_map, "SCHED_NAME")
        self.TRIGGER_NAME = parse_value(self.schema, column_value_map, "TRIGGER_NAME")
        self.TRIGGER_GROUP = parse_value(self.schema, column_value_map, "TRIGGER_GROUP")
        self.REPEAT_COUNT = parse_value(self.schema, column_value_map, "REPEAT_COUNT")
        self.REPEAT_INTERVAL = parse_value(self.schema, column_value_map, "REPEAT_INTERVAL")
        self.TIMES_TRIGGERED = parse_value(self.schema, column_value_map, "TIMES_TRIGGERED")

class SFWID_OPER_SKILL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "SKILL_CATEGORY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "CREW_QTY": "NUMBER",
        "LABOR_HOURS": "NUMBER",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "HIST_ALT_ID": "STRING",
        "MAIN_SKILL_FLAG": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.SKILL_CATEGORY = parse_value(self.schema, column_value_map, "SKILL_CATEGORY")
        "A category to which the required skill belongs."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.CREW_QTY = parse_value(self.schema, column_value_map, "CREW_QTY")
        "The required number of people in the crew for the given operation"
        self.LABOR_HOURS = parse_value(self.schema, column_value_map, "LABOR_HOURS")
        "Number of labor hours required by the manufacturing operation."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.MAIN_SKILL_FLAG = parse_value(self.schema, column_value_map, "MAIN_SKILL_FLAG")
        "Value Y means the Skill is Main Skill. Only one Skill can have MAIN_SKILL_FLAG=Y for a particular Operation."

class SFFND_SKILL_CATEGORY_ALTERNATE:
    schema = {
        "SKILL_CATEGORY": "STRING",
        "ALT_SKILL_CATEGORY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
    }
    primary_key_columns = [
        "SKILL_CATEGORY",
        "ALT_SKILL_CATEGORY",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_SKILL_CATG_ALT_CATG_FK1", ["ALT_SKILL_CATEGORY"], "SFFND_SKILL_CATEGORY_DEF", ["SKILL_CATEGORY"]),
        DbForeignKey("SFFND_SKILL_CATG_ALT_CATG_FK", ["SKILL_CATEGORY"], "SFFND_SKILL_CATEGORY_DEF", ["SKILL_CATEGORY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SKILL_CATEGORY = parse_value(self.schema, column_value_map, "SKILL_CATEGORY")
        "A category to which the required skill belongs."
        self.ALT_SKILL_CATEGORY = parse_value(self.schema, column_value_map, "ALT_SKILL_CATEGORY")
        "The identifier of an acceptable replacement skill category of the skill category identified by ALT_SKILL_CATEGORY. In other words, one with skills of ALT_SKILL_CATEGORY may perform a manufacturing operation that requires skill of SKILL_CATEGORY."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."

class SFQA_CA_TEMPLATE_DESC:
    schema = {
        "CA_ID": "STRING",
        "CA_DAT_COL_ID": "STRING",
        "DAT_COL_TITLE": "STRING",
        "STD_DATCOL_ID": "STRING",
        "STATUS": "STRING",
        "DC_VALUE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "TEMPLATE_FILE_ID": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "CA_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_TEMPLATE_DESC_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CA_TEMPLATE_DESC_FK4", ["DC_VALUE"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFQA_CA_TEMPLATE_DESC_FK2", ["STD_DATCOL_ID"], "SFFND_STD_DATCOL_TYPE_DEF", ["STD_DATCOL_ID"]),
        DbForeignKey("SFQA_CA_TEMPLATE_DESC_FK3", ["TEMPLATE_FILE_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique, system-generated identifier of a given Corrective Action."
        self.CA_DAT_COL_ID = parse_value(self.schema, column_value_map, "CA_DAT_COL_ID")
        "Unique, system-generated identifier of the data collection."
        self.DAT_COL_TITLE = parse_value(self.schema, column_value_map, "DAT_COL_TITLE")
        "Title/name of the data collection."
        self.STD_DATCOL_ID = parse_value(self.schema, column_value_map, "STD_DATCOL_ID")
        "Unique, system-generated identifier of the data collection type."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Status of Data Collection."
        self.DC_VALUE = parse_value(self.schema, column_value_map, "DC_VALUE")
        "Value of collected Data Collection, here unique identifier file being collected."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.TEMPLATE_FILE_ID = parse_value(self.schema, column_value_map, "TEMPLATE_FILE_ID")
        "The unique identifier file being authored."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_ALTERATION_TASK:
    schema = {
        "TASK_ID": "STRING",
        "TIME_STAMP": "DATE",
        "ORDER_ID": "STRING",
        "ALT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "TASK_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_ALTTASK_ALTDESC_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFFND_ALTTASK_ORDERDESC_FK", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFFND_ALTTASK_TASK_FK", ["TASK_ID"], "SFFND_TASK", ["TASK_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TASK_ID = parse_value(self.schema, column_value_map, "TASK_ID")
        "The unique identifier of a task."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of a work order alteration."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_NAMED_LICENSE_TYPES_DEF:
    schema = {
        "NAMED_LICENSE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "NAMED_LICENSE_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.NAMED_LICENSE_TYPE = parse_value(self.schema, column_value_map, "NAMED_LICENSE_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")

class SFFND_INSP_DEFINITION_TASK:
    schema = {
        "TASK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "ITEM_ID": "STRING",
        "OWNER_CODE": "STRING",
        "TIME_STAMP": "DATE",
        "INSP_DEF_REV": "NUMBER",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "TASK_ID",
        "ITEM_ID",
        "OWNER_CODE",
        "INSP_DEF_REV",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_INSP_DEF_TASK_FK2", ["TASK_ID"], "SFFND_TASK", ["TASK_ID"]),
        DbForeignKey("SFFND_INSP_DEF_TASK_FK1", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"], "SFSQA_INSP_DEFINITION_REV", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TASK_ID = parse_value(self.schema, column_value_map, "TASK_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFWID_OPERATIONS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_NO": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "OPER_STATUS": "STRING",
        "OPER_HOLD_STATUS": "STRING",
        "TITLE": "STRING",
        "OPER_OPT_FLAG": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "WC_INFO": "STRING",
        "ALT_STATUS": "STRING",
        "ALT_ID": "STRING",
        "ASGND_LOCATION_ID": "STRING",
        "ASGND_DEPARTMENT_ID": "STRING",
        "ASGND_CENTER_ID": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_NO",
        "OPER_KEY",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPERATIONS_DEPARTMENT_FK", ["ASGND_LOCATION_ID","ASGND_DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFWID_OPERATIONS_LOCATION_FK", ["ASGND_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFWID_OPERATIONS_CENTER_FK", ["ASGND_LOCATION_ID","ASGND_DEPARTMENT_ID","ASGND_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.OPER_STATUS = parse_value(self.schema, column_value_map, "OPER_STATUS")
        "Status of the operation, e.g., IN QUEUE, ACTIVE, COMPLETE, HOLD, CANCEL."
        self.OPER_HOLD_STATUS = parse_value(self.schema, column_value_map, "OPER_HOLD_STATUS")
        "Status of the hold on the operation, e.g., OPEN, CLOSED."
        self.TITLE = parse_value(self.schema, column_value_map, "TITLE")
        "Title or name of the given operation."
        self.OPER_OPT_FLAG = parse_value(self.schema, column_value_map, "OPER_OPT_FLAG")
        "A flag (Y/N) that indicates whether a given operation is optional."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which the manufacturing work for the work order is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which the manufacturing work for the work order is scheduled to complete."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised work start date."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised work complete date."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The actual date the activity started on."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The actual date the activity was completed as opposed to the scheduled one."
        self.WC_INFO = parse_value(self.schema, column_value_map, "WC_INFO")
        "Denormalized, concatenated loc, dept and work center information for use within work center management."
        self.ALT_STATUS = parse_value(self.schema, column_value_map, "ALT_STATUS")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        self.ASGND_LOCATION_ID = parse_value(self.schema, column_value_map, "ASGND_LOCATION_ID")
        self.ASGND_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "ASGND_DEPARTMENT_ID")
        self.ASGND_CENTER_ID = parse_value(self.schema, column_value_map, "ASGND_CENTER_ID")

class SFPL_STEP_DAT_COL:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "DAT_COL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DAT_COL_TITLE": "STRING",
        "DAT_COL_CERT": "STRING",
        "REF_ID": "STRING",
        "DAT_COL_UOM": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "BLOCK_ID": "STRING",
        "NUM_DECIMAL_DIGITS": "NUMBER",
        "CALC_DC_FLAG": "STRING",
        "SUSPECT_FLAG": "STRING",
        "VARIABLE_NAME": "STRING",
        "VISIBILITY": "STRING",
        "UCF_STEP_DC_VCH1": "STRING",
        "UCF_STEP_DC_VCH2": "STRING",
        "UCF_STEP_DC_VCH3": "STRING",
        "UCF_STEP_DC_VCH4": "STRING",
        "UCF_STEP_DC_VCH5": "STRING",
        "UCF_STEP_DC_VCH6": "STRING",
        "UCF_STEP_DC_VCH7": "STRING",
        "UCF_STEP_DC_VCH8": "STRING",
        "UCF_STEP_DC_VCH9": "STRING",
        "UCF_STEP_DC_VCH10": "STRING",
        "UCF_STEP_DC_VCH11": "STRING",
        "UCF_STEP_DC_VCH12": "STRING",
        "UCF_STEP_DC_VCH13": "STRING",
        "UCF_STEP_DC_VCH14": "STRING",
        "UCF_STEP_DC_VCH15": "STRING",
        "UCF_STEP_DC_NUM1": "NUMBER",
        "UCF_STEP_DC_NUM2": "NUMBER",
        "UCF_STEP_DC_NUM3": "NUMBER",
        "UCF_STEP_DC_NUM4": "NUMBER",
        "UCF_STEP_DC_NUM5": "NUMBER",
        "UCF_STEP_DC_DATE1": "STRING",
        "UCF_STEP_DC_DATE2": "STRING",
        "UCF_STEP_DC_DATE3": "STRING",
        "UCF_STEP_DC_DATE4": "STRING",
        "UCF_STEP_DC_DATE5": "STRING",
        "UCF_STEP_DC_FLAG1": "STRING",
        "UCF_STEP_DC_FLAG2": "STRING",
        "UCF_STEP_DC_FLAG3": "STRING",
        "UCF_STEP_DC_FLAG4": "STRING",
        "UCF_STEP_DC_FLAG5": "STRING",
        "UCF_STEP_DC_VCH255_1": "STRING",
        "UCF_STEP_DC_VCH255_2": "STRING",
        "UCF_STEP_DC_VCH255_3": "STRING",
        "UCF_STEP_DC_VCH4000_1": "STRING",
        "UCF_STEP_DC_VCH4000_2": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "AUDIT_FLAG": "STRING",
        "STD_DATCOL_ID": "STRING",
        "RESULT_ID": "STRING",
        "TEMPLATE_FILE_ID": "STRING",
        "EXTERNAL_FLAG": "STRING",
        "MACHINE_ID": "STRING",
        "TEMPLATE_NO": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEP_DAT_COL_UOM_FK", ["DAT_COL_UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFPL_STEP_DAT_COL_FK2", ["STD_DATCOL_ID"], "SFFND_STD_DATCOL_TYPE_DEF", ["STD_DATCOL_ID"]),
        DbForeignKey("SFPL_STEP_DAT_COL_CERT_FK", ["DAT_COL_CERT"], "SFFND_CERT_DEF", ["CERT"]),
        DbForeignKey("SFPL_STEP_DAT_COL_FK3", ["RESULT_ID"], "SFSQA_VALID_RESULT_TYPE_DEF", ["RESULT_ID"]),
        DbForeignKey("SFPL_STEP_DAT_COL_FK4", ["TEMPLATE_FILE_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFPL_STPDATCOL_STPDESC_FK", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"], "SFPL_STEP_DESC", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"]),
        DbForeignKey("SFPL_STEP_DAT_COL_FK5", ["TEMPLATE_NO"], "SFFND_TEMPLATE_DEF", ["TEMPLATE_NO"]),
        DbForeignKey("SFPL_STEP_DAT_COL_FK1", ["VARIABLE_NAME","VISIBILITY"], "SFFND_DC_VARIABLE_DEF", ["VARIABLE_NAME","VISIBILITY"]),
    ]
    refs = [
        "SFPL_STEP_DC_FORMULA_DESC_FK1",
        "SFPL_STPDTCLLMT_STPDTCL_FK",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        "Unique, system-generated identifier of the data collection."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DAT_COL_TITLE = parse_value(self.schema, column_value_map, "DAT_COL_TITLE")
        "Title/name of the data collection point."
        self.DAT_COL_CERT = parse_value(self.schema, column_value_map, "DAT_COL_CERT")
        "The required certification for the given data collection."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.DAT_COL_UOM = parse_value(self.schema, column_value_map, "DAT_COL_UOM")
        "The Unit of Measure associated with the data collection value."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        self.NUM_DECIMAL_DIGITS = parse_value(self.schema, column_value_map, "NUM_DECIMAL_DIGITS")
        self.CALC_DC_FLAG = parse_value(self.schema, column_value_map, "CALC_DC_FLAG")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.VARIABLE_NAME = parse_value(self.schema, column_value_map, "VARIABLE_NAME")
        self.VISIBILITY = parse_value(self.schema, column_value_map, "VISIBILITY")
        self.UCF_STEP_DC_VCH1 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH1")
        self.UCF_STEP_DC_VCH2 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH2")
        self.UCF_STEP_DC_VCH3 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH3")
        self.UCF_STEP_DC_VCH4 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH4")
        self.UCF_STEP_DC_VCH5 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH5")
        self.UCF_STEP_DC_VCH6 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH6")
        self.UCF_STEP_DC_VCH7 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH7")
        self.UCF_STEP_DC_VCH8 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH8")
        self.UCF_STEP_DC_VCH9 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH9")
        self.UCF_STEP_DC_VCH10 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH10")
        self.UCF_STEP_DC_VCH11 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH11")
        self.UCF_STEP_DC_VCH12 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH12")
        self.UCF_STEP_DC_VCH13 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH13")
        self.UCF_STEP_DC_VCH14 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH14")
        self.UCF_STEP_DC_VCH15 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH15")
        self.UCF_STEP_DC_NUM1 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_NUM1")
        self.UCF_STEP_DC_NUM2 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_NUM2")
        self.UCF_STEP_DC_NUM3 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_NUM3")
        self.UCF_STEP_DC_NUM4 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_NUM4")
        self.UCF_STEP_DC_NUM5 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_NUM5")
        self.UCF_STEP_DC_DATE1 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_DATE1")
        self.UCF_STEP_DC_DATE2 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_DATE2")
        self.UCF_STEP_DC_DATE3 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_DATE3")
        self.UCF_STEP_DC_DATE4 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_DATE4")
        self.UCF_STEP_DC_DATE5 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_DATE5")
        self.UCF_STEP_DC_FLAG1 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_FLAG1")
        self.UCF_STEP_DC_FLAG2 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_FLAG2")
        self.UCF_STEP_DC_FLAG3 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_FLAG3")
        self.UCF_STEP_DC_FLAG4 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_FLAG4")
        self.UCF_STEP_DC_FLAG5 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_FLAG5")
        self.UCF_STEP_DC_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH255_1")
        self.UCF_STEP_DC_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH255_2")
        self.UCF_STEP_DC_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH255_3")
        self.UCF_STEP_DC_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH4000_1")
        self.UCF_STEP_DC_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_STEP_DC_VCH4000_2")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.AUDIT_FLAG = parse_value(self.schema, column_value_map, "AUDIT_FLAG")
        "If Y, the user audit process must be executed to see if an over-inspection is required or not."
        self.STD_DATCOL_ID = parse_value(self.schema, column_value_map, "STD_DATCOL_ID")
        self.RESULT_ID = parse_value(self.schema, column_value_map, "RESULT_ID")
        "The unique identifier of the Validation Result Type for given data collection."
        self.TEMPLATE_FILE_ID = parse_value(self.schema, column_value_map, "TEMPLATE_FILE_ID")
        "The unique identifier of the object being referenced."
        self.EXTERNAL_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_FLAG")
        self.MACHINE_ID = parse_value(self.schema, column_value_map, "MACHINE_ID")
        self.TEMPLATE_NO = parse_value(self.schema, column_value_map, "TEMPLATE_NO")
        self.SFPL_STEP_DC_FORMULA_DESC_FK1 = []
        self.SFPL_STPDTCLLMT_STPDTCL_FK = []

class SFDBA_SESSTAT_HIST:
    schema = {
        "USERNAME": "STRING",
        "OSUSER": "STRING",
        "SID": "NUMBER",
        "SERIAL_NUM": "NUMBER",
        "PADDR": "STRING",
        "PROCESS": "STRING",
        "LOGON_TIME": "STRING",
        "STATISTIC_NUM": "NUMBER",
        "NAME": "STRING",
        "VALUE": "NUMBER",
        "LOGOFF_TIMESTAMP": "STRING",
        "CLIENT_INFO": "STRING",
        "CLIENT_IDENTIFIER": "STRING",
        "TERMINAL": "STRING",
        "IDENTITY_COL": "NUMBER",
    }
    primary_key_columns = [
        "IDENTITY_COL",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERNAME = parse_value(self.schema, column_value_map, "USERNAME")
        "Solumina login ID of the user."
        self.OSUSER = parse_value(self.schema, column_value_map, "OSUSER")
        self.SID = parse_value(self.schema, column_value_map, "SID")
        self.SERIAL_NUM = parse_value(self.schema, column_value_map, "SERIAL_NUM")
        self.PADDR = parse_value(self.schema, column_value_map, "PADDR")
        self.PROCESS = parse_value(self.schema, column_value_map, "PROCESS")
        self.LOGON_TIME = parse_value(self.schema, column_value_map, "LOGON_TIME")
        self.STATISTIC_NUM = parse_value(self.schema, column_value_map, "STATISTIC_NUM")
        self.NAME = parse_value(self.schema, column_value_map, "NAME")
        "Name of the person with the given USERID."
        self.VALUE = parse_value(self.schema, column_value_map, "VALUE")
        "Value of a given session statistic."
        self.LOGOFF_TIMESTAMP = parse_value(self.schema, column_value_map, "LOGOFF_TIMESTAMP")
        self.CLIENT_INFO = parse_value(self.schema, column_value_map, "CLIENT_INFO")
        self.CLIENT_IDENTIFIER = parse_value(self.schema, column_value_map, "CLIENT_IDENTIFIER")
        self.TERMINAL = parse_value(self.schema, column_value_map, "TERMINAL")
        self.IDENTITY_COL = parse_value(self.schema, column_value_map, "IDENTITY_COL")

class SFCORE_UDV_FOLDER:
    schema = {
        "UDV_ID": "STRING",
        "FOLDER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "UDV_ID",
        "FOLDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_UDVFLDR_UDVLIB_FK", ["UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFCORE_UDVFLDR_FLDRORG_FK", ["FOLDER_ID"], "SFCORE_UDV_FOLDER_ORG", ["FOLDER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.UDV_ID = parse_value(self.schema, column_value_map, "UDV_ID")
        "The unique system generated identifier of a UDV object."
        self.FOLDER_ID = parse_value(self.schema, column_value_map, "FOLDER_ID")
        "Unique identifier of a UDV object folder that references the object. In other words, the object can be seen in this specific folder."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFCORE_ALERT_QUEUE:
    schema = {
        "QUEUE_ID": "STRING",
        "USERID": "STRING",
        "ALERT_TYPE": "STRING",
        "ALERT_TIMESTAMP": "DATE",
        "ALERT_DELIVERY_TYPE": "STRING",
        "EMAIL_BODY": "STRING",
        "SUBJECT_LINE": "STRING",
        "RESPONSE": "STRING",
    }
    primary_key_columns = [
        "QUEUE_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.QUEUE_ID = parse_value(self.schema, column_value_map, "QUEUE_ID")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.ALERT_TYPE = parse_value(self.schema, column_value_map, "ALERT_TYPE")
        self.ALERT_TIMESTAMP = parse_value(self.schema, column_value_map, "ALERT_TIMESTAMP")
        self.ALERT_DELIVERY_TYPE = parse_value(self.schema, column_value_map, "ALERT_DELIVERY_TYPE")
        self.EMAIL_BODY = parse_value(self.schema, column_value_map, "EMAIL_BODY")
        self.SUBJECT_LINE = parse_value(self.schema, column_value_map, "SUBJECT_LINE")
        self.RESPONSE = parse_value(self.schema, column_value_map, "RESPONSE")

class SFCORE_APP_ROLE_PRIVS:
    schema = {
        "ROLE": "STRING",
        "PRIV": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "ROLE",
        "PRIV",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_APP_ROLE_PRIVS_ROLE_FK", ["ROLE"], "SFCORE_ROLES", ["ROLE"]),
        DbForeignKey("SFCORE_PRIVS_FK", ["PRIV"], "SFCORE_PRIVS", ["PRIV"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ROLE = parse_value(self.schema, column_value_map, "ROLE")
        "Identifier/name of a Solumina application user role, implemented using Oracle roles. For instance SF2K_APPL_QA_DISC_REVI EW, SF2K_APPL_PLANNING, or SF2K_APPL_QA_INSP."
        self.PRIV = parse_value(self.schema, column_value_map, "PRIV")
        "Identifier/name of particular Solumina application privilege granted to the role. Application privileges are used to govern user access to specific functionality of the application."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFFND_GROUP_REV:
    schema = {
        "GROUP_ID": "STRING",
        "GROUP_REV": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "GROUP_DESC": "STRING",
        "STATUS": "STRING",
    }
    primary_key_columns = [
        "GROUP_ID",
        "GROUP_REV",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_GROUP_REV_GRP_FK", ["GROUP_ID"], "SFFND_GROUP_DEF", ["GROUP_ID"]),
    ]
    refs = [
        "SFFND_PRJACTGRP_GRPREV_FK",
    ]
    def __init__(self, column_value_map):
        self.GROUP_ID = parse_value(self.schema, column_value_map, "GROUP_ID")
        "Unique, system generated identifier of a group."
        self.GROUP_REV = parse_value(self.schema, column_value_map, "GROUP_REV")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.GROUP_DESC = parse_value(self.schema, column_value_map, "GROUP_DESC")
        "description of the group"
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The status of the disposition/rework task. For example: IN PROCESS, DISPOSITIONED, or COMPLETE."
        self.SFFND_PRJACTGRP_GRPREV_FK = []

class SFQA_CA_AFFECTED_TOOLS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFFND_CONTROL_LIMIT_CALC_DEF:
    schema = {
        "DP_SUBGROUP_SIZE": "NUMBER",
        "AVGS_CNTL_LIMIT_FACTOR_A2": "NUMBER",
        "RANGE_CENTRAL_LINE_FACTOR_D2": "NUMBER",
        "RANGLE_CNTL_LIMIT_FACTOR_D3": "NUMBER",
        "RANGLE_CNTL_LIMIT_FACTOR_D4": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DP_SUBGROUP_SIZE_DESC": "STRING",
    }
    primary_key_columns = [
        "DP_SUBGROUP_SIZE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_STD_DATCOL_TYPE_DEF_FK6",
    ]
    def __init__(self, column_value_map):
        self.DP_SUBGROUP_SIZE = parse_value(self.schema, column_value_map, "DP_SUBGROUP_SIZE")
        self.AVGS_CNTL_LIMIT_FACTOR_A2 = parse_value(self.schema, column_value_map, "AVGS_CNTL_LIMIT_FACTOR_A2")
        self.RANGE_CENTRAL_LINE_FACTOR_D2 = parse_value(self.schema, column_value_map, "RANGE_CENTRAL_LINE_FACTOR_D2")
        self.RANGLE_CNTL_LIMIT_FACTOR_D3 = parse_value(self.schema, column_value_map, "RANGLE_CNTL_LIMIT_FACTOR_D3")
        self.RANGLE_CNTL_LIMIT_FACTOR_D4 = parse_value(self.schema, column_value_map, "RANGLE_CNTL_LIMIT_FACTOR_D4")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DP_SUBGROUP_SIZE_DESC = parse_value(self.schema, column_value_map, "DP_SUBGROUP_SIZE_DESC")
        self.SFFND_STD_DATCOL_TYPE_DEF_FK6 = []

class SFQA_DISC_LAST_FILTER_CONTEXT:
    schema = {
        "CONTEXT_ID": "STRING",
        "DISC_ID": "STRING",
        "USERID": "STRING",
        "LAST_FILTER": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CONTEXT_ID",
        "DISC_ID",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_LAST_FILTER_CONTX_F1", ["DISC_ID"], "SFQA_DISC_DESC", ["DISC_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONTEXT_ID = parse_value(self.schema, column_value_map, "CONTEXT_ID")
        "Value of variable @ContextId. Usually it contains [select source name - select SQL ID]."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "Identifier of the discrepancy."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.LAST_FILTER = parse_value(self.schema, column_value_map, "LAST_FILTER")
        "Value of last filter applied on the grid."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_CYCLES:
    schema = {
        "REQUEST_ID": "STRING",
        "IP_ADDRESS": "STRING",
        "MACHINE_NO": "STRING",
        "MACHINE_ID": "STRING",
        "ODOMETER": "STRING",
        "ORDER_ID": "STRING",
        "OPER_NO": "STRING",
        "REQUEST_STATUS": "STRING",
        "ERROR_MESSAGE": "STRING",
        "TIME_STAMP": "DATE",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "REQUEST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_CYCLES_FK1", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REQUEST_ID = parse_value(self.schema, column_value_map, "REQUEST_ID")
        "Unique, system-generated identifier of a given request."
        self.IP_ADDRESS = parse_value(self.schema, column_value_map, "IP_ADDRESS")
        "IP address from which the user is logging in."
        self.MACHINE_NO = parse_value(self.schema, column_value_map, "MACHINE_NO")
        "Machine Number."
        self.MACHINE_ID = parse_value(self.schema, column_value_map, "MACHINE_ID")
        "Unique, system-generated identifier of a given machine."
        self.ODOMETER = parse_value(self.schema, column_value_map, "ODOMETER")
        "The incremental value of cycles processed by a machine."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.REQUEST_STATUS = parse_value(self.schema, column_value_map, "REQUEST_STATUS")
        "Status of a given request."
        self.ERROR_MESSAGE = parse_value(self.schema, column_value_map, "ERROR_MESSAGE")
        "Used to store error message while processing/reading the request from external system."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFSQA_INSP_ORDER_ISII_TOOLS:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "ITEM_ID": "STRING",
        "INSP_ITEM_ID": "STRING",
        "INSP_ITEM_COUNT": "NUMBER",
        "UPDT_USERID": "STRING",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "COLLECTION_REQUIRED_FLAG": "STRING",
        "ALLOW_TOOL_CHANGE": "STRING",
        "CALIBRATION_REQUIRED_FLAG": "STRING",
        "TOOL_QTY": "NUMBER",
        "CALIBRATION_TYPE": "STRING",
        "CALIBRATION_FREQUENCY": "NUMBER",
        "UCF_INSP_ORDERIIITOOL_VCH1": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH2": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH3": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH4": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH5": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH6": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH7": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH8": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH9": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH10": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH11": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH12": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH13": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH14": "STRING",
        "UCF_INSP_ORDERIIITOOL_VCH15": "STRING",
        "UCF_INSP_ORDERIIITOOL_NUM1": "NUMBER",
        "UCF_INSP_ORDERIIITOOL_NUM2": "NUMBER",
        "UCF_INSP_ORDERIIITOOL_NUM3": "NUMBER",
        "UCF_INSP_ORDERIIITOOL_NUM4": "NUMBER",
        "UCF_INSP_ORDERIIITOOL_NUM5": "NUMBER",
        "UCF_INSP_ORDERIIITOOL_DATE1": "STRING",
        "UCF_INSP_ORDERIIITOOL_DATE2": "STRING",
        "UCF_INSP_ORDERIIITOOL_DATE3": "STRING",
        "UCF_INSP_ORDERIIITOOL_DATE4": "STRING",
        "UCF_INSP_ORDERIIITOOL_DATE5": "STRING",
        "UCF_INSP_ORDERIIITOOL_FLAG1": "STRING",
        "UCF_INSP_ORDERIIITOOL_FLAG2": "STRING",
        "UCF_INSP_ORDERIIITOOL_FLAG3": "STRING",
        "UCF_INSP_ORDERIIITOOL_FLAG4": "STRING",
        "UCF_INSP_ORDERIIITOOL_FLAG5": "STRING",
        "TOOL_NOTES": "STRING",
        "UCF_INSP_ORDERIITOOL_VCH255_1": "STRING",
        "UCF_INSP_ORDERIITOOL_VCH255_2": "STRING",
        "UCF_INSP_ORDERIITOOL_VCH255_3": "STRING",
        "UCF_INSP_ORDERIITOOL_VCH4000_1": "STRING",
        "UCF_INSP_ORDERIITOOL_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "INSP_STEP_ID",
        "ITEM_ID",
        "INSP_ITEM_ID",
        "INSP_ITEM_COUNT",
        "TOOL_NO",
        "TOOL_CHG",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_IDP_IC_TOOLS_FK1", ["INSP_ORDER_ID","INSP_STEP_ID","ITEM_ID","INSP_ITEM_ID","INSP_ITEM_COUNT"], "SFSQA_INSP_ORDER_IS_INSP_ITEMS", ["INSP_ORDER_ID","INSP_STEP_ID","ITEM_ID","INSP_ITEM_ID","INSP_ITEM_COUNT"]),
        DbForeignKey("SFSQA_INSP_ORDER_ISII_TOOL_FK2", ["TOOL_NO","TOOL_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
    ]
    refs = [
        "SFSQA_IDP_IC_TOOL_DCS_FK1",
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.INSP_ITEM_COUNT = parse_value(self.schema, column_value_map, "INSP_ITEM_COUNT")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The change number, secondary identifier, of the tool."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.COLLECTION_REQUIRED_FLAG = parse_value(self.schema, column_value_map, "COLLECTION_REQUIRED_FLAG")
        self.ALLOW_TOOL_CHANGE = parse_value(self.schema, column_value_map, "ALLOW_TOOL_CHANGE")
        self.CALIBRATION_REQUIRED_FLAG = parse_value(self.schema, column_value_map, "CALIBRATION_REQUIRED_FLAG")
        self.TOOL_QTY = parse_value(self.schema, column_value_map, "TOOL_QTY")
        self.CALIBRATION_TYPE = parse_value(self.schema, column_value_map, "CALIBRATION_TYPE")
        self.CALIBRATION_FREQUENCY = parse_value(self.schema, column_value_map, "CALIBRATION_FREQUENCY")
        self.UCF_INSP_ORDERIIITOOL_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH1")
        self.UCF_INSP_ORDERIIITOOL_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH2")
        self.UCF_INSP_ORDERIIITOOL_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH3")
        self.UCF_INSP_ORDERIIITOOL_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH4")
        self.UCF_INSP_ORDERIIITOOL_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH5")
        self.UCF_INSP_ORDERIIITOOL_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH6")
        self.UCF_INSP_ORDERIIITOOL_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH7")
        self.UCF_INSP_ORDERIIITOOL_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH8")
        self.UCF_INSP_ORDERIIITOOL_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH9")
        self.UCF_INSP_ORDERIIITOOL_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH10")
        self.UCF_INSP_ORDERIIITOOL_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH11")
        self.UCF_INSP_ORDERIIITOOL_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH12")
        self.UCF_INSP_ORDERIIITOOL_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH13")
        self.UCF_INSP_ORDERIIITOOL_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH14")
        self.UCF_INSP_ORDERIIITOOL_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_VCH15")
        self.UCF_INSP_ORDERIIITOOL_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_NUM1")
        self.UCF_INSP_ORDERIIITOOL_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_NUM2")
        self.UCF_INSP_ORDERIIITOOL_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_NUM3")
        self.UCF_INSP_ORDERIIITOOL_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_NUM4")
        self.UCF_INSP_ORDERIIITOOL_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_NUM5")
        self.UCF_INSP_ORDERIIITOOL_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_DATE1")
        self.UCF_INSP_ORDERIIITOOL_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_DATE2")
        self.UCF_INSP_ORDERIIITOOL_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_DATE3")
        self.UCF_INSP_ORDERIIITOOL_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_DATE4")
        self.UCF_INSP_ORDERIIITOOL_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_DATE5")
        self.UCF_INSP_ORDERIIITOOL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_FLAG1")
        self.UCF_INSP_ORDERIIITOOL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_FLAG2")
        self.UCF_INSP_ORDERIIITOOL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_FLAG3")
        self.UCF_INSP_ORDERIIITOOL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_FLAG4")
        self.UCF_INSP_ORDERIIITOOL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOL_FLAG5")
        self.TOOL_NOTES = parse_value(self.schema, column_value_map, "TOOL_NOTES")
        self.UCF_INSP_ORDERIITOOL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIITOOL_VCH255_1")
        self.UCF_INSP_ORDERIITOOL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIITOOL_VCH255_2")
        self.UCF_INSP_ORDERIITOOL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIITOOL_VCH255_3")
        self.UCF_INSP_ORDERIITOOL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIITOOL_VCH4000_1")
        self.UCF_INSP_ORDERIITOOL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIITOOL_VCH4000_2")
        self.SFSQA_IDP_IC_TOOL_DCS_FK1 = []

class SFSQA_INSP_ORDER_UNITS:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "UNIT_ID": "STRING",
        "ITEM_ID": "STRING",
        "STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "NOTES": "STRING",
        "DISP_INSP_ORDER_ID": "STRING",
        "UCF_INSP_ORDERUNIT_VCH1": "STRING",
        "ORDER_ID": "STRING",
        "UCF_INSP_ORDERUNIT_VCH2": "STRING",
        "UCF_INSP_ORDERUNIT_VCH3": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "UCF_INSP_ORDERUNIT_VCH4": "STRING",
        "UCF_INSP_ORDERUNIT_VCH5": "STRING",
        "UCF_INSP_ORDERUNIT_VCH6": "STRING",
        "UCF_INSP_ORDERUNIT_VCH7": "STRING",
        "UCF_INSP_ORDERUNIT_VCH8": "STRING",
        "UCF_INSP_ORDERUNIT_VCH9": "STRING",
        "UCF_INSP_ORDERUNIT_VCH10": "STRING",
        "UCF_INSP_ORDERUNIT_VCH11": "STRING",
        "UCF_INSP_ORDERUNIT_VCH12": "STRING",
        "UCF_INSP_ORDERUNIT_VCH13": "STRING",
        "UCF_INSP_ORDERUNIT_VCH14": "STRING",
        "UCF_INSP_ORDERUNIT_VCH15": "STRING",
        "UCF_INSP_ORDERUNIT_NUM1": "NUMBER",
        "UCF_INSP_ORDERUNIT_NUM2": "NUMBER",
        "UCF_INSP_ORDERUNIT_NUM3": "NUMBER",
        "UCF_INSP_ORDERUNIT_NUM4": "NUMBER",
        "UCF_INSP_ORDERUNIT_NUM5": "NUMBER",
        "UCF_INSP_ORDERUNIT_DATE1": "STRING",
        "UCF_INSP_ORDERUNIT_DATE2": "STRING",
        "UCF_INSP_ORDERUNIT_DATE3": "STRING",
        "UCF_INSP_ORDERUNIT_DATE4": "STRING",
        "UCF_INSP_ORDERUNIT_DATE5": "STRING",
        "UCF_INSP_ORDERUNIT_FLAG1": "STRING",
        "UCF_INSP_ORDERUNIT_FLAG2": "STRING",
        "UCF_INSP_ORDERUNIT_FLAG3": "STRING",
        "UCF_INSP_ORDERUNIT_FLAG4": "STRING",
        "UCF_INSP_ORDERUNIT_FLAG5": "STRING",
        "FAI_REPORT_NO": "STRING",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
        "SAMPLE_NO": "NUMBER",
        "UCF_INSP_ORDERUNIT_VCH255_1": "STRING",
        "UCF_INSP_ORDERUNIT_VCH255_2": "STRING",
        "UCF_INSP_ORDERUNIT_VCH255_3": "STRING",
        "UCF_INSP_ORDERUNIT_VCH4000_1": "STRING",
        "UCF_INSP_ORDERUNIT_VCH4000_2": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "DESIGN_AUTHORITY": "STRING",
        "MANUFACTURER_CODE": "STRING",
        "MANUFACTURER_PART_NO": "STRING",
        "MANUFACTURER_SERIAL_NO": "STRING",
        "MANUFACTURER_LOT_NO": "STRING",
        "EXPIRATION_DATE": "STRING",
        "SPOOL_NO": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "ITEM_ID",
        "UNIT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_IDP_DESC_FK3", ["DISP_INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFSQA_IDP_UNITS_FK4", ["ORDER_ID","LOT_ID","SERIAL_ID"], "SFWID_SERIAL_DESC", ["ORDER_ID","LOT_ID","SERIAL_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_UNITS_FK5", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
    ]
    refs = [
        "SFSQA_INSP_ORDER_ISII_DC_FK3",
        "SFSQA_IO_HOLD_SRLS_FK2",
        "SFSQA_OVERIDE_RES_TRACKER_FK1",
        "SFSQA_IDP_SUBCOMPS_FK1",
        "SFSQA_IDP_SUBCOMPS_FK2",
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.UNIT_ID = parse_value(self.schema, column_value_map, "UNIT_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.DISP_INSP_ORDER_ID = parse_value(self.schema, column_value_map, "DISP_INSP_ORDER_ID")
        self.UCF_INSP_ORDERUNIT_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH1")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.UCF_INSP_ORDERUNIT_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH2")
        self.UCF_INSP_ORDERUNIT_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH3")
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        self.UCF_INSP_ORDERUNIT_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH4")
        self.UCF_INSP_ORDERUNIT_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH5")
        self.UCF_INSP_ORDERUNIT_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH6")
        self.UCF_INSP_ORDERUNIT_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH7")
        self.UCF_INSP_ORDERUNIT_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH8")
        self.UCF_INSP_ORDERUNIT_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH9")
        self.UCF_INSP_ORDERUNIT_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH10")
        self.UCF_INSP_ORDERUNIT_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH11")
        self.UCF_INSP_ORDERUNIT_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH12")
        self.UCF_INSP_ORDERUNIT_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH13")
        self.UCF_INSP_ORDERUNIT_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH14")
        self.UCF_INSP_ORDERUNIT_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH15")
        self.UCF_INSP_ORDERUNIT_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_NUM1")
        self.UCF_INSP_ORDERUNIT_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_NUM2")
        self.UCF_INSP_ORDERUNIT_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_NUM3")
        self.UCF_INSP_ORDERUNIT_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_NUM4")
        self.UCF_INSP_ORDERUNIT_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_NUM5")
        self.UCF_INSP_ORDERUNIT_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_DATE1")
        self.UCF_INSP_ORDERUNIT_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_DATE2")
        self.UCF_INSP_ORDERUNIT_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_DATE3")
        self.UCF_INSP_ORDERUNIT_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_DATE4")
        self.UCF_INSP_ORDERUNIT_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_DATE5")
        self.UCF_INSP_ORDERUNIT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_FLAG1")
        self.UCF_INSP_ORDERUNIT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_FLAG2")
        self.UCF_INSP_ORDERUNIT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_FLAG3")
        self.UCF_INSP_ORDERUNIT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_FLAG4")
        self.UCF_INSP_ORDERUNIT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_FLAG5")
        self.FAI_REPORT_NO = parse_value(self.schema, column_value_map, "FAI_REPORT_NO")
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        self.SAMPLE_NO = parse_value(self.schema, column_value_map, "SAMPLE_NO")
        self.UCF_INSP_ORDERUNIT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH255_1")
        self.UCF_INSP_ORDERUNIT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH255_2")
        self.UCF_INSP_ORDERUNIT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH255_3")
        self.UCF_INSP_ORDERUNIT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH4000_1")
        self.UCF_INSP_ORDERUNIT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNIT_VCH4000_2")
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        self.DESIGN_AUTHORITY = parse_value(self.schema, column_value_map, "DESIGN_AUTHORITY")
        self.MANUFACTURER_CODE = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE")
        self.MANUFACTURER_PART_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_PART_NO")
        self.MANUFACTURER_SERIAL_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_SERIAL_NO")
        self.MANUFACTURER_LOT_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_LOT_NO")
        self.EXPIRATION_DATE = parse_value(self.schema, column_value_map, "EXPIRATION_DATE")
        self.SPOOL_NO = parse_value(self.schema, column_value_map, "SPOOL_NO")
        self.SFSQA_INSP_ORDER_ISII_DC_FK3 = []
        self.SFSQA_IO_HOLD_SRLS_FK2 = []
        self.SFSQA_OVERIDE_RES_TRACKER_FK1 = []
        self.SFSQA_IDP_SUBCOMPS_FK1 = []
        self.SFSQA_IDP_SUBCOMPS_FK2 = []

class SFWID_OPER_DAT_COL_ALT:
    schema = {
        "OPER_DAT_COL_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "DAT_COL_ID": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UPPER_LIMIT": "STRING",
        "LOWER_LIMIT": "STRING",
        "TARGET_VALUE": "STRING",
        "DAT_COL_TITLE": "STRING",
        "DAT_COL_CERT": "STRING",
        "ALT_ID": "STRING",
        "DAT_COL_UOM": "STRING",
        "ALT_COUNT": "NUMBER",
        "BLOCK_ID": "STRING",
        "REF_ID": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "NUM_DECIMAL_DIGITS": "NUMBER",
        "CALC_DC_FLAG": "STRING",
        "SUSPECT_FLAG": "STRING",
        "VARIABLE_NAME": "STRING",
        "VISIBILITY": "STRING",
        "UCF_OPER_DC_VCH1": "STRING",
        "UCF_OPER_DC_VCH2": "STRING",
        "UCF_OPER_DC_VCH3": "STRING",
        "UCF_OPER_DC_VCH4": "STRING",
        "UCF_OPER_DC_VCH5": "STRING",
        "UCF_OPER_DC_VCH6": "STRING",
        "UCF_OPER_DC_VCH7": "STRING",
        "UCF_OPER_DC_VCH8": "STRING",
        "UCF_OPER_DC_VCH9": "STRING",
        "UCF_OPER_DC_VCH10": "STRING",
        "UCF_OPER_DC_VCH11": "STRING",
        "UCF_OPER_DC_VCH12": "STRING",
        "UCF_OPER_DC_VCH13": "STRING",
        "UCF_OPER_DC_VCH14": "STRING",
        "UCF_OPER_DC_VCH15": "STRING",
        "UCF_OPER_DC_NUM1": "NUMBER",
        "UCF_OPER_DC_NUM2": "NUMBER",
        "UCF_OPER_DC_NUM3": "NUMBER",
        "UCF_OPER_DC_NUM4": "NUMBER",
        "UCF_OPER_DC_NUM5": "NUMBER",
        "UCF_OPER_DC_DATE1": "STRING",
        "UCF_OPER_DC_DATE2": "STRING",
        "UCF_OPER_DC_DATE3": "STRING",
        "UCF_OPER_DC_DATE4": "STRING",
        "UCF_OPER_DC_DATE5": "STRING",
        "UCF_OPER_DC_FLAG1": "STRING",
        "UCF_OPER_DC_FLAG2": "STRING",
        "UCF_OPER_DC_FLAG3": "STRING",
        "UCF_OPER_DC_FLAG4": "STRING",
        "UCF_OPER_DC_FLAG5": "STRING",
        "UCF_OPER_DC_VCH255_1": "STRING",
        "UCF_OPER_DC_VCH255_2": "STRING",
        "UCF_OPER_DC_VCH255_3": "STRING",
        "UCF_OPER_DC_VCH4000_1": "STRING",
        "UCF_OPER_DC_VCH4000_2": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "AUDIT_FLAG": "STRING",
        "STD_DATCOL_ID": "STRING",
        "RESULT_ID": "STRING",
        "TEMPLATE_FILE_ID": "STRING",
    }
    primary_key_columns = [
        "OPER_DAT_COL_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_DAT_COL_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_DAT_COL_ALT_FK3", ["STD_DATCOL_ID"], "SFFND_STD_DATCOL_TYPE_DEF", ["STD_DATCOL_ID"]),
        DbForeignKey("SFWID_OPER_DAT_COL_ALT_FK4", ["RESULT_ID"], "SFSQA_VALID_RESULT_TYPE_DEF", ["RESULT_ID"]),
        DbForeignKey("SFWID_OPER_DAT_COL_ALT_FK5", ["DAT_COL_UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFWID_OPER_DAT_COL_ALT_FK6", ["VARIABLE_NAME","VISIBILITY"], "SFFND_DC_VARIABLE_DEF", ["VARIABLE_NAME","VISIBILITY"]),
        DbForeignKey("SFWID_OPER_DAT_COL_ALT_FK7", ["TEMPLATE_FILE_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_OPER_DAT_COL_ALT_FK2", ["DAT_COL_CERT"], "SFFND_CERT_DEF", ["CERT"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_DAT_COL_ALT = parse_value(self.schema, column_value_map, "OPER_DAT_COL_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        "Unique, system-generated identifier of the data collection."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UPPER_LIMIT = parse_value(self.schema, column_value_map, "UPPER_LIMIT")
        "The highest allowable data value for the given data collection."
        self.LOWER_LIMIT = parse_value(self.schema, column_value_map, "LOWER_LIMIT")
        "The lowest allowable data value for the given data collection."
        self.TARGET_VALUE = parse_value(self.schema, column_value_map, "TARGET_VALUE")
        "The optimal/expected value for the given data collection."
        self.DAT_COL_TITLE = parse_value(self.schema, column_value_map, "DAT_COL_TITLE")
        "Title/name of the data collection point."
        self.DAT_COL_CERT = parse_value(self.schema, column_value_map, "DAT_COL_CERT")
        "The required certification for the given data collection."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.DAT_COL_UOM = parse_value(self.schema, column_value_map, "DAT_COL_UOM")
        "The Unit of Measure associated with the data collection value."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Block type/Block id where object exists within the text. For a full list of BLOCK_IDs see SFFND_HTREF_BLOCKID_DEF for full list. Not currently implemented."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.NUM_DECIMAL_DIGITS = parse_value(self.schema, column_value_map, "NUM_DECIMAL_DIGITS")
        self.CALC_DC_FLAG = parse_value(self.schema, column_value_map, "CALC_DC_FLAG")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.VARIABLE_NAME = parse_value(self.schema, column_value_map, "VARIABLE_NAME")
        self.VISIBILITY = parse_value(self.schema, column_value_map, "VISIBILITY")
        self.UCF_OPER_DC_VCH1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH4 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH5 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH6 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH7 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH8 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH9 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH10 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH11 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH12 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH13 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH14 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_VCH15 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_DC_NUM1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_OPER_DC_NUM2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_OPER_DC_NUM3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_OPER_DC_NUM4 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_OPER_DC_NUM5 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_OPER_DC_DATE1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_OPER_DC_DATE2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_OPER_DC_DATE3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_OPER_DC_DATE4 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_OPER_DC_DATE5 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_OPER_DC_FLAG1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OPER_DC_FLAG2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OPER_DC_FLAG3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OPER_DC_FLAG4 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG4")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OPER_DC_FLAG5 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG5")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_OPER_DC_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_OPER_DC_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_OPER_DC_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_OPER_DC_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_OPER_DC_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.AUDIT_FLAG = parse_value(self.schema, column_value_map, "AUDIT_FLAG")
        "If Y, the user audit process must be executed to see if an over-inspection is required or not."
        self.STD_DATCOL_ID = parse_value(self.schema, column_value_map, "STD_DATCOL_ID")
        "Unique, system-generated identifier of a standard data collection."
        self.RESULT_ID = parse_value(self.schema, column_value_map, "RESULT_ID")
        "The unique identifier of the Validation Result Type for given data collection."
        self.TEMPLATE_FILE_ID = parse_value(self.schema, column_value_map, "TEMPLATE_FILE_ID")
        "The unique identifier of the object being referenced."

class SFPL_CHANGE_TYPE_DEF:
    schema = {
        "CHANGE_TYPE": "STRING",
        "EXTERNAL_FLAG": "STRING",
        "DESCRIPTION_EDITMODE": "STRING",
        "DESCRIPTION_UDV_ID": "STRING",
        "AFFECTED_OBJECTS_EDITMODE": "STRING",
        "RESULTING_OBJECTS_EDITMODE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CHANGE_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_CHANGE_TYPE_DEF_FK1", ["DESCRIPTION_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CHANGE_TYPE = parse_value(self.schema, column_value_map, "CHANGE_TYPE")
        "This is Document Subtype for Change Request Workflow."
        self.EXTERNAL_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_FLAG")
        "This flag indicates that Change Type is External. i.e. Change Request Created (with this type) is created from External System."
        self.DESCRIPTION_EDITMODE = parse_value(self.schema, column_value_map, "DESCRIPTION_EDITMODE")
        "Values can be like Edit, Read Only. Edit - Means User can Change the Change Request Description field Values. Read Only - Means user can just view the description."
        self.DESCRIPTION_UDV_ID = parse_value(self.schema, column_value_map, "DESCRIPTION_UDV_ID")
        "UDV ID of Change Request Description."
        self.AFFECTED_OBJECTS_EDITMODE = parse_value(self.schema, column_value_map, "AFFECTED_OBJECTS_EDITMODE")
        "Values can be like Edit, Append, Read Only. Edit - Means User can Add/Change/Delete the Affected Objects. Read Only - Means user can just view the Affected Objects. Append - Means user can only insert affected objects."
        self.RESULTING_OBJECTS_EDITMODE = parse_value(self.schema, column_value_map, "RESULTING_OBJECTS_EDITMODE")
        "Values can be like Edit, Append, Read Only. Edit - Means User can Add/Change/Delete the Resulting Objects. Read Only - Means user can just view the Resulting Objects. Append - Means user can only insert resulting objects."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFRPT_REPORT_GRAPH_DEF:
    schema = {
        "OBJECT_ID": "STRING",
        "REPORT_TYPE": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "REPORT_GRAPH_DESC": "STRING",
    }
    primary_key_columns = [
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFRPT_REPORT_GRAPH_OBJECT_FK", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFRPT_REPORT_GRAPH_RTYPE_FK", ["REPORT_TYPE"], "SFRPT_REPORT_TYPE_DEF", ["REPORT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.REPORT_TYPE = parse_value(self.schema, column_value_map, "REPORT_TYPE")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.REPORT_GRAPH_DESC = parse_value(self.schema, column_value_map, "REPORT_GRAPH_DESC")

class SFQRTZ_FIRED_TRIGGERS:
    schema = {
        "SCHED_NAME": "STRING",
        "ENTRY_ID": "STRING",
        "TRIGGER_NAME": "STRING",
        "TRIGGER_GROUP": "STRING",
        "INSTANCE_NAME": "STRING",
        "FIRED_TIME": "NUMBER",
        "SCHED_TIME": "NUMBER",
        "PRIORITY": "NUMBER",
        "STATE": "STRING",
        "JOB_NAME": "STRING",
        "JOB_GROUP": "STRING",
        "IS_NONCONCURRENT": "STRING",
        "REQUESTS_RECOVERY": "STRING",
    }
    primary_key_columns = [
        "SCHED_NAME",
        "ENTRY_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SCHED_NAME = parse_value(self.schema, column_value_map, "SCHED_NAME")
        self.ENTRY_ID = parse_value(self.schema, column_value_map, "ENTRY_ID")
        self.TRIGGER_NAME = parse_value(self.schema, column_value_map, "TRIGGER_NAME")
        self.TRIGGER_GROUP = parse_value(self.schema, column_value_map, "TRIGGER_GROUP")
        self.INSTANCE_NAME = parse_value(self.schema, column_value_map, "INSTANCE_NAME")
        self.FIRED_TIME = parse_value(self.schema, column_value_map, "FIRED_TIME")
        self.SCHED_TIME = parse_value(self.schema, column_value_map, "SCHED_TIME")
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        self.STATE = parse_value(self.schema, column_value_map, "STATE")
        self.JOB_NAME = parse_value(self.schema, column_value_map, "JOB_NAME")
        self.JOB_GROUP = parse_value(self.schema, column_value_map, "JOB_GROUP")
        self.IS_NONCONCURRENT = parse_value(self.schema, column_value_map, "IS_NONCONCURRENT")
        self.REQUESTS_RECOVERY = parse_value(self.schema, column_value_map, "REQUESTS_RECOVERY")

class SFCORE_CRON_JOB:
    schema = {
        "CRON_JOB_ID": "STRING",
        "JOB_DESC": "STRING",
        "CRON_EXPRESSION": "STRING",
        "TARGET_BEAN": "STRING",
        "TARGET_METHOD": "STRING",
        "DISTRIBUTED_FLAG": "STRING",
        "CONCURRENT_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CRON_JOB_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CRON_JOB_ID = parse_value(self.schema, column_value_map, "CRON_JOB_ID")
        "Unique job id."
        self.JOB_DESC = parse_value(self.schema, column_value_map, "JOB_DESC")
        "Optional job description."
        self.CRON_EXPRESSION = parse_value(self.schema, column_value_map, "CRON_EXPRESSION")
        "Cron expression."
        self.TARGET_BEAN = parse_value(self.schema, column_value_map, "TARGET_BEAN")
        "Bean name in application context."
        self.TARGET_METHOD = parse_value(self.schema, column_value_map, "TARGET_METHOD")
        "Method name in target bean."
        self.DISTRIBUTED_FLAG = parse_value(self.schema, column_value_map, "DISTRIBUTED_FLAG")
        "If Y then this job should run on every node in cluster, otherwise - only on cluster coordinator node."
        self.CONCURRENT_FLAG = parse_value(self.schema, column_value_map, "CONCURRENT_FLAG")
        "If Y then this job can overlap with previously started same job."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_PLG_TASK:
    schema = {
        "TASK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "CHANGE_DOC_TYPE": "STRING",
        "CHANGE_DOC_ID": "STRING",
        "PLAN_TYPE": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "PROGRAM": "STRING",
        "MODEL": "STRING",
        "PROJECT": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
    }
    primary_key_columns = [
        "TASK_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_PLG_TASK_ITYPE_FK", ["ITEM_TYPE","ITEM_SUBTYPE"], "SFPL_ITEM_TYPE_DEF", ["ITEM_TYPE","ITEM_SUBTYPE"]),
        DbForeignKey("SFFND_PLGTASK_TASK_FK", ["TASK_ID"], "SFFND_TASK", ["TASK_ID"]),
        DbForeignKey("SFFND_PLG_TASK_PLNREV_FK", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TASK_ID = parse_value(self.schema, column_value_map, "TASK_ID")
        "The unique identifier of a task for work flow control, specifically a task in the work plan authoring process in this case."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.CHANGE_DOC_TYPE = parse_value(self.schema, column_value_map, "CHANGE_DOC_TYPE")
        "The type of engineering change authorization document that the task is related to. For example: PWP."
        self.CHANGE_DOC_ID = parse_value(self.schema, column_value_map, "CHANGE_DOC_ID")
        "The identifier of the change document that the task is related to. For example: PWP Id."
        self.PLAN_TYPE = parse_value(self.schema, column_value_map, "PLAN_TYPE")
        "Type or classification of the associated work plan."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier of the component/part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.MODEL = parse_value(self.schema, column_value_map, "MODEL")
        "Unique identifier of a model/product line."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of a project."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")

class SFCORE_REPORT_TEMP:
    schema = {
        "REQUEST_ID": "STRING",
        "PAGE_NUMBER": "NUMBER",
        "STATUS": "STRING",
        "TIME_STAMP": "DATE",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
        "PAGE_DATA": "STRING",
    }
    primary_key_columns = [
        "REQUEST_ID",
        "PAGE_NUMBER",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_REPORT_TEMP_FK", ["REQUEST_ID"], "SFCORE_REPORT_PARAMS_TEMP", ["REQUEST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REQUEST_ID = parse_value(self.schema, column_value_map, "REQUEST_ID")
        "System generated unique identifier for a given request."
        self.PAGE_NUMBER = parse_value(self.schema, column_value_map, "PAGE_NUMBER")
        "Report page number."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The status of the disposition/rework task. For example: IN PROCESS, DISPOSITIONED, or COMPLETE."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PAGE_DATA = parse_value(self.schema, column_value_map, "PAGE_DATA")
        "Report page data."

class SFWID_OPER_MATERIAL:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "AUTHORED_MATERIAL_ID": "STRING",
        "MATERIAL_NAME": "STRING",
        "STEP_NO": "STRING",
        "OPER_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "SECURITY_GROUP": "STRING",
        "MATERIAL_ID": "STRING",
        "STATUS": "STRING",
        "UOM": "STRING",
        "QUANTITY": "NUMBER",
        "FREEZER_NAME": "STRING",
        "EXPIRATION_DATE": "STRING",
        "TIME_REMAINING": "NUMBER",
        "CLASSIFIED": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "AUTHORED_MATERIAL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_MATERIAL_FK3", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_OPER_MATERIAL_FK1", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_MATERIAL_FK2", ["MATERIAL_ID"], "MOTT_TIME_MATERIAL", ["MATERIAL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.AUTHORED_MATERIAL_ID = parse_value(self.schema, column_value_map, "AUTHORED_MATERIAL_ID")
        self.MATERIAL_NAME = parse_value(self.schema, column_value_map, "MATERIAL_NAME")
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        "Primary Key For Time sensitive material"
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        self.QUANTITY = parse_value(self.schema, column_value_map, "QUANTITY")
        self.FREEZER_NAME = parse_value(self.schema, column_value_map, "FREEZER_NAME")
        self.EXPIRATION_DATE = parse_value(self.schema, column_value_map, "EXPIRATION_DATE")
        self.TIME_REMAINING = parse_value(self.schema, column_value_map, "TIME_REMAINING")
        self.CLASSIFIED = parse_value(self.schema, column_value_map, "CLASSIFIED")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")

class SFMOBILE_WIZARD_SCENES:
    schema = {
        "WIZARD_NAME": "STRING",
        "SCENE_NAME": "STRING",
        "DESCRIPTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SCENE_TEXT": "STRING",
        "STYPE": "STRING",
    }
    primary_key_columns = [
        "WIZARD_NAME",
        "SCENE_NAME",
    ]
    foreign_keys = [
        DbForeignKey("SFMOBILE_WIZ_SCENES_STYPE_FK2", ["STYPE"], "SFCORE_MODULES", ["GROUP_NAME"]),
        DbForeignKey("SFMOBILE_WIZARD_SCENES_WIZ_FK1", ["WIZARD_NAME"], "SFMOBILE_WIZARD", ["WIZARD_NAME"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.WIZARD_NAME = parse_value(self.schema, column_value_map, "WIZARD_NAME")
        self.SCENE_NAME = parse_value(self.schema, column_value_map, "SCENE_NAME")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SCENE_TEXT = parse_value(self.schema, column_value_map, "SCENE_TEXT")
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")
        "name of the group"

class SFFND_GROUP_DEF:
    schema = {
        "GROUP_ID": "STRING",
        "CONFIG_MODULE_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "GROUP_DESC": "STRING",
    }
    primary_key_columns = [
        "GROUP_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_GROUP_REV_GRP_FK",
        "SFFND_GROUP_REV_CTL_GRP_FK",
    ]
    def __init__(self, column_value_map):
        self.GROUP_ID = parse_value(self.schema, column_value_map, "GROUP_ID")
        "Unique, system generated identifier of a group."
        self.CONFIG_MODULE_NAME = parse_value(self.schema, column_value_map, "CONFIG_MODULE_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.GROUP_DESC = parse_value(self.schema, column_value_map, "GROUP_DESC")
        "description of the group"
        self.SFFND_GROUP_REV_GRP_FK = []
        self.SFFND_GROUP_REV_CTL_GRP_FK = []

class SFWID_ORDER_DESC_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "ORDER_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ORDER_SCRAP_QTY": "NUMBER",
        "ORDER_COMPLETE_QTY": "NUMBER",
        "ORDER_STOP_QTY": "NUMBER",
        "NEEDS_REVIEW_FLAG": "STRING",
        "ALT_COUNT": "NUMBER",
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "PLAN_UPDT_NO": "NUMBER",
        "ORDER_STATUS": "STRING",
        "ORDER_HOLD_STATUS": "STRING",
        "ORDER_CUST_ID": "STRING",
        "ORDER_QTY": "NUMBER",
        "SCHED_PRIORITY": "STRING",
        "INITIAL_STORES": "STRING",
        "FINAL_STORES": "STRING",
        "CONTRACT_NO": "STRING",
        "PARENT_ORDER_ID": "STRING",
        "ORIG_ORDER_ID": "STRING",
        "SUPERCEDED_ORDER_ID": "STRING",
        "SUPERCEDES_ORDER": "STRING",
        "SPLIT_FLAG": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "UNIT_NO": "STRING",
        "CUSTOMER_ORDER_NO": "STRING",
        "PLAN_TYPE": "STRING",
        "ALTER_TYPE": "STRING",
        "ORDER_TYPE": "STRING",
        "STATUS_CHG_NOTES": "STRING",
        "ITEM_ID": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "PROGRAM": "STRING",
        "MFG_BOM_CHG": "STRING",
        "MODEL": "STRING",
        "PLAN_TITLE": "STRING",
        "ORDER_UOM": "STRING",
        "UNIT_TYPE": "STRING",
        "PROJECT": "STRING",
        "ALT_ID": "STRING",
        "ALT_STATUS": "STRING",
        "ENG_PART_NO": "STRING",
        "ENG_PART_CHG": "STRING",
        "ENG_GROUP": "STRING",
        "MFG_INDEX_NO": "STRING",
        "PLG_GROUP": "STRING",
        "STATUS_CHG_REASON": "STRING",
        "UCF_PLAN_VCH1": "STRING",
        "UCF_PLAN_VCH2": "STRING",
        "UCF_PLAN_VCH3": "STRING",
        "UCF_PLAN_VCH4": "STRING",
        "UCF_PLAN_VCH5": "STRING",
        "UCF_PLAN_VCH6": "STRING",
        "UCF_PLAN_VCH7": "STRING",
        "UCF_PLAN_VCH8": "STRING",
        "UCF_PLAN_FLAG1": "STRING",
        "UCF_PLAN_FLAG2": "STRING",
        "UCF_ORDER_VCH1": "STRING",
        "UCF_ORDER_VCH2": "STRING",
        "UCF_ORDER_VCH3": "STRING",
        "UCF_ORDER_VCH4": "STRING",
        "UCF_ORDER_VCH5": "STRING",
        "UCF_ORDER_NUM1": "NUMBER",
        "UCF_ORDER_NUM2": "NUMBER",
        "UCF_ORDER_FLAG1": "STRING",
        "HIST_ALT_ID": "STRING",
        "OPER_SEQ_FLAG": "STRING",
        "UCF_PLAN_NUM1": "NUMBER",
        "UCF_PLAN_NUM2": "NUMBER",
        "UNSCRAP_FLAG": "STRING",
        "LTA_SEND_FLAG": "STRING",
        "LAST_ORDER_HDR_CHG_ALT_ID": "STRING",
        "UCF_PLAN_VCH9": "STRING",
        "UCF_PLAN_VCH10": "STRING",
        "UCF_PLAN_VCH11": "STRING",
        "UCF_PLAN_VCH12": "STRING",
        "UCF_PLAN_VCH13": "STRING",
        "UCF_PLAN_VCH14": "STRING",
        "UCF_PLAN_VCH15": "STRING",
        "UCF_PLAN_NUM3": "NUMBER",
        "UCF_PLAN_NUM4": "NUMBER",
        "UCF_PLAN_NUM5": "NUMBER",
        "UCF_PLAN_DATE1": "STRING",
        "UCF_PLAN_DATE2": "STRING",
        "UCF_PLAN_DATE3": "STRING",
        "UCF_PLAN_DATE4": "STRING",
        "UCF_PLAN_DATE5": "STRING",
        "UCF_PLAN_FLAG3": "STRING",
        "UCF_PLAN_FLAG4": "STRING",
        "UCF_PLAN_FLAG5": "STRING",
        "UCF_PLAN_VCH255_1": "STRING",
        "UCF_PLAN_VCH255_2": "STRING",
        "UCF_PLAN_VCH255_3": "STRING",
        "UCF_PLAN_VCH4000_1": "STRING",
        "UCF_PLAN_VCH4000_2": "STRING",
        "UCF_ORDER_VCH6": "STRING",
        "UCF_ORDER_VCH7": "STRING",
        "UCF_ORDER_VCH8": "STRING",
        "UCF_ORDER_VCH9": "STRING",
        "UCF_ORDER_VCH10": "STRING",
        "UCF_ORDER_VCH11": "STRING",
        "UCF_ORDER_VCH12": "STRING",
        "UCF_ORDER_VCH13": "STRING",
        "UCF_ORDER_VCH14": "STRING",
        "UCF_ORDER_VCH15": "STRING",
        "UCF_ORDER_NUM3": "NUMBER",
        "UCF_ORDER_NUM4": "NUMBER",
        "UCF_ORDER_NUM5": "NUMBER",
        "UCF_ORDER_DATE1": "STRING",
        "UCF_ORDER_DATE2": "STRING",
        "UCF_ORDER_DATE3": "STRING",
        "UCF_ORDER_DATE4": "STRING",
        "UCF_ORDER_DATE5": "STRING",
        "UCF_ORDER_FLAG2": "STRING",
        "UCF_ORDER_FLAG3": "STRING",
        "UCF_ORDER_FLAG4": "STRING",
        "UCF_ORDER_FLAG5": "STRING",
        "UCF_ORDER_VCH255_1": "STRING",
        "UCF_ORDER_VCH255_2": "STRING",
        "UCF_ORDER_VCH255_3": "STRING",
        "UCF_ORDER_VCH4000_1": "STRING",
        "UCF_ORDER_VCH4000_2": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "ORDER_LOCKED": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "CONDITION": "STRING",
        "BOM_NO": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "SECURITY_GROUP": "STRING",
        "PLAN_NO": "STRING",
        "DISPLAY_SEQUENCE": "STRING",
        "DOC_TYPE": "STRING",
        "INVENTORY_STOCK_LOC": "STRING",
        "ACCOUNT_LABOR": "STRING",
        "ACCOUNT_MATERIAL": "STRING",
        "ORDER_ISSUE_STATUS": "STRING",
        "INSTRUCTIONS_TYPE": "STRING",
        "OPERATION_OVERLAP_FLAG": "STRING",
        "SPLIT_FROM_ORDER_ID": "STRING",
        "ALIAS_PART_NO": "STRING",
        "ALIAS_PART_CHG": "STRING",
        "ASGND_LOCATION_ID": "STRING",
        "INSP_ORDER_ID": "STRING",
        "BOM_ID": "STRING",
        "DECLARED_LANGUAGE_CODE": "STRING",
        "EXPLICIT_BOM_LINK_FLAG": "STRING",
        "LOAD_EMB_CONTROL_FLAG": "STRING",
        "COMMODITY_JURISDICTION": "STRING",
        "COMMODITY_CLASSIFICATION": "STRING",
        "ALTER_LOCKED": "STRING",
        "ORDER_CATEGORY": "STRING",
        "CURRENT_LOC_ID": "STRING",
        "CURRENT_DEPT_ID": "STRING",
        "CURRENT_CENTER_ID": "STRING",
        "PREVIOUS_LOC_ID": "STRING",
        "PREVIOUS_DEPT_ID": "STRING",
        "PREVIOUS_CENTER_ID": "STRING",
        "NEXT_LOC_ID": "STRING",
        "NEXT_DEPT_ID": "STRING",
        "NEXT_CENTER_ID": "STRING",
        "CURRENT_OPER_KEY": "NUMBER",
        "SUB_LOCATION": "STRING",
        "ARRIVED_DATE": "STRING",
        "MULTI_KEY_ENABLED": "STRING",
        "MATERIAL_FLAG": "STRING",
        "INSP_PLAN_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        "Unique, user-assigned identifier of a given work order."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ORDER_SCRAP_QTY = parse_value(self.schema, column_value_map, "ORDER_SCRAP_QTY")
        "Number of items/component parts that have been scrapped during the process of fulfilling the given work order."
        self.ORDER_COMPLETE_QTY = parse_value(self.schema, column_value_map, "ORDER_COMPLETE_QTY")
        "Number of items/component parts that have been completed during the process of fulfilling the given work order."
        self.ORDER_STOP_QTY = parse_value(self.schema, column_value_map, "ORDER_STOP_QTY")
        "Number of items/component parts that have been stopped during the process of fulfilling the given work order."
        self.NEEDS_REVIEW_FLAG = parse_value(self.schema, column_value_map, "NEEDS_REVIEW_FLAG")
        "A flag (Y/N) that indicates whether the associated Corrective Action Diagram requires review."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.ORDER_STATUS = parse_value(self.schema, column_value_map, "ORDER_STATUS")
        "The status of the work order, e.g., ACTIVE, COMPLETE, IN QUEUE, or CANCEL."
        self.ORDER_HOLD_STATUS = parse_value(self.schema, column_value_map, "ORDER_HOLD_STATUS")
        "The on-hold status of the work order, OPEN or CLOSED."
        self.ORDER_CUST_ID = parse_value(self.schema, column_value_map, "ORDER_CUST_ID")
        "User-changeable identifier of the customer receiving the completed work. Defaults to PLND_CUST_ID."
        self.ORDER_QTY = parse_value(self.schema, column_value_map, "ORDER_QTY")
        "The quantity of the part to be made for the work order. Defaults to PLND_ORDER_QTY but can be changed."
        self.SCHED_PRIORITY = parse_value(self.schema, column_value_map, "SCHED_PRIORITY")
        "The scheduled priority of the associated work order, e.g., High, Low, Medium."
        self.INITIAL_STORES = parse_value(self.schema, column_value_map, "INITIAL_STORES")
        "Storage or process location associated with the initial phases of the given work plan or work order."
        self.FINAL_STORES = parse_value(self.schema, column_value_map, "FINAL_STORES")
        "Storage or process location associated with the final phases of the given work plan or work order."
        self.CONTRACT_NO = parse_value(self.schema, column_value_map, "CONTRACT_NO")
        "The contract number of the associated work order."
        self.PARENT_ORDER_ID = parse_value(self.schema, column_value_map, "PARENT_ORDER_ID")
        "In the case of splits, rework/disposition orders, and supersedes, the unique identifier of the parent work order from which the given split/rework/superseded work order was created."
        self.ORIG_ORDER_ID = parse_value(self.schema, column_value_map, "ORIG_ORDER_ID")
        "In the case of splits, rework/disposition orders, and supersedes, the unique identifier of the original work order from which the given split/rework/superseded work order was created."
        self.SUPERCEDED_ORDER_ID = parse_value(self.schema, column_value_map, "SUPERCEDED_ORDER_ID")
        "Unique, system-generated identifier of a work order that has been superseded by the given work order."
        self.SUPERCEDES_ORDER = parse_value(self.schema, column_value_map, "SUPERCEDES_ORDER")
        "Unique, system-generated identifier of a work order that has superseded the given work order."
        self.SPLIT_FLAG = parse_value(self.schema, column_value_map, "SPLIT_FLAG")
        "A flag (Y/N) that indicates whether or not the work order is a split of another work order."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which work for the work order is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which work for the work order is scheduled to complete."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised start date for the given order."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised end date for the given order."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which work for the work order was actually started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which work for the work order was actually completed."
        self.UNIT_NO = parse_value(self.schema, column_value_map, "UNIT_NO")
        "The unit number of the shipping product (e.g. airplane tail #) the work order is related to."
        self.CUSTOMER_ORDER_NO = parse_value(self.schema, column_value_map, "CUSTOMER_ORDER_NO")
        "The customer purchase order number associated with the order."
        self.PLAN_TYPE = parse_value(self.schema, column_value_map, "PLAN_TYPE")
        "Type or classification of the associated work plan."
        self.ALTER_TYPE = parse_value(self.schema, column_value_map, "ALTER_TYPE")
        "Type or classification of the last alteration on the associated work order."
        self.ORDER_TYPE = parse_value(self.schema, column_value_map, "ORDER_TYPE")
        "Type or classification of order."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated work order."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.MFG_BOM_CHG = parse_value(self.schema, column_value_map, "MFG_BOM_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given BOM."
        self.MODEL = parse_value(self.schema, column_value_map, "MODEL")
        "Unique identifier of the associated model/product line."
        self.PLAN_TITLE = parse_value(self.schema, column_value_map, "PLAN_TITLE")
        "A descriptive title or name of the work plan."
        self.ORDER_UOM = parse_value(self.schema, column_value_map, "ORDER_UOM")
        "The Unit Of Measure associated with PLND_ORDER_QTY and ORDER_QTY."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_STATUS = parse_value(self.schema, column_value_map, "ALT_STATUS")
        "Status of the given work order alteration, e.g., ORDER_AUTHORING."
        self.ENG_PART_NO = parse_value(self.schema, column_value_map, "ENG_PART_NO")
        "The part number of the product to be made, mapped to engineering BOM, provided by Engineering."
        self.ENG_PART_CHG = parse_value(self.schema, column_value_map, "ENG_PART_CHG")
        "The change letter associated with the engineering part number."
        self.ENG_GROUP = parse_value(self.schema, column_value_map, "ENG_GROUP")
        "The unique identifier of the associated engineering group."
        self.MFG_INDEX_NO = parse_value(self.schema, column_value_map, "MFG_INDEX_NO")
        "The associated manufacturing index number, usually used in Engineering to identify a specific stage in the manufacturing process."
        self.PLG_GROUP = parse_value(self.schema, column_value_map, "PLG_GROUP")
        "Unique identifier of the associated process planning group."
        self.STATUS_CHG_REASON = parse_value(self.schema, column_value_map, "STATUS_CHG_REASON")
        "Reason for a change in status."
        self.UCF_PLAN_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.OPER_SEQ_FLAG = parse_value(self.schema, column_value_map, "OPER_SEQ_FLAG")
        "A flag (Y/N) indicating whether the operations of the given must be executed in sequence. Obsolete; used only for legacy migration purposes."
        self.UCF_PLAN_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM2")
        "User-configurable field for NUM data type."
        self.UNSCRAP_FLAG = parse_value(self.schema, column_value_map, "UNSCRAP_FLAG")
        "A flag (Y/N) indicating whether the component/part should be or has been unscrapped."
        self.LTA_SEND_FLAG = parse_value(self.schema, column_value_map, "LTA_SEND_FLAG")
        self.LAST_ORDER_HDR_CHG_ALT_ID = parse_value(self.schema, column_value_map, "LAST_ORDER_HDR_CHG_ALT_ID")
        self.UCF_PLAN_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH9")
        self.UCF_PLAN_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH10")
        self.UCF_PLAN_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH11")
        self.UCF_PLAN_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH12")
        self.UCF_PLAN_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH13")
        self.UCF_PLAN_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH14")
        self.UCF_PLAN_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH15")
        self.UCF_PLAN_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM3")
        self.UCF_PLAN_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM4")
        self.UCF_PLAN_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM5")
        self.UCF_PLAN_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE1")
        self.UCF_PLAN_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE2")
        self.UCF_PLAN_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE3")
        self.UCF_PLAN_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE4")
        self.UCF_PLAN_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE5")
        self.UCF_PLAN_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG3")
        self.UCF_PLAN_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG4")
        self.UCF_PLAN_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG5")
        self.UCF_PLAN_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH255_1")
        self.UCF_PLAN_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH255_2")
        self.UCF_PLAN_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH255_3")
        self.UCF_PLAN_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH4000_1")
        self.UCF_PLAN_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH4000_2")
        self.UCF_ORDER_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH6")
        self.UCF_ORDER_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH7")
        self.UCF_ORDER_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH8")
        self.UCF_ORDER_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH9")
        self.UCF_ORDER_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH10")
        self.UCF_ORDER_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH11")
        self.UCF_ORDER_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH12")
        self.UCF_ORDER_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH13")
        self.UCF_ORDER_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH14")
        self.UCF_ORDER_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH15")
        self.UCF_ORDER_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM3")
        self.UCF_ORDER_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM4")
        self.UCF_ORDER_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM5")
        self.UCF_ORDER_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE1")
        self.UCF_ORDER_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE2")
        self.UCF_ORDER_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE3")
        self.UCF_ORDER_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE4")
        self.UCF_ORDER_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE5")
        self.UCF_ORDER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG2")
        self.UCF_ORDER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG3")
        self.UCF_ORDER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG4")
        self.UCF_ORDER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG5")
        self.UCF_ORDER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH255_1")
        self.UCF_ORDER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH255_2")
        self.UCF_ORDER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH255_3")
        self.UCF_ORDER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH4000_1")
        self.UCF_ORDER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH4000_2")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.ORDER_LOCKED = parse_value(self.schema, column_value_map, "ORDER_LOCKED")
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.CONDITION = parse_value(self.schema, column_value_map, "CONDITION")
        self.BOM_NO = parse_value(self.schema, column_value_map, "BOM_NO")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.PLAN_NO = parse_value(self.schema, column_value_map, "PLAN_NO")
        self.DISPLAY_SEQUENCE = parse_value(self.schema, column_value_map, "DISPLAY_SEQUENCE")
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        self.INVENTORY_STOCK_LOC = parse_value(self.schema, column_value_map, "INVENTORY_STOCK_LOC")
        self.ACCOUNT_LABOR = parse_value(self.schema, column_value_map, "ACCOUNT_LABOR")
        self.ACCOUNT_MATERIAL = parse_value(self.schema, column_value_map, "ACCOUNT_MATERIAL")
        self.ORDER_ISSUE_STATUS = parse_value(self.schema, column_value_map, "ORDER_ISSUE_STATUS")
        "Determines if the Work Order is requested for Part Issue or not."
        self.INSTRUCTIONS_TYPE = parse_value(self.schema, column_value_map, "INSTRUCTIONS_TYPE")
        "Instructions type associated to the given work order."
        self.OPERATION_OVERLAP_FLAG = parse_value(self.schema, column_value_map, "OPERATION_OVERLAP_FLAG")
        "Operation Overlap flag, used to allow partial lot completions and a lot to be spread out over many operations."
        self.SPLIT_FROM_ORDER_ID = parse_value(self.schema, column_value_map, "SPLIT_FROM_ORDER_ID")
        "Contains the original ORDER_ID from which a given order was split."
        self.ALIAS_PART_NO = parse_value(self.schema, column_value_map, "ALIAS_PART_NO")
        "Part No of alias/Starting Part."
        self.ALIAS_PART_CHG = parse_value(self.schema, column_value_map, "ALIAS_PART_CHG")
        "Part Chagne of alias/Starting Part."
        self.ASGND_LOCATION_ID = parse_value(self.schema, column_value_map, "ASGND_LOCATION_ID")
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        "Unique system generated identifier of Inspection Order."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique system generated identifier for BOM."
        self.DECLARED_LANGUAGE_CODE = parse_value(self.schema, column_value_map, "DECLARED_LANGUAGE_CODE")
        "Language code as per ISO639 standard."
        self.EXPLICIT_BOM_LINK_FLAG = parse_value(self.schema, column_value_map, "EXPLICIT_BOM_LINK_FLAG")
        "Indicates if specific BOM Revision will be explicitly linked to Plan/Order."
        self.LOAD_EMB_CONTROL_FLAG = parse_value(self.schema, column_value_map, "LOAD_EMB_CONTROL_FLAG")
        "Reload Order Embedded Control records when this flag is Y."
        self.COMMODITY_JURISDICTION = parse_value(self.schema, column_value_map, "COMMODITY_JURISDICTION")
        "Commodity Jurisdiction of Work Order."
        self.COMMODITY_CLASSIFICATION = parse_value(self.schema, column_value_map, "COMMODITY_CLASSIFICATION")
        "Commodity Classification of Work Order."
        self.ALTER_LOCKED = parse_value(self.schema, column_value_map, "ALTER_LOCKED")
        "Used to identify order can be altered or not. Y means order is locked for alteration."
        self.ORDER_CATEGORY = parse_value(self.schema, column_value_map, "ORDER_CATEGORY")
        self.CURRENT_LOC_ID = parse_value(self.schema, column_value_map, "CURRENT_LOC_ID")
        self.CURRENT_DEPT_ID = parse_value(self.schema, column_value_map, "CURRENT_DEPT_ID")
        self.CURRENT_CENTER_ID = parse_value(self.schema, column_value_map, "CURRENT_CENTER_ID")
        self.PREVIOUS_LOC_ID = parse_value(self.schema, column_value_map, "PREVIOUS_LOC_ID")
        self.PREVIOUS_DEPT_ID = parse_value(self.schema, column_value_map, "PREVIOUS_DEPT_ID")
        self.PREVIOUS_CENTER_ID = parse_value(self.schema, column_value_map, "PREVIOUS_CENTER_ID")
        self.NEXT_LOC_ID = parse_value(self.schema, column_value_map, "NEXT_LOC_ID")
        self.NEXT_DEPT_ID = parse_value(self.schema, column_value_map, "NEXT_DEPT_ID")
        self.NEXT_CENTER_ID = parse_value(self.schema, column_value_map, "NEXT_CENTER_ID")
        self.CURRENT_OPER_KEY = parse_value(self.schema, column_value_map, "CURRENT_OPER_KEY")
        self.SUB_LOCATION = parse_value(self.schema, column_value_map, "SUB_LOCATION")
        self.ARRIVED_DATE = parse_value(self.schema, column_value_map, "ARRIVED_DATE")
        self.MULTI_KEY_ENABLED = parse_value(self.schema, column_value_map, "MULTI_KEY_ENABLED")
        self.MATERIAL_FLAG = parse_value(self.schema, column_value_map, "MATERIAL_FLAG")
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")

class SFSQA_INSP_ORDER_INSP_TYPE_DEF:
    schema = {
        "INSPECTION_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "INSPECTION_TYPE_DESC": "STRING",
    }
    primary_key_columns = [
        "INSPECTION_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_PO_LINE_FK2",
        "SFSQA_IDP_INSP_TYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.INSPECTION_TYPE = parse_value(self.schema, column_value_map, "INSPECTION_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.INSPECTION_TYPE_DESC = parse_value(self.schema, column_value_map, "INSPECTION_TYPE_DESC")
        self.SFSQA_PO_LINE_FK2 = []
        self.SFSQA_IDP_INSP_TYPE_FK = []

class SFQA_CA_EFF_VERIF_ITERATIONS:
    schema = {
        "CA_ID": "STRING",
        "EFF_VERIF_ITERATION_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "EFF_VERIFY_DUE_DATE": "STRING",
        "EFF_VERIF_INSTRUCTION": "STRING",
        "EFF_VERIF_ASSIGNEE_ID": "STRING",
        "EFF_VERIF_RESULT": "STRING",
        "EFF_VERIF_UPDT_USERID": "STRING",
        "EFF_VERIF_TIME_STAMP": "DATE",
        "EFF_VERIF_RESULT_UPDT_USERID": "STRING",
        "EFF_VERIF_RESULT_TIME_STAMP": "STRING",
        "EFF_VERIF_COMPLETE_DATE": "DATE",
    }
    primary_key_columns = [
        "CA_ID",
        "EFF_VERIF_ITERATION_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_EFF_VERIF_IT_FK", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.EFF_VERIF_ITERATION_ID = parse_value(self.schema, column_value_map, "EFF_VERIF_ITERATION_ID")
        "Unique, system-generated identifier of an Effectiveness Verification iteration."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.EFF_VERIFY_DUE_DATE = parse_value(self.schema, column_value_map, "EFF_VERIFY_DUE_DATE")
        "The date and time when the Effectiveness Verification is due for a given iteration."
        self.EFF_VERIF_INSTRUCTION = parse_value(self.schema, column_value_map, "EFF_VERIF_INSTRUCTION")
        "Effectiveness Verification instruction for a given iteration."
        self.EFF_VERIF_ASSIGNEE_ID = parse_value(self.schema, column_value_map, "EFF_VERIF_ASSIGNEE_ID")
        "Unique identifier of the user assigned Effectiveness Verification for a given iteration."
        self.EFF_VERIF_RESULT = parse_value(self.schema, column_value_map, "EFF_VERIF_RESULT")
        "Result of Effectiveness Verification for a given iteration."
        self.EFF_VERIF_UPDT_USERID = parse_value(self.schema, column_value_map, "EFF_VERIF_UPDT_USERID")
        "Solumina login ID of the last user to manipulated the Effectiveness Verification for a given iteration."
        self.EFF_VERIF_TIME_STAMP = parse_value(self.schema, column_value_map, "EFF_VERIF_TIME_STAMP")
        "The date and time the Effectiveness Verification was last manipulated for a given iteration."
        self.EFF_VERIF_RESULT_UPDT_USERID = parse_value(self.schema, column_value_map, "EFF_VERIF_RESULT_UPDT_USERID")
        "Solumina login ID of the last user to manipulated the Effectiveness Verification Result for a given iteration."
        self.EFF_VERIF_RESULT_TIME_STAMP = parse_value(self.schema, column_value_map, "EFF_VERIF_RESULT_TIME_STAMP")
        "The date and time the Effectiveness Verification Result was last manipulated  for a given iteration."
        self.EFF_VERIF_COMPLETE_DATE = parse_value(self.schema, column_value_map, "EFF_VERIF_COMPLETE_DATE")
        "The date and time when the Effectiveness Verification is completed  for a given iteration."

class SFPL_PLAN_REV:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "REV_STATE": "STRING",
        "REV_LOCKED_BY": "STRING",
        "REV_LOCK_STATE": "STRING",
        "REV_STATUS": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "INSP_PLAN_ID": "STRING",
        "PPV_REQ_FLAG": "STRING",
        "PPV_QTY": "NUMBER",
        "PPV_TYPE": "STRING",
        "PPV_PENDING_QTY": "NUMBER",
        "PPV_INPROCESS_QTY": "NUMBER",
        "PPV_COMPLETE_QTY": "NUMBER",
        "LAST_PPV_COMPLETE_DATE": "STRING",
        "EXTERNAL_PLAN_REV": "STRING",
        "SOURCE": "STRING",
        "OBSOLETE_FLAG": "STRING",
        "MATERIAL_FLAG": "STRING",
        "DRAWING_NO": "STRING",
        "DRAWING_REV": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_VERSION",
        "PLAN_REVISION",
        "PLAN_ALTERATIONS",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLANREV_PLANDESC_FK", ["PLAN_ID","PLAN_UPDT_NO"], "SFPL_PLAN_DESC", ["PLAN_ID","PLAN_UPDT_NO"]),
    ]
    refs = [
        "SFPL_OPERREV_PLANREV_FK",
        "SFPL_PLAN_NOTIF_PLAN_FK",
        "SFPL_IMPACTED_OBJECTS_FK5",
        "SFPL_PLAN_EFF_PLAN_REV_FK",
        "SFPL_PLANNED_ACTIONS_FK5",
        "SFWID_USER_GRP_JOB_CHG_ACK_FK1",
        "SFPL_RESULTING_OBJECTS_FK5",
        "SFFND_PLG_TASK_PLNREV_FK",
        "SFWID_ORDDESC_PPLANREV_FK",
        "SFWID_USER_OVER_INSP_UNITS_FK2",
        "SFWID_ORDER_INSP_STEP_LINK_FK1",
        "SFPL_LAST_FILTER_CONTEXT_FK1",
        "SFPL_PLAN_VLDTN_KEY_FK",
        "SFPL_PLAN_PWP_XREF_FK2",
        "SFPL_PLANIMG_PLANREV_FK",
        "SFPL_MBOM_NOTIFICATION_FK1",
        "SFPL_AFFECTED_OBJECTS_FK5",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.REV_STATE = parse_value(self.schema, column_value_map, "REV_STATE")
        "Not in use."
        self.REV_LOCKED_BY = parse_value(self.schema, column_value_map, "REV_LOCKED_BY")
        "USERID of the user who has locked the work plan revision. Not in use."
        self.REV_LOCK_STATE = parse_value(self.schema, column_value_map, "REV_LOCK_STATE")
        "The work Plan Revision lock state. Used for creating multilevel user locks, GroupWare concept. Not in use."
        self.REV_STATUS = parse_value(self.schema, column_value_map, "REV_STATUS")
        "The status of a work plan revision. For example: PLG AUTHORING, PLAN RELEASED, or QA_PR."
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        "Inspection Plan unique system generated identifier."
        self.PPV_REQ_FLAG = parse_value(self.schema, column_value_map, "PPV_REQ_FLAG")
        "Y/N, If Y indicates PPV Inspection Order require, otherwise not require."
        self.PPV_QTY = parse_value(self.schema, column_value_map, "PPV_QTY")
        "PPV Quantity for Inspection."
        self.PPV_TYPE = parse_value(self.schema, column_value_map, "PPV_TYPE")
        "Full/Partial,If Full then All PPV requires inspection steps/Items need to be inspected.If partial then all PPV require Inspection Steps/Items are optionaly inspected."
        self.PPV_PENDING_QTY = parse_value(self.schema, column_value_map, "PPV_PENDING_QTY")
        "Pending PPV quantities for PPV inspection."
        self.PPV_INPROCESS_QTY = parse_value(self.schema, column_value_map, "PPV_INPROCESS_QTY")
        "IN PROCESS PPV quantities for PPV inspection."
        self.PPV_COMPLETE_QTY = parse_value(self.schema, column_value_map, "PPV_COMPLETE_QTY")
        "Completed PPV quantities."
        self.LAST_PPV_COMPLETE_DATE = parse_value(self.schema, column_value_map, "LAST_PPV_COMPLETE_DATE")
        "Last PPV Inspection Order completion date."
        self.EXTERNAL_PLAN_REV = parse_value(self.schema, column_value_map, "EXTERNAL_PLAN_REV")
        "Stores external plan Revision provided in SyncRouting inbound."
        self.SOURCE = parse_value(self.schema, column_value_map, "SOURCE")
        "Value can be part of the SyncRouting inbound message that would indicate the source of the Plan."
        self.OBSOLETE_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_FLAG")
        "Y/N, Y indicates plan is OBSOLETE otherwise not."
        self.MATERIAL_FLAG = parse_value(self.schema, column_value_map, "MATERIAL_FLAG")
        self.DRAWING_NO = parse_value(self.schema, column_value_map, "DRAWING_NO")
        self.DRAWING_REV = parse_value(self.schema, column_value_map, "DRAWING_REV")
        self.SFPL_OPERREV_PLANREV_FK = []
        self.SFPL_PLAN_NOTIF_PLAN_FK = []
        self.SFPL_IMPACTED_OBJECTS_FK5 = []
        self.SFPL_PLAN_EFF_PLAN_REV_FK = []
        self.SFPL_PLANNED_ACTIONS_FK5 = []
        self.SFWID_USER_GRP_JOB_CHG_ACK_FK1 = []
        self.SFPL_RESULTING_OBJECTS_FK5 = []
        self.SFFND_PLG_TASK_PLNREV_FK = []
        self.SFWID_ORDDESC_PPLANREV_FK = []
        self.SFWID_USER_OVER_INSP_UNITS_FK2 = []
        self.SFWID_ORDER_INSP_STEP_LINK_FK1 = []
        self.SFPL_LAST_FILTER_CONTEXT_FK1 = []
        self.SFPL_PLAN_VLDTN_KEY_FK = []
        self.SFPL_PLAN_PWP_XREF_FK2 = []
        self.SFPL_PLANIMG_PLANREV_FK = []
        self.SFPL_MBOM_NOTIFICATION_FK1 = []
        self.SFPL_AFFECTED_OBJECTS_FK5 = []

class SFCORE_LICENSE_COUNT_HIST:
    schema = {
        "HIST_ID": "STRING",
        "HIST_TIMESTAMP": "STRING",
        "LICENSE_TYPE": "STRING",
        "LICENSE_COUNT": "NUMBER",
        "LICENSE_PEAK": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_TIMESTAMP = parse_value(self.schema, column_value_map, "HIST_TIMESTAMP")
        self.LICENSE_TYPE = parse_value(self.schema, column_value_map, "LICENSE_TYPE")
        self.LICENSE_COUNT = parse_value(self.schema, column_value_map, "LICENSE_COUNT")
        self.LICENSE_PEAK = parse_value(self.schema, column_value_map, "LICENSE_PEAK")

class SFWID_SERIAL_OPER_TL_DC_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "ASGND_TOOL_NO": "STRING",
        "ASGND_TOOL_CHG": "STRING",
        "TOOL_DAT_COL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "SERIAL_NO": "STRING",
        "EXP_DATE": "STRING",
        "COMMENTS": "STRING",
        "UCF_SRL_OPER_TOOL_VCH1": "STRING",
        "UCF_SRL_OPER_TOOL_VCH2": "STRING",
        "UCF_SRL_OPER_TOOL_VCH3": "STRING",
        "UCF_SRL_OPER_TOOL_FLAG1": "STRING",
        "UCF_SRL_OPER_TOOL_DATE1": "STRING",
        "UCF_SRL_OPER_TOOL_NUM1": "NUMBER",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "UCF_SRL_OPER_TOOL_VCH4": "STRING",
        "UCF_SRL_OPER_TOOL_VCH5": "STRING",
        "UCF_SRL_OPER_TOOL_VCH6": "STRING",
        "UCF_SRL_OPER_TOOL_VCH7": "STRING",
        "UCF_SRL_OPER_TOOL_VCH8": "STRING",
        "UCF_SRL_OPER_TOOL_VCH9": "STRING",
        "UCF_SRL_OPER_TOOL_VCH10": "STRING",
        "UCF_SRL_OPER_TOOL_VCH11": "STRING",
        "UCF_SRL_OPER_TOOL_VCH12": "STRING",
        "UCF_SRL_OPER_TOOL_VCH13": "STRING",
        "UCF_SRL_OPER_TOOL_VCH14": "STRING",
        "UCF_SRL_OPER_TOOL_VCH15": "STRING",
        "UCF_SRL_OPER_TOOL_NUM2": "NUMBER",
        "UCF_SRL_OPER_TOOL_NUM3": "NUMBER",
        "UCF_SRL_OPER_TOOL_NUM4": "NUMBER",
        "UCF_SRL_OPER_TOOL_NUM5": "NUMBER",
        "UCF_SRL_OPER_TOOL_DATE2": "STRING",
        "UCF_SRL_OPER_TOOL_DATE3": "STRING",
        "UCF_SRL_OPER_TOOL_DATE4": "STRING",
        "UCF_SRL_OPER_TOOL_DATE5": "STRING",
        "UCF_SRL_OPER_TOOL_FLAG2": "STRING",
        "UCF_SRL_OPER_TOOL_FLAG3": "STRING",
        "UCF_SRL_OPER_TOOL_FLAG4": "STRING",
        "UCF_SRL_OPER_TOOL_FLAG5": "STRING",
        "UCF_SRL_OPER_TOOL_VCH255_1": "STRING",
        "UCF_SRL_OPER_TOOL_VCH255_2": "STRING",
        "UCF_SRL_OPER_TOOL_VCH255_3": "STRING",
        "UCF_SRL_OPER_TOOL_VCH4000_1": "STRING",
        "UCF_SRL_OPER_TOOL_VCH4000_2": "STRING",
        "ASGND_TOOL_ID": "STRING",
        "PLND_TOOL_NO": "STRING",
        "PLND_TOOL_CHG": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.ASGND_TOOL_NO = parse_value(self.schema, column_value_map, "ASGND_TOOL_NO")
        "The identifying number of the required tool as actually assigned to the given operation."
        self.ASGND_TOOL_CHG = parse_value(self.schema, column_value_map, "ASGND_TOOL_CHG")
        "The change letter (revision) of the required tool as actually assigned to the given operation."
        self.TOOL_DAT_COL_ID = parse_value(self.schema, column_value_map, "TOOL_DAT_COL_ID")
        "Unique, system-generated identifier of the tool data collection."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.EXP_DATE = parse_value(self.schema, column_value_map, "EXP_DATE")
        "The expiration date of the component/part."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Additional comments."
        self.UCF_SRL_OPER_TOOL_VCH1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH1")
        self.UCF_SRL_OPER_TOOL_VCH2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH2")
        self.UCF_SRL_OPER_TOOL_VCH3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH3")
        self.UCF_SRL_OPER_TOOL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_FLAG1")
        self.UCF_SRL_OPER_TOOL_DATE1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_DATE1")
        self.UCF_SRL_OPER_TOOL_NUM1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_NUM1")
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.UCF_SRL_OPER_TOOL_VCH4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH4")
        self.UCF_SRL_OPER_TOOL_VCH5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH5")
        self.UCF_SRL_OPER_TOOL_VCH6 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH6")
        self.UCF_SRL_OPER_TOOL_VCH7 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH7")
        self.UCF_SRL_OPER_TOOL_VCH8 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH8")
        self.UCF_SRL_OPER_TOOL_VCH9 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH9")
        self.UCF_SRL_OPER_TOOL_VCH10 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH10")
        self.UCF_SRL_OPER_TOOL_VCH11 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH11")
        self.UCF_SRL_OPER_TOOL_VCH12 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH12")
        self.UCF_SRL_OPER_TOOL_VCH13 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH13")
        self.UCF_SRL_OPER_TOOL_VCH14 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH14")
        self.UCF_SRL_OPER_TOOL_VCH15 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH15")
        self.UCF_SRL_OPER_TOOL_NUM2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_NUM2")
        self.UCF_SRL_OPER_TOOL_NUM3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_NUM3")
        self.UCF_SRL_OPER_TOOL_NUM4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_NUM4")
        self.UCF_SRL_OPER_TOOL_NUM5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_NUM5")
        self.UCF_SRL_OPER_TOOL_DATE2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_DATE2")
        self.UCF_SRL_OPER_TOOL_DATE3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_DATE3")
        self.UCF_SRL_OPER_TOOL_DATE4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_DATE4")
        self.UCF_SRL_OPER_TOOL_DATE5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_DATE5")
        self.UCF_SRL_OPER_TOOL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_FLAG2")
        self.UCF_SRL_OPER_TOOL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_FLAG3")
        self.UCF_SRL_OPER_TOOL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_FLAG4")
        self.UCF_SRL_OPER_TOOL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_FLAG5")
        self.UCF_SRL_OPER_TOOL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH255_1")
        self.UCF_SRL_OPER_TOOL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH255_2")
        self.UCF_SRL_OPER_TOOL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH255_3")
        self.UCF_SRL_OPER_TOOL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH4000_1")
        self.UCF_SRL_OPER_TOOL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH4000_2")
        self.ASGND_TOOL_ID = parse_value(self.schema, column_value_map, "ASGND_TOOL_ID")
        "Unique, system-generated identifier of the assigned tool."
        self.PLND_TOOL_NO = parse_value(self.schema, column_value_map, "PLND_TOOL_NO")
        "The identifying number of the required tool as planned in the given operation."
        self.PLND_TOOL_CHG = parse_value(self.schema, column_value_map, "PLND_TOOL_CHG")
        "The change letter (revision) of the required tool as planned in the given operation."

class SFPL_STEP_TEXT:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEPTEXT_STEPDESC_FK", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"], "SFPL_STEP_DESC", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"]),
    ]
    refs = [
        "SFPL_STEP_TEXT_SV_FK1",
        "SFFND_HTREF_STEP_TEXT_ST_FK",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.SFPL_STEP_TEXT_SV_FK1 = []
        self.SFFND_HTREF_STEP_TEXT_ST_FK = []

class SFFND_USER_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "USERID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "LAST_NAME": "STRING",
        "FIRST_NAME": "STRING",
        "MIDDLE_NAME": "STRING",
        "FULL_NAME": "STRING",
        "NAME_SUFFIX": "STRING",
        "SHIFT": "STRING",
        "PAYROLL_ID": "STRING",
        "UCF_USER_VCH1": "STRING",
        "UCF_USER_VCH2": "STRING",
        "UCF_USER_VCH3": "STRING",
        "UCF_USER_VCH4": "STRING",
        "WC_INFO": "STRING",
        "USER_CLASS": "STRING",
        "EMAIL_ADDRESS": "STRING",
        "UCF_USER_VCH5": "STRING",
        "UCF_USER_VCH6": "STRING",
        "UCF_USER_VCH7": "STRING",
        "UCF_USER_VCH8": "STRING",
        "UCF_USER_VCH9": "STRING",
        "UCF_USER_VCH10": "STRING",
        "UCF_USER_VCH11": "STRING",
        "UCF_USER_VCH12": "STRING",
        "UCF_USER_VCH13": "STRING",
        "UCF_USER_VCH14": "STRING",
        "UCF_USER_VCH15": "STRING",
        "UCF_USER_NUM1": "NUMBER",
        "UCF_USER_NUM2": "NUMBER",
        "UCF_USER_NUM3": "NUMBER",
        "UCF_USER_NUM4": "NUMBER",
        "UCF_USER_NUM5": "NUMBER",
        "UCF_USER_DATE1": "STRING",
        "UCF_USER_DATE2": "STRING",
        "UCF_USER_DATE3": "STRING",
        "UCF_USER_DATE4": "STRING",
        "UCF_USER_DATE5": "STRING",
        "UCF_USER_FLAG1": "STRING",
        "UCF_USER_FLAG2": "STRING",
        "UCF_USER_FLAG3": "STRING",
        "UCF_USER_FLAG4": "STRING",
        "UCF_USER_FLAG5": "STRING",
        "INCLUDE_ALL_SUPPLIERS": "STRING",
        "CITIZENSHIP_COUNTRY": "STRING",
        "FOREIGN_NATIONAL_FLAG": "STRING",
        "GC_EXPIRATION_DATE": "STRING",
        "USER_TYPE": "STRING",
        "LOCATION_ID": "STRING",
        "DEPARTMENT_ID": "STRING",
        "CENTER_ID": "STRING",
        "UCF_USER_VCH255_1": "STRING",
        "UCF_USER_VCH255_2": "STRING",
        "UCF_USER_VCH255_3": "STRING",
        "UCF_USER_VCH4000_1": "STRING",
        "UCF_USER_VCH4000_2": "STRING",
        "LABOR_TYPE": "STRING",
        "USER_DEFINITION": "STRING",
        "USER_LOGIN_ATTEMPT": "NUMBER",
        "MI_USER_FLAG": "STRING",
        "UUID": "STRING",
        "EXTERNAL_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.LAST_NAME = parse_value(self.schema, column_value_map, "LAST_NAME")
        "The user's last name."
        self.FIRST_NAME = parse_value(self.schema, column_value_map, "FIRST_NAME")
        "The user's first name."
        self.MIDDLE_NAME = parse_value(self.schema, column_value_map, "MIDDLE_NAME")
        "The user's middle name initial."
        self.FULL_NAME = parse_value(self.schema, column_value_map, "FULL_NAME")
        "The user's full name."
        self.NAME_SUFFIX = parse_value(self.schema, column_value_map, "NAME_SUFFIX")
        "The user's name suffix. For example: Mr., Miss, or Mrs."
        self.SHIFT = parse_value(self.schema, column_value_map, "SHIFT")
        "The shift the user normally works at the work center he/she belongs to."
        self.PAYROLL_ID = parse_value(self.schema, column_value_map, "PAYROLL_ID")
        "The payroll id, normally social security number of the user."
        self.UCF_USER_VCH1 = parse_value(self.schema, column_value_map, "UCF_USER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH2 = parse_value(self.schema, column_value_map, "UCF_USER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH3 = parse_value(self.schema, column_value_map, "UCF_USER_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH4 = parse_value(self.schema, column_value_map, "UCF_USER_VCH4")
        "User-configurable field for VARCHAR data type."
        self.WC_INFO = parse_value(self.schema, column_value_map, "WC_INFO")
        "Denormalized concatenated work center information used to greatly enhance certain dispatch list(s) performance."
        self.USER_CLASS = parse_value(self.schema, column_value_map, "USER_CLASS")
        "Determines user class."
        self.EMAIL_ADDRESS = parse_value(self.schema, column_value_map, "EMAIL_ADDRESS")
        "Email address of the user."
        self.UCF_USER_VCH5 = parse_value(self.schema, column_value_map, "UCF_USER_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH6 = parse_value(self.schema, column_value_map, "UCF_USER_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH7 = parse_value(self.schema, column_value_map, "UCF_USER_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH8 = parse_value(self.schema, column_value_map, "UCF_USER_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH9 = parse_value(self.schema, column_value_map, "UCF_USER_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH10 = parse_value(self.schema, column_value_map, "UCF_USER_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH11 = parse_value(self.schema, column_value_map, "UCF_USER_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH12 = parse_value(self.schema, column_value_map, "UCF_USER_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH13 = parse_value(self.schema, column_value_map, "UCF_USER_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH14 = parse_value(self.schema, column_value_map, "UCF_USER_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH15 = parse_value(self.schema, column_value_map, "UCF_USER_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_NUM1 = parse_value(self.schema, column_value_map, "UCF_USER_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_USER_NUM2 = parse_value(self.schema, column_value_map, "UCF_USER_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_USER_NUM3 = parse_value(self.schema, column_value_map, "UCF_USER_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_USER_NUM4 = parse_value(self.schema, column_value_map, "UCF_USER_NUM4")
        "User-configurable field for NUMBER data type."
        self.UCF_USER_NUM5 = parse_value(self.schema, column_value_map, "UCF_USER_NUM5")
        "User-configurable field for NUMBER data type."
        self.UCF_USER_DATE1 = parse_value(self.schema, column_value_map, "UCF_USER_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_USER_DATE2 = parse_value(self.schema, column_value_map, "UCF_USER_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_USER_DATE3 = parse_value(self.schema, column_value_map, "UCF_USER_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_USER_DATE4 = parse_value(self.schema, column_value_map, "UCF_USER_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_USER_DATE5 = parse_value(self.schema, column_value_map, "UCF_USER_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_USER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_USER_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_USER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_USER_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_USER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_USER_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_USER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_USER_FLAG4")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_USER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_USER_FLAG5")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.INCLUDE_ALL_SUPPLIERS = parse_value(self.schema, column_value_map, "INCLUDE_ALL_SUPPLIERS")
        "Flag to determine rather to include all suppliers or not."
        self.CITIZENSHIP_COUNTRY = parse_value(self.schema, column_value_map, "CITIZENSHIP_COUNTRY")
        "Citizenship country of user."
        self.FOREIGN_NATIONAL_FLAG = parse_value(self.schema, column_value_map, "FOREIGN_NATIONAL_FLAG")
        "Flag to determine if user is foreign national."
        self.GC_EXPIRATION_DATE = parse_value(self.schema, column_value_map, "GC_EXPIRATION_DATE")
        self.USER_TYPE = parse_value(self.schema, column_value_map, "USER_TYPE")
        "Determines user type."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        self.DEPARTMENT_ID = parse_value(self.schema, column_value_map, "DEPARTMENT_ID")
        self.CENTER_ID = parse_value(self.schema, column_value_map, "CENTER_ID")
        self.UCF_USER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_USER_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_USER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_USER_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_USER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_USER_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_USER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_USER_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_USER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_USER_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.LABOR_TYPE = parse_value(self.schema, column_value_map, "LABOR_TYPE")
        "Labor Type Identifier."
        self.USER_DEFINITION = parse_value(self.schema, column_value_map, "USER_DEFINITION")
        "User definition identifier."
        self.USER_LOGIN_ATTEMPT = parse_value(self.schema, column_value_map, "USER_LOGIN_ATTEMPT")
        "Number of User Login Attempts."
        self.MI_USER_FLAG = parse_value(self.schema, column_value_map, "MI_USER_FLAG")
        "A flag (Y/N) that indicates whether the user belongs to the Manufacturing Intelligence user category."
        self.UUID = parse_value(self.schema, column_value_map, "UUID")
        "unique identification auto-generated key - to be used with user provisioning"
        self.EXTERNAL_ID = parse_value(self.schema, column_value_map, "EXTERNAL_ID")
        "external Id coming from IDP - to be used with user provisioning"

class SFFND_ALERT_NAME_DEF:
    schema = {
        "ALERT_ID": "STRING",
        "ALERT_TYPE": "STRING",
        "ALERT_NAME": "STRING",
        "DESCRIPTION": "STRING",
        "ALERT_DELIVERY_TYPE": "STRING",
        "INCLUDE_ALL_USERS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ALERT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_ALERT_NAME_DEF_FK1", ["ALERT_TYPE"], "SFFND_ALERT_TYPE_DEF", ["ALERT_TYPE"]),
        DbForeignKey("SFFND_ALERT_NAME_DEF_FK2", ["ALERT_DELIVERY_TYPE"], "SFFND_ALERT_DELIVERY_TYPE_DEF", ["ALERT_DELIVERY_TYPE"]),
    ]
    refs = [
        "SFFND_ALERT_CONDTN_VALUE_FK1",
    ]
    def __init__(self, column_value_map):
        self.ALERT_ID = parse_value(self.schema, column_value_map, "ALERT_ID")
        "The unique identifier of the alert being referenced."
        self.ALERT_TYPE = parse_value(self.schema, column_value_map, "ALERT_TYPE")
        "Default Alert Type for Alert Name."
        self.ALERT_NAME = parse_value(self.schema, column_value_map, "ALERT_NAME")
        "Unique Name of Alert."
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        "Description of Alert Name."
        self.ALERT_DELIVERY_TYPE = parse_value(self.schema, column_value_map, "ALERT_DELIVERY_TYPE")
        "Delivery Type of Alert Name."
        self.INCLUDE_ALL_USERS = parse_value(self.schema, column_value_map, "INCLUDE_ALL_USERS")
        "Flag for including alert type to all users."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFFND_ALERT_CONDTN_VALUE_FK1 = []

class MOTT_MATERIAL_LOT:
    schema = {
        "MATERIAL_ID": "STRING",
        "LOT_ID": "STRING",
        "LOT_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "MATERIAL_ID",
        "LOT_ID",
    ]
    foreign_keys = [
        DbForeignKey("MOTT_MATERIAL_LOT_FK1", ["MATERIAL_ID"], "MOTT_TIME_MATERIAL", ["MATERIAL_ID"]),
    ]
    refs = [
        "MOTT_MATERIAL_SERIAL_FK1",
    ]
    def __init__(self, column_value_map):
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        "Id of the Material"
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Id of the Lot."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a material."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the user"
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was modified."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation"
        self.MOTT_MATERIAL_SERIAL_FK1 = []

class SFWID_OPER_ASSIGNMENT:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "ASSIGNED_TO_USERID": "STRING",
        "ASSIGNED_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "ASSIGNED_TO_USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_ASSIGNMENT_FK1", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_OPER_ASSIGNMENT_FK2", ["ASSIGNED_TO_USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.ASSIGNED_TO_USERID = parse_value(self.schema, column_value_map, "ASSIGNED_TO_USERID")
        "User who has assigned or claimed operation."
        self.ASSIGNED_FLAG = parse_value(self.schema, column_value_map, "ASSIGNED_FLAG")
        "Flag to identify whether user has claimed or been assigned Operation. Possible value 'A' or 'C'."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_CA_REQ_AFFECTED_SUPPLIERS:
    schema = {
        "CA_REQUEST_ID": "STRING",
        "SUPPLIER_CODE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_REQUEST_ID",
        "SUPPLIER_CODE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_REQ_AFFECTEDSUPPRS_FK1", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFQA_CA_REQ_AFFECTEDSUPPLRS_FK", ["CA_REQUEST_ID"], "SFQA_CA_REQUEST", ["CA_REQUEST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        "Unique identifier of an affected Supplier."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class MOTT_TIME_MATERIAL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "MATERIAL_ID": "STRING",
        "ITEM_ID": "STRING",
        "SUBLOCATION": "STRING",
        "PARENT_MATERIAL_ID": "STRING",
        "UOM": "STRING",
        "FREEZER_ID": "STRING",
        "PROGRAM": "STRING",
        "TOTAL_ALLOWABLE_OUT_TIME": "NUMBER",
        "EXPIRATION_DATE": "STRING",
        "STATUS": "STRING",
        "TOTAL_OUT_TIME": "NUMBER",
        "START_TIME": "NUMBER",
        "SUPPLIER_ID": "STRING",
        "MATERIAL_TYPE_ID": "STRING",
        "CLASSIFIED": "STRING",
        "QUANTITY": "NUMBER",
        "BARCODE_GENERATED_FIELDS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "SCRAP_REASON_ID": "STRING",
        "CONSUMED": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        "Primary Key For Time sensitive material"
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Id of the Master Item. (Foreign Key) SFPL_ITEM_DESC_MASTER_ALL"
        self.SUBLOCATION = parse_value(self.schema, column_value_map, "SUBLOCATION")
        "Sublocation Description of the Material."
        self.PARENT_MATERIAL_ID = parse_value(self.schema, column_value_map, "PARENT_MATERIAL_ID")
        "Parent Item ID Referencing another Material in this Relation."
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Id of the Unit of measure."
        self.FREEZER_ID = parse_value(self.schema, column_value_map, "FREEZER_ID")
        "Id of the Freezer which holds the material (FK)"
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The Program Name of the Material"
        self.TOTAL_ALLOWABLE_OUT_TIME = parse_value(self.schema, column_value_map, "TOTAL_ALLOWABLE_OUT_TIME")
        "Unix Style timestamp"
        self.EXPIRATION_DATE = parse_value(self.schema, column_value_map, "EXPIRATION_DATE")
        "Date of expiration of the Material Date e.g. (DD-MM-YY)"
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Status of the Material"
        self.TOTAL_OUT_TIME = parse_value(self.schema, column_value_map, "TOTAL_OUT_TIME")
        "Seconds"
        self.START_TIME = parse_value(self.schema, column_value_map, "START_TIME")
        "Unix Style timestamp"
        self.SUPPLIER_ID = parse_value(self.schema, column_value_map, "SUPPLIER_ID")
        "Id of the Material Supplier (Vendor)"
        self.MATERIAL_TYPE_ID = parse_value(self.schema, column_value_map, "MATERIAL_TYPE_ID")
        "The type Id of the Material"
        self.CLASSIFIED = parse_value(self.schema, column_value_map, "CLASSIFIED")
        "Boolean Flag indicating the Classified state of the Material"
        self.QUANTITY = parse_value(self.schema, column_value_map, "QUANTITY")
        "Numeric type with 2 digits precision indicating the Quantity"
        self.BARCODE_GENERATED_FIELDS = parse_value(self.schema, column_value_map, "BARCODE_GENERATED_FIELDS")
        "Contains which fields where selected for the Material  Barcode Generation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the user"
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was modified."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation"
        self.SCRAP_REASON_ID = parse_value(self.schema, column_value_map, "SCRAP_REASON_ID")
        self.CONSUMED = parse_value(self.schema, column_value_map, "CONSUMED")

class SFOR_SFWID_ORDER_SUBJECT_ALT:
    schema = {
        "ORDER_SUBJECT_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "SUBJECT_NO": "NUMBER",
        "SUBJECT_REV": "NUMBER",
        "TITLE": "STRING",
        "AUTHORITY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "INCLUDED_FLAG": "STRING",
        "STANDARD_FLAG": "STRING",
        "SUBJECT_STATUS": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "NOTES": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_SUBJECT_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFOR_SFWID_ORDER_SUB_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_SUBJECT_ALT = parse_value(self.schema, column_value_map, "ORDER_SUBJECT_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.SUBJECT_NO = parse_value(self.schema, column_value_map, "SUBJECT_NO")
        self.SUBJECT_REV = parse_value(self.schema, column_value_map, "SUBJECT_REV")
        self.TITLE = parse_value(self.schema, column_value_map, "TITLE")
        "Title or name of the given operation."
        self.AUTHORITY = parse_value(self.schema, column_value_map, "AUTHORITY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.INCLUDED_FLAG = parse_value(self.schema, column_value_map, "INCLUDED_FLAG")
        self.STANDARD_FLAG = parse_value(self.schema, column_value_map, "STANDARD_FLAG")
        self.SUBJECT_STATUS = parse_value(self.schema, column_value_map, "SUBJECT_STATUS")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about the work order."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."

class SFPL_PLAN_BOM_LINES:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "BOM_LINE_NO": "STRING",
        "STD_ITEM_ID": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BOM_ID": "STRING",
        "BOM_LINE_ID": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_UPDT_NO",
        "BOM_LINE_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLAN_BOM_LINES_FK1", ["PLAN_ID","PLAN_UPDT_NO"], "SFPL_PLAN_DESC", ["PLAN_ID","PLAN_UPDT_NO"]),
        DbForeignKey("SFPL_PLAN_BOM_LINES_FK2", ["STD_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_PLAN_BOM_LINES_FK3", ["BOM_ID","BOM_LINE_ID"], "SFPL_MFG_BOM_REV_LINE_NO", ["BOM_ID","BOM_LINE_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique system generated ID of Plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        "Line No for which object is authored."
        self.STD_ITEM_ID = parse_value(self.schema, column_value_map, "STD_ITEM_ID")
        "Standard Item associated with Line."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "REF_ID in which illustration is authored."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Block Id in which illustration is authored."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Identifier of BOM that is attached to Plan."
        self.BOM_LINE_ID = parse_value(self.schema, column_value_map, "BOM_LINE_ID")
        "Unique system generated ID for BOM Line No."

class SFQA_CA_REQUEST_SUBJECT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_REQUEST_ID": "STRING",
        "CA_REQUEST_SUBJECT_ID": "STRING",
        "SUBJECT_TYPE": "STRING",
        "SUBJECT_REF1": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "SUBJECT_TITLE": "STRING",
        "SUBJECT_REF2": "STRING",
        "SUBJECT_REF3": "STRING",
        "SUBJECT_NOTES": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.CA_REQUEST_SUBJECT_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_SUBJECT_ID")
        "Unique identifier of the given subject of the Corrective Action Request."
        self.SUBJECT_TYPE = parse_value(self.schema, column_value_map, "SUBJECT_TYPE")
        "Type or classification of subject matter, e.g., Tooling, Part, Drawing, Process Specification."
        self.SUBJECT_REF1 = parse_value(self.schema, column_value_map, "SUBJECT_REF1")
        "First data element of detailed information for the subject type, e.g., PART_NO for a Part, TOOL_NO for a Tooling requirement, DRAWING_NO for a Drawing, PROC_SPEC_NO for a Process Specification."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SUBJECT_TITLE = parse_value(self.schema, column_value_map, "SUBJECT_TITLE")
        "Title or name of the subject."
        self.SUBJECT_REF2 = parse_value(self.schema, column_value_map, "SUBJECT_REF2")
        "Second data element of detailed information for the subject type, e.g., PART_CHG for a Part, TOOL_CHG for a Tooling requirement, DRAWING_CHG for a Drawing, PROC_SPEC_CHG for a Process Specification. Can be NULL."
        self.SUBJECT_REF3 = parse_value(self.schema, column_value_map, "SUBJECT_REF3")
        "Third data element of detailed information for the subject type. Can be NULL."
        self.SUBJECT_NOTES = parse_value(self.schema, column_value_map, "SUBJECT_NOTES")
        "Additional comments about the subject matter."

class SFFND_DOC_TYPE_DEF_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DOC_TYPE": "STRING",
        "DOC_SUB_TYPE": "STRING",
        "INSTRUCTIONS_TYPE": "STRING",
        "TASK_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "DESCRIPTION": "STRING",
        "RESERVED_FLAG": "STRING",
        "IS_VISIBLE": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "NUM_GEN_NAME": "STRING",
        "WORK_FLOW": "STRING",
        "WORK_FLOW_DESC": "STRING",
        "SETUP_STATUS": "STRING",
        "GEN_TASK_PROC": "STRING",
        "COMP_TASK_PROC": "STRING",
        "IS_DEFAULT": "STRING",
        "STOP_CREATEORDER_ON_SAMEUNIT": "STRING",
        "TAKE_ACTION_QUEUE": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        self.DOC_SUB_TYPE = parse_value(self.schema, column_value_map, "DOC_SUB_TYPE")
        self.INSTRUCTIONS_TYPE = parse_value(self.schema, column_value_map, "INSTRUCTIONS_TYPE")
        self.TASK_TYPE = parse_value(self.schema, column_value_map, "TASK_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.RESERVED_FLAG = parse_value(self.schema, column_value_map, "RESERVED_FLAG")
        self.IS_VISIBLE = parse_value(self.schema, column_value_map, "IS_VISIBLE")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.NUM_GEN_NAME = parse_value(self.schema, column_value_map, "NUM_GEN_NAME")
        self.WORK_FLOW = parse_value(self.schema, column_value_map, "WORK_FLOW")
        self.WORK_FLOW_DESC = parse_value(self.schema, column_value_map, "WORK_FLOW_DESC")
        self.SETUP_STATUS = parse_value(self.schema, column_value_map, "SETUP_STATUS")
        self.GEN_TASK_PROC = parse_value(self.schema, column_value_map, "GEN_TASK_PROC")
        self.COMP_TASK_PROC = parse_value(self.schema, column_value_map, "COMP_TASK_PROC")
        self.IS_DEFAULT = parse_value(self.schema, column_value_map, "IS_DEFAULT")
        self.STOP_CREATEORDER_ON_SAMEUNIT = parse_value(self.schema, column_value_map, "STOP_CREATEORDER_ON_SAMEUNIT")
        self.TAKE_ACTION_QUEUE = parse_value(self.schema, column_value_map, "TAKE_ACTION_QUEUE")

class SFSQA_SAMPLING_RULE_DESC:
    schema = {
        "SAMPLE_RULE_ID": "STRING",
        "SAMPLE_PLAN_ID": "STRING",
        "SAMPLE_RULE_NAME": "STRING",
        "SAMPLE_RULE_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SR_TYPE": "STRING",
        "SEVERITY_RULE_ID": "STRING",
        "CLASS": "NUMBER",
        "AQL": "NUMBER",
    }
    primary_key_columns = [
        "SAMPLE_RULE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_S_RULE_SEV_RULE_FK", ["SEVERITY_RULE_ID"], "SFSQA_SEVERITY_RULE_DESC", ["SEVERITY_RULE_ID"]),
        DbForeignKey("SFSQA_SAMPLING_RULE_DESC_FK4", ["CLASS"], "SFSQA_INSP_ITEM_CLASS_DEF", ["CLASS"]),
        DbForeignKey("SFSQA_SAMPLING_RULE_DESC_FK5", ["AQL"], "SFSQA_AQL_DEF", ["AQL"]),
        DbForeignKey("SFSQA_SAMP_RULE_SPLAN_FK", ["SAMPLE_PLAN_ID"], "SFSQA_SAMPLE_PLAN_DESC", ["SAMPLE_PLAN_ID"]),
        DbForeignKey("SFSQA_SR_TYPE_DEF_FK", ["SR_TYPE"], "SFSQA_SR_TYPE_DEF", ["SR_TYPE"]),
    ]
    refs = [
        "SFFND_STD_DATCOL_TYPE_DEF_FK4",
        "SFSQA_SAMPLING_RULE_DESC_FK",
        "SFSQA_INSP_ITEMS_FK1",
    ]
    def __init__(self, column_value_map):
        self.SAMPLE_RULE_ID = parse_value(self.schema, column_value_map, "SAMPLE_RULE_ID")
        "System generated unique identifier for a given sampling rule."
        self.SAMPLE_PLAN_ID = parse_value(self.schema, column_value_map, "SAMPLE_PLAN_ID")
        "System generated unique identifier for a given sampling plan."
        self.SAMPLE_RULE_NAME = parse_value(self.schema, column_value_map, "SAMPLE_RULE_NAME")
        self.SAMPLE_RULE_DESC = parse_value(self.schema, column_value_map, "SAMPLE_RULE_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SR_TYPE = parse_value(self.schema, column_value_map, "SR_TYPE")
        self.SEVERITY_RULE_ID = parse_value(self.schema, column_value_map, "SEVERITY_RULE_ID")
        "System generated unique identifier for a given severity switching rule."
        self.CLASS = parse_value(self.schema, column_value_map, "CLASS")
        "Class associated to sampling rule."
        self.AQL = parse_value(self.schema, column_value_map, "AQL")
        "Acceptable Quality Level."
        self.SFFND_STD_DATCOL_TYPE_DEF_FK4 = []
        self.SFSQA_SAMPLING_RULE_DESC_FK = []
        self.SFSQA_INSP_ITEMS_FK1 = []

class SFQRTZ_SCHEDULER_STATE:
    schema = {
        "SCHED_NAME": "STRING",
        "INSTANCE_NAME": "STRING",
        "LAST_CHECKIN_TIME": "NUMBER",
        "CHECKIN_INTERVAL": "NUMBER",
    }
    primary_key_columns = [
        "SCHED_NAME",
        "INSTANCE_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SCHED_NAME = parse_value(self.schema, column_value_map, "SCHED_NAME")
        self.INSTANCE_NAME = parse_value(self.schema, column_value_map, "INSTANCE_NAME")
        self.LAST_CHECKIN_TIME = parse_value(self.schema, column_value_map, "LAST_CHECKIN_TIME")
        self.CHECKIN_INTERVAL = parse_value(self.schema, column_value_map, "CHECKIN_INTERVAL")

class SFFND_USER_WORK_CENTERS:
    schema = {
        "PKEY": "STRING",
        "USERID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "WC_INFO": "STRING",
        "ASGND_CENTER_ID": "STRING",
        "ASGND_LOCATION_ID": "STRING",
        "ASGND_DEPARTMENT_ID": "STRING",
        "SHIFT": "STRING",
    }
    primary_key_columns = [
        "PKEY",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_USER_WORK_CENTERS_FK2", ["ASGND_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFFND_USER_WORK_CENTERS_FK3", ["ASGND_LOCATION_ID","ASGND_DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFFND_USER_WORK_CENTERS_FK4", ["ASGND_LOCATION_ID","ASGND_DEPARTMENT_ID","ASGND_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFFND_USER_WORK_CENTERS_FK1", ["USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PKEY = parse_value(self.schema, column_value_map, "PKEY")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.WC_INFO = parse_value(self.schema, column_value_map, "WC_INFO")
        self.ASGND_CENTER_ID = parse_value(self.schema, column_value_map, "ASGND_CENTER_ID")
        self.ASGND_LOCATION_ID = parse_value(self.schema, column_value_map, "ASGND_LOCATION_ID")
        self.ASGND_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "ASGND_DEPARTMENT_ID")
        "Unique, system-generated identifier of the given Work Department."
        self.SHIFT = parse_value(self.schema, column_value_map, "SHIFT")

class SFCORE_APPLICATION_ACCESS_CTRL:
    schema = {
        "PRIV": "STRING",
        "PRIV_ALIAS": "STRING",
        "CHECKSUM": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PRIV",
        "PRIV_ALIAS",
    ]
    foreign_keys = [
        DbForeignKey("FWAAC_PRIV_FK", ["PRIV"], "SFCORE_PRIVS", ["PRIV"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PRIV = parse_value(self.schema, column_value_map, "PRIV")
        "Identifier/name of particular Solumina application privilege granted to the role. Application privileges are used to govern user access to specific functionality of the application."
        self.PRIV_ALIAS = parse_value(self.schema, column_value_map, "PRIV_ALIAS")
        "OS/External privilege (such as active directory or ldap)."
        self.CHECKSUM = parse_value(self.schema, column_value_map, "CHECKSUM")
        "Checksum of the currently loaded product version. Encrypted."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_HTREF_WID_OPER_NOTES_TEXT:
    schema = {
        "REF_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_TYPE": "STRING",
        "OBJECT_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
        "NOTE_ID": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "TEXT_TYPE",
        "NOTE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_HTREF_WID_OP_NOTE_TXT_F2", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
        DbForeignKey("SFFND_HTREF_WID_OP_NOTE_TXT_F1", ["ORDER_ID","OPER_KEY","STEP_KEY","TEXT_TYPE","NOTE_ID"], "SFWID_OPER_NOTES_TEXT", ["ORDER_ID","OPER_KEY","STEP_KEY","TEXT_TYPE","NOTE_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "The system generated unique identifier of an object link embedded in a work plan operation text block."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "The unique identifier of a referenced object."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The type/class of the object, CAD drawing, still image, slide, UDV, standard text, audio, or video."
        self.OBJECT_NAME = parse_value(self.schema, column_value_map, "OBJECT_NAME")
        "A descriptive tag or name of the object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "The protocol Id of a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "The host Id of a Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "The file location of a Universal Resource Locator."
        self.NOTE_ID = parse_value(self.schema, column_value_map, "NOTE_ID")

class SFPL_STEP_MM_OBJECTS:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_SFPL_STEP_MM_OBJ_VCH1": "STRING",
        "UCF_SFPL_STEP_MM_OBJ_VCH2": "STRING",
        "UCF_SFPL_STEP_MM_OBJ_VCH3": "STRING",
        "UCF_SFPL_STEP_MM_OBJ_VCH4": "STRING",
        "UCF_SFPL_STEP_MM_OBJ_VCH5": "STRING",
        "UCF_SFPL_STEP_MM_OBJ_NUM1": "NUMBER",
        "UCF_SFPL_STEP_MM_OBJ_NUM2": "NUMBER",
        "UCF_SFPL_STEP_MM_OBJ_NUM3": "NUMBER",
        "UCF_SFPL_STEP_MM_OBJ_DATE1": "STRING",
        "UCF_SFPL_STEP_MM_OBJ_DATE2": "STRING",
        "UCF_SFPL_STEP_MM_OBJ_FLAG1": "STRING",
        "UCF_SFPL_STEP_MM_OBJ_FLAG2": "STRING",
        "UCF_SFPL_STEP_MM_OBJ_FLAG3": "STRING",
        "UCF_SFPL_STEP_MM_OBJ_VCH255_1": "STRING",
        "UCF_SFPL_STEP_MM_OBJ_VCH255_2": "STRING",
        "LATEST_REV_FLAG": "STRING",
        "SOURCE_ID": "STRING",
        "SOURCE_TYPE": "STRING",
        "BOM_LINE_NO": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "RTF_LINK_ID": "STRING",
        "ORIG_OBJECT_ID": "STRING",
        "EFF_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
        "LATEST_EFF_GRP_REV_FLAG": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "OBJECT_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEP_MM_OBJECTS_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFPL_STEP_MM_OBJECTS_FK4", ["EFF_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFPL_STEP_MM_OBJECTS_FK3", ["ORIG_OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFPL_STEP_MM_OBJECTS_FK1", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"], "SFPL_STEP_DESC", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"]),
        DbForeignKey("SFPL_STEP_MM_OBJECTS_FK5", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_SFPL_STEP_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFPL_STEP_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFPL_STEP_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFPL_STEP_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFPL_STEP_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFPL_STEP_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_SFPL_STEP_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_SFPL_STEP_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_SFPL_STEP_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SFPL_STEP_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SFPL_STEP_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFPL_STEP_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFPL_STEP_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFPL_STEP_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SFPL_STEP_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SFPL_STEP_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.LATEST_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_REV_FLAG")
        "Flag indicating if authored object is of latest revision or not."
        self.SOURCE_ID = parse_value(self.schema, column_value_map, "SOURCE_ID")
        "Unique identifier for source, when source is BOM then BOM_ID and ITEM_ID for other sources."
        self.SOURCE_TYPE = parse_value(self.schema, column_value_map, "SOURCE_TYPE")
        "Source type where illustration belongs. Like Bom, Component, Part, Tool, Process, Machine etc."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        "Corresponding Line No from which document is authored."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object drag and drop functionality."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."
        self.ORIG_OBJECT_ID = parse_value(self.schema, column_value_map, "ORIG_OBJECT_ID")
        "ID of the object originaly authored from which the current one is created on-the-fly."
        self.EFF_TYPE = parse_value(self.schema, column_value_map, "EFF_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        "EFF Group Id"
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        "Next Higher Assembly given by User"
        self.LATEST_EFF_GRP_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_EFF_GRP_REV_FLAG")
        "Latest Eff Group Rev Flag"

class SFWID_ORDER_DESC:
    schema = {
        "ORDER_ID": "STRING",
        "ORDER_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ORDER_SCRAP_QTY": "NUMBER",
        "ORDER_COMPLETE_QTY": "NUMBER",
        "ORDER_STOP_QTY": "NUMBER",
        "NEEDS_REVIEW_FLAG": "STRING",
        "ALT_COUNT": "NUMBER",
        "PLAN_UPDT_NO": "NUMBER",
        "PLAN_ID": "STRING",
        "ORDER_STATUS": "STRING",
        "PLAN_VERSION": "NUMBER",
        "ORDER_HOLD_STATUS": "STRING",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "ORDER_QTY": "NUMBER",
        "SCHED_PRIORITY": "STRING",
        "INITIAL_STORES": "STRING",
        "FINAL_STORES": "STRING",
        "CONTRACT_NO": "STRING",
        "ORDER_CUST_ID": "STRING",
        "PARENT_ORDER_ID": "STRING",
        "ORIG_ORDER_ID": "STRING",
        "SUPERCEDED_ORDER_ID": "STRING",
        "SUPERCEDES_ORDER": "STRING",
        "SPLIT_FLAG": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "UNIT_NO": "STRING",
        "CUSTOMER_ORDER_NO": "STRING",
        "PLAN_TYPE": "STRING",
        "ALTER_TYPE": "STRING",
        "ORDER_TYPE": "STRING",
        "STATUS_CHG_NOTES": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "MFG_BOM_CHG": "STRING",
        "PLAN_TITLE": "STRING",
        "ALT_ID": "STRING",
        "ITEM_ID": "STRING",
        "ALT_STATUS": "STRING",
        "ENG_PART_NO": "STRING",
        "ENG_PART_CHG": "STRING",
        "ENG_GROUP": "STRING",
        "PROGRAM": "STRING",
        "MFG_INDEX_NO": "STRING",
        "MODEL": "STRING",
        "PLG_GROUP": "STRING",
        "STATUS_CHG_REASON": "STRING",
        "UCF_PLAN_VCH1": "STRING",
        "ORDER_UOM": "STRING",
        "UNIT_TYPE": "STRING",
        "UCF_PLAN_VCH2": "STRING",
        "UCF_PLAN_VCH3": "STRING",
        "PROJECT": "STRING",
        "UCF_PLAN_VCH4": "STRING",
        "UCF_PLAN_VCH5": "STRING",
        "UCF_PLAN_VCH6": "STRING",
        "UCF_PLAN_VCH7": "STRING",
        "UCF_PLAN_VCH8": "STRING",
        "UCF_PLAN_FLAG1": "STRING",
        "UCF_PLAN_FLAG2": "STRING",
        "UCF_ORDER_VCH1": "STRING",
        "UCF_ORDER_VCH2": "STRING",
        "UCF_ORDER_VCH3": "STRING",
        "UCF_ORDER_VCH4": "STRING",
        "UCF_ORDER_VCH5": "STRING",
        "UCF_ORDER_NUM1": "NUMBER",
        "UCF_ORDER_NUM2": "NUMBER",
        "UCF_ORDER_FLAG1": "STRING",
        "OPER_SEQ_FLAG": "STRING",
        "UCF_PLAN_NUM1": "NUMBER",
        "UCF_PLAN_NUM2": "NUMBER",
        "UNSCRAP_FLAG": "STRING",
        "LTA_SEND_FLAG": "STRING",
        "LAST_ORDER_HDR_CHG_ALT_ID": "STRING",
        "UCF_PLAN_VCH9": "STRING",
        "UCF_PLAN_VCH10": "STRING",
        "UCF_PLAN_VCH11": "STRING",
        "UCF_PLAN_VCH12": "STRING",
        "UCF_PLAN_VCH13": "STRING",
        "UCF_PLAN_VCH14": "STRING",
        "UCF_PLAN_VCH15": "STRING",
        "UCF_PLAN_NUM3": "NUMBER",
        "UCF_PLAN_NUM4": "NUMBER",
        "UCF_PLAN_NUM5": "NUMBER",
        "UCF_PLAN_DATE1": "STRING",
        "UCF_PLAN_DATE2": "STRING",
        "UCF_PLAN_DATE3": "STRING",
        "UCF_PLAN_DATE4": "STRING",
        "UCF_PLAN_DATE5": "STRING",
        "UCF_PLAN_FLAG3": "STRING",
        "UCF_PLAN_FLAG4": "STRING",
        "UCF_PLAN_FLAG5": "STRING",
        "UCF_PLAN_VCH255_1": "STRING",
        "UCF_PLAN_VCH255_2": "STRING",
        "UCF_PLAN_VCH255_3": "STRING",
        "UCF_PLAN_VCH4000_1": "STRING",
        "UCF_PLAN_VCH4000_2": "STRING",
        "UCF_ORDER_VCH6": "STRING",
        "UCF_ORDER_VCH7": "STRING",
        "UCF_ORDER_VCH8": "STRING",
        "UCF_ORDER_VCH9": "STRING",
        "UCF_ORDER_VCH10": "STRING",
        "UCF_ORDER_VCH11": "STRING",
        "UCF_ORDER_VCH12": "STRING",
        "UCF_ORDER_VCH13": "STRING",
        "UCF_ORDER_VCH14": "STRING",
        "UCF_ORDER_VCH15": "STRING",
        "UCF_ORDER_NUM3": "NUMBER",
        "UCF_ORDER_NUM4": "NUMBER",
        "UCF_ORDER_NUM5": "NUMBER",
        "UCF_ORDER_DATE1": "STRING",
        "UCF_ORDER_DATE2": "STRING",
        "UCF_ORDER_DATE3": "STRING",
        "UCF_ORDER_DATE4": "STRING",
        "UCF_ORDER_DATE5": "STRING",
        "UCF_ORDER_FLAG2": "STRING",
        "UCF_ORDER_FLAG3": "STRING",
        "UCF_ORDER_FLAG4": "STRING",
        "UCF_ORDER_FLAG5": "STRING",
        "UCF_ORDER_VCH255_1": "STRING",
        "UCF_ORDER_VCH255_2": "STRING",
        "UCF_ORDER_VCH255_3": "STRING",
        "UCF_ORDER_VCH4000_1": "STRING",
        "UCF_ORDER_VCH4000_2": "STRING",
        "ORDER_LOCKED": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "BOM_NO": "STRING",
        "SECURITY_GROUP": "STRING",
        "PLAN_NO": "STRING",
        "DISPLAY_SEQUENCE": "STRING",
        "DOC_TYPE": "STRING",
        "INVENTORY_STOCK_LOC": "STRING",
        "ACCOUNT_LABOR": "STRING",
        "ACCOUNT_MATERIAL": "STRING",
        "ORDER_ISSUE_STATUS": "STRING",
        "INSTRUCTIONS_TYPE": "STRING",
        "OPERATION_OVERLAP_FLAG": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "SPLIT_FROM_ORDER_ID": "STRING",
        "ALIAS_PART_NO": "STRING",
        "CONDITION": "STRING",
        "ITEM_TYPE": "STRING",
        "ALIAS_PART_CHG": "STRING",
        "INSP_ORDER_ID": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "EXPLICIT_BOM_LINK_FLAG": "STRING",
        "LOAD_EMB_CONTROL_FLAG": "STRING",
        "COMMODITY_JURISDICTION": "STRING",
        "COMMODITY_CLASSIFICATION": "STRING",
        "ALTER_LOCKED": "STRING",
        "MIGRATED_TO": "STRING",
        "ASGND_LOCATION_ID": "STRING",
        "BOM_ID": "STRING",
        "DECLARED_LANGUAGE_CODE": "STRING",
        "ORDER_CATEGORY": "STRING",
        "CURRENT_LOC_ID": "STRING",
        "CURRENT_DEPT_ID": "STRING",
        "CURRENT_CENTER_ID": "STRING",
        "PREVIOUS_LOC_ID": "STRING",
        "PREVIOUS_DEPT_ID": "STRING",
        "PREVIOUS_CENTER_ID": "STRING",
        "NEXT_LOC_ID": "STRING",
        "NEXT_DEPT_ID": "STRING",
        "NEXT_CENTER_ID": "STRING",
        "CURRENT_OPER_KEY": "NUMBER",
        "SUB_LOCATION": "STRING",
        "ARRIVED_DATE": "STRING",
        "MULTI_KEY_ENABLED": "STRING",
        "MATERIAL_FLAG": "STRING",
        "INSP_PLAN_ID": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_DESC_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_UOM_FK", ["ORDER_UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFWID_ORDER_DESC_MDL_FK", ["MODEL"], "SFFND_MODEL_DEF", ["MODEL"]),
        DbForeignKey("SFWID_ORDER_DESC_UNIT_FK", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFWID_ORDER_DESC_ORIG_FK", ["ORIG_ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_PARENT_FK", ["PARENT_ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_SUPERED_FK", ["SUPERCEDED_ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_SUPERS_FK", ["SUPERCEDES_ORDER"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_CUST_FK", ["ORDER_CUST_ID"], "SFFND_CUST_ID_DEF", ["CUST_ID"]),
        DbForeignKey("SFWID_ORDER_ITEM_FK", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFWID_ORDDESC_PPLANREV_FK", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
        DbForeignKey("SFWID_ORDER_DESC_PRGM_FK", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("SFWID_ORDER_DESC_PRJ_FK", ["PROJECT"], "SFFND_PROJECT_DEF", ["PROJECT"]),
        DbForeignKey("SFWID_ORDER_DESC_FK10", ["NEXT_LOC_ID","NEXT_DEPT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_FK03", ["SPLIT_FROM_ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_FK13", ["NEXT_LOC_ID","NEXT_DEPT_ID","NEXT_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_FK07", ["NEXT_LOC_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_ITYPE_FK", ["ITEM_TYPE","ITEM_SUBTYPE"], "SFPL_ITEM_TYPE_DEF", ["ITEM_TYPE","ITEM_SUBTYPE"]),
        DbForeignKey("SFWID_ORDER_DESC_LANGUAGE_FK", ["DECLARED_LANGUAGE_CODE"], "SFFND_LANGUAGE", ["LANGUAGE_CODE"]),
        DbForeignKey("SFWID_ORDER_DESC_FK11", ["CURRENT_LOC_ID","CURRENT_DEPT_ID","CURRENT_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_FK01", ["UID_ENTRY_NAME"], "SFFND_UID_ENTRY", ["UID_ENTRY_NAME"]),
        DbForeignKey("SFWID_ORDER_DESC_FK05", ["CURRENT_LOC_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_BOM_FK", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_WORK_LOC_FK", ["ASGND_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_FK06", ["PREVIOUS_LOC_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_FK12", ["PREVIOUS_LOC_ID","PREVIOUS_DEPT_ID","PREVIOUS_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_FK02", ["CONDITION"], "SFFND_CONDITION_DEF", ["CONDITION"]),
        DbForeignKey("SFWID_ORDER_DESC_FK09", ["PREVIOUS_LOC_ID","PREVIOUS_DEPT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_FK08", ["CURRENT_LOC_ID","CURRENT_DEPT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
    ]
    refs = [
        "SFWID_ORDER_ITEM_ISSUED_FK1",
        "SFWID_LOT_DESC_ORDER_DESC_FK",
        "SFWID_ALT_CHG_LOG_FK2",
        "SFWID_ORDER_LIENS_FK2",
        "SFWID_USER_OPER_CHG_ACK_FK2",
        "SFWID_ORDER_RELATED_FK02",
        "SFWID_ORDER_RELATED_FK01",
        "SFPL_IMPACTED_OBJECTS_FK9",
        "SFWID_ORDER_NODE_FK",
        "SFWID_MBOM_NOTIFICATION_FK1",
        "SFWID_OPERDESC_ORDRDESC_FK",
        "SFPL_PLANNED_ACTIONS_FK11",
        "SFWID_ORDITEMALT_ORDER_FK",
        "SFFND_ALTTASK_ORDERDESC_FK",
        "SFFND_CYCLES_FK1",
        "SFWID_ORDER_DESC_ORIG_FK",
        "SFWID_ORDER_DESC_PARENT_FK",
        "SFWID_ORDER_DESC_SUPERED_FK",
        "SFWID_ORDER_DESC_SUPERS_FK",
        "SFWID_ORDER_DESC_FK03",
        "SFWID_HOLDS_ORDRDSC_FK",
        "SFWID_ORDER_NOTES_ORDER",
        "SFWID_ORDER_MM_OBJECTS_FK1",
        "SFOR_SFWID_ORDER_SUB_ORD_FK",
        "SFWID_LAST_FILTER_CONTEXT_FK1",
        "SFWID_ORDER_REV_CONTROL_FK",
        "SFWID_ORDER_LINK_ORDER_FK",
        "SFWID_ORDER_REV_FK1",
        "SFWID_ORDER_OWP_XREF_FK2",
        "SFWID_ORDER_NOTIF_ORDER_FK",
        "SFWID_ORDER_TEXT_DESC_FK",
        "SFWID_ORDER_CONFIG_ORDER_FK",
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        "Unique, user-assigned identifier of a given work order."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ORDER_SCRAP_QTY = parse_value(self.schema, column_value_map, "ORDER_SCRAP_QTY")
        "Number of items/component parts that have been scrapped during the process of fulfilling the work order."
        self.ORDER_COMPLETE_QTY = parse_value(self.schema, column_value_map, "ORDER_COMPLETE_QTY")
        "Number of items/component parts that have been completed during the process of fulfilling the given work order."
        self.ORDER_STOP_QTY = parse_value(self.schema, column_value_map, "ORDER_STOP_QTY")
        "Number of items/component parts that have been stopped during the process of fulfilling the given work order."
        self.NEEDS_REVIEW_FLAG = parse_value(self.schema, column_value_map, "NEEDS_REVIEW_FLAG")
        "A flag (Y/N) that indicates whether the associated Corrective Action Diagram requires review."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.ORDER_STATUS = parse_value(self.schema, column_value_map, "ORDER_STATUS")
        "The status of the work order, e.g., ACTIVE, COMPLETE, IN QUEUE, or CANCEL."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.ORDER_HOLD_STATUS = parse_value(self.schema, column_value_map, "ORDER_HOLD_STATUS")
        "The on-hold status of the work order, OPEN or CLOSED."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.ORDER_QTY = parse_value(self.schema, column_value_map, "ORDER_QTY")
        "The quantity of the part to be made for the given work order. Defaults to PLND_ORDER_QTY but can be changed."
        self.SCHED_PRIORITY = parse_value(self.schema, column_value_map, "SCHED_PRIORITY")
        "The scheduled priority of the associated work order, e.g., High, Low, Medium."
        self.INITIAL_STORES = parse_value(self.schema, column_value_map, "INITIAL_STORES")
        "Storage or process location associated with the initial phases of the given work plan or work order."
        self.FINAL_STORES = parse_value(self.schema, column_value_map, "FINAL_STORES")
        "Storage or process location associated with the final phases of the given work plan or work order."
        self.CONTRACT_NO = parse_value(self.schema, column_value_map, "CONTRACT_NO")
        "The contract number the work order is related to."
        self.ORDER_CUST_ID = parse_value(self.schema, column_value_map, "ORDER_CUST_ID")
        "The customer receiving the completed work, defaulted to PLND_CUST_ID but can be changed."
        self.PARENT_ORDER_ID = parse_value(self.schema, column_value_map, "PARENT_ORDER_ID")
        "The identifier of the parent work order, used to track order splits, and rework/dispositions"
        self.ORIG_ORDER_ID = parse_value(self.schema, column_value_map, "ORIG_ORDER_ID")
        "The identifier of the original work order, which is the initial work order created from work plan release. Used to track splits, rework/dispositions, and supercedes."
        self.SUPERCEDED_ORDER_ID = parse_value(self.schema, column_value_map, "SUPERCEDED_ORDER_ID")
        "The identifier of the work order superceded by this work order."
        self.SUPERCEDES_ORDER = parse_value(self.schema, column_value_map, "SUPERCEDES_ORDER")
        "The identifier of the work order that supercedes this work order."
        self.SPLIT_FLAG = parse_value(self.schema, column_value_map, "SPLIT_FLAG")
        "A flag (Y/N) that indicates whether or not the work order is a split of another work order."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which the manufacturing work for the work order is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which the manufacturing work for the work order is scheduled to complete."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised work start date."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised work complete date."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which the work for the manufacturing work order has been started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which the manufacturing work order has been completed."
        self.UNIT_NO = parse_value(self.schema, column_value_map, "UNIT_NO")
        "The unit number of the shipping product (e.g. airplane tail #) the work order is related to."
        self.CUSTOMER_ORDER_NO = parse_value(self.schema, column_value_map, "CUSTOMER_ORDER_NO")
        "The customer purchase order number associated with the order."
        self.PLAN_TYPE = parse_value(self.schema, column_value_map, "PLAN_TYPE")
        "Type or classification of the associated work plan."
        self.ALTER_TYPE = parse_value(self.schema, column_value_map, "ALTER_TYPE")
        "Type or classification of the last alteration on the associated work order."
        self.ORDER_TYPE = parse_value(self.schema, column_value_map, "ORDER_TYPE")
        "Type or classification of order."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated work order."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.MFG_BOM_CHG = parse_value(self.schema, column_value_map, "MFG_BOM_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given BOM."
        self.PLAN_TITLE = parse_value(self.schema, column_value_map, "PLAN_TITLE")
        "A descriptive title or name of the work plan."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of the item/part to be made upon the work order."
        self.ALT_STATUS = parse_value(self.schema, column_value_map, "ALT_STATUS")
        "The status of the last alteration on this work order. For example: ORDER_AUTHORING."
        self.ENG_PART_NO = parse_value(self.schema, column_value_map, "ENG_PART_NO")
        "The part number of the product to be made, mapped to engineering BOM, provided by Engineering."
        self.ENG_PART_CHG = parse_value(self.schema, column_value_map, "ENG_PART_CHG")
        "The change letter associated with the engineering part number."
        self.ENG_GROUP = parse_value(self.schema, column_value_map, "ENG_GROUP")
        "The unique identifier of the associated engineering group."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.MFG_INDEX_NO = parse_value(self.schema, column_value_map, "MFG_INDEX_NO")
        "The associated manufacturing index number, usually used in Engineering to identify a specific stage in the manufacturing process."
        self.MODEL = parse_value(self.schema, column_value_map, "MODEL")
        "Unique identifier of the associated model/product line."
        self.PLG_GROUP = parse_value(self.schema, column_value_map, "PLG_GROUP")
        "Unique identifier of the associated process planning group."
        self.STATUS_CHG_REASON = parse_value(self.schema, column_value_map, "STATUS_CHG_REASON")
        "Reason for a change in status."
        self.UCF_PLAN_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH1")
        "User-configurable field for VARCHAR data type."
        self.ORDER_UOM = parse_value(self.schema, column_value_map, "ORDER_UOM")
        "The Unit Of Measure associated with PLND_ORDER_QTY and ORDER_QTY."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.UCF_PLAN_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH3")
        "User-configurable field for VARCHAR data type."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.UCF_PLAN_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.OPER_SEQ_FLAG = parse_value(self.schema, column_value_map, "OPER_SEQ_FLAG")
        "A flag (Y/N) indicating whether the operations of the given must be executed in sequence. Obsolete; used only for legacy migration purposes."
        self.UCF_PLAN_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM2")
        "User-configurable field for NUM data type."
        self.UNSCRAP_FLAG = parse_value(self.schema, column_value_map, "UNSCRAP_FLAG")
        "A flag (Y/N) indicating whether the component/part should be or has been unscrapped."
        self.LTA_SEND_FLAG = parse_value(self.schema, column_value_map, "LTA_SEND_FLAG")
        self.LAST_ORDER_HDR_CHG_ALT_ID = parse_value(self.schema, column_value_map, "LAST_ORDER_HDR_CHG_ALT_ID")
        self.UCF_PLAN_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH9")
        self.UCF_PLAN_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH10")
        self.UCF_PLAN_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH11")
        self.UCF_PLAN_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH12")
        self.UCF_PLAN_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH13")
        self.UCF_PLAN_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH14")
        self.UCF_PLAN_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH15")
        self.UCF_PLAN_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM3")
        self.UCF_PLAN_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM4")
        self.UCF_PLAN_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM5")
        self.UCF_PLAN_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE1")
        self.UCF_PLAN_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE2")
        self.UCF_PLAN_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE3")
        self.UCF_PLAN_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE4")
        self.UCF_PLAN_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE5")
        self.UCF_PLAN_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG3")
        self.UCF_PLAN_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG4")
        self.UCF_PLAN_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG5")
        self.UCF_PLAN_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH255_1")
        self.UCF_PLAN_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH255_2")
        self.UCF_PLAN_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH255_3")
        self.UCF_PLAN_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH4000_1")
        self.UCF_PLAN_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH4000_2")
        self.UCF_ORDER_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH6")
        self.UCF_ORDER_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH7")
        self.UCF_ORDER_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH8")
        self.UCF_ORDER_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH9")
        self.UCF_ORDER_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH10")
        self.UCF_ORDER_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH11")
        self.UCF_ORDER_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH12")
        self.UCF_ORDER_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH13")
        self.UCF_ORDER_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH14")
        self.UCF_ORDER_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH15")
        self.UCF_ORDER_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM3")
        self.UCF_ORDER_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM4")
        self.UCF_ORDER_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM5")
        self.UCF_ORDER_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE1")
        self.UCF_ORDER_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE2")
        self.UCF_ORDER_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE3")
        self.UCF_ORDER_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE4")
        self.UCF_ORDER_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE5")
        self.UCF_ORDER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG2")
        self.UCF_ORDER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG3")
        self.UCF_ORDER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG4")
        self.UCF_ORDER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG5")
        self.UCF_ORDER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH255_1")
        self.UCF_ORDER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH255_2")
        self.UCF_ORDER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH255_3")
        self.UCF_ORDER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH4000_1")
        self.UCF_ORDER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH4000_2")
        self.ORDER_LOCKED = parse_value(self.schema, column_value_map, "ORDER_LOCKED")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.BOM_NO = parse_value(self.schema, column_value_map, "BOM_NO")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.PLAN_NO = parse_value(self.schema, column_value_map, "PLAN_NO")
        self.DISPLAY_SEQUENCE = parse_value(self.schema, column_value_map, "DISPLAY_SEQUENCE")
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        self.INVENTORY_STOCK_LOC = parse_value(self.schema, column_value_map, "INVENTORY_STOCK_LOC")
        self.ACCOUNT_LABOR = parse_value(self.schema, column_value_map, "ACCOUNT_LABOR")
        self.ACCOUNT_MATERIAL = parse_value(self.schema, column_value_map, "ACCOUNT_MATERIAL")
        self.ORDER_ISSUE_STATUS = parse_value(self.schema, column_value_map, "ORDER_ISSUE_STATUS")
        "Determines if the Work Order is requested for Part Issue or not."
        self.INSTRUCTIONS_TYPE = parse_value(self.schema, column_value_map, "INSTRUCTIONS_TYPE")
        "Instructions type associated to the given work order."
        self.OPERATION_OVERLAP_FLAG = parse_value(self.schema, column_value_map, "OPERATION_OVERLAP_FLAG")
        "Operation Overlap flag, used to allow partial lot completions and a lot to be spread out over many operations."
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.SPLIT_FROM_ORDER_ID = parse_value(self.schema, column_value_map, "SPLIT_FROM_ORDER_ID")
        "Contains the original ORDER_ID from which a given order was split."
        self.ALIAS_PART_NO = parse_value(self.schema, column_value_map, "ALIAS_PART_NO")
        "Part No of alias/Starting Part."
        self.CONDITION = parse_value(self.schema, column_value_map, "CONDITION")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ALIAS_PART_CHG = parse_value(self.schema, column_value_map, "ALIAS_PART_CHG")
        "Part Chagne of alias/Starting Part."
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        "Unique system generated identifier of Inspection Order."
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.EXPLICIT_BOM_LINK_FLAG = parse_value(self.schema, column_value_map, "EXPLICIT_BOM_LINK_FLAG")
        "Indicates if specific BOM Revision will be explicitly linked to Plan/Order."
        self.LOAD_EMB_CONTROL_FLAG = parse_value(self.schema, column_value_map, "LOAD_EMB_CONTROL_FLAG")
        "Reload Order Embedded Control records when this flag is Y."
        self.COMMODITY_JURISDICTION = parse_value(self.schema, column_value_map, "COMMODITY_JURISDICTION")
        "Commodity Jurisdiction of Work Order."
        self.COMMODITY_CLASSIFICATION = parse_value(self.schema, column_value_map, "COMMODITY_CLASSIFICATION")
        "Commodity Classification of Work Order."
        self.ALTER_LOCKED = parse_value(self.schema, column_value_map, "ALTER_LOCKED")
        "Used to identify order can be altered or not. Y means order is locked for alteration."
        self.MIGRATED_TO = parse_value(self.schema, column_value_map, "MIGRATED_TO")
        "Orders migrated to IBA release."
        self.ASGND_LOCATION_ID = parse_value(self.schema, column_value_map, "ASGND_LOCATION_ID")
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique system generated identifier for BOM."
        self.DECLARED_LANGUAGE_CODE = parse_value(self.schema, column_value_map, "DECLARED_LANGUAGE_CODE")
        "Language code as per ISO639 standard."
        self.ORDER_CATEGORY = parse_value(self.schema, column_value_map, "ORDER_CATEGORY")
        self.CURRENT_LOC_ID = parse_value(self.schema, column_value_map, "CURRENT_LOC_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.CURRENT_DEPT_ID = parse_value(self.schema, column_value_map, "CURRENT_DEPT_ID")
        "Unique, system-generated identifier of the given Work Department."
        self.CURRENT_CENTER_ID = parse_value(self.schema, column_value_map, "CURRENT_CENTER_ID")
        "Unique, system-generated identifier of the given Work Center."
        self.PREVIOUS_LOC_ID = parse_value(self.schema, column_value_map, "PREVIOUS_LOC_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.PREVIOUS_DEPT_ID = parse_value(self.schema, column_value_map, "PREVIOUS_DEPT_ID")
        "Unique, system-generated identifier of the given Work Department."
        self.PREVIOUS_CENTER_ID = parse_value(self.schema, column_value_map, "PREVIOUS_CENTER_ID")
        "Unique, system-generated identifier of the given Work Center."
        self.NEXT_LOC_ID = parse_value(self.schema, column_value_map, "NEXT_LOC_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.NEXT_DEPT_ID = parse_value(self.schema, column_value_map, "NEXT_DEPT_ID")
        "Unique, system-generated identifier of the given Work Department."
        self.NEXT_CENTER_ID = parse_value(self.schema, column_value_map, "NEXT_CENTER_ID")
        "Unique, system-generated identifier of the given Work Center."
        self.CURRENT_OPER_KEY = parse_value(self.schema, column_value_map, "CURRENT_OPER_KEY")
        self.SUB_LOCATION = parse_value(self.schema, column_value_map, "SUB_LOCATION")
        self.ARRIVED_DATE = parse_value(self.schema, column_value_map, "ARRIVED_DATE")
        self.MULTI_KEY_ENABLED = parse_value(self.schema, column_value_map, "MULTI_KEY_ENABLED")
        self.MATERIAL_FLAG = parse_value(self.schema, column_value_map, "MATERIAL_FLAG")
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        self.SFWID_ORDER_ITEM_ISSUED_FK1 = []
        self.SFWID_LOT_DESC_ORDER_DESC_FK = []
        self.SFWID_ALT_CHG_LOG_FK2 = []
        self.SFWID_ORDER_LIENS_FK2 = []
        self.SFWID_USER_OPER_CHG_ACK_FK2 = []
        self.SFWID_ORDER_RELATED_FK02 = []
        self.SFWID_ORDER_RELATED_FK01 = []
        self.SFPL_IMPACTED_OBJECTS_FK9 = []
        self.SFWID_ORDER_NODE_FK = []
        self.SFWID_MBOM_NOTIFICATION_FK1 = []
        self.SFWID_OPERDESC_ORDRDESC_FK = []
        self.SFPL_PLANNED_ACTIONS_FK11 = []
        self.SFWID_ORDITEMALT_ORDER_FK = []
        self.SFFND_ALTTASK_ORDERDESC_FK = []
        self.SFFND_CYCLES_FK1 = []
        self.SFWID_ORDER_DESC_ORIG_FK = []
        self.SFWID_ORDER_DESC_PARENT_FK = []
        self.SFWID_ORDER_DESC_SUPERED_FK = []
        self.SFWID_ORDER_DESC_SUPERS_FK = []
        self.SFWID_ORDER_DESC_FK03 = []
        self.SFWID_HOLDS_ORDRDSC_FK = []
        self.SFWID_ORDER_NOTES_ORDER = []
        self.SFWID_ORDER_MM_OBJECTS_FK1 = []
        self.SFOR_SFWID_ORDER_SUB_ORD_FK = []
        self.SFWID_LAST_FILTER_CONTEXT_FK1 = []
        self.SFWID_ORDER_REV_CONTROL_FK = []
        self.SFWID_ORDER_LINK_ORDER_FK = []
        self.SFWID_ORDER_REV_FK1 = []
        self.SFWID_ORDER_OWP_XREF_FK2 = []
        self.SFWID_ORDER_NOTIF_ORDER_FK = []
        self.SFWID_ORDER_TEXT_DESC_FK = []
        self.SFWID_ORDER_CONFIG_ORDER_FK = []

class SFWID_SERIAL_OPER_TOOL:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "ASGND_TOOL_ID": "STRING",
        "ASGND_TOOL_NO": "STRING",
        "ASGND_TOOL_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PLND_TOOL_NO": "STRING",
        "PLND_TOOL_CHG": "STRING",
        "ASGND_TOOL_QTY": "NUMBER",
        "TOOL_DAT_COL_STATUS": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "COMPLETE_QTY": "NUMBER",
        "MESSAGE_SENT": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "LOT_ID",
        "SERIAL_ID",
        "ASGND_TOOL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_SEROPEROPERTL_OPER_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_SEROPEROPERTL_SERL_FK", ["ORDER_ID","LOT_ID","SERIAL_ID"], "SFWID_SERIAL_DESC", ["ORDER_ID","LOT_ID","SERIAL_ID"]),
    ]
    refs = [
        "SFWID_SER_OPR_TL_DC_S_OP_TL_FK",
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.ASGND_TOOL_ID = parse_value(self.schema, column_value_map, "ASGND_TOOL_ID")
        "Unique, system-generated identifier of the assigned tool."
        self.ASGND_TOOL_NO = parse_value(self.schema, column_value_map, "ASGND_TOOL_NO")
        "The identifying number of the required tool as actually assigned to the given operation."
        self.ASGND_TOOL_CHG = parse_value(self.schema, column_value_map, "ASGND_TOOL_CHG")
        "The change letter (revision) of the required tool as actually assigned to the given operation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PLND_TOOL_NO = parse_value(self.schema, column_value_map, "PLND_TOOL_NO")
        "The identifying number of the required tool as originally specified in the work plan."
        self.PLND_TOOL_CHG = parse_value(self.schema, column_value_map, "PLND_TOOL_CHG")
        "The change letter (revision) of the required tool as originally specified in the work plan."
        self.ASGND_TOOL_QTY = parse_value(self.schema, column_value_map, "ASGND_TOOL_QTY")
        "The quantity of ASGND_TOOL_NO assigned to the given operation."
        self.TOOL_DAT_COL_STATUS = parse_value(self.schema, column_value_map, "TOOL_DAT_COL_STATUS")
        "Status of the data collection for the given tool at the given operation."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.COMPLETE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_QTY")
        "Determines the number of units completed. Applicable when Continuous Flow flag is Y."
        self.MESSAGE_SENT = parse_value(self.schema, column_value_map, "MESSAGE_SENT")
        self.SFWID_SER_OPR_TL_DC_S_OP_TL_FK = []

class SFCORE_PRIVS:
    schema = {
        "PRIV": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "PRIV_DESC": "STRING",
        "STYPE": "STRING",
    }
    primary_key_columns = [
        "PRIV",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_PRIVS_STYPE_FK", ["STYPE"], "SFCORE_MODULES", ["GROUP_NAME"]),
    ]
    refs = [
        "SFCORE_PRIVS_FK",
        "FWAAC_PRIV_FK",
        "FWREPPRIV_PRIV_FK",
        "SFCORE_USER_PRIVS_FK1",
    ]
    def __init__(self, column_value_map):
        self.PRIV = parse_value(self.schema, column_value_map, "PRIV")
        "Unique identifier/name of a Solumina application privilege for accessing a particular Solumina functionality."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.PRIV_DESC = parse_value(self.schema, column_value_map, "PRIV_DESC")
        "The description of the application privilege."
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")
        self.SFCORE_PRIVS_FK = []
        self.FWAAC_PRIV_FK = []
        self.FWREPPRIV_PRIV_FK = []
        self.SFCORE_USER_PRIVS_FK1 = []

class SFFND_NODE_TYPE_DEF:
    schema = {
        "NODE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "NODE_TYPE_DESC": "STRING",
    }
    primary_key_columns = [
        "NODE_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFWID_ORDER_NODE_NODE_TYPE_FK",
        "SFPL_PLAN_NODE_NODE_TYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.NODE_TYPE = parse_value(self.schema, column_value_map, "NODE_TYPE")
        "Type or classification of the node type."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.NODE_TYPE_DESC = parse_value(self.schema, column_value_map, "NODE_TYPE_DESC")
        "Description of the node type."
        self.SFWID_ORDER_NODE_NODE_TYPE_FK = []
        self.SFPL_PLAN_NODE_NODE_TYPE_FK = []

class SFSQA_PO_LINE_CATEGORY:
    schema = {
        "PO_LINE_CATEGORY": "STRING",
        "PO_LINE_CATEGORY_DESC": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "RESERVED_FLAG": "STRING",
        "IS_VISIBLE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PO_LINE_CATEGORY",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_PO_LINE_FK5",
    ]
    def __init__(self, column_value_map):
        self.PO_LINE_CATEGORY = parse_value(self.schema, column_value_map, "PO_LINE_CATEGORY")
        self.PO_LINE_CATEGORY_DESC = parse_value(self.schema, column_value_map, "PO_LINE_CATEGORY_DESC")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.RESERVED_FLAG = parse_value(self.schema, column_value_map, "RESERVED_FLAG")
        self.IS_VISIBLE = parse_value(self.schema, column_value_map, "IS_VISIBLE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFSQA_PO_LINE_FK5 = []

class SFSQA_INSP_DEF_DETAILS:
    schema = {
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "INSP_STEP_ID": "STRING",
        "INSP_ITEM_ID": "STRING",
        "INSP_ITEM_SEQ_NO": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "OWNER_CODE",
        "INSP_DEF_REV",
        "INSP_STEP_ID",
        "INSP_ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_DEF_DETAILS_FK2", ["INSP_STEP_ID"], "SFSQA_INSP_STEP_DEF", ["INSP_STEP_ID"]),
        DbForeignKey("SFSQA_INSP_DEF_DETAILS_FK3", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV","INSP_ITEM_ID"], "SFSQA_INSP_DEF_INSP_ITEMS", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV","INSP_ITEM_ID"]),
        DbForeignKey("SFSQA_INSP_DEF_DETAILS_FK1", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"], "SFSQA_INSP_DEFINITION_REV", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.INSP_ITEM_SEQ_NO = parse_value(self.schema, column_value_map, "INSP_ITEM_SEQ_NO")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")

class SFSQA_INSP_DEFINITION_REV:
    schema = {
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DRAWING_NO": "STRING",
        "DRAWING_CHG": "STRING",
        "COMMODITY_JURISDICTION": "STRING",
        "COMMODITY_CLASSIFICATION": "STRING",
        "INSP_DEF_TYPE": "STRING",
        "SECURITY_GROUP": "STRING",
        "DOC_TYPE": "STRING",
        "WORK_FLOW": "STRING",
        "ITEM_ID": "STRING",
        "DESIGN_AUTHORITY": "STRING",
        "UCF_INSP_DEF_VCH1": "STRING",
        "UCF_INSP_DEF_VCH2": "STRING",
        "UCF_INSP_DEF_VCH3": "STRING",
        "UCF_INSP_DEF_VCH4": "STRING",
        "UCF_INSP_DEF_VCH5": "STRING",
        "UCF_INSP_DEF_VCH6": "STRING",
        "UCF_INSP_DEF_VCH7": "STRING",
        "UCF_INSP_DEF_VCH8": "STRING",
        "UCF_INSP_DEF_VCH9": "STRING",
        "UCF_INSP_DEF_VCH10": "STRING",
        "UCF_INSP_DEF_VCH11": "STRING",
        "UCF_INSP_DEF_VCH12": "STRING",
        "UCF_INSP_DEF_VCH13": "STRING",
        "UCF_INSP_DEF_VCH14": "STRING",
        "UCF_INSP_DEF_VCH15": "STRING",
        "UCF_INSP_DEF_NUM1": "NUMBER",
        "UCF_INSP_DEF_NUM2": "NUMBER",
        "UCF_INSP_DEF_NUM3": "NUMBER",
        "UCF_INSP_DEF_NUM4": "NUMBER",
        "UCF_INSP_DEF_NUM5": "NUMBER",
        "UCF_INSP_DEF_DATE1": "STRING",
        "UCF_INSP_DEF_DATE2": "STRING",
        "UCF_INSP_DEF_DATE3": "STRING",
        "UCF_INSP_DEF_DATE4": "STRING",
        "UCF_INSP_DEF_DATE5": "STRING",
        "UCF_INSP_DEF_FLAG1": "STRING",
        "UCF_INSP_DEF_FLAG2": "STRING",
        "UCF_INSP_DEF_FLAG3": "STRING",
        "UCF_INSP_DEF_FLAG4": "STRING",
        "UCF_INSP_DEF_FLAG5": "STRING",
        "UCF_INSP_DEF_VCH255_1": "STRING",
        "UCF_INSP_DEF_VCH255_2": "STRING",
        "UCF_INSP_DEF_VCH255_3": "STRING",
        "UCF_INSP_DEF_VCH4000_1": "STRING",
        "UCF_INSP_DEF_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "OWNER_CODE",
        "INSP_DEF_REV",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_DEFINITION_REV_FK3", ["DOC_TYPE","INSP_DEF_TYPE","WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
        DbForeignKey("SFSQA_INSP_DEFINITION_REV_FK1", ["ITEM_ID","OWNER_CODE"], "SFSQA_ITEM_OWNER", ["ITEM_ID","OWNER_CODE"]),
    ]
    refs = [
        "SFPL_IMPACTED_OBJECTS_FK7",
        "SFPL_PLANNED_ACTIONS_FK7",
        "SFPL_RESULTING_OBJECTS_FK7",
        "SFFND_INSP_DEF_TASK_FK1",
        "SFSQA_INSP_DEF_DETAILS_FK1",
        "SFSQA_PWP_INSP_DEF_XREF_FK3",
        "SFSQA_INSP_DEF_CHG_LOG_FK1",
        "SFSQA_INSP_DEF_REV_SEC_GRP_FK1",
        "SFSQA_INSP_DEF_BLCK_STATUS_FK1",
        "SFSQA_INSP_ORDER_INSP_DEF_FK1",
        "SFSQA_INSP_ITEM_ID_FK",
        "SFPL_AFFECTED_OBJECTS_FK7",
    ]
    def __init__(self, column_value_map):
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.DRAWING_NO = parse_value(self.schema, column_value_map, "DRAWING_NO")
        self.DRAWING_CHG = parse_value(self.schema, column_value_map, "DRAWING_CHG")
        self.COMMODITY_JURISDICTION = parse_value(self.schema, column_value_map, "COMMODITY_JURISDICTION")
        "Commodity Jurisdiction of Inspection Definition."
        self.COMMODITY_CLASSIFICATION = parse_value(self.schema, column_value_map, "COMMODITY_CLASSIFICATION")
        "Commodity Classification of Inspection Definition."
        self.INSP_DEF_TYPE = parse_value(self.schema, column_value_map, "INSP_DEF_TYPE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        "security group(s) assigned to inspection definition."
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        self.WORK_FLOW = parse_value(self.schema, column_value_map, "WORK_FLOW")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.DESIGN_AUTHORITY = parse_value(self.schema, column_value_map, "DESIGN_AUTHORITY")
        self.UCF_INSP_DEF_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH1")
        self.UCF_INSP_DEF_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH2")
        self.UCF_INSP_DEF_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH3")
        self.UCF_INSP_DEF_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH4")
        self.UCF_INSP_DEF_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH5")
        self.UCF_INSP_DEF_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH6")
        self.UCF_INSP_DEF_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH7")
        self.UCF_INSP_DEF_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH8")
        self.UCF_INSP_DEF_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH9")
        self.UCF_INSP_DEF_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH10")
        self.UCF_INSP_DEF_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH11")
        self.UCF_INSP_DEF_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH12")
        self.UCF_INSP_DEF_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH13")
        self.UCF_INSP_DEF_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH14")
        self.UCF_INSP_DEF_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH15")
        self.UCF_INSP_DEF_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_NUM1")
        self.UCF_INSP_DEF_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_NUM2")
        self.UCF_INSP_DEF_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_NUM3")
        self.UCF_INSP_DEF_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_NUM4")
        self.UCF_INSP_DEF_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_NUM5")
        self.UCF_INSP_DEF_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_DATE1")
        self.UCF_INSP_DEF_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_DATE2")
        self.UCF_INSP_DEF_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_DATE3")
        self.UCF_INSP_DEF_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_DATE4")
        self.UCF_INSP_DEF_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_DATE5")
        self.UCF_INSP_DEF_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_FLAG1")
        self.UCF_INSP_DEF_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_FLAG2")
        self.UCF_INSP_DEF_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_FLAG3")
        self.UCF_INSP_DEF_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_FLAG4")
        self.UCF_INSP_DEF_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_FLAG5")
        self.UCF_INSP_DEF_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH255_1")
        self.UCF_INSP_DEF_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH255_2")
        self.UCF_INSP_DEF_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH255_3")
        self.UCF_INSP_DEF_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH4000_1")
        self.UCF_INSP_DEF_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_DEF_VCH4000_2")
        self.SFPL_IMPACTED_OBJECTS_FK7 = []
        self.SFPL_PLANNED_ACTIONS_FK7 = []
        self.SFPL_RESULTING_OBJECTS_FK7 = []
        self.SFFND_INSP_DEF_TASK_FK1 = []
        self.SFSQA_INSP_DEF_DETAILS_FK1 = []
        self.SFSQA_PWP_INSP_DEF_XREF_FK3 = []
        self.SFSQA_INSP_DEF_CHG_LOG_FK1 = []
        self.SFSQA_INSP_DEF_REV_SEC_GRP_FK1 = []
        self.SFSQA_INSP_DEF_BLCK_STATUS_FK1 = []
        self.SFSQA_INSP_ORDER_INSP_DEF_FK1 = []
        self.SFSQA_INSP_ITEM_ID_FK = []
        self.SFPL_AFFECTED_OBJECTS_FK7 = []

class SFWID_USER_OVER_INSP_UNITS:
    schema = {
        "GROUP_NO": "NUMBER",
        "ORDER_ID": "STRING",
        "USERID": "STRING",
        "SERIAL_ID": "STRING",
        "LOT_ID": "STRING",
        "RANDOM_NUMBER": "STRING",
        "PLAN_ID": "STRING",
        "GROUP_COMPLETE_FLAG": "STRING",
        "GROUP_OBSOLETE_FLAG": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "GROUP_COMPLETE_NOTES": "STRING",
        "PLAN_ALTERATIONS": "NUMBER",
        "SEQUENCE_NO": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "GROUP_NO",
        "USERID",
        "ORDER_ID",
        "SERIAL_ID",
        "LOT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_USER_OVER_INSP_UNITS_FK2", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
        DbForeignKey("SFWID_USER_OVER_INSP_UNITS_FK3", ["ORDER_ID","LOT_ID","SERIAL_ID"], "SFWID_SERIAL_DESC", ["ORDER_ID","LOT_ID","SERIAL_ID"]),
        DbForeignKey("SFWID_USER_OVER_INSP_UNITS_FK1", ["USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.GROUP_NO = parse_value(self.schema, column_value_map, "GROUP_NO")
        "Group No for List of serials/lots based upon work order/process plan."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "User Id for whom Event is recorded for random OI check."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a given serial."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of a given lot."
        self.RANDOM_NUMBER = parse_value(self.schema, column_value_map, "RANDOM_NUMBER")
        "Random No(s) to choose serials/lots from specified Group No [i.e. 1;3;5]."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a given plan."
        self.GROUP_COMPLETE_FLAG = parse_value(self.schema, column_value_map, "GROUP_COMPLETE_FLAG")
        "A flag (Y/N) indicating rather the group is completed or not."
        self.GROUP_OBSOLETE_FLAG = parse_value(self.schema, column_value_map, "GROUP_OBSOLETE_FLAG")
        "A flag (Y/N) indicating rather the group is obsolete or not."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "Unique version number of a given plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "Unique revision number of a given plan."
        self.GROUP_COMPLETE_NOTES = parse_value(self.schema, column_value_map, "GROUP_COMPLETE_NOTES")
        "Group completion notes to indicate the reason for group completion."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Unique alteration number of a given plan."
        self.SEQUENCE_NO = parse_value(self.schema, column_value_map, "SEQUENCE_NO")
        "Sequence of serials/lots from specific group number."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_SERIAL_OPER_BUYOFF:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "BUYOFF_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "COMMENTS": "STRING",
        "BUYOFF_STATUS": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "UCF_SRLOPBUYOFF_VCH1": "STRING",
        "UCF_SRLOPBUYOFF_VCH2": "STRING",
        "UCF_SRLOPBUYOFF_VCH3": "STRING",
        "UCF_SRLOPBUYOFF_VCH4": "STRING",
        "UCF_SRLOPBUYOFF_VCH5": "STRING",
        "UCF_SRLOPBUYOFF_VCH6": "STRING",
        "UCF_SRLOPBUYOFF_VCH7": "STRING",
        "UCF_SRLOPBUYOFF_VCH8": "STRING",
        "UCF_SRLOPBUYOFF_VCH9": "STRING",
        "UCF_SRLOPBUYOFF_VCH10": "STRING",
        "UCF_SRLOPBUYOFF_NUM1": "NUMBER",
        "UCF_SRLOPBUYOFF_NUM2": "NUMBER",
        "UCF_SRLOPBUYOFF_NUM3": "NUMBER",
        "UCF_SRLOPBUYOFF_NUM4": "NUMBER",
        "UCF_SRLOPBUYOFF_NUM5": "NUMBER",
        "UCF_SRLOPBUYOFF_DATE1": "STRING",
        "UCF_SRLOPBUYOFF_DATE2": "STRING",
        "UCF_SRLOPBUYOFF_DATE3": "STRING",
        "UCF_SRLOPBUYOFF_DATE4": "STRING",
        "UCF_SRLOPBUYOFF_DATE5": "STRING",
        "UCF_SRLOPBUYOFF_FLAG1": "STRING",
        "UCF_SRLOPBUYOFF_FLAG2": "STRING",
        "UCF_SRLOPBUYOFF_FLAG3": "STRING",
        "UCF_SRLOPBUYOFF_FLAG4": "STRING",
        "UCF_SRLOPBUYOFF_FLAG5": "STRING",
        "UCF_SRLOPBUYOFF_VCH11": "STRING",
        "UCF_SRLOPBUYOFF_VCH12": "STRING",
        "UCF_SRLOPBUYOFF_VCH13": "STRING",
        "UCF_SRLOPBUYOFF_VCH14": "STRING",
        "UCF_SRLOPBUYOFF_VCH15": "STRING",
        "UCF_SRLOPBUYOFF_VCH255_1": "STRING",
        "UCF_SRLOPBUYOFF_VCH255_2": "STRING",
        "UCF_SRLOPBUYOFF_VCH255_3": "STRING",
        "UCF_SRLOPBUYOFF_VCH4000_1": "STRING",
        "UCF_SRLOPBUYOFF_VCH4000_2": "STRING",
        "PERCENT_COMPLETE": "NUMBER",
        "COMPLETE_QTY": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "LOT_ID",
        "SERIAL_ID",
        "BUYOFF_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_SRLOPRBO_OPRBO_FK", ["ORDER_ID","OPER_KEY","STEP_KEY","BUYOFF_ID"], "SFWID_OPER_BUYOFF", ["ORDER_ID","OPER_KEY","STEP_KEY","BUYOFF_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.BUYOFF_ID = parse_value(self.schema, column_value_map, "BUYOFF_ID")
        "Unique, system-generated identifier of the buyoff."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Additional comments."
        self.BUYOFF_STATUS = parse_value(self.schema, column_value_map, "BUYOFF_STATUS")
        "The status of the buyoff, e.g., ACCEPT, REOPEN, CANCEL, REJECT."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.UCF_SRLOPBUYOFF_VCH1 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH2 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH3 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH4 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH5 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH6 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH7 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH8 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH9 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH10 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_NUM1 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_SRLOPBUYOFF_NUM2 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_SRLOPBUYOFF_NUM3 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_SRLOPBUYOFF_NUM4 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_SRLOPBUYOFF_NUM5 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_SRLOPBUYOFF_DATE1 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SRLOPBUYOFF_DATE2 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SRLOPBUYOFF_DATE3 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_SRLOPBUYOFF_DATE4 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_SRLOPBUYOFF_DATE5 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_SRLOPBUYOFF_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRLOPBUYOFF_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRLOPBUYOFF_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRLOPBUYOFF_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRLOPBUYOFF_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRLOPBUYOFF_VCH11 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH12 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH13 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH14 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH15 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRLOPBUYOFF_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH255_1")
        self.UCF_SRLOPBUYOFF_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH255_2")
        self.UCF_SRLOPBUYOFF_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH255_3")
        self.UCF_SRLOPBUYOFF_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH4000_1")
        self.UCF_SRLOPBUYOFF_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SRLOPBUYOFF_VCH4000_2")
        self.PERCENT_COMPLETE = parse_value(self.schema, column_value_map, "PERCENT_COMPLETE")
        self.COMPLETE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_QTY")

class SFSQA_SR_TYPE_DEF:
    schema = {
        "SR_TYPE": "STRING",
        "SR_TYPE_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "SR_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_SR_TYPE_DEF_FK",
        "SFSQA_IDP_IC_SRTYPE_FK",
        "SFSQA_SR_DETAILS_FK3",
        "SFSQA_SR_DETAILS_FK4",
    ]
    def __init__(self, column_value_map):
        self.SR_TYPE = parse_value(self.schema, column_value_map, "SR_TYPE")
        self.SR_TYPE_DESC = parse_value(self.schema, column_value_map, "SR_TYPE_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFSQA_SR_TYPE_DEF_FK = []
        self.SFSQA_IDP_IC_SRTYPE_FK = []
        self.SFSQA_SR_DETAILS_FK3 = []
        self.SFSQA_SR_DETAILS_FK4 = []

class SFSQA_INSP_DEF_INSP_ITEM_TOOLS:
    schema = {
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "INSP_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
        "LAST_ACTION": "STRING",
        "COLLECTION_REQUIRED_FLAG": "STRING",
        "ALLOW_TOOL_CHANGE": "STRING",
        "CALIBRATION_REQUIRED_FLAG": "STRING",
        "TOOL_QTY": "NUMBER",
        "CALIBRATION_TYPE": "STRING",
        "CALIBRATION_FREQUENCY": "NUMBER",
        "UCF_IITOOLS_VCH1": "STRING",
        "UCF_IITOOLS_VCH2": "STRING",
        "UCF_IITOOLS_VCH3": "STRING",
        "UCF_IITOOLS_VCH4": "STRING",
        "UCF_IITOOLS_VCH5": "STRING",
        "UCF_IITOOLS_VCH6": "STRING",
        "UCF_IITOOLS_VCH7": "STRING",
        "UCF_IITOOLS_VCH8": "STRING",
        "UCF_IITOOLS_VCH9": "STRING",
        "UCF_IITOOLS_VCH10": "STRING",
        "UCF_IITOOLS_VCH11": "STRING",
        "UCF_IITOOLS_VCH12": "STRING",
        "UCF_IITOOLS_VCH13": "STRING",
        "UCF_IITOOLS_VCH14": "STRING",
        "UCF_IITOOLS_VCH15": "STRING",
        "UCF_IITOOLS_NUM1": "NUMBER",
        "UCF_IITOOLS_NUM2": "NUMBER",
        "UCF_IITOOLS_NUM3": "NUMBER",
        "UCF_IITOOLS_NUM4": "NUMBER",
        "UCF_IITOOLS_NUM5": "NUMBER",
        "UCF_IITOOLS_DATE1": "STRING",
        "UCF_IITOOLS_DATE2": "STRING",
        "UCF_IITOOLS_DATE3": "STRING",
        "UCF_IITOOLS_DATE4": "STRING",
        "UCF_IITOOLS_DATE5": "STRING",
        "UCF_IITOOLS_FLAG1": "STRING",
        "UCF_IITOOLS_FLAG2": "STRING",
        "UCF_IITOOLS_FLAG3": "STRING",
        "UCF_IITOOLS_FLAG4": "STRING",
        "UCF_IITOOLS_FLAG5": "STRING",
        "TOOL_NOTES": "STRING",
        "UCF_IITOOLS_VCH255_1": "STRING",
        "UCF_IITOOLS_VCH255_2": "STRING",
        "UCF_IITOOLS_VCH255_3": "STRING",
        "UCF_IITOOLS_VCH4000_1": "STRING",
        "UCF_IITOOLS_VCH4000_2": "STRING",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "OWNER_CODE",
        "INSP_DEF_REV",
        "INSP_ITEM_ID",
        "TOOL_NO",
        "TOOL_CHG",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_IDII_TOOLS_IDFK", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV","INSP_ITEM_ID"], "SFSQA_INSP_DEF_INSP_ITEMS", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV","INSP_ITEM_ID"]),
        DbForeignKey("SFSQA_INSP_ITEM_TOOLS_FK1", ["TOOL_NO","TOOL_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The change number, secondary identifier, of the tool."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.COLLECTION_REQUIRED_FLAG = parse_value(self.schema, column_value_map, "COLLECTION_REQUIRED_FLAG")
        self.ALLOW_TOOL_CHANGE = parse_value(self.schema, column_value_map, "ALLOW_TOOL_CHANGE")
        self.CALIBRATION_REQUIRED_FLAG = parse_value(self.schema, column_value_map, "CALIBRATION_REQUIRED_FLAG")
        self.TOOL_QTY = parse_value(self.schema, column_value_map, "TOOL_QTY")
        self.CALIBRATION_TYPE = parse_value(self.schema, column_value_map, "CALIBRATION_TYPE")
        self.CALIBRATION_FREQUENCY = parse_value(self.schema, column_value_map, "CALIBRATION_FREQUENCY")
        self.UCF_IITOOLS_VCH1 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH1")
        self.UCF_IITOOLS_VCH2 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH2")
        self.UCF_IITOOLS_VCH3 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH3")
        self.UCF_IITOOLS_VCH4 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH4")
        self.UCF_IITOOLS_VCH5 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH5")
        self.UCF_IITOOLS_VCH6 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH6")
        self.UCF_IITOOLS_VCH7 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH7")
        self.UCF_IITOOLS_VCH8 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH8")
        self.UCF_IITOOLS_VCH9 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH9")
        self.UCF_IITOOLS_VCH10 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH10")
        self.UCF_IITOOLS_VCH11 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH11")
        self.UCF_IITOOLS_VCH12 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH12")
        self.UCF_IITOOLS_VCH13 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH13")
        self.UCF_IITOOLS_VCH14 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH14")
        self.UCF_IITOOLS_VCH15 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH15")
        self.UCF_IITOOLS_NUM1 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_NUM1")
        self.UCF_IITOOLS_NUM2 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_NUM2")
        self.UCF_IITOOLS_NUM3 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_NUM3")
        self.UCF_IITOOLS_NUM4 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_NUM4")
        self.UCF_IITOOLS_NUM5 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_NUM5")
        self.UCF_IITOOLS_DATE1 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_DATE1")
        self.UCF_IITOOLS_DATE2 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_DATE2")
        self.UCF_IITOOLS_DATE3 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_DATE3")
        self.UCF_IITOOLS_DATE4 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_DATE4")
        self.UCF_IITOOLS_DATE5 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_DATE5")
        self.UCF_IITOOLS_FLAG1 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_FLAG1")
        self.UCF_IITOOLS_FLAG2 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_FLAG2")
        self.UCF_IITOOLS_FLAG3 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_FLAG3")
        self.UCF_IITOOLS_FLAG4 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_FLAG4")
        self.UCF_IITOOLS_FLAG5 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_FLAG5")
        self.TOOL_NOTES = parse_value(self.schema, column_value_map, "TOOL_NOTES")
        self.UCF_IITOOLS_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH255_1")
        self.UCF_IITOOLS_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH255_2")
        self.UCF_IITOOLS_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH255_3")
        self.UCF_IITOOLS_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH4000_1")
        self.UCF_IITOOLS_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_IITOOLS_VCH4000_2")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")

class SFQA_DISC_DEFECT:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "DEFECT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DEFECT_COUNT": "NUMBER",
        "PROCESS_TYPE": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "DEFECT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_DEFECT_DISC_ITEM_FK", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
        DbForeignKey("SFQA_DISC_DEFECT_FK1", ["PROCESS_TYPE"], "SFFND_PROCESS_TYPE_DEF", ["PROCESS_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.DEFECT_TYPE = parse_value(self.schema, column_value_map, "DEFECT_TYPE")
        "Type or classification of defect."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DEFECT_COUNT = parse_value(self.schema, column_value_map, "DEFECT_COUNT")
        "Number of defects associated with a given discrepancy item."
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        "Type or classification of processType or classification of process."

class SFCORE_UDV_FOLDER_ORG:
    schema = {
        "FOLDER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "FOLDER_TYPE": "STRING",
        "FOLDER_TAG": "STRING",
        "FOLDER_DESC": "STRING",
        "PARENT_FOLDER_ID": "STRING",
        "LOAD_REF": "STRING",
        "PARENT_FOLDER_TYPE": "STRING",
    }
    primary_key_columns = [
        "FOLDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_UDVFLDORG_UDVFLDORG_FK", ["PARENT_FOLDER_ID"], "SFCORE_UDV_FOLDER_ORG", ["FOLDER_ID"]),
    ]
    refs = [
        "SFCORE_UDVFLDR_FLDRORG_FK",
        "SFCORE_UDVFLDORG_UDVFLDORG_FK",
    ]
    def __init__(self, column_value_map):
        self.FOLDER_ID = parse_value(self.schema, column_value_map, "FOLDER_ID")
        "The unique system generated identifier of a UDV folder."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.FOLDER_TYPE = parse_value(self.schema, column_value_map, "FOLDER_TYPE")
        "The purpose/intent of the folder."
        self.FOLDER_TAG = parse_value(self.schema, column_value_map, "FOLDER_TAG")
        "Tag of the folder. User provided unique identifier/name of the folder; can be NULL and can be modified."
        self.FOLDER_DESC = parse_value(self.schema, column_value_map, "FOLDER_DESC")
        "A detailed description of the folder."
        self.PARENT_FOLDER_ID = parse_value(self.schema, column_value_map, "PARENT_FOLDER_ID")
        "Identifier the folder's parent folder."
        self.LOAD_REF = parse_value(self.schema, column_value_map, "LOAD_REF")
        "Name of the data source when data in the database record has been loaded from another system . Not in use."
        self.PARENT_FOLDER_TYPE = parse_value(self.schema, column_value_map, "PARENT_FOLDER_TYPE")
        "The purpose/intent of the parent folder."
        self.SFCORE_UDVFLDR_FLDRORG_FK = []
        self.SFCORE_UDVFLDORG_UDVFLDORG_FK = []

class SFPL_PLAN_INSP_STEP_LINK:
    schema = {
        "PLAN_INSP_STEP_ID": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_NO": "STRING",
        "INSP_PLAN_ID": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "INSP_STEP_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PLAN_INSP_STEP_ID",
        "PLAN_ID",
        "PLAN_VERSION",
        "PLAN_REVISION",
        "PLAN_ALTERATIONS",
        "OPER_KEY",
        "STEP_KEY",
        "INSP_PLAN_ID",
        "INSP_PLAN_REV",
        "INSP_STEP_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLAN_INSP_STEP_LINK_FK1", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS","OPER_KEY","STEP_KEY"], "SFPL_STEP_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFPL_PLAN_INSP_STEP_LINK_FK2", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID"], "SFSQA_INSP_PLAN_INSP_STEPS", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_INSP_STEP_ID = parse_value(self.schema, column_value_map, "PLAN_INSP_STEP_ID")
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFQA_CAREQ_LAST_FILTER_CONTEXT:
    schema = {
        "CONTEXT_ID": "STRING",
        "CA_REQUEST_ID": "STRING",
        "USERID": "STRING",
        "LAST_FILTER": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CONTEXT_ID",
        "CA_REQUEST_ID",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CAREQ_LAST_FILTER_CONT_F1", ["CA_REQUEST_ID"], "SFQA_CA_REQUEST", ["CA_REQUEST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONTEXT_ID = parse_value(self.schema, column_value_map, "CONTEXT_ID")
        "Value of variable @ContextId. Usually it contains [select source name - select SQL ID]."
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action Request."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.LAST_FILTER = parse_value(self.schema, column_value_map, "LAST_FILTER")
        "Value of last filter applied on the grid."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_DISC_SYMPTOM_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "SYMPTOM_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.SYMPTOM_TYPE = parse_value(self.schema, column_value_map, "SYMPTOM_TYPE")
        "Type or classification of symptom associated with the discrepancy."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_ORDER_LINK_ALT:
    schema = {
        "ORDER_LINK_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "LINK_ID": "STRING",
        "LINK_TYPE": "STRING",
        "PRED_NODE_ROW": "NUMBER",
        "PRED_NODE_COLUMN": "NUMBER",
        "SUCC_NODE_ROW": "NUMBER",
        "SUCC_NODE_COLUMN": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "PRED_NODE_ID": "STRING",
        "SUCC_NODE_ID": "STRING",
        "LINK_TITLE": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_LINK_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_LINK_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_LINK_ALT = parse_value(self.schema, column_value_map, "ORDER_LINK_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.LINK_ID = parse_value(self.schema, column_value_map, "LINK_ID")
        "The unique system-generated identifier of a link in an Operation Flow Diagram."
        self.LINK_TYPE = parse_value(self.schema, column_value_map, "LINK_TYPE")
        "Type or classification of link in the associated Operation Flow diagram."
        self.PRED_NODE_ROW = parse_value(self.schema, column_value_map, "PRED_NODE_ROW")
        "The number of the grid row containing the predecessor (preceding) node. In combination with PRED_NODE_COLUMN, shows starting position of link."
        self.PRED_NODE_COLUMN = parse_value(self.schema, column_value_map, "PRED_NODE_COLUMN")
        "The number of the grid column containing the predecessor (preceding) node. In combination with PRED_NODE_ROW, shows starting position of link."
        self.SUCC_NODE_ROW = parse_value(self.schema, column_value_map, "SUCC_NODE_ROW")
        "The number of the grid row containing the successor (following) node. In combination with SUCC_NODE_COLUMN, shows ending position of link."
        self.SUCC_NODE_COLUMN = parse_value(self.schema, column_value_map, "SUCC_NODE_COLUMN")
        "The number of the grid column containing the successor (following) node. In combination with SUCC_NODE_ROW, shows ending position of link."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PRED_NODE_ID = parse_value(self.schema, column_value_map, "PRED_NODE_ID")
        "The unique system-generated identifier of the predecessor node in the Operation Flow Diagram."
        self.SUCC_NODE_ID = parse_value(self.schema, column_value_map, "SUCC_NODE_ID")
        "The unique system-generated identifier of the successor node in the Operation Flow Diagram."
        self.LINK_TITLE = parse_value(self.schema, column_value_map, "LINK_TITLE")
        "A name/short description of the link."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."

class SFWID_USER_OPER_LAST_POS:
    schema = {
        "USERID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG_TYPE": "STRING",
        "REF_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "USERID",
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_USER_OPER_LAST_POS_FK1", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_USER_OPER_LAST_POS_FK2", ["USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "User performing Walk-Through."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.TAG_TYPE = parse_value(self.schema, column_value_map, "TAG_TYPE")
        "Tag Type."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFRPT_OPERATION:
    schema = {
        "SNAPSHOT_ID": "NUMBER",
        "PART_NO": "STRING",
        "OPER_NO": "STRING",
        "WORK_LOC": "STRING",
        "WORK_DEPT": "STRING",
        "WORK_CENTER": "STRING",
        "PROJECT": "STRING",
        "PROGRAM": "STRING",
        "BACKLOG": "NUMBER",
        "PRODUCTIVITY": "NUMBER",
        "CYCLE_TIME_RATIO": "NUMBER",
        "SCHED_START_PERFORMANCE": "NUMBER",
        "SCHED_FINISH_PERFORMANCE": "NUMBER",
        "OPER_NUMBER": "NUMBER",
    }
    primary_key_columns = [
        "SNAPSHOT_ID",
        "PART_NO",
        "OPER_NO",
        "WORK_LOC",
        "WORK_DEPT",
        "WORK_CENTER",
        "PROJECT",
        "PROGRAM",
    ]
    foreign_keys = [
        DbForeignKey("SFRPT_OPERATION_SNAPSHOT_FK", ["SNAPSHOT_ID"], "SFRPT_SNAPSHOT", ["SNAPSHOT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SNAPSHOT_ID = parse_value(self.schema, column_value_map, "SNAPSHOT_ID")
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        self.WORK_LOC = parse_value(self.schema, column_value_map, "WORK_LOC")
        self.WORK_DEPT = parse_value(self.schema, column_value_map, "WORK_DEPT")
        self.WORK_CENTER = parse_value(self.schema, column_value_map, "WORK_CENTER")
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        self.BACKLOG = parse_value(self.schema, column_value_map, "BACKLOG")
        self.PRODUCTIVITY = parse_value(self.schema, column_value_map, "PRODUCTIVITY")
        self.CYCLE_TIME_RATIO = parse_value(self.schema, column_value_map, "CYCLE_TIME_RATIO")
        self.SCHED_START_PERFORMANCE = parse_value(self.schema, column_value_map, "SCHED_START_PERFORMANCE")
        self.SCHED_FINISH_PERFORMANCE = parse_value(self.schema, column_value_map, "SCHED_FINISH_PERFORMANCE")
        self.OPER_NUMBER = parse_value(self.schema, column_value_map, "OPER_NUMBER")

class SFFND_LICENSE_USERS:
    schema = {
        "LICENSE_NAME": "STRING",
        "USERID": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH1": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH2": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH3": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH4": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH5": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH6": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH7": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH8": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH9": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH10": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH11": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH12": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH13": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH14": "STRING",
        "UCF_SFFND_LICENSE_USER_VCH15": "STRING",
        "UCF_SFFND_LICENSE_USER_NUM1": "NUMBER",
        "UCF_SFFND_LICENSE_USER_NUM2": "NUMBER",
        "UCF_SFFND_LICENSE_USER_NUM3": "NUMBER",
        "UCF_SFFND_LICENSE_USER_NUM4": "NUMBER",
        "UCF_SFFND_LICENSE_USER_NUM5": "NUMBER",
        "UCF_SFFND_LICENSE_USER_DATE1": "STRING",
        "UCF_SFFND_LICENSE_USER_DATE2": "STRING",
        "UCF_SFFND_LICENSE_USER_DATE3": "STRING",
        "UCF_SFFND_LICENSE_USER_DATE4": "STRING",
        "UCF_SFFND_LICENSE_USER_DATE5": "STRING",
        "UCF_SFFND_LICENSE_USER_FLAG1": "STRING",
        "UCF_SFFND_LICENSE_USER_FLAG2": "STRING",
        "UCF_SFFND_LICENSE_USER_FLAG3": "STRING",
        "UCF_SFFND_LICENSE_USER_FLAG4": "STRING",
        "UCF_SFFND_LICENSE_USER_FLAG5": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "LICENSE_CHECK": "STRING",
    }
    primary_key_columns = [
        "LICENSE_NAME",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_LICENSE_USERS_FK2", ["USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.LICENSE_NAME = parse_value(self.schema, column_value_map, "LICENSE_NAME")
        "The unique solumina license name."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.UCF_SFFND_LICENSE_USER_VCH1 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH2 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH3 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH4 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH5 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH6 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH7 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH8 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH9 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH10 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH11 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH12 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH13 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH14 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_VCH15 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFFND_LICENSE_USER_NUM1 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_SFFND_LICENSE_USER_NUM2 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_SFFND_LICENSE_USER_NUM3 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_SFFND_LICENSE_USER_NUM4 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_SFFND_LICENSE_USER_NUM5 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_SFFND_LICENSE_USER_DATE1 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SFFND_LICENSE_USER_DATE2 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SFFND_LICENSE_USER_DATE3 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_SFFND_LICENSE_USER_DATE4 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_SFFND_LICENSE_USER_DATE5 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_SFFND_LICENSE_USER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SFFND_LICENSE_USER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SFFND_LICENSE_USER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SFFND_LICENSE_USER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SFFND_LICENSE_USER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SFFND_LICENSE_USER_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.LICENSE_CHECK = parse_value(self.schema, column_value_map, "LICENSE_CHECK")
        "Contains user license information."

class SFWID_ORDER_DESC_SEC_GRP:
    schema = {
        "ORDER_NO": "STRING",
        "SECURITY_GROUP": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ORDER_NO",
        "SECURITY_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_SEC_GRP_FK1", ["SECURITY_GROUP"], "SFFND_SECURITY_GROUP_DEF", ["SECURITY_GROUP"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class MOTT_TIME_MATERIAL:
    schema = {
        "MATERIAL_ID": "STRING",
        "ITEM_ID": "STRING",
        "SUBLOCATION": "STRING",
        "PARENT_MATERIAL_ID": "STRING",
        "UOM": "STRING",
        "FREEZER_ID": "STRING",
        "PROGRAM": "STRING",
        "TOTAL_ALLOWABLE_OUT_TIME": "NUMBER",
        "EXPIRATION_DATE": "STRING",
        "STATUS": "STRING",
        "TOTAL_OUT_TIME": "NUMBER",
        "START_TIME": "NUMBER",
        "SUPPLIER_ID": "STRING",
        "MATERIAL_TYPE_ID": "STRING",
        "CLASSIFIED": "STRING",
        "QUANTITY": "NUMBER",
        "BARCODE_GENERATED_FIELDS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SCRAP_REASON_ID": "STRING",
        "CONSUMED": "STRING",
    }
    primary_key_columns = [
        "MATERIAL_ID",
    ]
    foreign_keys = [
        DbForeignKey("MOTT_TIME_MATERIAL_FK3", ["PARENT_MATERIAL_ID"], "MOTT_TIME_MATERIAL", ["MATERIAL_ID"]),
        DbForeignKey("MOTT_TIME_MATERIAL_FK1", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("MOTT_TIME_MATERIAL_FK5", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("MOTT_TIME_MATERIAL_FK2", ["UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("MOTT_TIME_MATERIAL_FK6", ["SUPPLIER_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("MOTT_TIME_MATERIAL_FK7", ["MATERIAL_TYPE_ID"], "MOTT_MATERIAL_TYPE", ["MATERIAL_TYPE_ID"]),
        DbForeignKey("MOTT_TIME_MATERIAL_FK4", ["FREEZER_ID"], "MOTT_FREEZER", ["FREEZER_ID"]),
        DbForeignKey("MOTT_TIME_MATERIAL_FK8", ["SCRAP_REASON_ID"], "MOTT_SCRAP_REASONS_DEF", ["SCRAP_REASON_ID"]),
    ]
    refs = [
        "SFPL_STEP_MATERIAL_FK02",
        "SFWID_ORDER_ITEM_ISSUED_FK2",
        "SFPL_MATERIAL_NOTES_TEXT_FK1",
        "MOTT_MATERIAL_SERIAL_FK2",
        "SFWID_OPER_MATERIAL_FK2",
        "MOTT_MATERIAL_LOT_FK1",
        "MOTT_TIME_MATERIAL_FK3",
        "SFPL_MATERIAL_NOTES_MM_OBJECTS_FK1",
        "MOTT_MATERIAL_BARCODES_FK1",
    ]
    def __init__(self, column_value_map):
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        "Primary Key For Time sensitive material"
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Id of the Master Item. (Foreign Key) SFPL_ITEM_DESC_MASTER_ALL"
        self.SUBLOCATION = parse_value(self.schema, column_value_map, "SUBLOCATION")
        "Sublocation Description of the Material."
        self.PARENT_MATERIAL_ID = parse_value(self.schema, column_value_map, "PARENT_MATERIAL_ID")
        "Parent Item ID Referencing another Material in this Relation."
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Id of the Unit of measure."
        self.FREEZER_ID = parse_value(self.schema, column_value_map, "FREEZER_ID")
        "Id of the Freezer which holds the material (FK)"
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The Program Name of the Material"
        self.TOTAL_ALLOWABLE_OUT_TIME = parse_value(self.schema, column_value_map, "TOTAL_ALLOWABLE_OUT_TIME")
        "Unix Style timestamp"
        self.EXPIRATION_DATE = parse_value(self.schema, column_value_map, "EXPIRATION_DATE")
        "Date of expiration of the Material Date e.g. (DD-MM-YY)"
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Status of the Material"
        self.TOTAL_OUT_TIME = parse_value(self.schema, column_value_map, "TOTAL_OUT_TIME")
        "Seconds"
        self.START_TIME = parse_value(self.schema, column_value_map, "START_TIME")
        "Unix Style timestamp"
        self.SUPPLIER_ID = parse_value(self.schema, column_value_map, "SUPPLIER_ID")
        "Id of the Material Supplier (Vendor)"
        self.MATERIAL_TYPE_ID = parse_value(self.schema, column_value_map, "MATERIAL_TYPE_ID")
        "The type Id of the Material"
        self.CLASSIFIED = parse_value(self.schema, column_value_map, "CLASSIFIED")
        "Boolean Flag indicating the Classified state of the Material"
        self.QUANTITY = parse_value(self.schema, column_value_map, "QUANTITY")
        "Numeric type with 2 digits precision indicating the Quantity"
        self.BARCODE_GENERATED_FIELDS = parse_value(self.schema, column_value_map, "BARCODE_GENERATED_FIELDS")
        "Contains which fields where selected for the Material  Barcode Generation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the user"
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was modified."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation"
        self.SCRAP_REASON_ID = parse_value(self.schema, column_value_map, "SCRAP_REASON_ID")
        self.CONSUMED = parse_value(self.schema, column_value_map, "CONSUMED")
        self.SFPL_STEP_MATERIAL_FK02 = []
        self.SFWID_ORDER_ITEM_ISSUED_FK2 = []
        self.SFPL_MATERIAL_NOTES_TEXT_FK1 = []
        self.MOTT_MATERIAL_SERIAL_FK2 = []
        self.SFWID_OPER_MATERIAL_FK2 = []
        self.MOTT_MATERIAL_LOT_FK1 = []
        self.MOTT_TIME_MATERIAL_FK3 = []
        self.SFPL_MATERIAL_NOTES_MM_OBJECTS_FK1 = []
        self.MOTT_MATERIAL_BARCODES_FK1 = []

class SFQA_DI_LAST_FILTER_CONTEXT:
    schema = {
        "CONTEXT_ID": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "USERID": "STRING",
        "LAST_FILTER": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CONTEXT_ID",
        "DISC_ID",
        "DISC_LINE_NO",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DI_LAST_FILTER_CONTEXT_F1", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONTEXT_ID = parse_value(self.schema, column_value_map, "CONTEXT_ID")
        "Value of variable @ContextId. Usually it contains [select source name - select SQL ID]."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "Identifier of the discrepancy, including line number."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "Identifier of the discrepancy, including line number."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.LAST_FILTER = parse_value(self.schema, column_value_map, "LAST_FILTER")
        "Value of last filter applied on the grid."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_DISC_TEXT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."

class SFWID_ORDER_INSP_STEP_LINK:
    schema = {
        "ORDER_INSP_STEP_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_NO": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_NO": "STRING",
        "STEP_KEY": "NUMBER",
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "INSP_PLAN_ID": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ORDER_INSP_STEP_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_INSP_STEP_LINK_FK4", ["INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_INSP_STEP_LINK_FK3", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_ORDER_INSP_STEP_LINK_FK1", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
        DbForeignKey("SFWID_ORDER_INSP_STEP_LINK_FK2", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID"], "SFSQA_INSP_PLAN_INSP_STEPS", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_INSP_STEP_ID = parse_value(self.schema, column_value_map, "ORDER_INSP_STEP_ID")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFSQA_PO_LINE_SERIALS:
    schema = {
        "PO_ID": "STRING",
        "PO_LINE_ITEM": "STRING",
        "SERIAL_NO": "STRING",
        "LOT_NO": "STRING",
        "LOT_QTY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PO_ID",
        "PO_LINE_ITEM",
        "SERIAL_NO",
        "LOT_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_PO_LINE_SERIALS_FK1", ["PO_ID","PO_LINE_ITEM"], "SFSQA_PO_LINE", ["PO_ID","PO_LINE_ITEM"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PO_ID = parse_value(self.schema, column_value_map, "PO_ID")
        self.PO_LINE_ITEM = parse_value(self.schema, column_value_map, "PO_LINE_ITEM")
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        self.LOT_QTY = parse_value(self.schema, column_value_map, "LOT_QTY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFQA_CAUSE_TYPE_DEF:
    schema = {
        "PROCESS_TYPE": "STRING",
        "CAUSE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "CAUSE_DESC": "STRING",
        "UCF_CAUSE_TYPE_VCH1": "STRING",
        "UCF_CAUSE_TYPE_FLAG1": "STRING",
        "UCF_CAUSE_TYPE_FLAG2": "STRING",
        "APPROVED_FLAG": "STRING",
        "UCF_CAUSE_TYPE_VCH2": "STRING",
        "UCF_CAUSE_TYPE_VCH3": "STRING",
        "UCF_CAUSE_TYPE_VCH4": "STRING",
        "UCF_CAUSE_TYPE_VCH5": "STRING",
        "UCF_CAUSE_TYPE_VCH6": "STRING",
        "UCF_CAUSE_TYPE_VCH7": "STRING",
        "UCF_CAUSE_TYPE_VCH8": "STRING",
        "UCF_CAUSE_TYPE_VCH9": "STRING",
        "UCF_CAUSE_TYPE_VCH10": "STRING",
        "UCF_CAUSE_TYPE_VCH11": "STRING",
        "UCF_CAUSE_TYPE_VCH12": "STRING",
        "UCF_CAUSE_TYPE_VCH13": "STRING",
        "UCF_CAUSE_TYPE_VCH14": "STRING",
        "UCF_CAUSE_TYPE_VCH15": "STRING",
        "UCF_CAUSE_TYPE_NUM1": "NUMBER",
        "UCF_CAUSE_TYPE_NUM2": "NUMBER",
        "UCF_CAUSE_TYPE_NUM3": "NUMBER",
        "UCF_CAUSE_TYPE_NUM4": "NUMBER",
        "UCF_CAUSE_TYPE_NUM5": "NUMBER",
        "UCF_CAUSE_TYPE_DATE1": "STRING",
        "UCF_CAUSE_TYPE_DATE2": "STRING",
        "UCF_CAUSE_TYPE_DATE3": "STRING",
        "UCF_CAUSE_TYPE_DATE4": "STRING",
        "UCF_CAUSE_TYPE_DATE5": "STRING",
        "UCF_CAUSE_TYPE_FLAG3": "STRING",
        "UCF_CAUSE_TYPE_FLAG4": "STRING",
        "UCF_CAUSE_TYPE_FLAG5": "STRING",
        "UCF_CAUSE_TYPE_VCH255_1": "STRING",
        "UCF_CAUSE_TYPE_VCH255_2": "STRING",
        "UCF_CAUSE_TYPE_VCH255_3": "STRING",
        "UCF_CAUSE_TYPE_VCH4000_1": "STRING",
        "UCF_CAUSE_TYPE_VCH4000_2": "STRING",
        "RESP_RESOURCE_TYPE": "STRING",
    }
    primary_key_columns = [
        "PROCESS_TYPE",
        "CAUSE_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CAUSE_PROCESS_FK", ["PROCESS_TYPE"], "SFFND_PROCESS_TYPE_DEF", ["PROCESS_TYPE"]),
        DbForeignKey("SFQA_CAUSE_TYPE_DEF_FK1", ["RESP_RESOURCE_TYPE"], "SFQA_RESP_RESOURCE_TYPE_DEF", ["RESP_RESOURCE_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        "Type or classification of the associated manufacturing process."
        self.CAUSE_TYPE = parse_value(self.schema, column_value_map, "CAUSE_TYPE")
        "Type or classification of cause/origin leading to a discrepancy."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.CAUSE_DESC = parse_value(self.schema, column_value_map, "CAUSE_DESC")
        "A description of the discrepancy cause."
        self.UCF_CAUSE_TYPE_VCH1 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_CAUSE_TYPE_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.APPROVED_FLAG = parse_value(self.schema, column_value_map, "APPROVED_FLAG")
        self.UCF_CAUSE_TYPE_VCH2 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_VCH3 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_VCH4 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_VCH5 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_VCH6 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_VCH7 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_VCH8 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_VCH9 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_VCH10 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_VCH11 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_VCH12 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_VCH13 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_VCH14 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_VCH15 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_CAUSE_TYPE_NUM1 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CAUSE_TYPE_NUM2 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_CAUSE_TYPE_NUM3 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CAUSE_TYPE_NUM4 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_CAUSE_TYPE_NUM5 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_CAUSE_TYPE_DATE1 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CAUSE_TYPE_DATE2 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CAUSE_TYPE_DATE3 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_CAUSE_TYPE_DATE4 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_CAUSE_TYPE_DATE5 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_CAUSE_TYPE_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CAUSE_TYPE_FLAG4 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CAUSE_TYPE_FLAG5 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CAUSE_TYPE_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CAUSE_TYPE_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CAUSE_TYPE_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CAUSE_TYPE_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_CAUSE_TYPE_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_CAUSE_TYPE_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.RESP_RESOURCE_TYPE = parse_value(self.schema, column_value_map, "RESP_RESOURCE_TYPE")
        "Type of resource of cause/origin leading to a discrepancy. Possible values are Part, Tool, Machine, Facilities, Skill, Process, System, and Other."

class SFCORE_REPORT_PARAMS_TEMP:
    schema = {
        "REQUEST_ID": "STRING",
        "REPORT_ID": "STRING",
        "STATUS": "STRING",
        "TIME_STAMP": "DATE",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
        "PARAMETERS": "STRING",
    }
    primary_key_columns = [
        "REQUEST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFCORE_REPORT_TEMP_FK",
    ]
    def __init__(self, column_value_map):
        self.REQUEST_ID = parse_value(self.schema, column_value_map, "REQUEST_ID")
        "System generated unique identifier for a given request."
        self.REPORT_ID = parse_value(self.schema, column_value_map, "REPORT_ID")
        "System generated unique identifier for a given report."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The status of the disposition/rework task. For example: IN PROCESS, DISPOSITIONED, or COMPLETE."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PARAMETERS = parse_value(self.schema, column_value_map, "PARAMETERS")
        "Report parameters in a delimited list."
        self.SFCORE_REPORT_TEMP_FK = []

class SFWID_SERIAL_OPER_DAT_COL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "DAT_COL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "DCVALUE": "STRING",
        "COMMENTS": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "UCF_SRL_OPER_DC_VCH1": "STRING",
        "UCF_SRL_OPER_DC_VCH2": "STRING",
        "UCF_SRL_OPER_DC_VCH3": "STRING",
        "UCF_SRL_OPER_DC_VCH4": "STRING",
        "UCF_SRL_OPER_DC_VCH5": "STRING",
        "UCF_SRL_OPER_DC_FLAG1": "STRING",
        "UCF_SRL_OPER_DC_FLAG2": "STRING",
        "UCF_SRL_OPER_DC_NUM1": "NUMBER",
        "UCF_SRL_OPER_DC_NUM2": "NUMBER",
        "XBAR_CPU_VALUE": "NUMBER",
        "XBAR_CPL_VALUE": "NUMBER",
        "XBAR_CPK_INDEX": "NUMBER",
        "XBAR_EST_SIGMA_VALUE": "NUMBER",
        "DP_SUBGROUP_SIZE": "NUMBER",
        "OOC_CAUSE_FLAG": "STRING",
        "OOC_REASON_NUM": "NUMBER",
        "OUTLIER_FLAG": "STRING",
        "UCF_SRL_OPER_DC_VCH6": "STRING",
        "UCF_SRL_OPER_DC_VCH7": "STRING",
        "UCF_SRL_OPER_DC_VCH8": "STRING",
        "UCF_SRL_OPER_DC_VCH9": "STRING",
        "UCF_SRL_OPER_DC_VCH10": "STRING",
        "UCF_SRL_OPER_DC_VCH11": "STRING",
        "UCF_SRL_OPER_DC_VCH12": "STRING",
        "UCF_SRL_OPER_DC_VCH13": "STRING",
        "UCF_SRL_OPER_DC_VCH14": "STRING",
        "UCF_SRL_OPER_DC_VCH15": "STRING",
        "UCF_SRL_OPER_DC_NUM3": "NUMBER",
        "UCF_SRL_OPER_DC_NUM4": "NUMBER",
        "UCF_SRL_OPER_DC_NUM5": "NUMBER",
        "UCF_SRL_OPER_DC_FLAG3": "STRING",
        "UCF_SRL_OPER_DC_FLAG4": "STRING",
        "UCF_SRL_OPER_DC_FLAG5": "STRING",
        "UCF_SRL_OPER_DC_DATE1": "STRING",
        "UCF_SRL_OPER_DC_DATE2": "STRING",
        "UCF_SRL_OPER_DC_DATE3": "STRING",
        "UCF_SRL_OPER_DC_DATE4": "STRING",
        "UCF_SRL_OPER_DC_DATE5": "STRING",
        "UCF_SRL_OPER_DC_VCH255_1": "STRING",
        "UCF_SRL_OPER_DC_VCH255_2": "STRING",
        "UCF_SRL_OPER_DC_VCH255_3": "STRING",
        "UCF_SRL_OPER_DC_VCH4000_1": "STRING",
        "UCF_SRL_OPER_DC_VCH4000_2": "STRING",
        "MACHINE_ID": "STRING",
        "MACHINE_NO": "STRING",
        "OVER_INSPECTION": "STRING",
        "OVER_INSP_UPDT_USERID": "STRING",
        "OVER_INSP_TIME_STAMP": "STRING",
        "HOLD_ID": "STRING",
        "OVER_INSP_COMMENTS": "STRING",
        "EVENT_NO": "NUMBER",
        "COMPLETE_QTY": "NUMBER",
        "DAT_COL_STATUS": "STRING",
        "TEMPLATE_FILE_ID": "STRING",
        "MESSAGE_SENT": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        "Unique, system-generated identifier of the data collection."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DCVALUE = parse_value(self.schema, column_value_map, "DCVALUE")
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Additional comments."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.UCF_SRL_OPER_DC_VCH1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRL_OPER_DC_VCH2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRL_OPER_DC_VCH3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRL_OPER_DC_VCH4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRL_OPER_DC_VCH5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRL_OPER_DC_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRL_OPER_DC_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRL_OPER_DC_NUM1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_SRL_OPER_DC_NUM2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_NUM2")
        "User-configurable field for NUM data type."
        self.XBAR_CPU_VALUE = parse_value(self.schema, column_value_map, "XBAR_CPU_VALUE")
        self.XBAR_CPL_VALUE = parse_value(self.schema, column_value_map, "XBAR_CPL_VALUE")
        self.XBAR_CPK_INDEX = parse_value(self.schema, column_value_map, "XBAR_CPK_INDEX")
        self.XBAR_EST_SIGMA_VALUE = parse_value(self.schema, column_value_map, "XBAR_EST_SIGMA_VALUE")
        self.DP_SUBGROUP_SIZE = parse_value(self.schema, column_value_map, "DP_SUBGROUP_SIZE")
        self.OOC_CAUSE_FLAG = parse_value(self.schema, column_value_map, "OOC_CAUSE_FLAG")
        self.OOC_REASON_NUM = parse_value(self.schema, column_value_map, "OOC_REASON_NUM")
        self.OUTLIER_FLAG = parse_value(self.schema, column_value_map, "OUTLIER_FLAG")
        self.UCF_SRL_OPER_DC_VCH6 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH6")
        self.UCF_SRL_OPER_DC_VCH7 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH7")
        self.UCF_SRL_OPER_DC_VCH8 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH8")
        self.UCF_SRL_OPER_DC_VCH9 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH9")
        self.UCF_SRL_OPER_DC_VCH10 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH10")
        self.UCF_SRL_OPER_DC_VCH11 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH11")
        self.UCF_SRL_OPER_DC_VCH12 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH12")
        self.UCF_SRL_OPER_DC_VCH13 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH13")
        self.UCF_SRL_OPER_DC_VCH14 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH14")
        self.UCF_SRL_OPER_DC_VCH15 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH15")
        self.UCF_SRL_OPER_DC_NUM3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_NUM3")
        self.UCF_SRL_OPER_DC_NUM4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_NUM4")
        self.UCF_SRL_OPER_DC_NUM5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_NUM5")
        self.UCF_SRL_OPER_DC_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_FLAG3")
        self.UCF_SRL_OPER_DC_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_FLAG4")
        self.UCF_SRL_OPER_DC_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_FLAG5")
        self.UCF_SRL_OPER_DC_DATE1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_DATE1")
        self.UCF_SRL_OPER_DC_DATE2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_DATE2")
        self.UCF_SRL_OPER_DC_DATE3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_DATE3")
        self.UCF_SRL_OPER_DC_DATE4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_DATE4")
        self.UCF_SRL_OPER_DC_DATE5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_DATE5")
        self.UCF_SRL_OPER_DC_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH255_1")
        self.UCF_SRL_OPER_DC_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH255_2")
        self.UCF_SRL_OPER_DC_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH255_3")
        self.UCF_SRL_OPER_DC_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH4000_1")
        self.UCF_SRL_OPER_DC_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH4000_2")
        self.MACHINE_ID = parse_value(self.schema, column_value_map, "MACHINE_ID")
        self.MACHINE_NO = parse_value(self.schema, column_value_map, "MACHINE_NO")
        self.OVER_INSPECTION = parse_value(self.schema, column_value_map, "OVER_INSPECTION")
        "User audit over inspection requirement check for DC. When Y, DC require Over Inspection. N, DC does not require Over Inspection. Accept, User Inspection accepted. Reject, User Inspection is rejected and may require re-inspection."
        self.OVER_INSP_UPDT_USERID = parse_value(self.schema, column_value_map, "OVER_INSP_UPDT_USERID")
        "UserID of Over Inspector performing Over Inspection of DC."
        self.OVER_INSP_TIME_STAMP = parse_value(self.schema, column_value_map, "OVER_INSP_TIME_STAMP")
        "Time when Over Inspection was performed by Over Inspector for DC."
        self.HOLD_ID = parse_value(self.schema, column_value_map, "HOLD_ID")
        "Unique, system-generated identifier of the hold."
        self.OVER_INSP_COMMENTS = parse_value(self.schema, column_value_map, "OVER_INSP_COMMENTS")
        "Comments about Over Inspection."
        self.EVENT_NO = parse_value(self.schema, column_value_map, "EVENT_NO")
        "Event no under which user needs to perform over inspection check."
        self.COMPLETE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_QTY")
        "Determines the number of units completed. Applicable when Continuous Flow flag is Y."
        self.DAT_COL_STATUS = parse_value(self.schema, column_value_map, "DAT_COL_STATUS")
        "Status of given Data Collection (like PENDING, PARTIAL, COMPLETE, SKIP)."
        self.TEMPLATE_FILE_ID = parse_value(self.schema, column_value_map, "TEMPLATE_FILE_ID")
        "The unique identifier of the object being referenced."
        self.MESSAGE_SENT = parse_value(self.schema, column_value_map, "MESSAGE_SENT")

class SFPL_MATERIAL_HTREF_NOTES:
    schema = {
        "NOTE_ID": "STRING",
        "REF_ID": "STRING",
        "MATERIAL_ID": "STRING",
        "NOTE_TYPE": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "MATERIAL_ID",
        "NOTE_ID",
        "NOTE_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MATERIAL_HTREF_NOTES_FK1", ["NOTE_ID","NOTE_TYPE","MATERIAL_ID"], "SFPL_MATERIAL_NOTES_TEXT", ["NOTE_ID","NOTE_TYPE","MATERIAL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.NOTE_ID = parse_value(self.schema, column_value_map, "NOTE_ID")
        "Unique, system-generated identifier of a note."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        "Unique, system-generated identifier of a given material."
        self.NOTE_TYPE = parse_value(self.schema, column_value_map, "NOTE_TYPE")
        "Type of note which denotes from where its inserted like SCRAP, TEST_RESULT, INCREASE_TIME."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "The unique identifier of a referenced object."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "Type of object type like TEXT, LINK, ATTACHMENT."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_OPER_BUYOFF_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "BUYOFF_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "BUYOFF_TYPE": "STRING",
        "BUYOFF_CERT": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "HIST_ALT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "REF_ID": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "SUSPECT_FLAG": "STRING",
        "UCF_OPER_BUYOFF_VCH1": "STRING",
        "UCF_OPER_BUYOFF_VCH2": "STRING",
        "UCF_OPER_BUYOFF_VCH3": "STRING",
        "UCF_OPER_BUYOFF_VCH4": "STRING",
        "UCF_OPER_BUYOFF_VCH5": "STRING",
        "UCF_OPER_BUYOFF_VCH6": "STRING",
        "UCF_OPER_BUYOFF_VCH7": "STRING",
        "UCF_OPER_BUYOFF_VCH8": "STRING",
        "UCF_OPER_BUYOFF_VCH9": "STRING",
        "UCF_OPER_BUYOFF_VCH10": "STRING",
        "UCF_OPER_BUYOFF_VCH11": "STRING",
        "UCF_OPER_BUYOFF_VCH12": "STRING",
        "UCF_OPER_BUYOFF_VCH13": "STRING",
        "UCF_OPER_BUYOFF_VCH14": "STRING",
        "UCF_OPER_BUYOFF_VCH15": "STRING",
        "UCF_OPER_BUYOFF_NUM1": "NUMBER",
        "UCF_OPER_BUYOFF_NUM2": "NUMBER",
        "UCF_OPER_BUYOFF_NUM3": "NUMBER",
        "UCF_OPER_BUYOFF_NUM4": "NUMBER",
        "UCF_OPER_BUYOFF_NUM5": "NUMBER",
        "UCF_OPER_BUYOFF_DATE1": "STRING",
        "UCF_OPER_BUYOFF_DATE2": "STRING",
        "UCF_OPER_BUYOFF_DATE3": "STRING",
        "UCF_OPER_BUYOFF_DATE4": "STRING",
        "UCF_OPER_BUYOFF_DATE5": "STRING",
        "UCF_OPER_BUYOFF_FLAG1": "STRING",
        "UCF_OPER_BUYOFF_FLAG2": "STRING",
        "UCF_OPER_BUYOFF_FLAG3": "STRING",
        "UCF_OPER_BUYOFF_FLAG4": "STRING",
        "UCF_OPER_BUYOFF_FLAG5": "STRING",
        "UCF_OPER_BUYOFF_VCH255_1": "STRING",
        "UCF_OPER_BUYOFF_VCH255_2": "STRING",
        "UCF_OPER_BUYOFF_VCH255_3": "STRING",
        "UCF_OPER_BUYOFF_VCH4000_1": "STRING",
        "UCF_OPER_BUYOFF_VCH4000_2": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "BUYOFF_TITLE": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.BUYOFF_ID = parse_value(self.schema, column_value_map, "BUYOFF_ID")
        "Unique, system-generated identifier of the buyoff."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.BUYOFF_TYPE = parse_value(self.schema, column_value_map, "BUYOFF_TYPE")
        "Type or classification of buyoff, e.g., MFG, MFG2, QA."
        self.BUYOFF_CERT = parse_value(self.schema, column_value_map, "BUYOFF_CERT")
        "The required certification for the given buyoff."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Block type/Block id where object exists within the text. For a full list of BLOCK_IDs see SFFND_HTREF_BLOCKID_DEF for full list. Not currently implemented."
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.UCF_OPER_BUYOFF_VCH1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH1")
        self.UCF_OPER_BUYOFF_VCH2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH2")
        self.UCF_OPER_BUYOFF_VCH3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH3")
        self.UCF_OPER_BUYOFF_VCH4 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH4")
        self.UCF_OPER_BUYOFF_VCH5 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH5")
        self.UCF_OPER_BUYOFF_VCH6 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH6")
        self.UCF_OPER_BUYOFF_VCH7 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH7")
        self.UCF_OPER_BUYOFF_VCH8 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH8")
        self.UCF_OPER_BUYOFF_VCH9 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH9")
        self.UCF_OPER_BUYOFF_VCH10 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH10")
        self.UCF_OPER_BUYOFF_VCH11 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH11")
        self.UCF_OPER_BUYOFF_VCH12 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH12")
        self.UCF_OPER_BUYOFF_VCH13 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH13")
        self.UCF_OPER_BUYOFF_VCH14 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH14")
        self.UCF_OPER_BUYOFF_VCH15 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH15")
        self.UCF_OPER_BUYOFF_NUM1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM1")
        self.UCF_OPER_BUYOFF_NUM2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM2")
        self.UCF_OPER_BUYOFF_NUM3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM3")
        self.UCF_OPER_BUYOFF_NUM4 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM4")
        self.UCF_OPER_BUYOFF_NUM5 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_NUM5")
        self.UCF_OPER_BUYOFF_DATE1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE1")
        self.UCF_OPER_BUYOFF_DATE2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE2")
        self.UCF_OPER_BUYOFF_DATE3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE3")
        self.UCF_OPER_BUYOFF_DATE4 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE4")
        self.UCF_OPER_BUYOFF_DATE5 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_DATE5")
        self.UCF_OPER_BUYOFF_FLAG1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG1")
        self.UCF_OPER_BUYOFF_FLAG2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG2")
        self.UCF_OPER_BUYOFF_FLAG3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG3")
        self.UCF_OPER_BUYOFF_FLAG4 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG4")
        self.UCF_OPER_BUYOFF_FLAG5 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_FLAG5")
        self.UCF_OPER_BUYOFF_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH255_1")
        self.UCF_OPER_BUYOFF_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH255_2")
        self.UCF_OPER_BUYOFF_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH255_3")
        self.UCF_OPER_BUYOFF_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH4000_1")
        self.UCF_OPER_BUYOFF_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_OPER_BUYOFF_VCH4000_2")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.BUYOFF_TITLE = parse_value(self.schema, column_value_map, "BUYOFF_TITLE")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Display line number for buyoff authoring."

class SFSQA_ITEM_OWNER_SUPPLEMENTALS:
    schema = {
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "INSP_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "CURRENT_SI_COUNT": "NUMBER",
        "SUPPLEMENTAL_COUNT": "NUMBER",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "OWNER_CODE",
        "INSP_DEF_REV",
        "INSP_ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_ITEM_OWNER_SUPPLES_FK2", ["ITEM_ID","OWNER_CODE"], "SFSQA_ITEM_OWNER", ["ITEM_ID","OWNER_CODE"]),
        DbForeignKey("SFSQA_ITEM_OWNER_SUPPLES_FK1", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV","INSP_ITEM_ID"], "SFSQA_INSP_DEF_INSP_ITEMS", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV","INSP_ITEM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.CURRENT_SI_COUNT = parse_value(self.schema, column_value_map, "CURRENT_SI_COUNT")
        self.SUPPLEMENTAL_COUNT = parse_value(self.schema, column_value_map, "SUPPLEMENTAL_COUNT")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")

class SFFND_USER_ACTIVITY:
    schema = {
        "SIGNON_ID": "STRING",
        "SIGNON_TYPE": "STRING",
        "ORDER_NO": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "OPER_NO": "STRING",
        "SIGNON_USERID": "STRING",
        "STEP_KEY": "NUMBER",
        "SIGNON_TIME_STAMP": "STRING",
        "SIGNOFF_USERID": "STRING",
        "SIGNOFF_TIME_STAMP": "STRING",
        "SYSTEM_FORCE_SIGNOFF_FLAG": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "UCF_OPER_SIGNON_VCH1": "STRING",
        "UCF_OPER_SIGNON_VCH2": "STRING",
        "UCF_OPER_SIGNON_VCH3": "STRING",
        "UCF_OPER_SIGNON_VCH4": "STRING",
        "UCF_OPER_SIGNON_VCH5": "STRING",
        "UCF_OPER_SIGNON_FLAG1": "STRING",
        "UCF_OPER_SIGNON_FLAG2": "STRING",
        "UCF_OPER_SIGNON_NUM1": "NUMBER",
        "UCF_OPER_SIGNON_NUM2": "NUMBER",
        "PROJECT": "STRING",
        "ACCOUNT_NAME": "STRING",
        "LOT_ID": "STRING",
        "ACTIVITY": "STRING",
        "SERIAL_ID": "STRING",
        "LABOR_SIGNON_TYPE": "STRING",
        "ORGANIZATION_ID": "STRING",
        "UCF_OPER_SIGNON_VCH6": "STRING",
        "UCF_OPER_SIGNON_VCH7": "STRING",
        "UCF_OPER_SIGNON_VCH8": "STRING",
        "UCF_OPER_SIGNON_VCH9": "STRING",
        "UCF_OPER_SIGNON_VCH10": "STRING",
        "UCF_OPER_SIGNON_VCH11": "STRING",
        "UCF_OPER_SIGNON_VCH12": "STRING",
        "UCF_OPER_SIGNON_VCH13": "STRING",
        "UCF_OPER_SIGNON_VCH14": "STRING",
        "UCF_OPER_SIGNON_VCH15": "STRING",
        "UCF_OPER_SIGNON_NUM3": "NUMBER",
        "UCF_OPER_SIGNON_NUM4": "NUMBER",
        "UCF_OPER_SIGNON_NUM5": "NUMBER",
        "UCF_OPER_SIGNON_DATE1": "STRING",
        "UCF_OPER_SIGNON_DATE2": "STRING",
        "UCF_OPER_SIGNON_DATE3": "STRING",
        "UCF_OPER_SIGNON_DATE4": "STRING",
        "UCF_OPER_SIGNON_DATE5": "STRING",
        "UCF_OPER_SIGNON_FLAG3": "STRING",
        "UCF_OPER_SIGNON_FLAG4": "STRING",
        "UCF_OPER_SIGNON_FLAG5": "STRING",
        "UCF_OPER_SIGNON_VCH255_1": "STRING",
        "UCF_OPER_SIGNON_VCH255_2": "STRING",
        "UCF_OPER_SIGNON_VCH255_3": "STRING",
        "UCF_OPER_SIGNON_VCH4000_1": "STRING",
        "UCF_OPER_SIGNON_VCH4000_2": "STRING",
        "NEEDS_SIGNOFF_FLAG": "STRING",
        "EXT_LTA_REPLY_TRANS_ID": "STRING",
        "GROUP_JOB_NO": "STRING",
        "SIGNOFF_BY_USERID": "STRING",
        "PG_ID": "STRING",
        "LTA_SIGN_OFF_STATUS": "STRING",
    }
    primary_key_columns = [
        "SIGNON_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_USER_ACT_SON_USER_FK", ["SIGNON_USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFFND_USERACTIV_SIGNON_TYPE_FK", ["SIGNON_TYPE"], "SFFND_SIGNON_TYPE_DEF", ["SIGNON_TYPE"]),
        DbForeignKey("SFFND_USER_ACTIVITY_ACCT_FK", ["ACCOUNT_NAME"], "SFFND_LTA_ACCOUNT_DEF", ["ACCOUNT_NAME"]),
        DbForeignKey("SFFND_USER_ACTIVITY_FK1", ["LABOR_SIGNON_TYPE"], "SFFND_LABOR_SIGNON_TYPE_DEF", ["LABOR_SIGNON_TYPE"]),
        DbForeignKey("SFFND_USER_ACTIVITY_FK5", ["PG_ID"], "SFFND_PRORATE_GROUP", ["PG_ID"]),
        DbForeignKey("SFFND_USER_ACT_ACT_FK", ["ACTIVITY"], "SFFND_LABOR_ACTIVITY_DEF", ["ACTIVITY"]),
        DbForeignKey("SFFND_USER_ACT_PROJ_FK", ["PROJECT"], "SFFND_PROJECT_DEF", ["PROJECT"]),
        DbForeignKey("SFFND_USERACTIV_SIGNON_OPER_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFFND_USER_ACTIVITY_FK3", ["GROUP_JOB_NO"], "SFWID_GROUP_JOB", ["GROUP_JOB_NO"]),
        DbForeignKey("SFFND_USER_ACT_SOF_USER_FK", ["SIGNOFF_USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFFND_USER_ACTIVITY_FK2", ["ORGANIZATION_ID"], "SFFND_ORGANIZATION_DEF", ["ORGANIZATION_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SIGNON_ID = parse_value(self.schema, column_value_map, "SIGNON_ID")
        "The system generated identifier of a SIGN-ON or SIGN-OFF by a manufacturing personnel."
        self.SIGNON_TYPE = parse_value(self.schema, column_value_map, "SIGNON_TYPE")
        "The type of record, On (sign-on) or OFF (sign-off)."
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        "Unique, user-assigned identifier of a given work order."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.SIGNON_USERID = parse_value(self.schema, column_value_map, "SIGNON_USERID")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.SIGNON_TIME_STAMP = parse_value(self.schema, column_value_map, "SIGNON_TIME_STAMP")
        self.SIGNOFF_USERID = parse_value(self.schema, column_value_map, "SIGNOFF_USERID")
        self.SIGNOFF_TIME_STAMP = parse_value(self.schema, column_value_map, "SIGNOFF_TIME_STAMP")
        self.SYSTEM_FORCE_SIGNOFF_FLAG = parse_value(self.schema, column_value_map, "SYSTEM_FORCE_SIGNOFF_FLAG")
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.UCF_OPER_SIGNON_VCH1 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_VCH2 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_VCH3 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_VCH4 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_VCH5 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_FLAG1 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_OPER_SIGNON_FLAG2 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_OPER_SIGNON_NUM1 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_OPER_SIGNON_NUM2 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_NUM2")
        "User-configurable field for NUM data type."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        self.ACCOUNT_NAME = parse_value(self.schema, column_value_map, "ACCOUNT_NAME")
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        self.ACTIVITY = parse_value(self.schema, column_value_map, "ACTIVITY")
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        self.LABOR_SIGNON_TYPE = parse_value(self.schema, column_value_map, "LABOR_SIGNON_TYPE")
        self.ORGANIZATION_ID = parse_value(self.schema, column_value_map, "ORGANIZATION_ID")
        "Unique identifier of an organization."
        self.UCF_OPER_SIGNON_VCH6 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_VCH7 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_VCH8 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_VCH9 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_VCH10 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_VCH11 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_VCH12 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_VCH13 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_VCH14 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_VCH15 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_OPER_SIGNON_NUM3 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_OPER_SIGNON_NUM4 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_OPER_SIGNON_NUM5 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_OPER_SIGNON_DATE1 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_OPER_SIGNON_DATE2 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_OPER_SIGNON_DATE3 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_OPER_SIGNON_DATE4 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_OPER_SIGNON_DATE5 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_OPER_SIGNON_FLAG3 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_OPER_SIGNON_FLAG4 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_OPER_SIGNON_FLAG5 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_OPER_SIGNON_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_OPER_SIGNON_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_OPER_SIGNON_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_OPER_SIGNON_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_OPER_SIGNON_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_OPER_SIGNON_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.NEEDS_SIGNOFF_FLAG = parse_value(self.schema, column_value_map, "NEEDS_SIGNOFF_FLAG")
        "If the user need to sign off then the valus will be Y  otherwise N."
        self.EXT_LTA_REPLY_TRANS_ID = parse_value(self.schema, column_value_map, "EXT_LTA_REPLY_TRANS_ID")
        "Used to store transaction_id of reply log table."
        self.GROUP_JOB_NO = parse_value(self.schema, column_value_map, "GROUP_JOB_NO")
        "Maintains group job number for which sign on/off record inserted."
        self.SIGNOFF_BY_USERID = parse_value(self.schema, column_value_map, "SIGNOFF_BY_USERID")
        "Maintaining USERID who forcefully sign off user."
        self.PG_ID = parse_value(self.schema, column_value_map, "PG_ID")
        self.LTA_SIGN_OFF_STATUS = parse_value(self.schema, column_value_map, "LTA_SIGN_OFF_STATUS")
        "This is used for knowing if the SIGN_OFF Event has been sent or not for user activity."

class SFDBA_SESSION_EVENT_HIST:
    schema = {
        "SID": "NUMBER",
        "SERIAL_NUM": "NUMBER",
        "USERNAME": "STRING",
        "OSUSER": "STRING",
        "PADDR": "STRING",
        "PROCESS": "STRING",
        "LOGON_TIME": "STRING",
        "TYPE": "STRING",
        "EVENT": "STRING",
        "TOTAL_WAITS": "NUMBER",
        "TOTAL_TIMEOUTS": "NUMBER",
        "TIME_WAITED": "NUMBER",
        "AVERAGE_WAIT": "NUMBER",
        "MAX_WAIT": "NUMBER",
        "CLIENT_INFO": "STRING",
        "CLIENT_IDENTIFIER": "STRING",
        "LOGOFF_TIMESTAMP": "STRING",
        "TERMINAL": "STRING",
        "IDENTITY_COL": "NUMBER",
    }
    primary_key_columns = [
        "IDENTITY_COL",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SID = parse_value(self.schema, column_value_map, "SID")
        self.SERIAL_NUM = parse_value(self.schema, column_value_map, "SERIAL_NUM")
        self.USERNAME = parse_value(self.schema, column_value_map, "USERNAME")
        "Solumina login ID of the user."
        self.OSUSER = parse_value(self.schema, column_value_map, "OSUSER")
        self.PADDR = parse_value(self.schema, column_value_map, "PADDR")
        self.PROCESS = parse_value(self.schema, column_value_map, "PROCESS")
        self.LOGON_TIME = parse_value(self.schema, column_value_map, "LOGON_TIME")
        self.TYPE = parse_value(self.schema, column_value_map, "TYPE")
        "Type/class the initialization entry belongs to, indicating the intent/purpose of the entry."
        self.EVENT = parse_value(self.schema, column_value_map, "EVENT")
        self.TOTAL_WAITS = parse_value(self.schema, column_value_map, "TOTAL_WAITS")
        self.TOTAL_TIMEOUTS = parse_value(self.schema, column_value_map, "TOTAL_TIMEOUTS")
        self.TIME_WAITED = parse_value(self.schema, column_value_map, "TIME_WAITED")
        self.AVERAGE_WAIT = parse_value(self.schema, column_value_map, "AVERAGE_WAIT")
        self.MAX_WAIT = parse_value(self.schema, column_value_map, "MAX_WAIT")
        self.CLIENT_INFO = parse_value(self.schema, column_value_map, "CLIENT_INFO")
        self.CLIENT_IDENTIFIER = parse_value(self.schema, column_value_map, "CLIENT_IDENTIFIER")
        self.LOGOFF_TIMESTAMP = parse_value(self.schema, column_value_map, "LOGOFF_TIMESTAMP")
        self.TERMINAL = parse_value(self.schema, column_value_map, "TERMINAL")
        self.IDENTITY_COL = parse_value(self.schema, column_value_map, "IDENTITY_COL")

class SFWID_ORDER_TOOL_ALT_XREF_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_TOOL_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TOOL_ID": "STRING",
        "PLND_TOOL_NO": "STRING",
        "PLND_TOOL_CHG": "STRING",
        "ASGND_TOOL_NO": "STRING",
        "ASGND_TOOL_CHG": "STRING",
        "ASSIGNED_TOOL_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH1": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH2": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH3": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH4": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH5": "STRING",
        "UCF_ORDER_TOOL_ALT_NUM1": "NUMBER",
        "UCF_ORDER_TOOL_ALT_NUM2": "NUMBER",
        "UCF_ORDER_TOOL_ALT_NUM3": "NUMBER",
        "UCF_ORDER_TOOL_ALT_FLAG1": "STRING",
        "UCF_ORDER_TOOL_ALT_FLAG2": "STRING",
        "UCF_ORDER_TOOL_ALT_FLAG3": "STRING",
        "UCF_ORDER_TOOL_ALT_DATE1": "STRING",
        "UCF_ORDER_TOOL_ALT_DATE2": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH255_1": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH255_2": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH6": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH7": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH8": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH9": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH10": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH11": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH12": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH13": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH14": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH15": "STRING",
        "UCF_ORDER_TOOL_ALT_NUM4": "NUMBER",
        "UCF_ORDER_TOOL_ALT_NUM5": "NUMBER",
        "UCF_ORDER_TOOL_ALT_DATE3": "STRING",
        "UCF_ORDER_TOOL_ALT_DATE4": "STRING",
        "UCF_ORDER_TOOL_ALT_DATE5": "STRING",
        "UCF_ORDER_TOOL_ALT_FLAG4": "STRING",
        "UCF_ORDER_TOOL_ALT_FLAG5": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH255_3": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH4000_1": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH4000_2": "STRING",
        "ALT_PART_RANK": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_TOOL_ALT_ID = parse_value(self.schema, column_value_map, "ORDER_TOOL_ALT_ID")
        "Unique system generated tool identiifer that has been used as an alternate."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TOOL_ID = parse_value(self.schema, column_value_map, "TOOL_ID")
        "Tool Data Collection ID."
        self.PLND_TOOL_NO = parse_value(self.schema, column_value_map, "PLND_TOOL_NO")
        "The identifying number of the required tool as planned in the given operation."
        self.PLND_TOOL_CHG = parse_value(self.schema, column_value_map, "PLND_TOOL_CHG")
        "The change letter (revision) of the required tool as planned in the given operation."
        self.ASGND_TOOL_NO = parse_value(self.schema, column_value_map, "ASGND_TOOL_NO")
        "The identifying number of the required tool as actually assigned to the given operation."
        self.ASGND_TOOL_CHG = parse_value(self.schema, column_value_map, "ASGND_TOOL_CHG")
        "The change letter (revision) of the required tool as actually assigned to the given operation."
        self.ASSIGNED_TOOL_FLAG = parse_value(self.schema, column_value_map, "ASSIGNED_TOOL_FLAG")
        "Flag to check if Tool is assigned or not."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_ORDER_TOOL_ALT_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_ORDER_TOOL_ALT_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_ORDER_TOOL_ALT_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_ORDER_TOOL_ALT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_TOOL_ALT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_TOOL_ALT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_TOOL_ALT_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_TOOL_ALT_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_TOOL_ALT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH255_1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH255_2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_TOOL_ALT_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_TOOL_ALT_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_TOOL_ALT_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_TOOL_ALT_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_TOOL_ALT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_TOOL_ALT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_TOOL_ALT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_TOOL_ALT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ORDER_TOOL_ALT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.ALT_PART_RANK = parse_value(self.schema, column_value_map, "ALT_PART_RANK")

class SFSQA_SUPPLIER_HOLDS:
    schema = {
        "HOLD_ID": "STRING",
        "SUPPLIER_CODE": "STRING",
        "HOLD_TYPE": "STRING",
        "HOLD_STATUS": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "NOTES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HOLD_ID",
        "SUPPLIER_CODE",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_SUPPLIER_HOLDS_FK1", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFSQA_SUPPLIER_HOLDS_FK2", ["HOLD_TYPE"], "SFSQA_HOLD_TYPE_DEF", ["HOLD_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HOLD_ID = parse_value(self.schema, column_value_map, "HOLD_ID")
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.HOLD_TYPE = parse_value(self.schema, column_value_map, "HOLD_TYPE")
        self.HOLD_STATUS = parse_value(self.schema, column_value_map, "HOLD_STATUS")
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFQA_AFFECTED_PERFORMANCE_DEF:
    schema = {
        "AFFECTED_PERFORMANCE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "AFFECTED_PERFORMANCE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_CA_AFFECTED_PERF_DESC_FK2",
    ]
    def __init__(self, column_value_map):
        self.AFFECTED_PERFORMANCE = parse_value(self.schema, column_value_map, "AFFECTED_PERFORMANCE")
        "Affected Performance Area of Corrective Action."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFQA_CA_AFFECTED_PERF_DESC_FK2 = []

class SFWID_HOLDS:
    schema = {
        "HOLD_ID": "STRING",
        "ORDER_ID": "STRING",
        "HOLD_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "OPER_NO": "STRING",
        "STOP_TYPE": "STRING",
        "HOLD_STATUS": "STRING",
        "ITEM_ID": "STRING",
        "QTY_SHORT": "NUMBER",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "NOTES": "STRING",
        "HOLD_REF1": "STRING",
        "HOLD_REF2": "STRING",
        "HOLD_REF3": "STRING",
        "HOLD_REF4": "STRING",
        "HOLD_REF5": "STRING",
        "ALT_ID": "STRING",
        "UCF_HOLD_VCH1": "STRING",
        "UCF_HOLD_VCH2": "STRING",
        "UCF_HOLD_VCH3": "STRING",
        "UCF_HOLD_VCH4": "STRING",
        "UCF_HOLD_VCH5": "STRING",
        "UCF_HOLD_VCH6": "STRING",
        "UCF_HOLD_VCH7": "STRING",
        "UCF_HOLD_VCH8": "STRING",
        "UCF_HOLD_VCH9": "STRING",
        "UCF_HOLD_VCH10": "STRING",
        "UCF_HOLD_VCH11": "STRING",
        "UCF_HOLD_VCH12": "STRING",
        "UCF_HOLD_VCH13": "STRING",
        "UCF_HOLD_VCH14": "STRING",
        "UCF_HOLD_VCH15": "STRING",
        "UCF_HOLD_NUM1": "NUMBER",
        "UCF_HOLD_NUM2": "NUMBER",
        "UCF_HOLD_NUM3": "NUMBER",
        "UCF_HOLD_NUM4": "NUMBER",
        "UCF_HOLD_NUM5": "NUMBER",
        "UCF_HOLD_DATE1": "STRING",
        "UCF_HOLD_DATE2": "STRING",
        "UCF_HOLD_DATE3": "STRING",
        "UCF_HOLD_DATE4": "STRING",
        "UCF_HOLD_DATE5": "STRING",
        "UCF_HOLD_FLAG1": "STRING",
        "UCF_HOLD_FLAG2": "STRING",
        "UCF_HOLD_FLAG3": "STRING",
        "UCF_HOLD_FLAG4": "STRING",
        "UCF_HOLD_FLAG5": "STRING",
        "UCF_HOLD_VCH255_1": "STRING",
        "UCF_HOLD_VCH255_2": "STRING",
        "UCF_HOLD_VCH255_3": "STRING",
        "UCF_HOLD_VCH4000_1": "STRING",
        "UCF_HOLD_VCH4000_2": "STRING",
        "IS_ALTERED_FLAG": "STRING",
        "IS_WORKED_FLAG": "STRING",
        "IS_DISPOSITIONED_FLAG": "STRING",
        "SECURITY_GROUP": "STRING",
        "GROUP_JOB_NO": "STRING",
        "SOURCE": "STRING",
    }
    primary_key_columns = [
        "HOLD_ID",
        "ORDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_HOLDS_OPER_DESC_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_HOLDS_ORDRDSC_FK", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_HOLDS_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_HOLDS_GROUP_JOB_FK", ["GROUP_JOB_NO"], "SFWID_GROUP_JOB", ["GROUP_JOB_NO"]),
        DbForeignKey("SFWID_HOLDS_HOLD_TYPE_FK", ["HOLD_TYPE"], "SFWID_HOLD_TYPE_DEF", ["HOLD_TYPE"]),
        DbForeignKey("SFWID_HOLDS_ITEM_FK", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
    ]
    refs = [
        "SFWID_HOLDS_RESOURCE_TYPE_FK1",
        "SFWID_SRL_HOLDS_HOLDS_FK",
    ]
    def __init__(self, column_value_map):
        self.HOLD_ID = parse_value(self.schema, column_value_map, "HOLD_ID")
        "Unique, system-generated identifier of the hold."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.HOLD_TYPE = parse_value(self.schema, column_value_map, "HOLD_TYPE")
        "Type or classification of hold."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STOP_TYPE = parse_value(self.schema, column_value_map, "STOP_TYPE")
        "Type or classification of stop."
        self.HOLD_STATUS = parse_value(self.schema, column_value_map, "HOLD_STATUS")
        "The status of the hold, OPEN or CLOSED."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The identifier of the part (shortage) causing the hold."
        self.QTY_SHORT = parse_value(self.schema, column_value_map, "QTY_SHORT")
        "The quantity of part shortage."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which the hold has been created."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which the hold has been resolved."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The scheduled start date to resolve the hold. Generated automatically when the hold is created."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The scheduled end date to resolve the hold."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about the hold."
        self.HOLD_REF1 = parse_value(self.schema, column_value_map, "HOLD_REF1")
        "First part of additional information about the hold."
        self.HOLD_REF2 = parse_value(self.schema, column_value_map, "HOLD_REF2")
        "Second part of additional information about the hold."
        self.HOLD_REF3 = parse_value(self.schema, column_value_map, "HOLD_REF3")
        "Third part of additional information about the hold."
        self.HOLD_REF4 = parse_value(self.schema, column_value_map, "HOLD_REF4")
        self.HOLD_REF5 = parse_value(self.schema, column_value_map, "HOLD_REF5")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        self.UCF_HOLD_VCH1 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH1")
        self.UCF_HOLD_VCH2 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH2")
        self.UCF_HOLD_VCH3 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH3")
        self.UCF_HOLD_VCH4 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH4")
        self.UCF_HOLD_VCH5 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH5")
        self.UCF_HOLD_VCH6 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH6")
        self.UCF_HOLD_VCH7 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH7")
        self.UCF_HOLD_VCH8 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH8")
        self.UCF_HOLD_VCH9 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH9")
        self.UCF_HOLD_VCH10 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH10")
        self.UCF_HOLD_VCH11 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH11")
        self.UCF_HOLD_VCH12 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH12")
        self.UCF_HOLD_VCH13 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH13")
        self.UCF_HOLD_VCH14 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH14")
        self.UCF_HOLD_VCH15 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH15")
        self.UCF_HOLD_NUM1 = parse_value(self.schema, column_value_map, "UCF_HOLD_NUM1")
        self.UCF_HOLD_NUM2 = parse_value(self.schema, column_value_map, "UCF_HOLD_NUM2")
        self.UCF_HOLD_NUM3 = parse_value(self.schema, column_value_map, "UCF_HOLD_NUM3")
        self.UCF_HOLD_NUM4 = parse_value(self.schema, column_value_map, "UCF_HOLD_NUM4")
        self.UCF_HOLD_NUM5 = parse_value(self.schema, column_value_map, "UCF_HOLD_NUM5")
        self.UCF_HOLD_DATE1 = parse_value(self.schema, column_value_map, "UCF_HOLD_DATE1")
        self.UCF_HOLD_DATE2 = parse_value(self.schema, column_value_map, "UCF_HOLD_DATE2")
        self.UCF_HOLD_DATE3 = parse_value(self.schema, column_value_map, "UCF_HOLD_DATE3")
        self.UCF_HOLD_DATE4 = parse_value(self.schema, column_value_map, "UCF_HOLD_DATE4")
        self.UCF_HOLD_DATE5 = parse_value(self.schema, column_value_map, "UCF_HOLD_DATE5")
        self.UCF_HOLD_FLAG1 = parse_value(self.schema, column_value_map, "UCF_HOLD_FLAG1")
        self.UCF_HOLD_FLAG2 = parse_value(self.schema, column_value_map, "UCF_HOLD_FLAG2")
        self.UCF_HOLD_FLAG3 = parse_value(self.schema, column_value_map, "UCF_HOLD_FLAG3")
        self.UCF_HOLD_FLAG4 = parse_value(self.schema, column_value_map, "UCF_HOLD_FLAG4")
        self.UCF_HOLD_FLAG5 = parse_value(self.schema, column_value_map, "UCF_HOLD_FLAG5")
        self.UCF_HOLD_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH255_1")
        self.UCF_HOLD_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH255_2")
        self.UCF_HOLD_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH255_3")
        self.UCF_HOLD_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH4000_1")
        self.UCF_HOLD_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_HOLD_VCH4000_2")
        self.IS_ALTERED_FLAG = parse_value(self.schema, column_value_map, "IS_ALTERED_FLAG")
        self.IS_WORKED_FLAG = parse_value(self.schema, column_value_map, "IS_WORKED_FLAG")
        self.IS_DISPOSITIONED_FLAG = parse_value(self.schema, column_value_map, "IS_DISPOSITIONED_FLAG")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.GROUP_JOB_NO = parse_value(self.schema, column_value_map, "GROUP_JOB_NO")
        "Link Order Hold to group job to identify hold is created from Group Job."
        self.SOURCE = parse_value(self.schema, column_value_map, "SOURCE")
        self.SFWID_HOLDS_RESOURCE_TYPE_FK1 = []
        self.SFWID_SRL_HOLDS_HOLDS_FK = []

class SFWID_OPER_ITEMS_ALT:
    schema = {
        "OPER_ITEMS_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "PART_DAT_COL_ID": "STRING",
        "REF_DES": "STRING",
        "PLND_ITEM_ID": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "PLND_ITEM_QTY": "NUMBER",
        "PART_ACTION": "STRING",
        "OVER_CONSUMPTION_FLAG": "STRING",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "SPOOL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "OPT_DC1_FLAG": "STRING",
        "OPT_DC2_FLAG": "STRING",
        "OPT_DC3_FLAG": "STRING",
        "OPT_DC4_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "SUSPECT_FLAG": "STRING",
        "TRACKABLE_FLAG": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "UOM": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "ITEM_CATEGORY": "STRING",
        "STORE_LOC": "STRING",
        "UNLOADING_POINT": "STRING",
        "REF_DES_PREF_RANK": "NUMBER",
        "FIND_NO": "STRING",
        "ITEM_NOTES": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "UTILIZATION_RULE": "STRING",
        "REMOVE_ACTION": "STRING",
        "UCF_PLAN_ITEM_VCH1": "STRING",
        "UCF_PLAN_ITEM_VCH2": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "UCF_PLAN_ITEM_VCH3": "STRING",
        "UCF_PLAN_ITEM_VCH4": "STRING",
        "UCF_PLAN_ITEM_VCH5": "STRING",
        "UCF_PLAN_ITEM_VCH6": "STRING",
        "UCF_PLAN_ITEM_VCH7": "STRING",
        "UCF_PLAN_ITEM_VCH8": "STRING",
        "UCF_PLAN_ITEM_VCH9": "STRING",
        "UCF_PLAN_ITEM_VCH10": "STRING",
        "UCF_PLAN_ITEM_VCH11": "STRING",
        "UCF_PLAN_ITEM_VCH12": "STRING",
        "UCF_PLAN_ITEM_VCH13": "STRING",
        "UCF_PLAN_ITEM_VCH14": "STRING",
        "UCF_PLAN_ITEM_VCH15": "STRING",
        "UCF_PLAN_ITEM_NUM1": "NUMBER",
        "UCF_PLAN_ITEM_NUM3": "NUMBER",
        "UCF_PLAN_ITEM_NUM2": "NUMBER",
        "UCF_PLAN_ITEM_NUM4": "NUMBER",
        "UCF_PLAN_ITEM_NUM5": "NUMBER",
        "UCF_PLAN_ITEM_DATE1": "STRING",
        "UCF_PLAN_ITEM_DATE2": "STRING",
        "UCF_PLAN_ITEM_DATE3": "STRING",
        "UCF_PLAN_ITEM_DATE4": "STRING",
        "UCF_PLAN_ITEM_DATE5": "STRING",
        "UCF_PLAN_ITEM_FLAG1": "STRING",
        "UCF_PLAN_ITEM_FLAG2": "STRING",
        "UCF_PLAN_ITEM_FLAG3": "STRING",
        "UCF_PLAN_ITEM_FLAG4": "STRING",
        "UCF_PLAN_ITEM_FLAG5": "STRING",
        "UCF_PLAN_ITEM_VCH255_1": "STRING",
        "UCF_PLAN_ITEM_VCH255_2": "STRING",
        "UCF_PLAN_ITEM_VCH255_3": "STRING",
        "UCF_PLAN_ITEM_VCH4000_1": "STRING",
        "UCF_PLAN_ITEM_VCH4000_2": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "UNIT_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "SECURITY_GROUP": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "PART_TITLE": "STRING",
        "STANDARD_PART_FLAG": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "DISP_PART_DAT_COL_ID": "STRING",
        "PART_LINE_NO": "NUMBER",
        "BOM_LINE_NO": "STRING",
        "PHANTOM_KIT_PART_NO": "STRING",
        "REPLACEMENT_PART_NO": "STRING",
        "REPLACEMENT_PART_CHG": "STRING",
        "BOM_COMP_ID": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
        "REF_DES_DESC": "STRING",
    }
    primary_key_columns = [
        "OPER_ITEMS_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_ITEMS_ALT_FK3", ["REMOVE_ACTION"], "SFQA_COMP_DISP_TYPE_DEF", ["COMP_DISP_TYPE"]),
        DbForeignKey("SFWID_OPER_ITEMS_ALT_FK4", ["PLND_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFWID_OPER_ITEMS_ALT_FK2", ["UID_ENTRY_NAME"], "SFFND_UID_ENTRY", ["UID_ENTRY_NAME"]),
        DbForeignKey("SFWID_OPER_ITEMS_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_ITEMS_ALT_FK5", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_ITEMS_ALT = parse_value(self.schema, column_value_map, "OPER_ITEMS_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.PLND_ITEM_ID = parse_value(self.schema, column_value_map, "PLND_ITEM_ID")
        "Unique, system-generated ID of the given component/part."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PLND_ITEM_QTY = parse_value(self.schema, column_value_map, "PLND_ITEM_QTY")
        "The planned quantity associated with a given component/part."
        self.PART_ACTION = parse_value(self.schema, column_value_map, "PART_ACTION")
        "The intended action of the component/part, i.e., USE or REMOVE."
        self.OVER_CONSUMPTION_FLAG = parse_value(self.schema, column_value_map, "OVER_CONSUMPTION_FLAG")
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.SPOOL_FLAG = parse_value(self.schema, column_value_map, "SPOOL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by a spool number."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by expiration date."
        self.OPT_DC1_FLAG = parse_value(self.schema, column_value_map, "OPT_DC1_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC2_FLAG = parse_value(self.schema, column_value_map, "OPT_DC2_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC3_FLAG = parse_value(self.schema, column_value_map, "OPT_DC3_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC4_FLAG = parse_value(self.schema, column_value_map, "OPT_DC4_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.TRACKABLE_FLAG = parse_value(self.schema, column_value_map, "TRACKABLE_FLAG")
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Denormalized UOM associated with the given object as derived from the specific order at the time the record was created."
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.ITEM_CATEGORY = parse_value(self.schema, column_value_map, "ITEM_CATEGORY")
        self.STORE_LOC = parse_value(self.schema, column_value_map, "STORE_LOC")
        self.UNLOADING_POINT = parse_value(self.schema, column_value_map, "UNLOADING_POINT")
        self.REF_DES_PREF_RANK = parse_value(self.schema, column_value_map, "REF_DES_PREF_RANK")
        "Where multiple candidate components are associated with a given reference designator, the rank of a given candidate, where the lowest number shows the highest preference for use."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.ITEM_NOTES = parse_value(self.schema, column_value_map, "ITEM_NOTES")
        "Additional information about a given component/part."
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        "A Number identifier which identifies that this record comes from Plam Device"
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        "A Number identifier which identifies that this record comes from ERP System."
        self.UTILIZATION_RULE = parse_value(self.schema, column_value_map, "UTILIZATION_RULE")
        self.REMOVE_ACTION = parse_value(self.schema, column_value_map, "REMOVE_ACTION")
        "Type or classification of disposition for a given component/part."
        self.UCF_PLAN_ITEM_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.UCF_PLAN_ITEM_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_ITEM_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_ITEM_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_ITEM_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_ITEM_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_ITEM_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_ITEM_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_ITEM_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_ITEM_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_ITEM_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_ITEM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_ITEM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_ITEM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_ITEM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG4")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_ITEM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG5")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_ITEM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PLAN_ITEM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PLAN_ITEM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PLAN_ITEM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_PLAN_ITEM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "The upper bound of the effectivity range for a effectivity type other than time period."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "The lower bound of the effectivity range for a effectivity type other than time period."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "The starting date of the time period during which the operation item is effective."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "The ending date of the time period during which the operation item is effective."
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        "Security group assigned."
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.PART_TITLE = parse_value(self.schema, column_value_map, "PART_TITLE")
        "A descriptive title or name of the part."
        self.STANDARD_PART_FLAG = parse_value(self.schema, column_value_map, "STANDARD_PART_FLAG")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.DISP_PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "DISP_PART_DAT_COL_ID")
        self.PART_LINE_NO = parse_value(self.schema, column_value_map, "PART_LINE_NO")
        "A unique sequential number that is assigned when the component part is authored in the order/plan."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        "A unique sequential number that is assigned to BOM component part."
        self.PHANTOM_KIT_PART_NO = parse_value(self.schema, column_value_map, "PHANTOM_KIT_PART_NO")
        "Parent phantom part no of component part."
        self.REPLACEMENT_PART_NO = parse_value(self.schema, column_value_map, "REPLACEMENT_PART_NO")
        "Contains replacement part number."
        self.REPLACEMENT_PART_CHG = parse_value(self.schema, column_value_map, "REPLACEMENT_PART_CHG")
        "Contains replacement part revision."
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        "Contains BOM Component id if part is authored from BOM."
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        self.REF_DES_DESC = parse_value(self.schema, column_value_map, "REF_DES_DESC")

class SFPL_PLAN_NODE:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "NODE_ID": "STRING",
        "NODE_NO": "STRING",
        "NODE_TYPE": "STRING",
        "NODE_ROW": "NUMBER",
        "NODE_COLUMN": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OPER_KEY": "NUMBER",
        "NODE_TITLE": "STRING",
        "NODE_DESC": "STRING",
        "RETURN_TO_OPER_NO": "STRING",
        "DECISION_TYPE": "STRING",
        "RETURN_TO_OPER_KEY": "NUMBER",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_UPDT_NO",
        "NODE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLAN_NODE_DT_FK", ["DECISION_TYPE"], "SFFND_DECISION_TYPE_DEF", ["DECISION_TYPE"]),
        DbForeignKey("SFPL_PLAN_NODE_NODE_TYPE_FK", ["NODE_TYPE"], "SFFND_NODE_TYPE_DEF", ["NODE_TYPE"]),
        DbForeignKey("SFPL_PLAN_NODE_OPER_FK", ["PLAN_ID","OPER_KEY"], "SFPL_OPERATION_MASTER", ["PLAN_ID","OPER_KEY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.NODE_ID = parse_value(self.schema, column_value_map, "NODE_ID")
        "The unique system-generated identifier of a node in an Operation Flow Diagram."
        self.NODE_NO = parse_value(self.schema, column_value_map, "NODE_NO")
        "User-changeable sequence number identifying a node."
        self.NODE_TYPE = parse_value(self.schema, column_value_map, "NODE_TYPE")
        "Type or classification of node (Operation or Decision)."
        self.NODE_ROW = parse_value(self.schema, column_value_map, "NODE_ROW")
        "The number of the grid row containing the node."
        self.NODE_COLUMN = parse_value(self.schema, column_value_map, "NODE_COLUMN")
        "The number of the grid column containing the node."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.NODE_TITLE = parse_value(self.schema, column_value_map, "NODE_TITLE")
        "A name/short description of a node."
        self.NODE_DESC = parse_value(self.schema, column_value_map, "NODE_DESC")
        "A description of the node."
        self.RETURN_TO_OPER_NO = parse_value(self.schema, column_value_map, "RETURN_TO_OPER_NO")
        self.DECISION_TYPE = parse_value(self.schema, column_value_map, "DECISION_TYPE")
        "Type or classification of decision."
        self.RETURN_TO_OPER_KEY = parse_value(self.schema, column_value_map, "RETURN_TO_OPER_KEY")

class SFCORE_GLOBAL_CONF_HIST:
    schema = {
        "HIST_ID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_USERID": "STRING",
        "HIST_ACTION": "STRING",
        "CONFIG_MODULE_NAME": "STRING",
        "PARAMETER_NAME": "STRING",
        "PARAMETER_VALUE": "STRING",
        "PARAMETER_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.CONFIG_MODULE_NAME = parse_value(self.schema, column_value_map, "CONFIG_MODULE_NAME")
        self.PARAMETER_NAME = parse_value(self.schema, column_value_map, "PARAMETER_NAME")
        self.PARAMETER_VALUE = parse_value(self.schema, column_value_map, "PARAMETER_VALUE")
        self.PARAMETER_DESC = parse_value(self.schema, column_value_map, "PARAMETER_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFFND_CERT_ALTERNATE:
    schema = {
        "CERT": "STRING",
        "ALT_CERT": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_CERT_ALT_VCH1": "STRING",
        "UCF_CERT_ALT_VCH2": "STRING",
        "UCF_CERT_ALT_VCH3": "STRING",
        "UCF_CERT_ALT_VCH4": "STRING",
        "UCF_CERT_ALT_VCH5": "STRING",
        "UCF_CERT_ALT_VCH6": "STRING",
        "UCF_CERT_ALT_VCH7": "STRING",
        "UCF_CERT_ALT_VCH8": "STRING",
        "UCF_CERT_ALT_VCH9": "STRING",
        "UCF_CERT_ALT_VCH10": "STRING",
        "UCF_CERT_ALT_VCH11": "STRING",
        "UCF_CERT_ALT_VCH12": "STRING",
        "UCF_CERT_ALT_VCH13": "STRING",
        "UCF_CERT_ALT_VCH14": "STRING",
        "UCF_CERT_ALT_VCH15": "STRING",
        "UCF_CERT_ALT_NUM1": "NUMBER",
        "UCF_CERT_ALT_NUM2": "NUMBER",
        "UCF_CERT_ALT_NUM3": "NUMBER",
        "UCF_CERT_ALT_NUM4": "NUMBER",
        "UCF_CERT_ALT_NUM5": "NUMBER",
        "UCF_CERT_ALT_FLAG1": "STRING",
        "UCF_CERT_ALT_FLAG2": "STRING",
        "UCF_CERT_ALT_FLAG3": "STRING",
        "UCF_CERT_ALT_FLAG4": "STRING",
        "UCF_CERT_ALT_FLAG5": "STRING",
        "UCF_CERT_ALT_DATE1": "STRING",
        "UCF_CERT_ALT_DATE2": "STRING",
        "UCF_CERT_ALT_DATE3": "STRING",
        "UCF_CERT_ALT_DATE4": "STRING",
        "UCF_CERT_ALT_DATE5": "STRING",
        "UCF_CERT_ALT_VCH255_1": "STRING",
        "UCF_CERT_ALT_VCH255_2": "STRING",
        "UCF_CERT_ALT_VCH255_3": "STRING",
        "UCF_CERT_ALT_VCH4000_1": "STRING",
        "UCF_CERT_ALT_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "CERT",
        "ALT_CERT",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_CERT_ALTERNATE_CERT_FK", ["CERT"], "SFFND_CERT_DEF", ["CERT"]),
        DbForeignKey("SFFND_CERT_ALTERNATE_ALT_FK", ["ALT_CERT"], "SFFND_CERT_DEF", ["CERT"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        "The unique identifier of a certification. For example: MFG, INSPECTION, or CUST."
        self.ALT_CERT = parse_value(self.schema, column_value_map, "ALT_CERT")
        "A certification that qualifies a person to perform a job that requires another certification that is identified by CERT."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_CERT_ALT_VCH1 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH1")
        self.UCF_CERT_ALT_VCH2 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH2")
        self.UCF_CERT_ALT_VCH3 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH3")
        self.UCF_CERT_ALT_VCH4 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH4")
        self.UCF_CERT_ALT_VCH5 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH5")
        self.UCF_CERT_ALT_VCH6 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH6")
        self.UCF_CERT_ALT_VCH7 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH7")
        self.UCF_CERT_ALT_VCH8 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH8")
        self.UCF_CERT_ALT_VCH9 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH9")
        self.UCF_CERT_ALT_VCH10 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH10")
        self.UCF_CERT_ALT_VCH11 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH11")
        self.UCF_CERT_ALT_VCH12 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH12")
        self.UCF_CERT_ALT_VCH13 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH13")
        self.UCF_CERT_ALT_VCH14 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH14")
        self.UCF_CERT_ALT_VCH15 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH15")
        self.UCF_CERT_ALT_NUM1 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_NUM1")
        self.UCF_CERT_ALT_NUM2 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_NUM2")
        self.UCF_CERT_ALT_NUM3 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_NUM3")
        self.UCF_CERT_ALT_NUM4 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_NUM4")
        self.UCF_CERT_ALT_NUM5 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_NUM5")
        self.UCF_CERT_ALT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_FLAG1")
        self.UCF_CERT_ALT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_FLAG2")
        self.UCF_CERT_ALT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_FLAG3")
        self.UCF_CERT_ALT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_FLAG4")
        self.UCF_CERT_ALT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_FLAG5")
        self.UCF_CERT_ALT_DATE1 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_DATE1")
        self.UCF_CERT_ALT_DATE2 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_DATE2")
        self.UCF_CERT_ALT_DATE3 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_DATE3")
        self.UCF_CERT_ALT_DATE4 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_DATE4")
        self.UCF_CERT_ALT_DATE5 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_DATE5")
        self.UCF_CERT_ALT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH255_1")
        self.UCF_CERT_ALT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH255_2")
        self.UCF_CERT_ALT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH255_3")
        self.UCF_CERT_ALT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH4000_1")
        self.UCF_CERT_ALT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_CERT_ALT_VCH4000_2")

class SFQA_DISC_DEFECT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "DEFECT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "DEFECT_COUNT": "NUMBER",
        "PROCESS_TYPE": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.DEFECT_TYPE = parse_value(self.schema, column_value_map, "DEFECT_TYPE")
        "Type or classification of defect."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DEFECT_COUNT = parse_value(self.schema, column_value_map, "DEFECT_COUNT")
        "Number of defects associated with a given discrepancy item."
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        "Type or classification of processType or classification of process."

class SFOR_SFWID_OPER_SUBJECT_ALT:
    schema = {
        "OPER_SUBJECT_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "SUBJECT_NO": "NUMBER",
        "SUBJECT_REV": "NUMBER",
        "OPER_KEY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "INCLUDED_FLAG": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "NOTES": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
    }
    primary_key_columns = [
        "OPER_SUBJECT_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFOR_SFWID_OPER_SUB_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_SUBJECT_ALT = parse_value(self.schema, column_value_map, "OPER_SUBJECT_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.SUBJECT_NO = parse_value(self.schema, column_value_map, "SUBJECT_NO")
        self.SUBJECT_REV = parse_value(self.schema, column_value_map, "SUBJECT_REV")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.INCLUDED_FLAG = parse_value(self.schema, column_value_map, "INCLUDED_FLAG")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."

class SFSQA_SUPPLIER_MANDATES:
    schema = {
        "SUPPLIER_CODE": "STRING",
        "MANDATE_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
    }
    primary_key_columns = [
        "SUPPLIER_CODE",
        "MANDATE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_SUPPLIER_MANDATES_FK2", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFSQA_SUPPLIER_MANDATES_FK1", ["MANDATE_ID"], "SFSQA_OWNER", ["OWNER_CODE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.MANDATE_ID = parse_value(self.schema, column_value_map, "MANDATE_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")

class SFPL_LAST_FILTER_CONTEXT:
    schema = {
        "CONTEXT_ID": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "USERID": "STRING",
        "LAST_FILTER": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CONTEXT_ID",
        "PLAN_ID",
        "PLAN_VERSION",
        "PLAN_REVISION",
        "PLAN_ALTERATIONS",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_LAST_FILTER_CONTEXT_FK1", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONTEXT_ID = parse_value(self.schema, column_value_map, "CONTEXT_ID")
        "Value of variable @ContextId. Usually it contains [select source name - select SQL ID]."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version,revision."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.LAST_FILTER = parse_value(self.schema, column_value_map, "LAST_FILTER")
        "Value of last filter applied on the grid."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_SERIAL_OPER_MATERIAL:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "ASGND_MATERIAL_ID": "STRING",
        "ASGND_MATERIAL_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "MATERIAL_DAT_COL_STATUS": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "LOT_ID",
        "SERIAL_ID",
        "ASGND_MATERIAL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_SERIAL_OPER_MATERIAL_FK2", ["ORDER_ID","LOT_ID","SERIAL_ID"], "SFWID_SERIAL_DESC", ["ORDER_ID","LOT_ID","SERIAL_ID"]),
        DbForeignKey("SFWID_SERIAL_OPER_MATERIAL_FK1", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
        "SFWID_SER_OPER_MTRL_DAT_COL_FK1",
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.ASGND_MATERIAL_ID = parse_value(self.schema, column_value_map, "ASGND_MATERIAL_ID")
        self.ASGND_MATERIAL_NAME = parse_value(self.schema, column_value_map, "ASGND_MATERIAL_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.MATERIAL_DAT_COL_STATUS = parse_value(self.schema, column_value_map, "MATERIAL_DAT_COL_STATUS")
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        self.SFWID_SER_OPER_MTRL_DAT_COL_FK1 = []

class SFFND_ACTION_ITEM_TYPE_DEF:
    schema = {
        "ACTION_ITEM_TYPE": "STRING",
        "ACTION_ITEM_TYPE_DESC": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "INVESTIGATION_TYPE_FLAG": "STRING",
    }
    primary_key_columns = [
        "ACTION_ITEM_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_CA_ACTION_ITEM_DESC_FK7",
    ]
    def __init__(self, column_value_map):
        self.ACTION_ITEM_TYPE = parse_value(self.schema, column_value_map, "ACTION_ITEM_TYPE")
        self.ACTION_ITEM_TYPE_DESC = parse_value(self.schema, column_value_map, "ACTION_ITEM_TYPE_DESC")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.INVESTIGATION_TYPE_FLAG = parse_value(self.schema, column_value_map, "INVESTIGATION_TYPE_FLAG")
        "If Y, Action Item Type is for Investigation tab otherwise for Action Plan tabs."
        self.SFQA_CA_ACTION_ITEM_DESC_FK7 = []

class SFQRTZ_CALENDARS:
    schema = {
        "SCHED_NAME": "STRING",
        "CALENDAR_NAME": "STRING",
        "CALENDAR": "STRING",
    }
    primary_key_columns = [
        "SCHED_NAME",
        "CALENDAR_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SCHED_NAME = parse_value(self.schema, column_value_map, "SCHED_NAME")
        self.CALENDAR_NAME = parse_value(self.schema, column_value_map, "CALENDAR_NAME")
        self.CALENDAR = parse_value(self.schema, column_value_map, "CALENDAR")

class SFPL_CHANGE_MM_OBJECT_XREF:
    schema = {
        "OBJECT_ID": "STRING",
        "CHANGE_REQUEST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "OBJECT_ID",
        "CHANGE_REQUEST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_CHANGE_MM_OBJECT_XREF_FK1", ["CHANGE_REQUEST_ID"], "SFPL_CHANGE_REQUEST", ["CHANGE_REQUEST_ID"]),
        DbForeignKey("SFPL_CHANGE_MM_OBJECT_XREF_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique System Generated Identifier of an OBJECT ID of an Attachment for Change Request."
        self.CHANGE_REQUEST_ID = parse_value(self.schema, column_value_map, "CHANGE_REQUEST_ID")
        "Unique System Generated Identifier of a Change Request."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_CUSTOM_ENDPOINT:
    schema = {
        "ENDPOINT_ID": "STRING",
        "METHOD_TYPE": "STRING",
        "ENDPOINT": "STRING",
        "SERVICE_NAME": "STRING",
        "INSERTION_TIME_STAMP": "DATE",
        "DELETION_TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "ENDPOINT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ENDPOINT_ID = parse_value(self.schema, column_value_map, "ENDPOINT_ID")
        "Primary key system generated value"
        self.METHOD_TYPE = parse_value(self.schema, column_value_map, "METHOD_TYPE")
        "HTTP Method type i.e. GET, PUT, POST, DELETE etc"
        self.ENDPOINT = parse_value(self.schema, column_value_map, "ENDPOINT")
        "End points in Micro Service"
        self.SERVICE_NAME = parse_value(self.schema, column_value_map, "SERVICE_NAME")
        "Micro Service Name"
        self.INSERTION_TIME_STAMP = parse_value(self.schema, column_value_map, "INSERTION_TIME_STAMP")
        "Insertion Time Stamp"
        self.DELETION_TIME_STAMP = parse_value(self.schema, column_value_map, "DELETION_TIME_STAMP")
        "Deletion Time Stamp"

class SFPL_MFG_BOM_TOOL_ORIG:
    schema = {
        "BOM_ID": "STRING",
        "BOM_COMP_TOOL_ID": "STRING",
        "BOM_LINE_ID": "STRING",
        "ITEM_ID": "STRING",
        "QTY": "NUMBER",
        "SERIAL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "DATASOURCE": "STRING",
        "EFF_FROM": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "ITEM_NOTES": "STRING",
        "UCF_MBOM_VCH1": "STRING",
        "LOCATION_ID": "STRING",
        "UCF_MBOM_VCH2": "STRING",
        "UCF_MBOM_VCH3": "STRING",
        "PROGRAM": "STRING",
        "PROJECT": "STRING",
        "UCF_MBOM_VCH4": "STRING",
        "UCF_MBOM_VCH5": "STRING",
        "UCF_MBOM_VCH6": "STRING",
        "UCF_MBOM_VCH7": "STRING",
        "UCF_MBOM_VCH8": "STRING",
        "UCF_MBOM_VCH9": "STRING",
        "UCF_MBOM_VCH10": "STRING",
        "UCF_MBOM_VCH11": "STRING",
        "UCF_MBOM_VCH12": "STRING",
        "UCF_MBOM_VCH13": "STRING",
        "UCF_MBOM_VCH14": "STRING",
        "UCF_MBOM_VCH15": "STRING",
        "UCF_MBOM_NUM1": "NUMBER",
        "UCF_MBOM_NUM2": "NUMBER",
        "UCF_MBOM_NUM3": "NUMBER",
        "UCF_MBOM_NUM4": "NUMBER",
        "UCF_MBOM_NUM5": "NUMBER",
        "UCF_MBOM_DATE1": "STRING",
        "UCF_MBOM_DATE2": "STRING",
        "UCF_MBOM_DATE3": "STRING",
        "UCF_MBOM_DATE4": "STRING",
        "UCF_MBOM_DATE5": "STRING",
        "UCF_MBOM_FLAG1": "STRING",
        "UCF_MBOM_FLAG2": "STRING",
        "UCF_MBOM_FLAG3": "STRING",
        "UCF_MBOM_FLAG4": "STRING",
        "UCF_MBOM_FLAG5": "STRING",
        "UCF_MBOM_VCH255_1": "STRING",
        "UCF_MBOM_VCH255_2": "STRING",
        "UCF_MBOM_VCH255_3": "STRING",
        "UCF_MBOM_VCH4000_1": "STRING",
        "UCF_MBOM_VCH4000_2": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
        "BOM_COMP_TOOL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_TOOL_ORIG_FK2", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_ORIG_FK7", ["BOM_ID","BOM_LINE_ID"], "SFPL_MFG_BOM_REV_LINE_NO_ORIG", ["BOM_ID","BOM_LINE_ID"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_ORIG_FK1", ["BOM_ID"], "SFPL_MFG_BOM_REV_ORIG", ["BOM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_ORIG_FK4", ["PROJECT"], "SFFND_PROJECT_DEF", ["PROJECT"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_ORIG_FK5", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_ORIG_FK6", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_ORIG_FK3", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique, system-generated ID of the BOM."
        self.BOM_COMP_TOOL_ID = parse_value(self.schema, column_value_map, "BOM_COMP_TOOL_ID")
        "Unique, system-generated ID for the assigned component/tool."
        self.BOM_LINE_ID = parse_value(self.schema, column_value_map, "BOM_LINE_ID")
        "Reference of BOM Line of the BOM Tool."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/tool."
        self.QTY = parse_value(self.schema, column_value_map, "QTY")
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/tool is or should be tracked by serial number."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the component/tool is or should be tracked by expiration date."
        self.DATASOURCE = parse_value(self.schema, column_value_map, "DATASOURCE")
        "The source system from which data in this record has been originated."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "The upper bound of the effectivity range for a effectivity type other than time period."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "The lower bound of the effectivity range for a effectivity type other than time period."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "The starting date of the time period during which the BOM revision is effective."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "The ending date of the time period during which the BOM revision is effective."
        self.ITEM_NOTES = parse_value(self.schema, column_value_map, "ITEM_NOTES")
        "Additional information about a given component/tool."
        self.UCF_MBOM_VCH1 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        "The associated location."
        self.UCF_MBOM_VCH2 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH3 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH3")
        "User-configurable field for VARCHAR data type."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated program."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.UCF_MBOM_VCH4 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH5 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH6 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH7 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH8 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH9 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH10 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH11 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH12 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH13 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH14 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH15 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_NUM1 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_NUM2 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_NUM3 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_NUM4 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_NUM5 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_DATE1 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_DATE2 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_DATE3 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_DATE4 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_DATE5 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_MBOM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        "A Number identifier which identifies that this record comes from Plam Device."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_OPER_MATERIAL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "AUTHORED_MATERIAL_ID": "STRING",
        "MATERIAL_NAME": "STRING",
        "STEP_NO": "STRING",
        "OPER_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "SECURITY_GROUP": "STRING",
        "MATERIAL_ID": "STRING",
        "STATUS": "STRING",
        "UOM": "STRING",
        "QUANTITY": "NUMBER",
        "FREEZER_NAME": "STRING",
        "EXPIRATION_DATE": "STRING",
        "TIME_REMAINING": "NUMBER",
        "CLASSIFIED": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.AUTHORED_MATERIAL_ID = parse_value(self.schema, column_value_map, "AUTHORED_MATERIAL_ID")
        self.MATERIAL_NAME = parse_value(self.schema, column_value_map, "MATERIAL_NAME")
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        self.QUANTITY = parse_value(self.schema, column_value_map, "QUANTITY")
        self.FREEZER_NAME = parse_value(self.schema, column_value_map, "FREEZER_NAME")
        self.EXPIRATION_DATE = parse_value(self.schema, column_value_map, "EXPIRATION_DATE")
        self.TIME_REMAINING = parse_value(self.schema, column_value_map, "TIME_REMAINING")
        self.CLASSIFIED = parse_value(self.schema, column_value_map, "CLASSIFIED")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")

class SFPL_PLAN_VALIDATION_KEYS:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "PLAN_KEY": "NUMBER",
        "PLAN_FILE_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_VERSION",
        "PLAN_REVISION",
        "PLAN_ALTERATIONS",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLAN_VLDTN_KEY_FK", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.PLAN_KEY = parse_value(self.schema, column_value_map, "PLAN_KEY")
        self.PLAN_FILE_NAME = parse_value(self.schema, column_value_map, "PLAN_FILE_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_SERIAL_OPER_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "SERIAL_OPER_STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "MOVE_PENDING_FLAG": "STRING",
        "STATUS_CHG_NOTES": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "SERIAL_OPER_HOLD_STATUS": "STRING",
        "ACTUAL_IN_QUEUE_DATE": "STRING",
        "STATUS_CHG_REASON": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "OPER_URC": "NUMBER",
        "SERIAL_OPER_DOC_STATUS": "STRING",
        "USER_OI_UNIT_COUNTED_FLAG": "STRING",
        "ITEM_LOC": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.SERIAL_OPER_STATUS = parse_value(self.schema, column_value_map, "SERIAL_OPER_STATUS")
        "Status of the operation for the given serial number."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.MOVE_PENDING_FLAG = parse_value(self.schema, column_value_map, "MOVE_PENDING_FLAG")
        "A flag (Y/N) indicating whether components/parts at a given operation have been flagged to move to the next operation pending a decision."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated component/part."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised start date for the given operation."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised end date for the given operation."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which work for the operation was actually started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which work for the operation was actually completed."
        self.SERIAL_OPER_HOLD_STATUS = parse_value(self.schema, column_value_map, "SERIAL_OPER_HOLD_STATUS")
        "Status of the operation hold for the given serial number."
        self.ACTUAL_IN_QUEUE_DATE = parse_value(self.schema, column_value_map, "ACTUAL_IN_QUEUE_DATE")
        "Date that the status of the given serial number moved to IN QUEUE at the given operation."
        self.STATUS_CHG_REASON = parse_value(self.schema, column_value_map, "STATUS_CHG_REASON")
        "Reason for a change in status."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.OPER_URC = parse_value(self.schema, column_value_map, "OPER_URC")
        "When executing a work order with returns (iterative branching) this is a user configurable counter."
        self.SERIAL_OPER_DOC_STATUS = parse_value(self.schema, column_value_map, "SERIAL_OPER_DOC_STATUS")
        "Status to know whether serial oper status has been updated since last outbound document was sent"
        self.USER_OI_UNIT_COUNTED_FLAG = parse_value(self.schema, column_value_map, "USER_OI_UNIT_COUNTED_FLAG")
        "Set Y means selected Unit/Lot is considered for user over inspection Unit/Lot counter. Default is N."
        self.ITEM_LOC = parse_value(self.schema, column_value_map, "ITEM_LOC")
        "Item location of unit."

class SFFND_STD_DATCOL_TYPE_DEF:
    schema = {
        "STD_DATCOL_ID": "STRING",
        "DAT_COL_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "DAT_COL_TYPE_DESC": "STRING",
        "UCF_DAT_COL_VCH1": "STRING",
        "UCF_DAT_COL_VCH2": "STRING",
        "UCF_DAT_COL_FLAG1": "STRING",
        "INITIALIZE_FLAG": "STRING",
        "UPPER_LIMIT": "STRING",
        "LOWER_LIMIT": "STRING",
        "DP_SUBGROUP_SIZE": "NUMBER",
        "DC_START_DATE": "STRING",
        "WE_RULES_1": "STRING",
        "WE_RULES_2": "STRING",
        "WE_RULES_3": "STRING",
        "WE_RULES_4": "STRING",
        "WE_RULES_5": "STRING",
        "WE_RULES_6": "STRING",
        "WE_RULES_7": "STRING",
        "CPU_VALUE": "NUMBER",
        "CPL_VALUE": "NUMBER",
        "CPK_INDEX": "NUMBER",
        "ESTIMATED_SIGMA_VALUE": "NUMBER",
        "UCLR": "NUMBER",
        "LCLR": "NUMBER",
        "WE_RULES": "STRING",
        "ORDER_STOP_FLAG": "STRING",
        "STD_DEV": "NUMBER",
        "UCL": "NUMBER",
        "LCL": "NUMBER",
        "CPU": "NUMBER",
        "CPL": "NUMBER",
        "CPK": "NUMBER",
        "STD_DEV_VAL": "NUMBER",
        "SPC_FLAG": "STRING",
        "SELECTABLE_DC_FLAG": "STRING",
        "UCF_DAT_COL_VCH3": "STRING",
        "UCF_DAT_COL_VCH4": "STRING",
        "UCF_DAT_COL_VCH5": "STRING",
        "UCF_DAT_COL_VCH6": "STRING",
        "UCF_DAT_COL_VCH7": "STRING",
        "UCF_DAT_COL_VCH8": "STRING",
        "UCF_DAT_COL_VCH9": "STRING",
        "UCF_DAT_COL_VCH10": "STRING",
        "UCF_DAT_COL_VCH11": "STRING",
        "UCF_DAT_COL_VCH12": "STRING",
        "UCF_DAT_COL_VCH13": "STRING",
        "UCF_DAT_COL_VCH14": "STRING",
        "UCF_DAT_COL_VCH15": "STRING",
        "UCF_DAT_COL_NUM1": "NUMBER",
        "UCF_DAT_COL_NUM2": "NUMBER",
        "UCF_DAT_COL_NUM3": "NUMBER",
        "UCF_DAT_COL_NUM4": "NUMBER",
        "UCF_DAT_COL_NUM5": "NUMBER",
        "UCF_DAT_COL_DATE1": "STRING",
        "UCF_DAT_COL_DATE2": "STRING",
        "UCF_DAT_COL_DATE3": "STRING",
        "UCF_DAT_COL_DATE4": "STRING",
        "UCF_DAT_COL_DATE5": "STRING",
        "UCF_DAT_COL_FLAG2": "STRING",
        "UCF_DAT_COL_FLAG3": "STRING",
        "UCF_DAT_COL_FLAG4": "STRING",
        "UCF_DAT_COL_FLAG5": "STRING",
        "UCF_DAT_COL_VCH255_1": "STRING",
        "UCF_DAT_COL_VCH255_2": "STRING",
        "UCF_DAT_COL_VCH255_3": "STRING",
        "UCF_DAT_COL_VCH4000_1": "STRING",
        "UCF_DAT_COL_VCH4000_2": "STRING",
        "UOM": "STRING",
        "CERT": "STRING",
        "TOOLING_FLAG": "STRING",
        "INSPECTION_METHOD": "STRING",
        "FREQUENCY": "NUMBER",
        "IC_FLAG": "STRING",
        "CONTROL_PLAN_ID": "STRING",
        "RESULT_ID": "STRING",
        "TEMPLATE_FILE_ID": "STRING",
    }
    primary_key_columns = [
        "STD_DATCOL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_STD_DATCOL_TYPE_DEF_FK2", ["CERT"], "SFFND_CERT_DEF", ["CERT"]),
        DbForeignKey("SFFND_STD_DATCOL_TYPE_DEF_FK1", ["UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFFND_STD_DATCOL_TYPE_DEF_FK6", ["DP_SUBGROUP_SIZE"], "SFFND_CONTROL_LIMIT_CALC_DEF", ["DP_SUBGROUP_SIZE"]),
        DbForeignKey("SFFND_STD_DATCOL_TYPE_DEF_FK4", ["CONTROL_PLAN_ID"], "SFSQA_SAMPLING_RULE_DESC", ["SAMPLE_RULE_ID"]),
        DbForeignKey("SFFND_STD_DATCOL_TYPE_DEF_FK5", ["RESULT_ID"], "SFSQA_VALID_RESULT_TYPE_DEF", ["RESULT_ID"]),
        DbForeignKey("SFFND_STD_DATCOL_TYPE_DEF_FK7", ["TEMPLATE_FILE_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFFND_STD_DATCOL_TYPE_DEF_FK3", ["INSPECTION_METHOD"], "SFSQA_INSP_METHOD_DEF", ["INSPECTION_METHOD"]),
    ]
    refs = [
        "SFWID_OPER_DAT_COL_FK1",
        "SFFND_DCTYPE_SELECT_DEF_FK1",
        "SFQA_CA_TEMPLATE_DESC_FK2",
        "SFPL_STEP_DAT_COL_FK2",
        "SFWID_OPER_DAT_COL_ALT_FK3",
        "SFFND_STD_DATCOL_TOOL_FK2",
    ]
    def __init__(self, column_value_map):
        self.STD_DATCOL_ID = parse_value(self.schema, column_value_map, "STD_DATCOL_ID")
        self.DAT_COL_TYPE = parse_value(self.schema, column_value_map, "DAT_COL_TYPE")
        "Type or classification of data collection."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.DAT_COL_TYPE_DESC = parse_value(self.schema, column_value_map, "DAT_COL_TYPE_DESC")
        "A description of the data collection type/class."
        self.UCF_DAT_COL_VCH1 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_VCH2 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.INITIALIZE_FLAG = parse_value(self.schema, column_value_map, "INITIALIZE_FLAG")
        self.UPPER_LIMIT = parse_value(self.schema, column_value_map, "UPPER_LIMIT")
        "The highest allowable data value for the given data collection."
        self.LOWER_LIMIT = parse_value(self.schema, column_value_map, "LOWER_LIMIT")
        "The lowest allowable data value for the given data collection."
        self.DP_SUBGROUP_SIZE = parse_value(self.schema, column_value_map, "DP_SUBGROUP_SIZE")
        self.DC_START_DATE = parse_value(self.schema, column_value_map, "DC_START_DATE")
        self.WE_RULES_1 = parse_value(self.schema, column_value_map, "WE_RULES_1")
        self.WE_RULES_2 = parse_value(self.schema, column_value_map, "WE_RULES_2")
        self.WE_RULES_3 = parse_value(self.schema, column_value_map, "WE_RULES_3")
        self.WE_RULES_4 = parse_value(self.schema, column_value_map, "WE_RULES_4")
        self.WE_RULES_5 = parse_value(self.schema, column_value_map, "WE_RULES_5")
        self.WE_RULES_6 = parse_value(self.schema, column_value_map, "WE_RULES_6")
        self.WE_RULES_7 = parse_value(self.schema, column_value_map, "WE_RULES_7")
        self.CPU_VALUE = parse_value(self.schema, column_value_map, "CPU_VALUE")
        self.CPL_VALUE = parse_value(self.schema, column_value_map, "CPL_VALUE")
        self.CPK_INDEX = parse_value(self.schema, column_value_map, "CPK_INDEX")
        self.ESTIMATED_SIGMA_VALUE = parse_value(self.schema, column_value_map, "ESTIMATED_SIGMA_VALUE")
        self.UCLR = parse_value(self.schema, column_value_map, "UCLR")
        self.LCLR = parse_value(self.schema, column_value_map, "LCLR")
        self.WE_RULES = parse_value(self.schema, column_value_map, "WE_RULES")
        self.ORDER_STOP_FLAG = parse_value(self.schema, column_value_map, "ORDER_STOP_FLAG")
        self.STD_DEV = parse_value(self.schema, column_value_map, "STD_DEV")
        self.UCL = parse_value(self.schema, column_value_map, "UCL")
        "Upper control limit."
        self.LCL = parse_value(self.schema, column_value_map, "LCL")
        "Lower control limit."
        self.CPU = parse_value(self.schema, column_value_map, "CPU")
        self.CPL = parse_value(self.schema, column_value_map, "CPL")
        self.CPK = parse_value(self.schema, column_value_map, "CPK")
        self.STD_DEV_VAL = parse_value(self.schema, column_value_map, "STD_DEV_VAL")
        self.SPC_FLAG = parse_value(self.schema, column_value_map, "SPC_FLAG")
        self.SELECTABLE_DC_FLAG = parse_value(self.schema, column_value_map, "SELECTABLE_DC_FLAG")
        self.UCF_DAT_COL_VCH3 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_VCH4 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_VCH5 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_VCH6 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_VCH7 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_VCH8 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_VCH9 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_VCH10 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_VCH11 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_VCH12 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_VCH13 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_VCH14 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_VCH15 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_DAT_COL_NUM1 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_DAT_COL_NUM2 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_DAT_COL_NUM3 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_DAT_COL_NUM4 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_DAT_COL_NUM5 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_DAT_COL_DATE1 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_DAT_COL_DATE2 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_DAT_COL_DATE3 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_DAT_COL_DATE4 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_DAT_COL_DATE5 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_DAT_COL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DAT_COL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DAT_COL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DAT_COL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DAT_COL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_DAT_COL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_DAT_COL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_DAT_COL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_DAT_COL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_DAT_COL_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        self.TOOLING_FLAG = parse_value(self.schema, column_value_map, "TOOLING_FLAG")
        self.INSPECTION_METHOD = parse_value(self.schema, column_value_map, "INSPECTION_METHOD")
        self.FREQUENCY = parse_value(self.schema, column_value_map, "FREQUENCY")
        self.IC_FLAG = parse_value(self.schema, column_value_map, "IC_FLAG")
        self.CONTROL_PLAN_ID = parse_value(self.schema, column_value_map, "CONTROL_PLAN_ID")
        self.RESULT_ID = parse_value(self.schema, column_value_map, "RESULT_ID")
        self.TEMPLATE_FILE_ID = parse_value(self.schema, column_value_map, "TEMPLATE_FILE_ID")
        "The unique identifier of the object being referenced."
        self.SFWID_OPER_DAT_COL_FK1 = []
        self.SFFND_DCTYPE_SELECT_DEF_FK1 = []
        self.SFQA_CA_TEMPLATE_DESC_FK2 = []
        self.SFPL_STEP_DAT_COL_FK2 = []
        self.SFWID_OPER_DAT_COL_ALT_FK3 = []
        self.SFFND_STD_DATCOL_TOOL_FK2 = []

class SFQA_CA_REQ_DESC_XREF:
    schema = {
        "CA_ID": "STRING",
        "CA_REQUEST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "CA_REQUEST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_REQ_X_CA_FK", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CA_REQ_X_CA_REQ_FK", ["CA_REQUEST_ID"], "SFQA_CA_REQUEST", ["CA_REQUEST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_CA_AFFECTED_WORK_LDC:
    schema = {
        "CA_ID": "STRING",
        "UPDT_USERID": "STRING",
        "LOCATION_ID": "STRING",
        "DEPARTMENT_ID": "STRING",
        "TIME_STAMP": "DATE",
        "CENTER_ID": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "LOCATION_ID",
        "DEPARTMENT_ID",
        "CENTER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_AFFECTED_WORK_LDC_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CA_AFFECTED_WORK_LDC_FK2", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        self.DEPARTMENT_ID = parse_value(self.schema, column_value_map, "DEPARTMENT_ID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.CENTER_ID = parse_value(self.schema, column_value_map, "CENTER_ID")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFQRTZ_LOCKS:
    schema = {
        "SCHED_NAME": "STRING",
        "LOCK_NAME": "STRING",
    }
    primary_key_columns = [
        "SCHED_NAME",
        "LOCK_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SCHED_NAME = parse_value(self.schema, column_value_map, "SCHED_NAME")
        self.LOCK_NAME = parse_value(self.schema, column_value_map, "LOCK_NAME")

class SFQA_DISC_ITEM_BLOCK_STATUS:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "BLOCK_ID": "STRING",
        "BLOCK_STATUS": "STRING",
        "PARENT_BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "BLOCK_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_ITM_BLCK_STATUS_FK2", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
        DbForeignKey("SFQA_DISC_ITM_BLCK_STATUS_FK1", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Name/Unique identifier of Block of DI."
        self.BLOCK_STATUS = parse_value(self.schema, column_value_map, "BLOCK_STATUS")
        "Current status of the Block."
        self.PARENT_BLOCK_ID = parse_value(self.schema, column_value_map, "PARENT_BLOCK_ID")
        "Name/Unique identifier of Parent Block, if Block is Sub-Block."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFRPT_CHART:
    schema = {
        "OWNER_USERID": "STRING",
        "POSITION": "NUMBER",
        "CHART_HASH": "NUMBER",
        "CHART_STATE": "STRING",
    }
    primary_key_columns = [
        "OWNER_USERID",
        "POSITION",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OWNER_USERID = parse_value(self.schema, column_value_map, "OWNER_USERID")
        self.POSITION = parse_value(self.schema, column_value_map, "POSITION")
        self.CHART_HASH = parse_value(self.schema, column_value_map, "CHART_HASH")
        self.CHART_STATE = parse_value(self.schema, column_value_map, "CHART_STATE")

class SFCORE_FIELD_DEFINITIONS:
    schema = {
        "FIELD_DEFINITION_ID": "STRING",
        "TIME_STAMP": "DATE",
        "UPDT_USERID": "STRING",
        "COL_NAME": "STRING",
        "DESCRIPTION": "STRING",
        "FIELD_DEFINITION": "STRING",
        "UDV_IDS": "STRING",
    }
    primary_key_columns = [
        "FIELD_DEFINITION_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.FIELD_DEFINITION_ID = parse_value(self.schema, column_value_map, "FIELD_DEFINITION_ID")
        "unique identifier"
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.COL_NAME = parse_value(self.schema, column_value_map, "COL_NAME")
        "name of column"
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        "description of column and its definition"
        self.FIELD_DEFINITION = parse_value(self.schema, column_value_map, "FIELD_DEFINITION")
        "the actual field definition"
        self.UDV_IDS = parse_value(self.schema, column_value_map, "UDV_IDS")
        "list of UDVs by id to apply the definition to"

class SFQA_CA_REQUEST:
    schema = {
        "CA_REQUEST_ID": "STRING",
        "REQUEST_TYPE": "STRING",
        "REQUEST_STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SOURCE_GROUP": "STRING",
        "AFFECTED_PROGRAM": "STRING",
        "SOURCE_CONTACT": "STRING",
        "SOURCE_DOC_TYPE": "STRING",
        "SOURCE_DOC_NO": "STRING",
        "SCHED_PRIORITY": "STRING",
        "REQUEST_TITLE": "STRING",
        "CUST_ID": "STRING",
        "STATUS_CHG_NOTES": "STRING",
        "ISSUE_DESC": "STRING",
        "PROB_PHYSICAL_EVIDENCE": "STRING",
        "PROB_FIRST_OBSERVED": "STRING",
        "PROB_OCCURRING_TREND": "STRING",
        "PROB_OCCURRING_PLACES": "STRING",
        "PROB_OCCURED_BEFORE": "STRING",
        "PROB_IMPACT": "STRING",
        "AFFECTED_BY_PROBLEM": "STRING",
        "REQUEST_CREATE_TIME_STAMP": "STRING",
        "RISK_LIKELIHOOD_RAT_ID": "STRING",
        "UCF_CA_REQUEST_VCH1": "STRING",
        "UCF_CA_REQUEST_VCH2": "STRING",
        "RISK_SEVERITY_RAT_ID": "STRING",
        "RISK_DETECTABILITY_RAT_ID": "STRING",
        "UCF_CA_REQUEST_VCH3": "STRING",
        "REQUEST_CREATE_USERID": "STRING",
        "UCF_CA_REQUEST_VCH4": "STRING",
        "UCF_CA_REQUEST_VCH5": "STRING",
        "UCF_CA_REQUEST_VCH6": "STRING",
        "UCF_CA_REQUEST_VCH7": "STRING",
        "UCF_CA_REQUEST_VCH8": "STRING",
        "UCF_CA_REQUEST_VCH9": "STRING",
        "UCF_CA_REQUEST_VCH10": "STRING",
        "UCF_CA_REQUEST_VCH11": "STRING",
        "UCF_CA_REQUEST_VCH12": "STRING",
        "UCF_CA_REQUEST_VCH13": "STRING",
        "UCF_CA_REQUEST_VCH14": "STRING",
        "UCF_CA_REQUEST_VCH15": "STRING",
        "UCF_CA_REQUEST_NUM1": "NUMBER",
        "UCF_CA_REQUEST_NUM2": "NUMBER",
        "UCF_CA_REQUEST_NUM3": "NUMBER",
        "UCF_CA_REQUEST_NUM4": "NUMBER",
        "UCF_CA_REQUEST_NUM5": "NUMBER",
        "UCF_CA_REQUEST_DATE1": "STRING",
        "UCF_CA_REQUEST_DATE2": "STRING",
        "UCF_CA_REQUEST_DATE3": "STRING",
        "UCF_CA_REQUEST_DATE4": "STRING",
        "UCF_CA_REQUEST_DATE5": "STRING",
        "UCF_CA_REQUEST_FLAG1": "STRING",
        "UCF_CA_REQUEST_FLAG2": "STRING",
        "UCF_CA_REQUEST_FLAG3": "STRING",
        "UCF_CA_REQUEST_FLAG4": "STRING",
        "UCF_CA_REQUEST_FLAG5": "STRING",
        "UCF_CA_REQUEST_VCH255_1": "STRING",
        "UCF_CA_REQUEST_VCH255_2": "STRING",
        "UCF_CA_REQUEST_VCH255_3": "STRING",
        "UCF_CA_REQUEST_VCH4000_1": "STRING",
        "UCF_CA_REQUEST_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "CA_REQUEST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_REQUEST_FK4", ["AFFECTED_PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("SFQA_CA_REQUEST_FK6", ["RISK_SEVERITY_RAT_ID"], "SFFND_RISK_SEVERITY_RAT_DEF", ["RISK_SEVERITY_RAT_ID"]),
        DbForeignKey("SFQA_CA_REQUEST_FK7", ["RISK_DETECTABILITY_RAT_ID"], "SFFND_RISK_DETECTABLE_RAT_DEF", ["RISK_DETECTABILITY_RAT_ID"]),
        DbForeignKey("SFQA_CA_REQUEST_FK5", ["RISK_LIKELIHOOD_RAT_ID"], "SFFND_RISK_LIKELIHOOD_RAT_DEF", ["RISK_LIKELIHOOD_RAT_ID"]),
        DbForeignKey("SFQA_CA_REQ_SRC_DOC_TYPE_FK", ["SOURCE_DOC_TYPE"], "SFQA_CA_REQ_DOC_TYPE_DEF", ["SOURCE_DOC_TYPE"]),
        DbForeignKey("SFQA_CA_REQ_SRC_GRP_FK", ["SOURCE_GROUP"], "SFQA_CA_REQ_SRC_GROUP_DEF", ["SOURCE_GROUP"]),
        DbForeignKey("SFQA_CA_REQUEST_FK8", ["REQUEST_CREATE_USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFQA_CA_REQ_REQ_TYPE_FK", ["REQUEST_TYPE"], "SFQA_CA_REQUEST_TYPE_DEF", ["REQUEST_TYPE"]),
    ]
    refs = [
        "SFQA_CA_REQ_AFFECTEDWKLDC_FK",
        "SFQA_CA_REQ_AFFECTED_MACH_FK",
        "SFQA_CA_REQ_AFFECTED_TOOLS_FK",
        "SFQA_CA_REQ_AFFECTEDSUPPLRS_FK",
        "SFQA_CAREQ_LAST_FILTER_CONT_F1",
        "SFQA_CA_REQ_X_CA_REQ_FK",
        "SFQA_CA_REQ_SBJ_CA_REQ_FK",
        "SFQA_CA_REQ_AFFECTEDTMASGN_FK",
        "SFQA_CA_REQ_AFFECTED_ITEMS_FK",
        "SFQA_CA_REQUEST_MM_OBJECTS_FK2",
        "SFQA_CA_REQ_AFFECTED_CUST_FK",
        "SFQA_CA_REQ_TXT_REQ_FK",
    ]
    def __init__(self, column_value_map):
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.REQUEST_TYPE = parse_value(self.schema, column_value_map, "REQUEST_TYPE")
        "Type or classification of Corrective Action Request."
        self.REQUEST_STATUS = parse_value(self.schema, column_value_map, "REQUEST_STATUS")
        "Current status of the Corrective Action Request, e.g., IN QUEUE, ACCEPT, CANCEL."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SOURCE_GROUP = parse_value(self.schema, column_value_map, "SOURCE_GROUP")
        "The group that generated the Corrective Action Request."
        self.AFFECTED_PROGRAM = parse_value(self.schema, column_value_map, "AFFECTED_PROGRAM")
        "The program that is affected by the problem described in the Corrective Action Request."
        self.SOURCE_CONTACT = parse_value(self.schema, column_value_map, "SOURCE_CONTACT")
        "Contact information for the source group originating the Corrective Action Request."
        self.SOURCE_DOC_TYPE = parse_value(self.schema, column_value_map, "SOURCE_DOC_TYPE")
        "Type or classification of document used to create the Corrective Action Request."
        self.SOURCE_DOC_NO = parse_value(self.schema, column_value_map, "SOURCE_DOC_NO")
        "Identifier of the document used to create the Corrective Action Request."
        self.SCHED_PRIORITY = parse_value(self.schema, column_value_map, "SCHED_PRIORITY")
        "The scheduled priority of the associated Corrective Action request, e.g., High, Low, Medium."
        self.REQUEST_TITLE = parse_value(self.schema, column_value_map, "REQUEST_TITLE")
        "Title or name of the Corrective Action Request."
        self.CUST_ID = parse_value(self.schema, column_value_map, "CUST_ID")
        "Unique identifier of the associated customer."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated Correction Action request."
        self.ISSUE_DESC = parse_value(self.schema, column_value_map, "ISSUE_DESC")
        "Actual Condition of the Issue."
        self.PROB_PHYSICAL_EVIDENCE = parse_value(self.schema, column_value_map, "PROB_PHYSICAL_EVIDENCE")
        "Physical Evidence of the Problem."
        self.PROB_FIRST_OBSERVED = parse_value(self.schema, column_value_map, "PROB_FIRST_OBSERVED")
        "Where was the Problem first observed?"
        self.PROB_OCCURRING_TREND = parse_value(self.schema, column_value_map, "PROB_OCCURRING_TREND")
        "Problem occurring Trend."
        self.PROB_OCCURRING_PLACES = parse_value(self.schema, column_value_map, "PROB_OCCURRING_PLACES")
        "Problem occurring Places."
        self.PROB_OCCURED_BEFORE = parse_value(self.schema, column_value_map, "PROB_OCCURED_BEFORE")
        "Has Problem occured before?"
        self.PROB_IMPACT = parse_value(self.schema, column_value_map, "PROB_IMPACT")
        "Impact of the Problem."
        self.AFFECTED_BY_PROBLEM = parse_value(self.schema, column_value_map, "AFFECTED_BY_PROBLEM")
        "Who is affected by Problem?"
        self.REQUEST_CREATE_TIME_STAMP = parse_value(self.schema, column_value_map, "REQUEST_CREATE_TIME_STAMP")
        "The date and time when the Request is created."
        self.RISK_LIKELIHOOD_RAT_ID = parse_value(self.schema, column_value_map, "RISK_LIKELIHOOD_RAT_ID")
        "Unique identifier of a given Risk Likelihood Rating."
        self.UCF_CA_REQUEST_VCH1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH2")
        "User-configurable field for VARCHAR data type."
        self.RISK_SEVERITY_RAT_ID = parse_value(self.schema, column_value_map, "RISK_SEVERITY_RAT_ID")
        "Unique identifier of a given Risk Severity Rating."
        self.RISK_DETECTABILITY_RAT_ID = parse_value(self.schema, column_value_map, "RISK_DETECTABILITY_RAT_ID")
        "Unique identifier of a given Risk Detectability Rating."
        self.UCF_CA_REQUEST_VCH3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH3")
        "User-configurable field for VARCHAR data type."
        self.REQUEST_CREATE_USERID = parse_value(self.schema, column_value_map, "REQUEST_CREATE_USERID")
        "Unique identifier of the user who has created Request."
        self.UCF_CA_REQUEST_VCH4 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH5 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH6 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH7 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH8 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH9 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH10 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH11 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH12 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH13 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH14 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH15 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_NUM1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_NUM2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_NUM3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_NUM4 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_NUM5 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_DATE1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_DATE2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_DATE3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_DATE4 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_DATE5 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_FLAG4 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_FLAG5 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_REQUEST_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_REQUEST_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_REQUEST_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_CA_REQUEST_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.SFQA_CA_REQ_AFFECTEDWKLDC_FK = []
        self.SFQA_CA_REQ_AFFECTED_MACH_FK = []
        self.SFQA_CA_REQ_AFFECTED_TOOLS_FK = []
        self.SFQA_CA_REQ_AFFECTEDSUPPLRS_FK = []
        self.SFQA_CAREQ_LAST_FILTER_CONT_F1 = []
        self.SFQA_CA_REQ_X_CA_REQ_FK = []
        self.SFQA_CA_REQ_SBJ_CA_REQ_FK = []
        self.SFQA_CA_REQ_AFFECTEDTMASGN_FK = []
        self.SFQA_CA_REQ_AFFECTED_ITEMS_FK = []
        self.SFQA_CA_REQUEST_MM_OBJECTS_FK2 = []
        self.SFQA_CA_REQ_AFFECTED_CUST_FK = []
        self.SFQA_CA_REQ_TXT_REQ_FK = []

class SFFND_JGROUPSPING:
    schema = {
        "OWN_ADDR": "STRING",
        "BIND_ADDR": "STRING",
        "CREATED": "STRING",
        "CLUSTER_NAME": "STRING",
        "PING_DATA": "STRING",
    }
    primary_key_columns = [
        "OWN_ADDR",
        "CLUSTER_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OWN_ADDR = parse_value(self.schema, column_value_map, "OWN_ADDR")
        self.BIND_ADDR = parse_value(self.schema, column_value_map, "BIND_ADDR")
        self.CREATED = parse_value(self.schema, column_value_map, "CREATED")
        self.CLUSTER_NAME = parse_value(self.schema, column_value_map, "CLUSTER_NAME")
        self.PING_DATA = parse_value(self.schema, column_value_map, "PING_DATA")

class SFCORE_UDV_LIB:
    schema = {
        "UDV_ID": "STRING",
        "UDV_TAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "UDV_TYPE": "STRING",
        "UDV_DESC": "STRING",
        "STATE": "STRING",
        "LOAD_REF": "STRING",
        "TOOL_VERSION": "STRING",
        "OBJECT_REV": "STRING",
        "OWNER_GROUP": "STRING",
        "UDV_DEFINITION": "STRING",
        "UDV_DEFINITION_SEARCH": "STRING",
        "STYPE": "STRING",
    }
    primary_key_columns = [
        "UDV_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_UDV_LIB_STYPE_FK", ["STYPE"], "SFCORE_MODULES", ["GROUP_NAME"]),
    ]
    refs = [
        "SFQA_DISC_TYPE_DEF_FK7",
        "SFQA_DISC_TYPE_DEF_FK8",
        "SFQA_DISC_TYPE_DEF_FK10",
        "SFQA_DISC_TYPE_DEF_FK11",
        "SFQA_DISC_TYPE_DEF_FK12",
        "SFQA_DISC_TYPE_DEF_FK13",
        "SFQA_DISC_TYPE_DEF_FK14",
        "SFQA_DISC_TYPE_DEF_FK15",
        "SFQA_DISC_TYPE_DEF_FK4",
        "SFQA_DISC_TYPE_DEF_FK5",
        "SFQA_DISC_TYPE_DEF_FK6",
        "SFQA_DISC_TYPE_DEF_FK9",
        "SFQA_CA_TYPE_DEF_FK9",
        "SFQA_CA_TYPE_DEF_FK12",
        "SFQA_CA_TYPE_DEF_FK8",
        "SFQA_CA_TYPE_DEF_FK10",
        "SFQA_CA_TYPE_DEF_FK11",
        "SFQA_CA_TYPE_DEF_FK13",
        "SFQA_CA_TYPE_DEF_FK2",
        "SFQA_CA_TYPE_DEF_FK4",
        "SFQA_CA_TYPE_DEF_FK5",
        "SFQA_CA_TYPE_DEF_FK6",
        "SFQA_CA_TYPE_DEF_FK7",
        "SFQA_CA_TYPE_DEF_FK3",
        "SFCORE_UDVFLDR_UDVLIB_FK",
        "SFPL_CHANGE_TYPE_DEF_FK1",
        "SFQA_CA_DESC_UDV_ID_FK4",
        "SFQA_CA_DESC_UDV_ID_FK5",
        "SFQA_CA_DESC_UDV_ID_FK2",
        "SFQA_CA_DESC_UDV_ID_FK6",
        "SFQA_CA_DESC_UDV_ID_FK7",
        "SFQA_CA_DESC_UDV_ID_FK8",
        "SFQA_CA_DESC_UDV_ID_FK9",
        "SFQA_CA_DESC_UDV_ID_FK10",
        "SFQA_CA_DESC_UDV_ID_FK11",
        "SFQA_CA_DESC_UDV_ID_FK3",
        "SFQA_CA_DESC_UDV_ID_FK12",
        "SFQA_CA_DESC_UDV_ID_FK13",
        "SFQA_DISC_ITEM_FK27",
        "SFQA_DISC_ITEM_FK29",
        "SFQA_DISC_ITEM_FK30",
        "SFQA_DISC_ITEM_FK31",
        "SFQA_DISC_ITEM_FK33",
        "SFQA_DISC_ITEM_FK34",
        "SFQA_DISC_ITEM_FK28",
        "SFQA_DISC_ITEM_FK26",
        "SFQA_DISC_ITEM_FK32",
        "SFQA_DISC_ITEM_FK23",
        "SFQA_DISC_ITEM_FK24",
        "SFQA_DISC_ITEM_FK25",
    ]
    def __init__(self, column_value_map):
        self.UDV_ID = parse_value(self.schema, column_value_map, "UDV_ID")
        "system generated unique identifier of a standard text object."
        self.UDV_TAG = parse_value(self.schema, column_value_map, "UDV_TAG")
        "User provided unique identifier of the UDV; can be modified."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.UDV_TYPE = parse_value(self.schema, column_value_map, "UDV_TYPE")
        "The type of UDV. Display or Input."
        self.UDV_DESC = parse_value(self.schema, column_value_map, "UDV_DESC")
        "A detailed description of the UDV object."
        self.STATE = parse_value(self.schema, column_value_map, "STATE")
        "TBD"
        self.LOAD_REF = parse_value(self.schema, column_value_map, "LOAD_REF")
        "Name of the data source when data in the database record has been loaded from another system . Not in use."
        self.TOOL_VERSION = parse_value(self.schema, column_value_map, "TOOL_VERSION")
        "Version of the UDV editor from which the UDV has been created and saved."
        self.OBJECT_REV = parse_value(self.schema, column_value_map, "OBJECT_REV")
        "The system generated revision number of the UDV file."
        self.OWNER_GROUP = parse_value(self.schema, column_value_map, "OWNER_GROUP")
        "The functional group whose members can delete or modify the UDV file."
        self.UDV_DEFINITION = parse_value(self.schema, column_value_map, "UDV_DEFINITION")
        "The actual content/definition of the UDV."
        self.UDV_DEFINITION_SEARCH = parse_value(self.schema, column_value_map, "UDV_DEFINITION_SEARCH")
        "Content of UDV_DEFINITION in searchable format."
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")
        self.SFQA_DISC_TYPE_DEF_FK7 = []
        self.SFQA_DISC_TYPE_DEF_FK8 = []
        self.SFQA_DISC_TYPE_DEF_FK10 = []
        self.SFQA_DISC_TYPE_DEF_FK11 = []
        self.SFQA_DISC_TYPE_DEF_FK12 = []
        self.SFQA_DISC_TYPE_DEF_FK13 = []
        self.SFQA_DISC_TYPE_DEF_FK14 = []
        self.SFQA_DISC_TYPE_DEF_FK15 = []
        self.SFQA_DISC_TYPE_DEF_FK4 = []
        self.SFQA_DISC_TYPE_DEF_FK5 = []
        self.SFQA_DISC_TYPE_DEF_FK6 = []
        self.SFQA_DISC_TYPE_DEF_FK9 = []
        self.SFQA_CA_TYPE_DEF_FK9 = []
        self.SFQA_CA_TYPE_DEF_FK12 = []
        self.SFQA_CA_TYPE_DEF_FK8 = []
        self.SFQA_CA_TYPE_DEF_FK10 = []
        self.SFQA_CA_TYPE_DEF_FK11 = []
        self.SFQA_CA_TYPE_DEF_FK13 = []
        self.SFQA_CA_TYPE_DEF_FK2 = []
        self.SFQA_CA_TYPE_DEF_FK4 = []
        self.SFQA_CA_TYPE_DEF_FK5 = []
        self.SFQA_CA_TYPE_DEF_FK6 = []
        self.SFQA_CA_TYPE_DEF_FK7 = []
        self.SFQA_CA_TYPE_DEF_FK3 = []
        self.SFCORE_UDVFLDR_UDVLIB_FK = []
        self.SFPL_CHANGE_TYPE_DEF_FK1 = []
        self.SFQA_CA_DESC_UDV_ID_FK4 = []
        self.SFQA_CA_DESC_UDV_ID_FK5 = []
        self.SFQA_CA_DESC_UDV_ID_FK2 = []
        self.SFQA_CA_DESC_UDV_ID_FK6 = []
        self.SFQA_CA_DESC_UDV_ID_FK7 = []
        self.SFQA_CA_DESC_UDV_ID_FK8 = []
        self.SFQA_CA_DESC_UDV_ID_FK9 = []
        self.SFQA_CA_DESC_UDV_ID_FK10 = []
        self.SFQA_CA_DESC_UDV_ID_FK11 = []
        self.SFQA_CA_DESC_UDV_ID_FK3 = []
        self.SFQA_CA_DESC_UDV_ID_FK12 = []
        self.SFQA_CA_DESC_UDV_ID_FK13 = []
        self.SFQA_DISC_ITEM_FK27 = []
        self.SFQA_DISC_ITEM_FK29 = []
        self.SFQA_DISC_ITEM_FK30 = []
        self.SFQA_DISC_ITEM_FK31 = []
        self.SFQA_DISC_ITEM_FK33 = []
        self.SFQA_DISC_ITEM_FK34 = []
        self.SFQA_DISC_ITEM_FK28 = []
        self.SFQA_DISC_ITEM_FK26 = []
        self.SFQA_DISC_ITEM_FK32 = []
        self.SFQA_DISC_ITEM_FK23 = []
        self.SFQA_DISC_ITEM_FK24 = []
        self.SFQA_DISC_ITEM_FK25 = []

class SFFND_TEXT_OBJECT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "OBJECT_ID": "STRING",
        "TEXT_ID": "STRING",
        "ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "STRING",
        "STEP_KEY": "STRING",
        "TEXT_TYPE": "STRING",
        "LANGUAGE_CODE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique, system-generated identifier of a given text object."
        self.TEXT_ID = parse_value(self.schema, column_value_map, "TEXT_ID")
        "Unique, system-generated identifier of a given text object which will remain same on updation of text object."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "Unique, alteration id."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, order id."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.LANGUAGE_CODE = parse_value(self.schema, column_value_map, "LANGUAGE_CODE")
        "Language code as per ISO639 standard."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_CA_DESC:
    schema = {
        "CA_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "CA_STATUS": "STRING",
        "FACILITATOR_USER_ID": "STRING",
        "CA_ACTUAL_START_DATE": "STRING",
        "SCHED_PRIORITY": "STRING",
        "CA_TYPE": "STRING",
        "CA_TITLE": "STRING",
        "CA_DESC": "STRING",
        "STATUS_CHG_NOTES": "STRING",
        "UCF_CA_VCH1": "STRING",
        "UCF_CA_VCH2": "STRING",
        "UCF_CA_FLAG1": "STRING",
        "UCF_CA_VCH3": "STRING",
        "UCF_CA_VCH4": "STRING",
        "UCF_CA_VCH5": "STRING",
        "UCF_CA_FLAG2": "STRING",
        "UCF_CA_NUM1": "NUMBER",
        "UCF_CA_NUM2": "NUMBER",
        "CA_REQ_COMPLETE_DATE": "STRING",
        "CA_ISSUE_DESC": "STRING",
        "SOLUTION_DESC": "STRING",
        "SOLUTION_TARGET_DATE": "STRING",
        "PROB_PHYSICAL_EVIDENCE": "STRING",
        "PROB_FIRST_OBSERVED": "STRING",
        "PROB_OCCURRING_TREND": "STRING",
        "PROB_OCCURRING_PLACES": "STRING",
        "PROB_OCCURED_BEFORE": "STRING",
        "PROB_IMPACT": "STRING",
        "AFFECTED_BY_PROBLEM": "STRING",
        "ROOT_CAUSE_DESC": "STRING",
        "ROOT_CAUSE_VERIF_DESC": "STRING",
        "ESCAPE_POINT": "STRING",
        "EFF_VERIF_PRIORITY": "STRING",
        "CA_INVEST_PLAN_ID": "STRING",
        "EFF_VERIF_CERT": "STRING",
        "EFF_VERIF_INSTRUCTION": "STRING",
        "CA_INVEST_PLAN_REV": "NUMBER",
        "CA_INVEST_ORDER_ID": "STRING",
        "NO_OF_DAYS_AFTER_COMPLETION": "NUMBER",
        "EFF_VERIF_DUE_DATE": "STRING",
        "ISSUE_DESC_UDV": "STRING",
        "TEAM_ASSIGN_UDV": "STRING",
        "LAST_ACTIVITY_TIME_STAMP": "DATE",
        "IMPLEMENTATION_DATE": "STRING",
        "INVEST_UDV_ID": "STRING",
        "SOL_ACTION_PLAN_UDV": "STRING",
        "EFF_VERIF_RESULT": "STRING",
        "CA_CREATE_TIME_STAMP": "STRING",
        "SOURCE_GROUP": "STRING",
        "SOURCE_CONTACT": "STRING",
        "REQUEST_TYPE": "STRING",
        "UCF_CA_VCH6": "STRING",
        "UCF_CA_VCH7": "STRING",
        "RISK_LIKELIHOOD_RAT_ID": "STRING",
        "RISK_SEVERITY_RAT_ID": "STRING",
        "UCF_CA_VCH8": "STRING",
        "UCF_CA_VCH9": "STRING",
        "RISK_DETECTABILITY_RAT_ID": "STRING",
        "UCF_CA_VCH10": "STRING",
        "UCF_CA_VCH11": "STRING",
        "DOC_TYPE": "STRING",
        "UCF_CA_VCH12": "STRING",
        "UCF_CA_VCH13": "STRING",
        "WORK_FLOW": "STRING",
        "EFF_VERIF_LOCATION_ID": "STRING",
        "UCF_CA_VCH14": "STRING",
        "UCF_CA_VCH15": "STRING",
        "EFF_VERIF_DEPARTMENT_ID": "STRING",
        "EFF_VERIF_ASSIGNEE_ID": "STRING",
        "UCF_CA_NUM3": "NUMBER",
        "UCF_CA_NUM4": "NUMBER",
        "UCF_CA_NUM5": "NUMBER",
        "CA_CREATE_USERID": "STRING",
        "UCF_CA_DATE1": "STRING",
        "UCF_CA_DATE2": "STRING",
        "UCF_CA_DATE3": "STRING",
        "UCF_CA_DATE4": "STRING",
        "UCF_CA_DATE5": "STRING",
        "UCF_CA_FLAG3": "STRING",
        "UCF_CA_FLAG4": "STRING",
        "UCF_CA_FLAG5": "STRING",
        "UCF_CA_VCH255_1": "STRING",
        "UCF_CA_VCH255_2": "STRING",
        "EFF_VERIF_UPDT_USERID": "STRING",
        "UCF_CA_VCH255_3": "STRING",
        "EFF_VERIF_RESULT_UPDT_USERID": "STRING",
        "UCF_CA_VCH4000_1": "STRING",
        "UCF_CA_VCH4000_2": "STRING",
        "EFF_VERIF_COMPLETE_DATE": "STRING",
        "EFF_VERIF_TIME_STAMP": "STRING",
        "EFF_VERIF_RESULT_TIME_STAMP": "STRING",
        "COMMODITY_JURISDICTION": "STRING",
        "COMMODITY_CLASSIFICATION": "STRING",
        "RISK_ASSESSMENT_UDV_ID": "STRING",
        "RC_ANALYSIS_UDV_ID": "STRING",
        "NEXT_ISSUE_DESC_UDV_ID": "STRING",
        "NEXT_INVEST_UDV_ID": "STRING",
        "NEXT_SOLU_ACTION_PLAN_UDV_ID": "STRING",
        "NEXT_TEAM_ASSIGNED_UDV_ID": "STRING",
        "NEXT_RISK_ASSESSMENT_UDV_ID": "STRING",
        "NEXT_RC_ANALYSIS_UDV_ID": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_DESC_FK11", ["EFF_VERIF_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFQA_CA_DESC_FK12", ["EFF_VERIF_LOCATION_ID","EFF_VERIF_DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFQA_CA_DESC_UDV_ID_FK4", ["INVEST_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_DESC_UDV_ID_FK5", ["SOL_ACTION_PLAN_UDV"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_DESC_UDV_ID_FK2", ["ISSUE_DESC_UDV"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_DESC_UDV_ID_FK6", ["RISK_ASSESSMENT_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_DESC_UDV_ID_FK7", ["RC_ANALYSIS_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_DESC_UDV_ID_FK8", ["NEXT_ISSUE_DESC_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_DESC_UDV_ID_FK9", ["NEXT_INVEST_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_DESC_INSP_PLAN_FK", ["CA_INVEST_PLAN_ID","CA_INVEST_PLAN_REV"], "SFSQA_INSP_PLAN_DESC", ["INSP_PLAN_ID","INSP_PLAN_REV"]),
        DbForeignKey("SFQA_CA_DESC_RISK_DETECTABL_FK", ["RISK_DETECTABILITY_RAT_ID"], "SFFND_RISK_DETECTABLE_RAT_DEF", ["RISK_DETECTABILITY_RAT_ID"]),
        DbForeignKey("SFQA_CA_DESC_RISK_LIKLIHOOD_FK", ["RISK_LIKELIHOOD_RAT_ID"], "SFFND_RISK_LIKELIHOOD_RAT_DEF", ["RISK_LIKELIHOOD_RAT_ID"]),
        DbForeignKey("SFQA_CA_DESC_RISK_SEVERITY_FK", ["RISK_SEVERITY_RAT_ID"], "SFFND_RISK_SEVERITY_RAT_DEF", ["RISK_SEVERITY_RAT_ID"]),
        DbForeignKey("SFQA_CA_DESC_UDV_ID_FK10", ["NEXT_SOLU_ACTION_PLAN_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_DESC_UDV_ID_FK11", ["NEXT_TEAM_ASSIGNED_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_DESC_UDV_ID_FK3", ["TEAM_ASSIGN_UDV"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_DESC_FK10", ["EFF_VERIF_ASSIGNEE_ID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFQA_CA_DESC_FK9", ["DOC_TYPE","CA_TYPE","WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
        DbForeignKey("SFQA_CA_DESC_INSP_ORDER_ID_FK", ["CA_INVEST_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFQA_CA_DESC_UDV_ID_FK12", ["NEXT_RISK_ASSESSMENT_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_CA_DESC_FK13", ["CA_CREATE_USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFQA_CA_DESC_UDV_ID_FK13", ["NEXT_RC_ANALYSIS_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
    ]
    refs = [
        "SFQA_CA_AFFECTED_SUPPLIERS_FK1",
        "SFQA_LINKED_CA_FK1",
        "SFQA_LINKED_CA_FK2",
        "SFQA_CADESC_PROCLOCDEPTWCS_FK1",
        "SFQA_CA_ATTACH_FK1",
        "SFQA_CA_ACTION_ITEM_DESC_FK1",
        "SFQA_CA_AFFECTED_TOOLS_FK1",
        "SFQA_CA_LAST_FILTER_CONTEXT_F1",
        "SFQA_CA_CODE_XREF_FK1",
        "SFQA_CA_TEMPLATE_DESC_FK1",
        "SFQA_CA_EFF_VERIF_IT_FK",
        "SFQA_CA_REQ_X_CA_FK",
        "SFQA_CA_AFFECTED_WORK_LDC_FK1",
        "SFQA_CA_CHG_LOG_FK1",
        "SFQA_CA_CAUSE_CA_DESC_FK",
        "SFSQA_INSP_ORDER_HOLDS_FK4",
        "SFQA_CA_AFFECTED_MACHINES_FK1",
        "SFQA_CA_AFFECTED_CUSTOMERS_FK1",
        "SFQA_CA_DESC_MM_OBJECTS_FK2",
        "SFQA_CA_TEAM_ASSIGNMENT_FK1",
        "SFQA_CA_AFFECTED_PERF_DESC_FK1",
        "SFQA_CA_DEFECT_CA_DESC_FK",
        "SFQA_CA_TEXT_CACDESC_FK",
        "SFQA_CA_AFFECTED_ITEMS_FK1",
        "SFQA_CA_RESP_LDC_FK1",
        "SFQA_CA_BLOCK_STATUS_FK1",
        "SFQA_CA_SECTION_ATTACHMENT_FK1",
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.CA_STATUS = parse_value(self.schema, column_value_map, "CA_STATUS")
        "The state of the Corrective Action through the work flow of being processed. For instance: CA_INITIATION, IN_PROCESS, COMMITMENT, IMPLEMENTED, EFFECTIVE, PARTIAL_EFFECTIVE, NOT_EFFECTIVE, or CANCEL."
        self.FACILITATOR_USER_ID = parse_value(self.schema, column_value_map, "FACILITATOR_USER_ID")
        "Unique identifier of the user acting as facilitator of a given Corrective Action."
        self.CA_ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "CA_ACTUAL_START_DATE")
        "Actual start date of a given Corrective Action."
        self.SCHED_PRIORITY = parse_value(self.schema, column_value_map, "SCHED_PRIORITY")
        "The scheduled priority of the associated Corrective Action, e.g., High, Low, Medium."
        self.CA_TYPE = parse_value(self.schema, column_value_map, "CA_TYPE")
        self.CA_TITLE = parse_value(self.schema, column_value_map, "CA_TITLE")
        "Title or name of the associated Corrective Action."
        self.CA_DESC = parse_value(self.schema, column_value_map, "CA_DESC")
        "Description of the associated Corrective Action."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated Corrective Action."
        self.UCF_CA_VCH1 = parse_value(self.schema, column_value_map, "UCF_CA_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH2 = parse_value(self.schema, column_value_map, "UCF_CA_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CA_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_CA_VCH3 = parse_value(self.schema, column_value_map, "UCF_CA_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH4 = parse_value(self.schema, column_value_map, "UCF_CA_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH5 = parse_value(self.schema, column_value_map, "UCF_CA_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CA_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_NUM1 = parse_value(self.schema, column_value_map, "UCF_CA_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CA_NUM2 = parse_value(self.schema, column_value_map, "UCF_CA_NUM2")
        "User-configurable field for NUM data type."
        self.CA_REQ_COMPLETE_DATE = parse_value(self.schema, column_value_map, "CA_REQ_COMPLETE_DATE")
        self.CA_ISSUE_DESC = parse_value(self.schema, column_value_map, "CA_ISSUE_DESC")
        self.SOLUTION_DESC = parse_value(self.schema, column_value_map, "SOLUTION_DESC")
        self.SOLUTION_TARGET_DATE = parse_value(self.schema, column_value_map, "SOLUTION_TARGET_DATE")
        self.PROB_PHYSICAL_EVIDENCE = parse_value(self.schema, column_value_map, "PROB_PHYSICAL_EVIDENCE")
        self.PROB_FIRST_OBSERVED = parse_value(self.schema, column_value_map, "PROB_FIRST_OBSERVED")
        self.PROB_OCCURRING_TREND = parse_value(self.schema, column_value_map, "PROB_OCCURRING_TREND")
        self.PROB_OCCURRING_PLACES = parse_value(self.schema, column_value_map, "PROB_OCCURRING_PLACES")
        self.PROB_OCCURED_BEFORE = parse_value(self.schema, column_value_map, "PROB_OCCURED_BEFORE")
        self.PROB_IMPACT = parse_value(self.schema, column_value_map, "PROB_IMPACT")
        self.AFFECTED_BY_PROBLEM = parse_value(self.schema, column_value_map, "AFFECTED_BY_PROBLEM")
        self.ROOT_CAUSE_DESC = parse_value(self.schema, column_value_map, "ROOT_CAUSE_DESC")
        self.ROOT_CAUSE_VERIF_DESC = parse_value(self.schema, column_value_map, "ROOT_CAUSE_VERIF_DESC")
        self.ESCAPE_POINT = parse_value(self.schema, column_value_map, "ESCAPE_POINT")
        self.EFF_VERIF_PRIORITY = parse_value(self.schema, column_value_map, "EFF_VERIF_PRIORITY")
        self.CA_INVEST_PLAN_ID = parse_value(self.schema, column_value_map, "CA_INVEST_PLAN_ID")
        self.EFF_VERIF_CERT = parse_value(self.schema, column_value_map, "EFF_VERIF_CERT")
        self.EFF_VERIF_INSTRUCTION = parse_value(self.schema, column_value_map, "EFF_VERIF_INSTRUCTION")
        self.CA_INVEST_PLAN_REV = parse_value(self.schema, column_value_map, "CA_INVEST_PLAN_REV")
        self.CA_INVEST_ORDER_ID = parse_value(self.schema, column_value_map, "CA_INVEST_ORDER_ID")
        self.NO_OF_DAYS_AFTER_COMPLETION = parse_value(self.schema, column_value_map, "NO_OF_DAYS_AFTER_COMPLETION")
        self.EFF_VERIF_DUE_DATE = parse_value(self.schema, column_value_map, "EFF_VERIF_DUE_DATE")
        self.ISSUE_DESC_UDV = parse_value(self.schema, column_value_map, "ISSUE_DESC_UDV")
        self.TEAM_ASSIGN_UDV = parse_value(self.schema, column_value_map, "TEAM_ASSIGN_UDV")
        self.LAST_ACTIVITY_TIME_STAMP = parse_value(self.schema, column_value_map, "LAST_ACTIVITY_TIME_STAMP")
        self.IMPLEMENTATION_DATE = parse_value(self.schema, column_value_map, "IMPLEMENTATION_DATE")
        self.INVEST_UDV_ID = parse_value(self.schema, column_value_map, "INVEST_UDV_ID")
        self.SOL_ACTION_PLAN_UDV = parse_value(self.schema, column_value_map, "SOL_ACTION_PLAN_UDV")
        self.EFF_VERIF_RESULT = parse_value(self.schema, column_value_map, "EFF_VERIF_RESULT")
        "Result of Effectiveness Verification."
        self.CA_CREATE_TIME_STAMP = parse_value(self.schema, column_value_map, "CA_CREATE_TIME_STAMP")
        "The date and time when the Corrective Action is created."
        self.SOURCE_GROUP = parse_value(self.schema, column_value_map, "SOURCE_GROUP")
        "The group that generated the Corrective Action."
        self.SOURCE_CONTACT = parse_value(self.schema, column_value_map, "SOURCE_CONTACT")
        "Contact information of the source group originating the Corrective Action."
        self.REQUEST_TYPE = parse_value(self.schema, column_value_map, "REQUEST_TYPE")
        "Type of classification of Request."
        self.UCF_CA_VCH6 = parse_value(self.schema, column_value_map, "UCF_CA_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH7 = parse_value(self.schema, column_value_map, "UCF_CA_VCH7")
        "User-configurable field for VARCHAR data type."
        self.RISK_LIKELIHOOD_RAT_ID = parse_value(self.schema, column_value_map, "RISK_LIKELIHOOD_RAT_ID")
        self.RISK_SEVERITY_RAT_ID = parse_value(self.schema, column_value_map, "RISK_SEVERITY_RAT_ID")
        self.UCF_CA_VCH8 = parse_value(self.schema, column_value_map, "UCF_CA_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH9 = parse_value(self.schema, column_value_map, "UCF_CA_VCH9")
        "User-configurable field for VARCHAR data type."
        self.RISK_DETECTABILITY_RAT_ID = parse_value(self.schema, column_value_map, "RISK_DETECTABILITY_RAT_ID")
        self.UCF_CA_VCH10 = parse_value(self.schema, column_value_map, "UCF_CA_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH11 = parse_value(self.schema, column_value_map, "UCF_CA_VCH11")
        "User-configurable field for VARCHAR data type."
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        self.UCF_CA_VCH12 = parse_value(self.schema, column_value_map, "UCF_CA_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH13 = parse_value(self.schema, column_value_map, "UCF_CA_VCH13")
        "User-configurable field for VARCHAR data type."
        self.WORK_FLOW = parse_value(self.schema, column_value_map, "WORK_FLOW")
        self.EFF_VERIF_LOCATION_ID = parse_value(self.schema, column_value_map, "EFF_VERIF_LOCATION_ID")
        self.UCF_CA_VCH14 = parse_value(self.schema, column_value_map, "UCF_CA_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH15 = parse_value(self.schema, column_value_map, "UCF_CA_VCH15")
        "User-configurable field for VARCHAR data type."
        self.EFF_VERIF_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "EFF_VERIF_DEPARTMENT_ID")
        self.EFF_VERIF_ASSIGNEE_ID = parse_value(self.schema, column_value_map, "EFF_VERIF_ASSIGNEE_ID")
        "Unique identifier of the user assigned Effectiveness Verification."
        self.UCF_CA_NUM3 = parse_value(self.schema, column_value_map, "UCF_CA_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CA_NUM4 = parse_value(self.schema, column_value_map, "UCF_CA_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_CA_NUM5 = parse_value(self.schema, column_value_map, "UCF_CA_NUM5")
        "User-configurable field for NUM data type."
        self.CA_CREATE_USERID = parse_value(self.schema, column_value_map, "CA_CREATE_USERID")
        "Unique identifier of the user who has created Corrective Action."
        self.UCF_CA_DATE1 = parse_value(self.schema, column_value_map, "UCF_CA_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CA_DATE2 = parse_value(self.schema, column_value_map, "UCF_CA_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CA_DATE3 = parse_value(self.schema, column_value_map, "UCF_CA_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_CA_DATE4 = parse_value(self.schema, column_value_map, "UCF_CA_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_CA_DATE5 = parse_value(self.schema, column_value_map, "UCF_CA_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_CA_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CA_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_FLAG4 = parse_value(self.schema, column_value_map, "UCF_CA_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_FLAG5 = parse_value(self.schema, column_value_map, "UCF_CA_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CA_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CA_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.EFF_VERIF_UPDT_USERID = parse_value(self.schema, column_value_map, "EFF_VERIF_UPDT_USERID")
        "Solumina login ID of the last user to manipulated the Effectiveness Verification for a given iteration."
        self.UCF_CA_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_CA_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.EFF_VERIF_RESULT_UPDT_USERID = parse_value(self.schema, column_value_map, "EFF_VERIF_RESULT_UPDT_USERID")
        "Solumina login ID of the last user to manipulated the Effectiveness Verification Result for a given iteration."
        self.UCF_CA_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_CA_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_CA_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_CA_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.EFF_VERIF_COMPLETE_DATE = parse_value(self.schema, column_value_map, "EFF_VERIF_COMPLETE_DATE")
        "The date and time when the Effectiveness Verification is completed  for a given iteration."
        self.EFF_VERIF_TIME_STAMP = parse_value(self.schema, column_value_map, "EFF_VERIF_TIME_STAMP")
        "The date and time the Effectiveness Verification was last manipulated for a given iteration."
        self.EFF_VERIF_RESULT_TIME_STAMP = parse_value(self.schema, column_value_map, "EFF_VERIF_RESULT_TIME_STAMP")
        "The date and time the Effectiveness Verification Result was last manipulated  for a given iteration."
        self.COMMODITY_JURISDICTION = parse_value(self.schema, column_value_map, "COMMODITY_JURISDICTION")
        "Commodity Jurisdiction of Corrective Action."
        self.COMMODITY_CLASSIFICATION = parse_value(self.schema, column_value_map, "COMMODITY_CLASSIFICATION")
        "Commodity Classification of Corrective Action."
        self.RISK_ASSESSMENT_UDV_ID = parse_value(self.schema, column_value_map, "RISK_ASSESSMENT_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.RC_ANALYSIS_UDV_ID = parse_value(self.schema, column_value_map, "RC_ANALYSIS_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_ISSUE_DESC_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_ISSUE_DESC_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_INVEST_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_INVEST_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_SOLU_ACTION_PLAN_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_SOLU_ACTION_PLAN_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_TEAM_ASSIGNED_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_TEAM_ASSIGNED_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_RISK_ASSESSMENT_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_RISK_ASSESSMENT_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_RC_ANALYSIS_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_RC_ANALYSIS_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.SFQA_CA_AFFECTED_SUPPLIERS_FK1 = []
        self.SFQA_LINKED_CA_FK1 = []
        self.SFQA_LINKED_CA_FK2 = []
        self.SFQA_CADESC_PROCLOCDEPTWCS_FK1 = []
        self.SFQA_CA_ATTACH_FK1 = []
        self.SFQA_CA_ACTION_ITEM_DESC_FK1 = []
        self.SFQA_CA_AFFECTED_TOOLS_FK1 = []
        self.SFQA_CA_LAST_FILTER_CONTEXT_F1 = []
        self.SFQA_CA_CODE_XREF_FK1 = []
        self.SFQA_CA_TEMPLATE_DESC_FK1 = []
        self.SFQA_CA_EFF_VERIF_IT_FK = []
        self.SFQA_CA_REQ_X_CA_FK = []
        self.SFQA_CA_AFFECTED_WORK_LDC_FK1 = []
        self.SFQA_CA_CHG_LOG_FK1 = []
        self.SFQA_CA_CAUSE_CA_DESC_FK = []
        self.SFSQA_INSP_ORDER_HOLDS_FK4 = []
        self.SFQA_CA_AFFECTED_MACHINES_FK1 = []
        self.SFQA_CA_AFFECTED_CUSTOMERS_FK1 = []
        self.SFQA_CA_DESC_MM_OBJECTS_FK2 = []
        self.SFQA_CA_TEAM_ASSIGNMENT_FK1 = []
        self.SFQA_CA_AFFECTED_PERF_DESC_FK1 = []
        self.SFQA_CA_DEFECT_CA_DESC_FK = []
        self.SFQA_CA_TEXT_CACDESC_FK = []
        self.SFQA_CA_AFFECTED_ITEMS_FK1 = []
        self.SFQA_CA_RESP_LDC_FK1 = []
        self.SFQA_CA_BLOCK_STATUS_FK1 = []
        self.SFQA_CA_SECTION_ATTACHMENT_FK1 = []

class SFWID_ORDER_NOTES:
    schema = {
        "ORDER_ID": "STRING",
        "NOTE_ID": "STRING",
        "NOTE_TEXT": "STRING",
        "NOTE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_ORDER_NOTE_VCH1": "STRING",
        "UCF_ORDER_NOTE_VCH2": "STRING",
        "UCF_ORDER_NOTE_VCH3": "STRING",
        "UCF_ORDER_NOTE_VCH4": "STRING",
        "UCF_ORDER_NOTE_VCH5": "STRING",
        "UCF_ORDER_NOTE_FLAG1": "STRING",
        "UCF_ORDER_NOTE_FLAG2": "STRING",
        "UCF_ORDER_NOTE_NUM1": "NUMBER",
        "UCF_ORDER_NOTE_NUM2": "NUMBER",
        "UCF_ORDER_NOTE_DATE1": "STRING",
        "NOTE_TITLE": "STRING",
        "NOTE_NO": "STRING",
        "NOTE_STATUS": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "OBJECT_REFERENCE": "STRING",
        "OBJECT_ID": "STRING",
        "UCF_ORDER_NOTE_VCH6": "STRING",
        "UCF_ORDER_NOTE_VCH7": "STRING",
        "UCF_ORDER_NOTE_VCH8": "STRING",
        "UCF_ORDER_NOTE_VCH9": "STRING",
        "UCF_ORDER_NOTE_VCH10": "STRING",
        "UCF_ORDER_NOTE_VCH11": "STRING",
        "UCF_ORDER_NOTE_VCH12": "STRING",
        "UCF_ORDER_NOTE_VCH13": "STRING",
        "UCF_ORDER_NOTE_VCH14": "STRING",
        "UCF_ORDER_NOTE_VCH15": "STRING",
        "UCF_ORDER_NOTE_NUM3": "NUMBER",
        "UCF_ORDER_NOTE_NUM4": "NUMBER",
        "UCF_ORDER_NOTE_NUM5": "NUMBER",
        "UCF_ORDER_NOTE_DATE2": "STRING",
        "UCF_ORDER_NOTE_DATE3": "STRING",
        "UCF_ORDER_NOTE_DATE4": "STRING",
        "UCF_ORDER_NOTE_DATE5": "STRING",
        "UCF_ORDER_NOTE_FLAG3": "STRING",
        "UCF_ORDER_NOTE_FLAG4": "STRING",
        "UCF_ORDER_NOTE_FLAG5": "STRING",
        "UCF_ORDER_NOTE_VCH255_1": "STRING",
        "UCF_ORDER_NOTE_VCH255_2": "STRING",
        "UCF_ORDER_NOTE_VCH255_3": "STRING",
        "UCF_ORDER_NOTE_VCH4000_1": "STRING",
        "UCF_ORDER_NOTE_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "NOTE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_NOTES_NOTE_TYPE", ["NOTE_TYPE"], "SFFND_NOTE_TYPE_DEF", ["NOTE_TYPE"]),
        DbForeignKey("SFWID_ORDER_NOTES_FK1", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_ORDER_NOTES_FK2", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_ORDER_NOTES_ORDER", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.NOTE_ID = parse_value(self.schema, column_value_map, "NOTE_ID")
        self.NOTE_TEXT = parse_value(self.schema, column_value_map, "NOTE_TEXT")
        self.NOTE_TYPE = parse_value(self.schema, column_value_map, "NOTE_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_ORDER_NOTE_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_NOTE_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_NOTE_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NOTE_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NOTE_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_DATE1")
        "User-configurable field for DATE data type."
        self.NOTE_TITLE = parse_value(self.schema, column_value_map, "NOTE_TITLE")
        self.NOTE_NO = parse_value(self.schema, column_value_map, "NOTE_NO")
        self.NOTE_STATUS = parse_value(self.schema, column_value_map, "NOTE_STATUS")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.OBJECT_REFERENCE = parse_value(self.schema, column_value_map, "OBJECT_REFERENCE")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UCF_ORDER_NOTE_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NOTE_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NOTE_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NOTE_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NOTE_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_NOTE_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_NOTE_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_NOTE_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_NOTE_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_NOTE_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_NOTE_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_NOTE_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_NOTE_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_NOTE_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_NOTE_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ORDER_NOTE_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NOTE_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."

class SFCORE_COPY_REQUESTS:
    schema = {
        "COPY_REQUEST_ID": "STRING",
        "JOB_ID": "NUMBER",
        "REQUEST_ID": "STRING",
        "TIME_STAMP": "DATE",
        "ALERT": "STRING",
        "STATUS": "STRING",
        "PRIORITY": "NUMBER",
        "UPDT_USERID": "STRING",
        "CONTROL": "STRING",
        "COPIES": "NUMBER",
        "PAPER_WAIT": "STRING",
        "PRINTER_ID": "STRING",
    }
    primary_key_columns = [
        "COPY_REQUEST_ID",
    ]
    foreign_keys = [
        DbForeignKey("FWCOPYREQ_PRINTER_FK", ["PRINTER_ID"], "SFCORE_PRINTER_DEF", ["PRINTER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.COPY_REQUEST_ID = parse_value(self.schema, column_value_map, "COPY_REQUEST_ID")
        "Unique system generated identifier for a given report copy request."
        self.JOB_ID = parse_value(self.schema, column_value_map, "JOB_ID")
        "Identifier of the job executing the request."
        self.REQUEST_ID = parse_value(self.schema, column_value_map, "REQUEST_ID")
        "System generated unique identifier for a given request."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.ALERT = parse_value(self.schema, column_value_map, "ALERT")
        "The latest internally recieved alert."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The status of the disposition/rework task. For example: IN PROCESS, DISPOSITIONED, or COMPLETE."
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        "The priority of the task."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.CONTROL = parse_value(self.schema, column_value_map, "CONTROL")
        "The associated control if specified."
        self.COPIES = parse_value(self.schema, column_value_map, "COPIES")
        "The number of copies."
        self.PAPER_WAIT = parse_value(self.schema, column_value_map, "PAPER_WAIT")
        "Control value for waiting for paper."
        self.PRINTER_ID = parse_value(self.schema, column_value_map, "PRINTER_ID")
        "Unique system generated identifier for a given printer."

class SFSQA_INSP_ORDER_NOTES:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "NOTE_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "NOTE_TEXT": "STRING",
        "NOTE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH1": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH2": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH3": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH4": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH5": "STRING",
        "UCF_INSP_ORDER_NOTE_FLAG1": "STRING",
        "UCF_INSP_ORDER_NOTE_FLAG2": "STRING",
        "UCF_INSP_ORDER_NOTE_FLAG3": "STRING",
        "UCF_INSP_ORDER_NOTE_NUM1": "NUMBER",
        "UCF_INSP_ORDER_NOTE_NUM2": "NUMBER",
        "UCF_INSP_ORDER_NOTE_NUM3": "NUMBER",
        "UCF_INSP_ORDER_NOTE_DATE1": "STRING",
        "UCF_INSP_ORDER_NOTE_DATE2": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH255_1": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH255_2": "STRING",
        "NOTE_TITLE": "STRING",
        "NOTE_NO": "STRING",
        "NOTE_STATUS": "STRING",
        "OBJECT_REFERENCE": "STRING",
        "OBJECT_ID": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "NOTE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_ORDER_NOTES_FK4", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_NOTES_FK2", ["NOTE_TYPE"], "SFFND_NOTE_TYPE_DEF", ["NOTE_TYPE"]),
        DbForeignKey("SFSQA_INSP_ORDER_NOTES_FK3", ["INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_NOTES_FK1", ["INSP_ORDER_ID","INSP_STEP_ID"], "SFSQA_INSP_ORDER_INSP_STEPS", ["INSP_ORDER_ID","INSP_STEP_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.NOTE_ID = parse_value(self.schema, column_value_map, "NOTE_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.NOTE_TEXT = parse_value(self.schema, column_value_map, "NOTE_TEXT")
        self.NOTE_TYPE = parse_value(self.schema, column_value_map, "NOTE_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.UCF_INSP_ORDER_NOTE_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH1")
        self.UCF_INSP_ORDER_NOTE_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH2")
        self.UCF_INSP_ORDER_NOTE_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH3")
        self.UCF_INSP_ORDER_NOTE_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH4")
        self.UCF_INSP_ORDER_NOTE_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH5")
        self.UCF_INSP_ORDER_NOTE_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_FLAG1")
        self.UCF_INSP_ORDER_NOTE_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_FLAG2")
        self.UCF_INSP_ORDER_NOTE_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_FLAG3")
        self.UCF_INSP_ORDER_NOTE_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_NUM1")
        self.UCF_INSP_ORDER_NOTE_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_NUM2")
        self.UCF_INSP_ORDER_NOTE_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_NUM3")
        self.UCF_INSP_ORDER_NOTE_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_DATE1")
        self.UCF_INSP_ORDER_NOTE_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_DATE2")
        self.UCF_INSP_ORDER_NOTE_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH255_1")
        self.UCF_INSP_ORDER_NOTE_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH255_2")
        self.NOTE_TITLE = parse_value(self.schema, column_value_map, "NOTE_TITLE")
        self.NOTE_NO = parse_value(self.schema, column_value_map, "NOTE_NO")
        self.NOTE_STATUS = parse_value(self.schema, column_value_map, "NOTE_STATUS")
        self.OBJECT_REFERENCE = parse_value(self.schema, column_value_map, "OBJECT_REFERENCE")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")

class SFWID_SERIAL_OPER_DAT_COL:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "DAT_COL_ID": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DCVALUE": "STRING",
        "COMMENTS": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "UCF_SRL_OPER_DC_VCH1": "STRING",
        "UCF_SRL_OPER_DC_VCH2": "STRING",
        "UCF_SRL_OPER_DC_VCH3": "STRING",
        "UCF_SRL_OPER_DC_VCH4": "STRING",
        "UCF_SRL_OPER_DC_VCH5": "STRING",
        "UCF_SRL_OPER_DC_FLAG1": "STRING",
        "UCF_SRL_OPER_DC_FLAG2": "STRING",
        "UCF_SRL_OPER_DC_NUM1": "NUMBER",
        "UCF_SRL_OPER_DC_NUM2": "NUMBER",
        "XBAR_CPU_VALUE": "NUMBER",
        "XBAR_CPL_VALUE": "NUMBER",
        "XBAR_CPK_INDEX": "NUMBER",
        "XBAR_EST_SIGMA_VALUE": "NUMBER",
        "DP_SUBGROUP_SIZE": "NUMBER",
        "OOC_CAUSE_FLAG": "STRING",
        "OOC_REASON_NUM": "NUMBER",
        "OUTLIER_FLAG": "STRING",
        "UCF_SRL_OPER_DC_VCH6": "STRING",
        "UCF_SRL_OPER_DC_VCH7": "STRING",
        "UCF_SRL_OPER_DC_VCH8": "STRING",
        "UCF_SRL_OPER_DC_VCH9": "STRING",
        "UCF_SRL_OPER_DC_VCH10": "STRING",
        "UCF_SRL_OPER_DC_VCH11": "STRING",
        "UCF_SRL_OPER_DC_VCH12": "STRING",
        "UCF_SRL_OPER_DC_VCH13": "STRING",
        "UCF_SRL_OPER_DC_VCH14": "STRING",
        "UCF_SRL_OPER_DC_VCH15": "STRING",
        "UCF_SRL_OPER_DC_NUM3": "NUMBER",
        "UCF_SRL_OPER_DC_NUM4": "NUMBER",
        "UCF_SRL_OPER_DC_NUM5": "NUMBER",
        "UCF_SRL_OPER_DC_FLAG3": "STRING",
        "UCF_SRL_OPER_DC_FLAG4": "STRING",
        "UCF_SRL_OPER_DC_FLAG5": "STRING",
        "UCF_SRL_OPER_DC_DATE1": "STRING",
        "UCF_SRL_OPER_DC_DATE2": "STRING",
        "UCF_SRL_OPER_DC_DATE3": "STRING",
        "UCF_SRL_OPER_DC_DATE4": "STRING",
        "UCF_SRL_OPER_DC_DATE5": "STRING",
        "UCF_SRL_OPER_DC_VCH255_1": "STRING",
        "UCF_SRL_OPER_DC_VCH255_2": "STRING",
        "UCF_SRL_OPER_DC_VCH255_3": "STRING",
        "UCF_SRL_OPER_DC_VCH4000_1": "STRING",
        "UCF_SRL_OPER_DC_VCH4000_2": "STRING",
        "MACHINE_ID": "STRING",
        "MACHINE_NO": "STRING",
        "OVER_INSPECTION": "STRING",
        "OVER_INSP_UPDT_USERID": "STRING",
        "OVER_INSP_TIME_STAMP": "STRING",
        "HOLD_ID": "STRING",
        "OVER_INSP_COMMENTS": "STRING",
        "EVENT_NO": "NUMBER",
        "COMPLETE_QTY": "NUMBER",
        "DAT_COL_STATUS": "STRING",
        "TEMPLATE_FILE_ID": "STRING",
        "MESSAGE_SENT": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "DAT_COL_ID",
        "LOT_ID",
        "SERIAL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_SERIAL_OPER_DAT_COL_FK1", ["TEMPLATE_FILE_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_SEROPERDC_SERL_FK", ["ORDER_ID","LOT_ID","SERIAL_ID"], "SFWID_SERIAL_DESC", ["ORDER_ID","LOT_ID","SERIAL_ID"]),
        DbForeignKey("SFWID_SEROPERDC_OPER_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
        "SFWID_VARIABLES_FK2",
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        "Unique, system-generated identifier of the data collection."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DCVALUE = parse_value(self.schema, column_value_map, "DCVALUE")
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Additional comments."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.UCF_SRL_OPER_DC_VCH1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRL_OPER_DC_VCH2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRL_OPER_DC_VCH3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRL_OPER_DC_VCH4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRL_OPER_DC_VCH5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SRL_OPER_DC_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRL_OPER_DC_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SRL_OPER_DC_NUM1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_SRL_OPER_DC_NUM2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_NUM2")
        "User-configurable field for NUM data type."
        self.XBAR_CPU_VALUE = parse_value(self.schema, column_value_map, "XBAR_CPU_VALUE")
        self.XBAR_CPL_VALUE = parse_value(self.schema, column_value_map, "XBAR_CPL_VALUE")
        self.XBAR_CPK_INDEX = parse_value(self.schema, column_value_map, "XBAR_CPK_INDEX")
        self.XBAR_EST_SIGMA_VALUE = parse_value(self.schema, column_value_map, "XBAR_EST_SIGMA_VALUE")
        self.DP_SUBGROUP_SIZE = parse_value(self.schema, column_value_map, "DP_SUBGROUP_SIZE")
        self.OOC_CAUSE_FLAG = parse_value(self.schema, column_value_map, "OOC_CAUSE_FLAG")
        self.OOC_REASON_NUM = parse_value(self.schema, column_value_map, "OOC_REASON_NUM")
        self.OUTLIER_FLAG = parse_value(self.schema, column_value_map, "OUTLIER_FLAG")
        self.UCF_SRL_OPER_DC_VCH6 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH6")
        self.UCF_SRL_OPER_DC_VCH7 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH7")
        self.UCF_SRL_OPER_DC_VCH8 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH8")
        self.UCF_SRL_OPER_DC_VCH9 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH9")
        self.UCF_SRL_OPER_DC_VCH10 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH10")
        self.UCF_SRL_OPER_DC_VCH11 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH11")
        self.UCF_SRL_OPER_DC_VCH12 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH12")
        self.UCF_SRL_OPER_DC_VCH13 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH13")
        self.UCF_SRL_OPER_DC_VCH14 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH14")
        self.UCF_SRL_OPER_DC_VCH15 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH15")
        self.UCF_SRL_OPER_DC_NUM3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_NUM3")
        self.UCF_SRL_OPER_DC_NUM4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_NUM4")
        self.UCF_SRL_OPER_DC_NUM5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_NUM5")
        self.UCF_SRL_OPER_DC_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_FLAG3")
        self.UCF_SRL_OPER_DC_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_FLAG4")
        self.UCF_SRL_OPER_DC_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_FLAG5")
        self.UCF_SRL_OPER_DC_DATE1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_DATE1")
        self.UCF_SRL_OPER_DC_DATE2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_DATE2")
        self.UCF_SRL_OPER_DC_DATE3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_DATE3")
        self.UCF_SRL_OPER_DC_DATE4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_DATE4")
        self.UCF_SRL_OPER_DC_DATE5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_DATE5")
        self.UCF_SRL_OPER_DC_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH255_1")
        self.UCF_SRL_OPER_DC_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH255_2")
        self.UCF_SRL_OPER_DC_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH255_3")
        self.UCF_SRL_OPER_DC_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH4000_1")
        self.UCF_SRL_OPER_DC_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_DC_VCH4000_2")
        self.MACHINE_ID = parse_value(self.schema, column_value_map, "MACHINE_ID")
        self.MACHINE_NO = parse_value(self.schema, column_value_map, "MACHINE_NO")
        self.OVER_INSPECTION = parse_value(self.schema, column_value_map, "OVER_INSPECTION")
        "User audit over inspection requirement check for DC. When Y, DC require Over Inspection. N, DC does not require Over Inspection. Accept, User Inspection accepted. Reject, User Inspection is rejected and may require re-inspection."
        self.OVER_INSP_UPDT_USERID = parse_value(self.schema, column_value_map, "OVER_INSP_UPDT_USERID")
        "UserID of Over Inspector performing Over Inspection of DC."
        self.OVER_INSP_TIME_STAMP = parse_value(self.schema, column_value_map, "OVER_INSP_TIME_STAMP")
        "Time when Over Inspection was performed by Over Inspector for DC."
        self.HOLD_ID = parse_value(self.schema, column_value_map, "HOLD_ID")
        "Unique, system-generated identifier of the hold."
        self.OVER_INSP_COMMENTS = parse_value(self.schema, column_value_map, "OVER_INSP_COMMENTS")
        "Comments about Over Inspection."
        self.EVENT_NO = parse_value(self.schema, column_value_map, "EVENT_NO")
        "Event no under which user needs to perform over inspection check."
        self.COMPLETE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_QTY")
        "Determines the number of units completed. Applicable when Continuous Flow flag is Y."
        self.DAT_COL_STATUS = parse_value(self.schema, column_value_map, "DAT_COL_STATUS")
        "Status of given Data Collection (like PENDING, PARTIAL, COMPLETE, SKIP)."
        self.TEMPLATE_FILE_ID = parse_value(self.schema, column_value_map, "TEMPLATE_FILE_ID")
        "The unique identifier of the object being referenced."
        self.MESSAGE_SENT = parse_value(self.schema, column_value_map, "MESSAGE_SENT")
        self.SFWID_VARIABLES_FK2 = []

class SFWID_OPER_TEXT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "TEXT": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")

class SFFND_GROUP_REV_CONTROL:
    schema = {
        "GROUP_ID": "STRING",
        "LAST_GROUP_REV": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "GROUP_ID",
        "LAST_GROUP_REV",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_GROUP_REV_CTL_GRP_FK", ["GROUP_ID"], "SFFND_GROUP_DEF", ["GROUP_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.GROUP_ID = parse_value(self.schema, column_value_map, "GROUP_ID")
        "Unique, system generated identifier of a group."
        self.LAST_GROUP_REV = parse_value(self.schema, column_value_map, "LAST_GROUP_REV")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_SQL_LIB:
    schema = {
        "SQL_ID": "STRING",
        "SQL_ID_DISPL": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "READ_ONLY": "NUMBER",
        "DATASOURCE": "STRING",
        "STYPE": "STRING",
        "DESCRIPTION": "STRING",
        "SQL_TEXT": "STRING",
    }
    primary_key_columns = [
        "SQL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_SQL_LIB_STYPE_FK", ["STYPE"], "SFCORE_MODULES", ["GROUP_NAME"]),
    ]
    refs = [
        "SFCORE_SQLFLDR_SQLLIB_FK",
    ]
    def __init__(self, column_value_map):
        self.SQL_ID = parse_value(self.schema, column_value_map, "SQL_ID")
        "Unique identifier, all uppercase, of a piece of a SQL script."
        self.SQL_ID_DISPL = parse_value(self.schema, column_value_map, "SQL_ID_DISPL")
        "Reformatted SQL library entry ID for display."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.READ_ONLY = parse_value(self.schema, column_value_map, "READ_ONLY")
        "Flag (1 Yes or 0 No.) indicating whether or not the SQL script entry is for read only."
        self.DATASOURCE = parse_value(self.schema, column_value_map, "DATASOURCE")
        "Not in use."
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")
        "Type of SQL script. For instance: PLAN, ADMIN, or SFCORE."
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        "A detailed description of the SQL script."
        self.SQL_TEXT = parse_value(self.schema, column_value_map, "SQL_TEXT")
        "The actual SQL code of the script."
        self.SFCORE_SQLFLDR_SQLLIB_FK = []

class SFBIS_SERVICE_EVENT_TRIGGER:
    schema = {
        "SERVICE_NAME": "STRING",
        "EVENT_NAME": "STRING",
        "CONDITION": "STRING",
        "ENABLED_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "SERVICE_NAME",
        "EVENT_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SERVICE_NAME = parse_value(self.schema, column_value_map, "SERVICE_NAME")
        self.EVENT_NAME = parse_value(self.schema, column_value_map, "EVENT_NAME")
        self.CONDITION = parse_value(self.schema, column_value_map, "CONDITION")
        self.ENABLED_FLAG = parse_value(self.schema, column_value_map, "ENABLED_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFFND_SKILL_TYPE_DEF:
    schema = {
        "SKILL_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "SKILL_TYPE_DESC": "STRING",
    }
    primary_key_columns = [
        "SKILL_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_SKILL_CATG_TYP_FK",
    ]
    def __init__(self, column_value_map):
        self.SKILL_TYPE = parse_value(self.schema, column_value_map, "SKILL_TYPE")
        "The unique identifier of a particular type/class of skills."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.SKILL_TYPE_DESC = parse_value(self.schema, column_value_map, "SKILL_TYPE_DESC")
        "A descriptive name and/or the description of the skill type."
        self.SFFND_SKILL_CATG_TYP_FK = []

class SFWID_OPER_CREW:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TIME_STAMP": "DATE",
        "USERID": "STRING",
        "SKILL_CATEGORY": "STRING",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
        "ASGND_LABOR_HOURS": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "USERID",
        "SKILL_CATEGORY",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_CREW_OPER_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_OPER_CREW_USER_FK", ["USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFWID_OPER_CREW_SCATG_FK", ["SKILL_CATEGORY"], "SFFND_SKILL_CATEGORY_DEF", ["SKILL_CATEGORY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.SKILL_CATEGORY = parse_value(self.schema, column_value_map, "SKILL_CATEGORY")
        "A category to which the required skill belongs."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ASGND_LABOR_HOURS = parse_value(self.schema, column_value_map, "ASGND_LABOR_HOURS")
        "Number of labor hours the shopfloor worker is assigned to work on the manufacturing operation."

class SFFND_TOOL_MANUFACTURER:
    schema = {
        "MANUFACTURER": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TOOL_MODEL": "STRING",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
    }
    primary_key_columns = [
        "TOOL_NO",
        "TOOL_CHG",
        "MANUFACTURER",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_TOOL_MANUFACTURER_M_FK", ["MANUFACTURER"], "SFFND_MANUFACTURER", ["MANUFACTURER"]),
        DbForeignKey("SFFND_TOOL_MANUFACTURER_T_FK", ["TOOL_NO","TOOL_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
    ]
    refs = [
        "SFPL_STEP_TOOL_TMNFTR_FK",
        "SFWID_OPER_TOOL_TMNFTR_FK",
        "SFWID_OPER_TOOL_ALT_FK3",
    ]
    def __init__(self, column_value_map):
        self.MANUFACTURER = parse_value(self.schema, column_value_map, "MANUFACTURER")
        "The manufacturer/maker of the tool."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TOOL_MODEL = parse_value(self.schema, column_value_map, "TOOL_MODEL")
        "The maker's model of the tool."
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The change number, secondary identifier, of the tool."
        self.SFPL_STEP_TOOL_TMNFTR_FK = []
        self.SFWID_OPER_TOOL_TMNFTR_FK = []
        self.SFWID_OPER_TOOL_ALT_FK3 = []

class SFCORE_INI_LIB_FOLDER:
    schema = {
        "INI_ID": "STRING",
        "FOLDER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "INI_ID",
        "FOLDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_INIFLDR_INILIB_FK", ["INI_ID"], "SFCORE_INI_LIB", ["INI_ID"]),
        DbForeignKey("SFCORE_INIFLDR_FLDRORG_FK", ["FOLDER_ID"], "SFCORE_INILIB_FOLDER_ORG", ["FOLDER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.INI_ID = parse_value(self.schema, column_value_map, "INI_ID")
        "Unique identifier, all uppercase, of a Solumina application initialization entry."
        self.FOLDER_ID = parse_value(self.schema, column_value_map, "FOLDER_ID")
        "Unique, system generated identifier of the folder."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFSQA_HOLD_TYPE_DEF:
    schema = {
        "HOLD_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "ACTION": "STRING",
        "ALLOW_EXECUTION_FLAG": "STRING",
        "PREVENT_INSP_ITEM_COMP_FLAG": "STRING",
        "PREVENT_INSP_PNT_COMP_FLAG": "STRING",
        "PREVENT_INSP_ORDER_COMP_FLAG": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "HOLD_DESC": "STRING",
        "AUTOMATIC_CLOSE_FLAG": "STRING",
        "PROTECT_FLAG": "STRING",
        "HOLD_CATEGORY": "STRING",
        "CLOSE_UDV_ID": "STRING",
        "VIEW_UDV_ID": "STRING",
        "CLOSE_TYPE_FLAG": "STRING",
    }
    primary_key_columns = [
        "HOLD_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_SUPPLIER_HOLDS_FK2",
        "SFSQA_IDP_HOLDS_HOLDTYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.HOLD_TYPE = parse_value(self.schema, column_value_map, "HOLD_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.ACTION = parse_value(self.schema, column_value_map, "ACTION")
        self.ALLOW_EXECUTION_FLAG = parse_value(self.schema, column_value_map, "ALLOW_EXECUTION_FLAG")
        self.PREVENT_INSP_ITEM_COMP_FLAG = parse_value(self.schema, column_value_map, "PREVENT_INSP_ITEM_COMP_FLAG")
        self.PREVENT_INSP_PNT_COMP_FLAG = parse_value(self.schema, column_value_map, "PREVENT_INSP_PNT_COMP_FLAG")
        self.PREVENT_INSP_ORDER_COMP_FLAG = parse_value(self.schema, column_value_map, "PREVENT_INSP_ORDER_COMP_FLAG")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.HOLD_DESC = parse_value(self.schema, column_value_map, "HOLD_DESC")
        self.AUTOMATIC_CLOSE_FLAG = parse_value(self.schema, column_value_map, "AUTOMATIC_CLOSE_FLAG")
        self.PROTECT_FLAG = parse_value(self.schema, column_value_map, "PROTECT_FLAG")
        self.HOLD_CATEGORY = parse_value(self.schema, column_value_map, "HOLD_CATEGORY")
        self.CLOSE_UDV_ID = parse_value(self.schema, column_value_map, "CLOSE_UDV_ID")
        self.VIEW_UDV_ID = parse_value(self.schema, column_value_map, "VIEW_UDV_ID")
        self.CLOSE_TYPE_FLAG = parse_value(self.schema, column_value_map, "CLOSE_TYPE_FLAG")
        self.SFSQA_SUPPLIER_HOLDS_FK2 = []
        self.SFSQA_IDP_HOLDS_HOLDTYPE_FK = []

class SFFND_CA_TASK:
    schema = {
        "CA_ID": "STRING",
        "TASK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "TASK_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_CA_TASK_FK_TASKID", ["TASK_ID"], "SFFND_TASK", ["TASK_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.TASK_ID = parse_value(self.schema, column_value_map, "TASK_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFPL_STEP_BOM_LINES:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "PART_ACTION": "STRING",
        "COMPONENT_TYPE": "STRING",
        "BOM_LINE_NO": "STRING",
        "STD_ITEM_ID": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BOM_ID": "STRING",
        "BOM_LINE_ID": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "PART_ACTION",
        "COMPONENT_TYPE",
        "BOM_LINE_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEP_BOM_LINES_FK2", ["STD_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_STEP_BOM_LINES_FK3", ["BOM_ID","BOM_LINE_ID"], "SFPL_MFG_BOM_REV_LINE_NO", ["BOM_ID","BOM_LINE_ID"]),
        DbForeignKey("SFPL_STEP_BOM_LINES_FK1", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"], "SFPL_STEP_DESC", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Plan Id for which Step Line is added."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Oper Key for which Step Line is added."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Step Key for which Step Line is added."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Step Update No for which Step Line is added."
        self.PART_ACTION = parse_value(self.schema, column_value_map, "PART_ACTION")
        "The intended action of component USE, REMOVE, REFERENCE."
        self.COMPONENT_TYPE = parse_value(self.schema, column_value_map, "COMPONENT_TYPE")
        "Type of component for which line is authored. Can be PART, TOOL, ILLUSTRATION."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        "User entered Line No that is authored."
        self.STD_ITEM_ID = parse_value(self.schema, column_value_map, "STD_ITEM_ID")
        "Standard Item ID of the BOM Line."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "REF_ID of grid to which line is authored."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Block id in which line is authored."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Identifier of BOM that is attached to Plan."
        self.BOM_LINE_ID = parse_value(self.schema, column_value_map, "BOM_LINE_ID")
        "Unique system generated ID for BOM Line No."

class SFWID_OPER_PRECEDENCE:
    schema = {
        "TARGET_ORDER_ID": "STRING",
        "TARGET_OPER_KEY": "NUMBER",
        "TARGET_STEP_KEY": "NUMBER",
        "OPER_ACTION": "STRING",
        "PRECEDENT_PLAN_VERSION": "NUMBER",
        "PRECEDENT_PLAN_ID": "STRING",
        "CONDITION": "STRING",
        "PRECEDENT_OPER_KEY": "NUMBER",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
        "TIME_STAMP": "DATE",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "TARGET_ORDER_ID",
        "TARGET_OPER_KEY",
        "TARGET_STEP_KEY",
        "OPER_ACTION",
        "PRECEDENT_PLAN_ID",
        "PRECEDENT_PLAN_VERSION",
        "PRECEDENT_OPER_KEY",
        "CONDITION",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_PRECEDENCE_FK2", ["PRECEDENT_PLAN_ID","PRECEDENT_OPER_KEY"], "SFPL_OPERATION_MASTER", ["PLAN_ID","OPER_KEY"]),
        DbForeignKey("SFWID_OPER_PRECEDENCE_FK3", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_PRECEDENCE_FK1", ["TARGET_ORDER_ID","TARGET_OPER_KEY","TARGET_STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TARGET_ORDER_ID = parse_value(self.schema, column_value_map, "TARGET_ORDER_ID")
        self.TARGET_OPER_KEY = parse_value(self.schema, column_value_map, "TARGET_OPER_KEY")
        self.TARGET_STEP_KEY = parse_value(self.schema, column_value_map, "TARGET_STEP_KEY")
        self.OPER_ACTION = parse_value(self.schema, column_value_map, "OPER_ACTION")
        self.PRECEDENT_PLAN_VERSION = parse_value(self.schema, column_value_map, "PRECEDENT_PLAN_VERSION")
        self.PRECEDENT_PLAN_ID = parse_value(self.schema, column_value_map, "PRECEDENT_PLAN_ID")
        self.CONDITION = parse_value(self.schema, column_value_map, "CONDITION")
        self.PRECEDENT_OPER_KEY = parse_value(self.schema, column_value_map, "PRECEDENT_OPER_KEY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")

class SFCORE_3DMODEL_CONV_LOG_HIST:
    schema = {
        "HIST_ID": "STRING",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "OBJECT_ID": "STRING",
        "STATUS": "STRING",
        "LOG_TEXT": "STRING",
        "FORMAT": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Primary Key of the SFCORE_3DMODEL_CONV_LOG"
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "SUCCESS or FAILED - based on the outcome of the conversion"
        self.LOG_TEXT = parse_value(self.schema, column_value_map, "LOG_TEXT")
        "field to store the log message for conversion  transaction"
        self.FORMAT = parse_value(self.schema, column_value_map, "FORMAT")
        "this is the format of the object before the conversion started"
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "will contain the UserId who inserted the record"
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "when the update completed"
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFFND_STDTEXT_MM_OBJECTS:
    schema = {
        "OBJECT_DAT_COL_ID": "STRING",
        "STDTEXT_OBJECT_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UCF_STDTEXT_MM_OBJ_VCH1": "STRING",
        "UCF_STDTEXT_MM_OBJ_VCH2": "STRING",
        "UCF_STDTEXT_MM_OBJ_VCH3": "STRING",
        "UCF_STDTEXT_MM_OBJ_VCH4": "STRING",
        "UCF_STDTEXT_MM_OBJ_VCH5": "STRING",
        "UCF_STDTEXT_MM_OBJ_NUM1": "NUMBER",
        "UCF_STDTEXT_MM_OBJ_NUM2": "NUMBER",
        "UCF_STDTEXT_MM_OBJ_NUM3": "NUMBER",
        "UCF_STDTEXT_MM_OBJ_DATE1": "STRING",
        "UCF_STDTEXT_MM_OBJ_DATE2": "STRING",
        "UCF_STDTEXT_MM_OBJ_FLAG1": "STRING",
        "UCF_STDTEXT_MM_OBJ_FLAG2": "STRING",
        "UCF_STDTEXT_MM_OBJ_FLAG3": "STRING",
        "UCF_STDTEXT_MM_OBJ_VCH255_1": "STRING",
        "UCF_STDTEXT_MM_OBJ_VCH255_2": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "LATEST_REV_FLAG": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "RTF_LINK_ID": "STRING",
    }
    primary_key_columns = [
        "STDTEXT_OBJECT_ID",
        "OBJECT_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_STDTEXT_MM_OBJECTS_FK1", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFFND_STDTEXT_MM_OBJECTS_FK2", ["STDTEXT_OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.STDTEXT_OBJECT_ID = parse_value(self.schema, column_value_map, "STDTEXT_OBJECT_ID")
        "Unique, system generated identifier for a given standard text."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UCF_STDTEXT_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_STDTEXT_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_STDTEXT_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_STDTEXT_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_STDTEXT_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_STDTEXT_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_STDTEXT_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_STDTEXT_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_STDTEXT_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_STDTEXT_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_STDTEXT_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_STDTEXT_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_STDTEXT_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_STDTEXT_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_STDTEXT_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_STDTEXT_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.LATEST_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_REV_FLAG")
        "Flag indicating if authored object is of latest revision or not."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."

class SFWID_OPER_DC_FORMULA_DESC_ALT:
    schema = {
        "OPER_DC_FORMULA_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "DAT_COL_ID": "STRING",
        "USE_RANGE": "STRING",
        "EXECUTION_ORDER": "NUMBER",
        "FORMULA": "STRING",
        "EXTERNAL_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "OPER_DC_FORMULA_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_DC_FORMULA_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_DC_FORMULA_ALT = parse_value(self.schema, column_value_map, "OPER_DC_FORMULA_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        "Unique, system-generated identifier of the data collection."
        self.USE_RANGE = parse_value(self.schema, column_value_map, "USE_RANGE")
        self.EXECUTION_ORDER = parse_value(self.schema, column_value_map, "EXECUTION_ORDER")
        self.FORMULA = parse_value(self.schema, column_value_map, "FORMULA")
        self.EXTERNAL_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_FLAG")
        "This flag indicates that Change Type is External. i.e. Change Request Created (with this type) is created from External System."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."

class SFWID_ALTERATION_DISC_ITEM:
    schema = {
        "ALT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ALT_ID",
        "DISC_ID",
        "DISC_LINE_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_ALT_DISC_ITEM_DISCITEM_FK", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
        DbForeignKey("SFWID_ALT_DISC_ITEM_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFSQA_PWP_INSP_DEF_XREF:
    schema = {
        "OWNER_CODE": "STRING",
        "PWP_ID": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "PWP_ID",
        "ITEM_ID",
        "OWNER_CODE",
        "INSP_DEF_REV",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_PWP_INSP_DEF_XREF_FK2", ["PWP_ID"], "SFPL_PWP_DESC", ["PWP_ID"]),
        DbForeignKey("SFSQA_PWP_INSP_DEF_XREF_FK3", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"], "SFSQA_INSP_DEFINITION_REV", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        self.PWP_ID = parse_value(self.schema, column_value_map, "PWP_ID")
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")

class SFCORE_CONNECTION_DESC_HIST:
    schema = {
        "HIST_ID": "STRING",
        "OLD_HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CONNECTION_ID": "STRING",
        "SESSION_ID": "STRING",
        "USERID": "STRING",
        "SUPPLIER_ID": "STRING",
        "LOGIN_TIME": "STRING",
        "CONNECTION_TYPE": "STRING",
        "IPADDRESS": "STRING",
        "APPINIID": "STRING",
        "APPVER": "STRING",
        "CLIENT_CONTEXT_DATA": "STRING",
        "CLIENT_TZONE": "NUMBER",
        "DB_UNIQUE_ID": "STRING",
        "MT_NODE_ID": "STRING",
        "HEARTBEAT_TIMESTAMP": "DATE",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.OLD_HIST_ID = parse_value(self.schema, column_value_map, "OLD_HIST_ID")
        "Original numeric system generated unqiue identifier of this historical record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.CONNECTION_ID = parse_value(self.schema, column_value_map, "CONNECTION_ID")
        "Unique system generated identifier for a given application connection."
        self.SESSION_ID = parse_value(self.schema, column_value_map, "SESSION_ID")
        "The unique identifier of a user login session to the Solumina system ."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.SUPPLIER_ID = parse_value(self.schema, column_value_map, "SUPPLIER_ID")
        "System generated unique identifier for a given supplier, used for supplier licensing."
        self.LOGIN_TIME = parse_value(self.schema, column_value_map, "LOGIN_TIME")
        "Date and time of the user login session being established."
        self.CONNECTION_TYPE = parse_value(self.schema, column_value_map, "CONNECTION_TYPE")
        "The type of client a user is running/using when making an application connection to the Solumina database."
        self.IPADDRESS = parse_value(self.schema, column_value_map, "IPADDRESS")
        "IP address from which the user is logging in."
        self.APPINIID = parse_value(self.schema, column_value_map, "APPINIID")
        "INI_LIB record when application connection was made."
        self.APPVER = parse_value(self.schema, column_value_map, "APPVER")
        "Version of Solumina client application the user is running."
        self.CLIENT_CONTEXT_DATA = parse_value(self.schema, column_value_map, "CLIENT_CONTEXT_DATA")
        self.CLIENT_TZONE = parse_value(self.schema, column_value_map, "CLIENT_TZONE")
        self.DB_UNIQUE_ID = parse_value(self.schema, column_value_map, "DB_UNIQUE_ID")
        self.MT_NODE_ID = parse_value(self.schema, column_value_map, "MT_NODE_ID")
        "Middle tier node id."
        self.HEARTBEAT_TIMESTAMP = parse_value(self.schema, column_value_map, "HEARTBEAT_TIMESTAMP")
        "HEARTBEAT_TIMESTAMP is to store active session timestamp when client connects to Middle Tier."

class SFQA_CA_CHG_LOG:
    schema = {
        "CHG_LOG_ID": "STRING",
        "CA_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LOG_ACTION": "STRING",
        "TABLE_NAME": "STRING",
        "KEY_VALUE1": "STRING",
        "KEY_VALUE2": "STRING",
        "KEY_VALUE3": "STRING",
        "KEY_VALUE4": "STRING",
        "KEY_VALUE5": "STRING",
        "COLUMN_NAME": "STRING",
        "OLD_VALUE": "STRING",
        "NEW_VALUE": "STRING",
        "CHANGE_SEQ": "NUMBER",
        "OLD_TEXT": "STRING",
        "NEW_TEXT": "STRING",
    }
    primary_key_columns = [
        "CHG_LOG_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_CHG_LOG_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CHG_LOG_ID = parse_value(self.schema, column_value_map, "CHG_LOG_ID")
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LOG_ACTION = parse_value(self.schema, column_value_map, "LOG_ACTION")
        self.TABLE_NAME = parse_value(self.schema, column_value_map, "TABLE_NAME")
        self.KEY_VALUE1 = parse_value(self.schema, column_value_map, "KEY_VALUE1")
        self.KEY_VALUE2 = parse_value(self.schema, column_value_map, "KEY_VALUE2")
        self.KEY_VALUE3 = parse_value(self.schema, column_value_map, "KEY_VALUE3")
        self.KEY_VALUE4 = parse_value(self.schema, column_value_map, "KEY_VALUE4")
        self.KEY_VALUE5 = parse_value(self.schema, column_value_map, "KEY_VALUE5")
        self.COLUMN_NAME = parse_value(self.schema, column_value_map, "COLUMN_NAME")
        self.OLD_VALUE = parse_value(self.schema, column_value_map, "OLD_VALUE")
        self.NEW_VALUE = parse_value(self.schema, column_value_map, "NEW_VALUE")
        self.CHANGE_SEQ = parse_value(self.schema, column_value_map, "CHANGE_SEQ")
        self.OLD_TEXT = parse_value(self.schema, column_value_map, "OLD_TEXT")
        "The previous text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.NEW_TEXT = parse_value(self.schema, column_value_map, "NEW_TEXT")
        "The new text/content of the text block. Note that a text block may contain links to Solumina core objects."

class SFCORE_MM_FOLDER_DEF:
    schema = {
        "FOLDER_ID": "STRING",
        "FOLDER_TAG": "STRING",
        "FOLDER_TYPE": "STRING",
        "FOLDER_TITLE": "STRING",
        "LOAD_REF": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "PARENT_FOLDER_ID": "STRING",
        "CLASSIFICATION": "STRING",
        "OWNER_GROUP": "NUMBER",
    }
    primary_key_columns = [
        "FOLDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_MM_FOLDER_PRNTFLDR_FK", ["PARENT_FOLDER_ID"], "SFCORE_MM_FOLDER_DEF", ["FOLDER_ID"]),
    ]
    refs = [
        "SFCORE_MM_OBJFLDR_XREF_FLDR_FK",
        "SFCORE_MM_FOLDER_PRNTFLDR_FK",
    ]
    def __init__(self, column_value_map):
        self.FOLDER_ID = parse_value(self.schema, column_value_map, "FOLDER_ID")
        "Unique, system generated identifier of the folder."
        self.FOLDER_TAG = parse_value(self.schema, column_value_map, "FOLDER_TAG")
        "Unique, user provided identifier/name of the folder; can be modified."
        self.FOLDER_TYPE = parse_value(self.schema, column_value_map, "FOLDER_TYPE")
        "The purpose/intent of the folder."
        self.FOLDER_TITLE = parse_value(self.schema, column_value_map, "FOLDER_TITLE")
        "A detailed description of the folder."
        self.LOAD_REF = parse_value(self.schema, column_value_map, "LOAD_REF")
        "Name of the data source when data in the database record has been loaded from another system. Not in use."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.PARENT_FOLDER_ID = parse_value(self.schema, column_value_map, "PARENT_FOLDER_ID")
        "Identifier of the folder's parent folder."
        self.CLASSIFICATION = parse_value(self.schema, column_value_map, "CLASSIFICATION")
        "The classification of a given multimedia object."
        self.OWNER_GROUP = parse_value(self.schema, column_value_map, "OWNER_GROUP")
        "The functional group whose members can delete or modify the multimedia object."
        self.SFCORE_MM_OBJFLDR_XREF_FLDR_FK = []
        self.SFCORE_MM_FOLDER_PRNTFLDR_FK = []

class SFWID_HOLD_TYPE_DEF:
    schema = {
        "HOLD_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "HOLD_DESC": "STRING",
        "IS_VISIBLE": "STRING",
        "RESERVED_FLAG": "STRING",
    }
    primary_key_columns = [
        "HOLD_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFWID_HOLDS_HOLD_TYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.HOLD_TYPE = parse_value(self.schema, column_value_map, "HOLD_TYPE")
        "Type or classification of hold."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.HOLD_DESC = parse_value(self.schema, column_value_map, "HOLD_DESC")
        "A description of the hold type."
        self.IS_VISIBLE = parse_value(self.schema, column_value_map, "IS_VISIBLE")
        "If this Flag is Y, the lookup of work order hold type will show this record."
        self.RESERVED_FLAG = parse_value(self.schema, column_value_map, "RESERVED_FLAG")
        "If this Flag is Y, user will not be able to edit this record."
        self.SFWID_HOLDS_HOLD_TYPE_FK = []

class SFFND_ACTIVITY_DEF:
    schema = {
        "ACTIVITY_NAME": "STRING",
        "ACTIVITY_DESCRIPTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_ACTIVITY_VCH1": "STRING",
        "UCF_ACTIVITY_VCH2": "STRING",
        "UCF_ACTIVITY_VCH3": "STRING",
        "UCF_ACTIVITY_VCH4": "STRING",
        "UCF_ACTIVITY_VCH5": "STRING",
        "UCF_ACTIVITY_VCH6": "STRING",
        "UCF_ACTIVITY_VCH7": "STRING",
        "UCF_ACTIVITY_VCH8": "STRING",
        "UCF_ACTIVITY_VCH9": "STRING",
        "UCF_ACTIVITY_VCH10": "STRING",
        "UCF_ACTIVITY_VCH11": "STRING",
        "UCF_ACTIVITY_VCH12": "STRING",
        "UCF_ACTIVITY_VCH13": "STRING",
        "UCF_ACTIVITY_VCH14": "STRING",
        "UCF_ACTIVITY_VCH15": "STRING",
        "UCF_ACTIVITY_NUM1": "NUMBER",
        "UCF_ACTIVITY_NUM2": "NUMBER",
        "UCF_ACTIVITY_NUM3": "NUMBER",
        "UCF_ACTIVITY_NUM4": "NUMBER",
        "UCF_ACTIVITY_NUM5": "NUMBER",
        "UCF_ACTIVITY_DATE1": "STRING",
        "UCF_ACTIVITY_DATE2": "STRING",
        "UCF_ACTIVITY_DATE3": "STRING",
        "UCF_ACTIVITY_DATE4": "STRING",
        "UCF_ACTIVITY_DATE5": "STRING",
        "UCF_ACTIVITY_FLAG1": "STRING",
        "UCF_ACTIVITY_FLAG2": "STRING",
        "UCF_ACTIVITY_FLAG3": "STRING",
        "UCF_ACTIVITY_FLAG4": "STRING",
        "UCF_ACTIVITY_FLAG5": "STRING",
        "UCF_ACTIVITY_VCH255_1": "STRING",
        "UCF_ACTIVITY_VCH255_2": "STRING",
        "UCF_ACTIVITY_VCH255_3": "STRING",
        "UCF_ACTIVITY_VCH4000_1": "STRING",
        "UCF_ACTIVITY_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "ACTIVITY_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFWID_OWP_DEF_FK6",
    ]
    def __init__(self, column_value_map):
        self.ACTIVITY_NAME = parse_value(self.schema, column_value_map, "ACTIVITY_NAME")
        "A specific Activity Name."
        self.ACTIVITY_DESCRIPTION = parse_value(self.schema, column_value_map, "ACTIVITY_DESCRIPTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_ACTIVITY_VCH1 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH2 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH3 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH4 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH5 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH6 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH7 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH8 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH9 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH10 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH11 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH12 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH13 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH14 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_VCH15 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ACTIVITY_NUM1 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ACTIVITY_NUM2 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ACTIVITY_NUM3 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ACTIVITY_NUM4 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ACTIVITY_NUM5 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ACTIVITY_DATE1 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ACTIVITY_DATE2 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_DATE2")
        self.UCF_ACTIVITY_DATE3 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_DATE3")
        self.UCF_ACTIVITY_DATE4 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_DATE4")
        self.UCF_ACTIVITY_DATE5 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_DATE5")
        self.UCF_ACTIVITY_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ACTIVITY_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ACTIVITY_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ACTIVITY_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_FLAG4")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ACTIVITY_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_FLAG5")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ACTIVITY_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ACTIVITY_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ACTIVITY_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ACTIVITY_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ACTIVITY_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ACTIVITY_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.SFWID_OWP_DEF_FK6 = []

class SFCORE_ROLE_PREFIX:
    schema = {
        "ROLE_PREFIX": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "PRIV_FLAG": "STRING",
        "ASSIGN_FLAG": "STRING",
        "CREATE_FLAG": "STRING",
    }
    primary_key_columns = [
        "ROLE_PREFIX",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ROLE_PREFIX = parse_value(self.schema, column_value_map, "ROLE_PREFIX")
        "The role prefix to include in the \"available to assign\" section of the ConfigTool Role Management tool. Specifically it constrains the values displayed within the SFCORE_AVAIL_ROLES view."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.PRIV_FLAG = parse_value(self.schema, column_value_map, "PRIV_FLAG")
        "Determines whether or not Solumina privs can be assigned to roles with a given prefix."
        self.ASSIGN_FLAG = parse_value(self.schema, column_value_map, "ASSIGN_FLAG")
        "Determines whether or not roles can be assigned to roles with a given prefix."
        self.CREATE_FLAG = parse_value(self.schema, column_value_map, "CREATE_FLAG")
        "Determines whether or not a user can create a role that starts with the given prefix from within the Config Tool."

class SFWID_EXT_DAT_COL_DTL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DC_DETAIL_ID": "STRING",
        "EXTERNAL_DAT_COL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ORDER_NO": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "DAT_COL_TITLE": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "DAT_COL_ID": "STRING",
        "SERIAL_ID": "STRING",
        "LOT_ID": "STRING",
        "DAT_COL_STATUS": "STRING",
        "PROCESSING_MSG": "STRING",
        "PROCESSING_DATE": "DATE",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DC_DETAIL_ID = parse_value(self.schema, column_value_map, "DC_DETAIL_ID")
        "Unique, system-generated identifier."
        self.EXTERNAL_DAT_COL_ID = parse_value(self.schema, column_value_map, "EXTERNAL_DAT_COL_ID")
        "Foreign key to SFWID_EXTERNAL_DAT_COL table."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        "Unique, user-assigned identifier of a given work order."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.DAT_COL_TITLE = parse_value(self.schema, column_value_map, "DAT_COL_TITLE")
        "Title/name of the data collection point."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        "Unique, system-generated identifier of the data collection."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.DAT_COL_STATUS = parse_value(self.schema, column_value_map, "DAT_COL_STATUS")
        "State of the data collection (POSTED  value posted successfully to blank dat col; OVERRIDE  override existing value in data col;  ERROR  error during posting of the value)"
        self.PROCESSING_MSG = parse_value(self.schema, column_value_map, "PROCESSING_MSG")
        "Processing and error message from the posting of the value."
        self.PROCESSING_DATE = parse_value(self.schema, column_value_map, "PROCESSING_DATE")
        "Date the last posting of value is performed."

class SFSQA_INSP_PLAN_DESC:
    schema = {
        "INSP_PLAN_ID": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "INSP_PLAN_NO": "STRING",
        "STATUS": "STRING",
        "DATE_CREATED": "DATE",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "INSP_PLAN_TITLE": "STRING",
        "PLAN_TYPE": "STRING",
        "NOTES": "STRING",
        "ALLOW_AUDITING": "STRING",
        "FAILURES_ALLOWED": "NUMBER",
        "NUM_RESET": "NUMBER",
        "MONTHS_2_CHECK": "NUMBER",
        "UCF_INSP_PLAN_VCH1": "STRING",
        "OBJECT_ID": "STRING",
        "UCF_INSP_PLAN_VCH2": "STRING",
        "UCF_INSP_PLAN_VCH3": "STRING",
        "UCF_INSP_PLAN_VCH4": "STRING",
        "UCF_INSP_PLAN_VCH5": "STRING",
        "UCF_INSP_PLAN_VCH6": "STRING",
        "UCF_INSP_PLAN_VCH7": "STRING",
        "UCF_INSP_PLAN_VCH8": "STRING",
        "UCF_INSP_PLAN_VCH9": "STRING",
        "UCF_INSP_PLAN_VCH10": "STRING",
        "UCF_INSP_PLAN_VCH11": "STRING",
        "UCF_INSP_PLAN_VCH12": "STRING",
        "UCF_INSP_PLAN_VCH13": "STRING",
        "UCF_INSP_PLAN_VCH14": "STRING",
        "UCF_INSP_PLAN_VCH15": "STRING",
        "UCF_INSP_PLAN_DATE1": "STRING",
        "UCF_INSP_PLAN_DATE2": "STRING",
        "UCF_INSP_PLAN_DATE3": "STRING",
        "UCF_INSP_PLAN_DATE4": "STRING",
        "UCF_INSP_PLAN_DATE5": "STRING",
        "UCF_INSP_PLAN_FLAG1": "STRING",
        "UCF_INSP_PLAN_FLAG2": "STRING",
        "UCF_INSP_PLAN_FLAG3": "STRING",
        "UCF_INSP_PLAN_FLAG4": "STRING",
        "UCF_INSP_PLAN_FLAG5": "STRING",
        "UCF_INSP_PLAN_NUM1": "NUMBER",
        "UCF_INSP_PLAN_NUM2": "NUMBER",
        "UCF_INSP_PLAN_NUM3": "NUMBER",
        "UCF_INSP_PLAN_NUM4": "NUMBER",
        "UCF_INSP_PLAN_NUM5": "NUMBER",
        "UCF_INSP_PLAN_VCH255_1": "STRING",
        "UCF_INSP_PLAN_VCH255_2": "STRING",
        "UCF_INSP_PLAN_VCH255_3": "STRING",
        "UCF_INSP_PLAN_VCH4000_1": "STRING",
        "UCF_INSP_PLAN_VCH4000_2": "STRING",
        "DOC_TYPE": "STRING",
        "WORK_FLOW": "STRING",
        "AUTO_COMPLETE": "STRING",
    }
    primary_key_columns = [
        "INSP_PLAN_ID",
        "INSP_PLAN_REV",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_PLAN_DESC_OBJID_FK", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFSQA_INSP_PLAN_DESC_FK2", ["DOC_TYPE","PLAN_TYPE","WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
    ]
    refs = [
        "SFPL_IMPACTED_OBJECTS_FK6",
        "SFSQA_INSP_PLAN_INSP_STEPS_FK1",
        "SFPL_PLANNED_ACTIONS_FK6",
        "SFFND_INSP_PLAN_TASK_FK1",
        "SFSQA_INSP_ORDER_DESC_FK1",
        "SFPL_RESULTING_OBJECTS_FK6",
        "SFQA_CA_DESC_INSP_PLAN_FK",
        "SFSQA_PWP_INSP_PLAN_XREF_FK1",
        "SFPL_AFFECTED_OBJECTS_FK6",
    ]
    def __init__(self, column_value_map):
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        self.INSP_PLAN_NO = parse_value(self.schema, column_value_map, "INSP_PLAN_NO")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.DATE_CREATED = parse_value(self.schema, column_value_map, "DATE_CREATED")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.INSP_PLAN_TITLE = parse_value(self.schema, column_value_map, "INSP_PLAN_TITLE")
        self.PLAN_TYPE = parse_value(self.schema, column_value_map, "PLAN_TYPE")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.ALLOW_AUDITING = parse_value(self.schema, column_value_map, "ALLOW_AUDITING")
        self.FAILURES_ALLOWED = parse_value(self.schema, column_value_map, "FAILURES_ALLOWED")
        self.NUM_RESET = parse_value(self.schema, column_value_map, "NUM_RESET")
        self.MONTHS_2_CHECK = parse_value(self.schema, column_value_map, "MONTHS_2_CHECK")
        self.UCF_INSP_PLAN_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH1")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UCF_INSP_PLAN_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH2")
        self.UCF_INSP_PLAN_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH3")
        self.UCF_INSP_PLAN_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH4")
        self.UCF_INSP_PLAN_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH5")
        self.UCF_INSP_PLAN_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH6")
        self.UCF_INSP_PLAN_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH7")
        self.UCF_INSP_PLAN_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH8")
        self.UCF_INSP_PLAN_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH9")
        self.UCF_INSP_PLAN_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH10")
        self.UCF_INSP_PLAN_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH11")
        self.UCF_INSP_PLAN_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH12")
        self.UCF_INSP_PLAN_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH13")
        self.UCF_INSP_PLAN_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH14")
        self.UCF_INSP_PLAN_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH15")
        self.UCF_INSP_PLAN_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_DATE1")
        self.UCF_INSP_PLAN_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_DATE2")
        self.UCF_INSP_PLAN_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_DATE3")
        self.UCF_INSP_PLAN_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_DATE4")
        self.UCF_INSP_PLAN_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_DATE5")
        self.UCF_INSP_PLAN_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_FLAG1")
        self.UCF_INSP_PLAN_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_FLAG2")
        self.UCF_INSP_PLAN_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_FLAG3")
        self.UCF_INSP_PLAN_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_FLAG4")
        self.UCF_INSP_PLAN_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_FLAG5")
        self.UCF_INSP_PLAN_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_NUM1")
        self.UCF_INSP_PLAN_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_NUM2")
        self.UCF_INSP_PLAN_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_NUM3")
        self.UCF_INSP_PLAN_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_NUM4")
        self.UCF_INSP_PLAN_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_NUM5")
        self.UCF_INSP_PLAN_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH255_1")
        self.UCF_INSP_PLAN_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH255_2")
        self.UCF_INSP_PLAN_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH255_3")
        self.UCF_INSP_PLAN_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH4000_1")
        self.UCF_INSP_PLAN_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_PLAN_VCH4000_2")
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        self.WORK_FLOW = parse_value(self.schema, column_value_map, "WORK_FLOW")
        self.AUTO_COMPLETE = parse_value(self.schema, column_value_map, "AUTO_COMPLETE")
        "Auto complete flag."
        self.SFPL_IMPACTED_OBJECTS_FK6 = []
        self.SFSQA_INSP_PLAN_INSP_STEPS_FK1 = []
        self.SFPL_PLANNED_ACTIONS_FK6 = []
        self.SFFND_INSP_PLAN_TASK_FK1 = []
        self.SFSQA_INSP_ORDER_DESC_FK1 = []
        self.SFPL_RESULTING_OBJECTS_FK6 = []
        self.SFQA_CA_DESC_INSP_PLAN_FK = []
        self.SFSQA_PWP_INSP_PLAN_XREF_FK1 = []
        self.SFPL_AFFECTED_OBJECTS_FK6 = []

class SFFND_TASK:
    schema = {
        "TASK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TASK_TYPE": "STRING",
        "QUEUE_TYPE": "STRING",
        "QUEUE_ID": "STRING",
        "PRIORITY": "STRING",
        "ASSIGNED_TO_USERID": "STRING",
        "STATUS": "STRING",
        "SCH_START_DATE": "STRING",
        "SCH_END_DATE": "STRING",
        "SCH_DAYS": "NUMBER",
        "REV_START_DATE": "STRING",
        "REV_END_DATE": "STRING",
        "REV_DAYS": "NUMBER",
        "NOTES": "STRING",
        "AUTO_COMPLETE_TASK_FLAG": "STRING",
        "ASSIGNED_FLAG": "STRING",
    }
    primary_key_columns = [
        "TASK_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_CA_ACTION_ITEM_TASK_FK3",
        "SFFND_CHANGE_REQUEST_TASK_FK2",
        "SFFND_COMM_TASK_FK",
        "SFFND_DISPTASK_TASK_FK",
        "SFFND_INSP_PLAN_TASK_FK2",
        "SFFND_ALTTASK_TASK_FK",
        "SFFND_INSP_DEF_TASK_FK2",
        "SFFND_PLGTASK_TASK_FK",
        "SFFND_CA_TASK_FK_TASKID",
        "SFFND_MMOBJ_TASK_TASK",
        "SFFND_BOM_TASK_FK1",
    ]
    def __init__(self, column_value_map):
        self.TASK_ID = parse_value(self.schema, column_value_map, "TASK_ID")
        "The unique system-generated identifier of a task."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TASK_TYPE = parse_value(self.schema, column_value_map, "TASK_TYPE")
        "The type/class of the task. For instance: DISC_WO_MR, DISC_WO_PR, or PLG_AUTH."
        self.QUEUE_TYPE = parse_value(self.schema, column_value_map, "QUEUE_TYPE")
        "Type or classification of task queue, e.g., PLG AUTHORING, DISC_INITIATION."
        self.QUEUE_ID = parse_value(self.schema, column_value_map, "QUEUE_ID")
        "The name of the task queue which the task is associated to. For instance: IE AUTHORING, PLG ACCEPTANCE, PLG AUTHORING, or QA_PR."
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        "The priority of the task."
        self.ASSIGNED_TO_USERID = parse_value(self.schema, column_value_map, "ASSIGNED_TO_USERID")
        "Identifier of the Solumina user the task is assigned to."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The current status of the task. For instance: IN QUEUE, ACTIVE, ACCEPT, or REJECT-IE."
        self.SCH_START_DATE = parse_value(self.schema, column_value_map, "SCH_START_DATE")
        "The date on which the task is scheduled to start."
        self.SCH_END_DATE = parse_value(self.schema, column_value_map, "SCH_END_DATE")
        "The date on which the task is scheduled to end."
        self.SCH_DAYS = parse_value(self.schema, column_value_map, "SCH_DAYS")
        "The scheduled duration in number of days of the task."
        self.REV_START_DATE = parse_value(self.schema, column_value_map, "REV_START_DATE")
        "The revised start date of the task."
        self.REV_END_DATE = parse_value(self.schema, column_value_map, "REV_END_DATE")
        "The revised completion date of the task."
        self.REV_DAYS = parse_value(self.schema, column_value_map, "REV_DAYS")
        "The revised duration in number of days of the task."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about the task."
        self.AUTO_COMPLETE_TASK_FLAG = parse_value(self.schema, column_value_map, "AUTO_COMPLETE_TASK_FLAG")
        "Flag to find the task internally/automatically completed."
        self.ASSIGNED_FLAG = parse_value(self.schema, column_value_map, "ASSIGNED_FLAG")
        "Flag to identify whether user has claimed or been assigned Task. Possible value 'A' or 'C'."
        self.SFFND_CA_ACTION_ITEM_TASK_FK3 = []
        self.SFFND_CHANGE_REQUEST_TASK_FK2 = []
        self.SFFND_COMM_TASK_FK = []
        self.SFFND_DISPTASK_TASK_FK = []
        self.SFFND_INSP_PLAN_TASK_FK2 = []
        self.SFFND_ALTTASK_TASK_FK = []
        self.SFFND_INSP_DEF_TASK_FK2 = []
        self.SFFND_PLGTASK_TASK_FK = []
        self.SFFND_CA_TASK_FK_TASKID = []
        self.SFFND_MMOBJ_TASK_TASK = []
        self.SFFND_BOM_TASK_FK1 = []

class SFFND_USER_OWNER_GROUP_XREF:
    schema = {
        "USERID": "STRING",
        "OWNER_GROUP_KEY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "USERID",
        "OWNER_GROUP_KEY",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_USER_OWNGRP_XREF_USER_FK", ["USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.OWNER_GROUP_KEY = parse_value(self.schema, column_value_map, "OWNER_GROUP_KEY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_MFG_BOM_MM_OBJECT_CONFIG:
    schema = {
        "BOM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "CONFIG_ID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBJECT_ID": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
        "OBJECT_ID",
        "CONFIG_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_MM_OBJ_CONFIG_FK2", ["CONFIG_ID"], "SFFND_CONFIG_DEF", ["CONFIG_ID"]),
        DbForeignKey("SFPL_MFG_BOM_MM_OBJ_CONFIG_FK1", ["BOM_ID","OBJECT_ID"], "SFPL_MFG_BOM_MM_OBJECT", ["BOM_ID","OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique, system-generated identifier of a given BOM."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.CONFIG_ID = parse_value(self.schema, column_value_map, "CONFIG_ID")
        "Unique system generated column to identify each configuration value."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."

class SFQRTZ_JOB_DETAILS:
    schema = {
        "SCHED_NAME": "STRING",
        "JOB_NAME": "STRING",
        "JOB_GROUP": "STRING",
        "DESCRIPTION": "STRING",
        "JOB_CLASS_NAME": "STRING",
        "IS_DURABLE": "STRING",
        "IS_NONCONCURRENT": "STRING",
        "IS_UPDATE_DATA": "STRING",
        "REQUESTS_RECOVERY": "STRING",
        "JOB_DATA": "STRING",
    }
    primary_key_columns = [
        "SCHED_NAME",
        "JOB_NAME",
        "JOB_GROUP",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQRTZ_TRIGGER_TO_JOBS_FK",
    ]
    def __init__(self, column_value_map):
        self.SCHED_NAME = parse_value(self.schema, column_value_map, "SCHED_NAME")
        self.JOB_NAME = parse_value(self.schema, column_value_map, "JOB_NAME")
        self.JOB_GROUP = parse_value(self.schema, column_value_map, "JOB_GROUP")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.JOB_CLASS_NAME = parse_value(self.schema, column_value_map, "JOB_CLASS_NAME")
        self.IS_DURABLE = parse_value(self.schema, column_value_map, "IS_DURABLE")
        self.IS_NONCONCURRENT = parse_value(self.schema, column_value_map, "IS_NONCONCURRENT")
        self.IS_UPDATE_DATA = parse_value(self.schema, column_value_map, "IS_UPDATE_DATA")
        self.REQUESTS_RECOVERY = parse_value(self.schema, column_value_map, "REQUESTS_RECOVERY")
        self.JOB_DATA = parse_value(self.schema, column_value_map, "JOB_DATA")
        self.SFQRTZ_TRIGGER_TO_JOBS_FK = []

class SFCORE_USER:
    schema = {
        "USERID": "STRING",
        "PASSWORD": "STRING",
        "ACCOUNT_STATUS": "STRING",
        "ACCOUNT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "EXPIRY_DATE": "STRING",
        "PASSWD_CHANGE_DATE": "STRING",
        "PASSWD_EXPIRE_DAYS": "NUMBER",
    }
    primary_key_columns = [
        "USERID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFCORE_SUPPLIER_USERS_FK1",
        "SFCORE_PASSWD_HIST_USER_FK",
        "SFCORE_USER_ROLES_FK2",
        "SFCORE_USER_PRIVS_FK2",
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.PASSWORD = parse_value(self.schema, column_value_map, "PASSWORD")
        self.ACCOUNT_STATUS = parse_value(self.schema, column_value_map, "ACCOUNT_STATUS")
        self.ACCOUNT_TYPE = parse_value(self.schema, column_value_map, "ACCOUNT_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.EXPIRY_DATE = parse_value(self.schema, column_value_map, "EXPIRY_DATE")
        self.PASSWD_CHANGE_DATE = parse_value(self.schema, column_value_map, "PASSWD_CHANGE_DATE")
        self.PASSWD_EXPIRE_DAYS = parse_value(self.schema, column_value_map, "PASSWD_EXPIRE_DAYS")
        self.SFCORE_SUPPLIER_USERS_FK1 = []
        self.SFCORE_PASSWD_HIST_USER_FK = []
        self.SFCORE_USER_ROLES_FK2 = []
        self.SFCORE_USER_PRIVS_FK2 = []

class SFCORE_CONNECTION_DETAILS_HIST:
    schema = {
        "HIST_ID": "STRING",
        "OLD_HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CONNECTION_ID": "STRING",
        "LICENSE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.OLD_HIST_ID = parse_value(self.schema, column_value_map, "OLD_HIST_ID")
        "Original numeric system generated unqiue identifier of this historical record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.CONNECTION_ID = parse_value(self.schema, column_value_map, "CONNECTION_ID")
        "Unique system generated identifier for a given application connection."
        self.LICENSE_TYPE = parse_value(self.schema, column_value_map, "LICENSE_TYPE")
        "The type of license."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFPL_MFG_BOM_COMP_ORIG:
    schema = {
        "BOM_ID": "STRING",
        "BOM_COMP_ID": "STRING",
        "ITEM_ID": "STRING",
        "BOM_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "SPOOL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "FIND_NO": "STRING",
        "QTY": "NUMBER",
        "DATASOURCE": "STRING",
        "ITEM_NOTES": "STRING",
        "OPT_DC1_FLAG": "STRING",
        "OPT_DC2_FLAG": "STRING",
        "OPT_DC3_FLAG": "STRING",
        "OPT_DC4_FLAG": "STRING",
        "UCF_MBOM_VCH1": "STRING",
        "UCF_MBOM_VCH2": "STRING",
        "UCF_MBOM_VCH3": "STRING",
        "UCF_MBOM_VCH4": "STRING",
        "UCF_MBOM_VCH5": "STRING",
        "UCF_MBOM_VCH6": "STRING",
        "UCF_MBOM_VCH7": "STRING",
        "UCF_MBOM_VCH8": "STRING",
        "UCF_MBOM_VCH9": "STRING",
        "UCF_MBOM_VCH10": "STRING",
        "UCF_MBOM_VCH11": "STRING",
        "UCF_MBOM_VCH12": "STRING",
        "UCF_MBOM_VCH13": "STRING",
        "UCF_MBOM_VCH14": "STRING",
        "UCF_MBOM_VCH15": "STRING",
        "UCF_MBOM_NUM1": "NUMBER",
        "UCF_MBOM_NUM2": "NUMBER",
        "UCF_MBOM_NUM3": "NUMBER",
        "UCF_MBOM_NUM4": "NUMBER",
        "UCF_MBOM_NUM5": "NUMBER",
        "UCF_MBOM_DATE1": "STRING",
        "UCF_MBOM_DATE2": "STRING",
        "UCF_MBOM_DATE3": "STRING",
        "UCF_MBOM_DATE4": "STRING",
        "UCF_MBOM_DATE5": "STRING",
        "UCF_MBOM_FLAG1": "STRING",
        "UCF_MBOM_FLAG2": "STRING",
        "UCF_MBOM_FLAG3": "STRING",
        "UCF_MBOM_FLAG4": "STRING",
        "UCF_MBOM_FLAG5": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "EFF_FROM": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "VISUAL_FILE_LINK": "STRING",
        "UCF_MBOM_VCH255_1": "STRING",
        "UCF_MBOM_VCH255_2": "STRING",
        "UCF_MBOM_VCH255_3": "STRING",
        "UCF_MBOM_VCH4000_1": "STRING",
        "UCF_MBOM_VCH4000_2": "STRING",
        "PHANTOM_KIT_FLAG": "STRING",
        "BOM_LINE_ID": "STRING",
        "PROGRAM": "STRING",
        "LATEST_COMP_BOM_ID": "STRING",
        "ALT_GROUP": "STRING",
        "PROJECT": "STRING",
        "LOCATION_ID": "STRING",
        "UOM": "STRING",
        "RAW_MATERIAL_LENGTH": "NUMBER",
        "RAW_MATERIAL_WIDTH": "NUMBER",
        "NO_OF_PCS": "NUMBER",
    }
    primary_key_columns = [
        "BOM_ID",
        "BOM_COMP_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_COMP_ORIG_FK2", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_ORIG_FK1", ["BOM_ID","BOM_LINE_ID"], "SFPL_MFG_BOM_REV_LINE_NO_ORIG", ["BOM_ID","BOM_LINE_ID"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_ORIG_FK5", ["PROJECT"], "SFFND_PROJECT_DEF", ["PROJECT"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_ORIG_FK4", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_ORIG_FK6", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_ORIG_FK7", ["UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_ORIG_FK3", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
    ]
    refs = [
        "SFPL_MBOM_COMP_ALT_XRF_ORG_F1",
        "SFPL_MFG_BOM_COMP_REF_ORIG_FK1",
        "SFPL_MFG_BOM_COMP_CONF_ORG_FK2",
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Corresponding BOM for which BOM Component is added"
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        "Unique, system-generated identifier of a given BOM component."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.BOM_ITEM_ID = parse_value(self.schema, column_value_map, "BOM_ITEM_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.SPOOL_FLAG = parse_value(self.schema, column_value_map, "SPOOL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by a spool number."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by expiration date."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.QTY = parse_value(self.schema, column_value_map, "QTY")
        "The quantity of component item/parts required to fabricate/assemble the parent part."
        self.DATASOURCE = parse_value(self.schema, column_value_map, "DATASOURCE")
        "The source system from which data in this record has been originated."
        self.ITEM_NOTES = parse_value(self.schema, column_value_map, "ITEM_NOTES")
        "Additional information about a given component/part."
        self.OPT_DC1_FLAG = parse_value(self.schema, column_value_map, "OPT_DC1_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC2_FLAG = parse_value(self.schema, column_value_map, "OPT_DC2_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC3_FLAG = parse_value(self.schema, column_value_map, "OPT_DC3_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC4_FLAG = parse_value(self.schema, column_value_map, "OPT_DC4_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.UCF_MBOM_VCH1 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH2 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH3 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH4 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH5 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH6 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH7 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH8 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH9 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH10 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH11 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH12 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH13 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH14 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH15 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_NUM1 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_NUM2 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_NUM3 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_NUM4 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_NUM5 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_DATE1 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_DATE2 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_DATE3 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_DATE4 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_DATE5 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "The upper bound of the effectivity range for a effectivity type other than time period."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "The lower bound of the effectivity range for a effectivity type other than time period."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "The starting date of the time period during which the data collection value domain definition is effective."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "The ending date of the time period during which the data collection value domain definition is effective."
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        "A Number identifier which identifies that this record comes from Plam Device."
        self.VISUAL_FILE_LINK = parse_value(self.schema, column_value_map, "VISUAL_FILE_LINK")
        self.UCF_MBOM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_MBOM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.PHANTOM_KIT_FLAG = parse_value(self.schema, column_value_map, "PHANTOM_KIT_FLAG")
        "Determines if the item is phantom or not."
        self.BOM_LINE_ID = parse_value(self.schema, column_value_map, "BOM_LINE_ID")
        "Reference of BOM Line of the BOM Component."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.LATEST_COMP_BOM_ID = parse_value(self.schema, column_value_map, "LATEST_COMP_BOM_ID")
        "ID of latest BOM on this component."
        self.ALT_GROUP = parse_value(self.schema, column_value_map, "ALT_GROUP")
        "It indicates Group Name of Component in BOM."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Unit of measure for bom component."
        self.RAW_MATERIAL_LENGTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_LENGTH")
        self.RAW_MATERIAL_WIDTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_WIDTH")
        self.NO_OF_PCS = parse_value(self.schema, column_value_map, "NO_OF_PCS")
        self.SFPL_MBOM_COMP_ALT_XRF_ORG_F1 = []
        self.SFPL_MFG_BOM_COMP_REF_ORIG_FK1 = []
        self.SFPL_MFG_BOM_COMP_CONF_ORG_FK2 = []

class SFWID_ORDER_MM_OBJECTS:
    schema = {
        "ORDER_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH1": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH2": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH3": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH4": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH5": "STRING",
        "UCF_SFWID_WO_MM_OBJ_NUM1": "NUMBER",
        "UCF_SFWID_WO_MM_OBJ_NUM2": "NUMBER",
        "UCF_SFWID_WO_MM_OBJ_NUM3": "NUMBER",
        "UCF_SFWID_WO_MM_OBJ_DATE1": "STRING",
        "UCF_SFWID_WO_MM_OBJ_DATE2": "STRING",
        "UCF_SFWID_WO_MM_OBJ_FLAG1": "STRING",
        "UCF_SFWID_WO_MM_OBJ_FLAG2": "STRING",
        "UCF_SFWID_WO_MM_OBJ_FLAG3": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH255_1": "STRING",
        "UCF_SFWID_WO_MM_OBJ_VCH255_2": "STRING",
        "SOURCE_ID": "STRING",
        "SOURCE_TYPE": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "ORIG_OBJECT_ID": "STRING",
        "RTF_LINK_ID": "STRING",
        "BOM_LINE_NO": "STRING",
        "EFF_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "DATE",
    }
    primary_key_columns = [
        "ORDER_ID",
        "TEXT_TYPE",
        "OBJECT_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_MM_OBJECTS_FK3", ["ORIG_OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_ORDER_MM_OBJECTS_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_ORDER_MM_OBJECTS_FK1", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_MM_OBJECTS_FK4", ["EFF_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a work order."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_SFWID_WO_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_WO_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_WO_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_WO_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_WO_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SFWID_WO_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SFWID_WO_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_WO_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_WO_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_WO_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SFWID_WO_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SFWID_WO_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.SOURCE_ID = parse_value(self.schema, column_value_map, "SOURCE_ID")
        "Unique identifier for source, when source is BOM then BOM_ID and ITEM_ID for other sources."
        self.SOURCE_TYPE = parse_value(self.schema, column_value_map, "SOURCE_TYPE")
        "Source type where illustration belongs. Like Bom, Component, Part, Tool, Process, Machine etc."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.ORIG_OBJECT_ID = parse_value(self.schema, column_value_map, "ORIG_OBJECT_ID")
        "ID of the object originaly authored from which the current one is created on-the-fly."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        self.EFF_TYPE = parse_value(self.schema, column_value_map, "EFF_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")

class SFBIS_DESTINATION_DEF:
    schema = {
        "DESTINATION_NAME": "STRING",
        "URI": "STRING",
        "DESCRIPTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "REF1": "STRING",
        "REF2": "STRING",
        "REF3": "STRING",
        "REF4": "STRING",
        "REF5": "STRING",
    }
    primary_key_columns = [
        "DESTINATION_NAME",
        "URI",
    ]
    foreign_keys = [
        DbForeignKey("SFBIS_DESTINATION_DEF_FK1", ["DESTINATION_NAME"], "SFBIS_SERVICE_DEST_DEF", ["DESTINATION_NAME"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DESTINATION_NAME = parse_value(self.schema, column_value_map, "DESTINATION_NAME")
        self.URI = parse_value(self.schema, column_value_map, "URI")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.REF1 = parse_value(self.schema, column_value_map, "REF1")
        self.REF2 = parse_value(self.schema, column_value_map, "REF2")
        self.REF3 = parse_value(self.schema, column_value_map, "REF3")
        self.REF4 = parse_value(self.schema, column_value_map, "REF4")
        self.REF5 = parse_value(self.schema, column_value_map, "REF5")

class SFWID_SERIAL_OPER_ITEMS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "PART_DAT_COL_ID": "STRING",
        "PLND_ITEM_ID": "STRING",
        "REF_DES": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ITEM_DAT_COL_STATUS": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "COMPLETE_QTY": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "LOT_ID",
        "SERIAL_ID",
        "PART_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_SRL_OPER_ITEMS_PITEM_FK", ["PLND_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFWID_SEROPERITEMS_SERL_FK", ["ORDER_ID","LOT_ID","SERIAL_ID"], "SFWID_SERIAL_DESC", ["ORDER_ID","LOT_ID","SERIAL_ID"]),
        DbForeignKey("SFWID_SEROPERITEMS_OPER_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.PLND_ITEM_ID = parse_value(self.schema, column_value_map, "PLND_ITEM_ID")
        "Unique, system-generated ID of the given component/part."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ITEM_DAT_COL_STATUS = parse_value(self.schema, column_value_map, "ITEM_DAT_COL_STATUS")
        "Status of the data collection for the given serialized component/part at the given operation."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.COMPLETE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_QTY")
        "Determines the number of units completed. Applicable when Continuous Flow flag is Y."

class SFQA_CA_REQUEST_SUBJECT:
    schema = {
        "CA_REQUEST_ID": "STRING",
        "CA_REQUEST_SUBJECT_ID": "STRING",
        "SUBJECT_TYPE": "STRING",
        "SUBJECT_REF1": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SUBJECT_TITLE": "STRING",
        "SUBJECT_REF2": "STRING",
        "SUBJECT_REF3": "STRING",
        "SUBJECT_NOTES": "STRING",
    }
    primary_key_columns = [
        "CA_REQUEST_ID",
        "CA_REQUEST_SUBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_REQ_SBJ_SBJ_TYPE_FK", ["SUBJECT_TYPE"], "SFQA_CA_SUBJECT_TYPE_DEF", ["SUBJECT_TYPE"]),
        DbForeignKey("SFQA_CA_REQ_SBJ_CA_REQ_FK", ["CA_REQUEST_ID"], "SFQA_CA_REQUEST", ["CA_REQUEST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.CA_REQUEST_SUBJECT_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_SUBJECT_ID")
        "Identifier of the given subject of the Corrective Action Request."
        self.SUBJECT_TYPE = parse_value(self.schema, column_value_map, "SUBJECT_TYPE")
        "Type or classification of subject matter, e.g., Tooling, Part, Drawing, Process Specification."
        self.SUBJECT_REF1 = parse_value(self.schema, column_value_map, "SUBJECT_REF1")
        "First data element of detailed information for the subject type, e.g., PART_NO for a Part, TOOL_NO for a Tooling requirement, DRAWING_NO for a Drawing, PROC_SPEC_NO for a Process Specification."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SUBJECT_TITLE = parse_value(self.schema, column_value_map, "SUBJECT_TITLE")
        "Title or name of the subject."
        self.SUBJECT_REF2 = parse_value(self.schema, column_value_map, "SUBJECT_REF2")
        "Second data element of detailed information for the subject type, e.g., PART_CHG for a Part, TOOL_CHG for a Tooling requirement, DRAWING_CHG for a Drawing, PROC_SPEC_CHG for a Process Specification. Can be NULL."
        self.SUBJECT_REF3 = parse_value(self.schema, column_value_map, "SUBJECT_REF3")
        "Third data element of detailed information for the subject type. Can be NULL."
        self.SUBJECT_NOTES = parse_value(self.schema, column_value_map, "SUBJECT_NOTES")
        "Additional comments about the subject matter."

class SFPL_OPERATION_PRECEDENCE:
    schema = {
        "TARGET_PLAN_ID": "STRING",
        "TARGET_OPER_KEY": "NUMBER",
        "TARGET_OPER_UPDT_NO": "NUMBER",
        "OPER_ACTION": "STRING",
        "PRECEDENT_PLAN_ID": "STRING",
        "PRECEDENT_PLAN_VERSION": "NUMBER",
        "PRECEDENT_OPER_KEY": "NUMBER",
        "CONDITION": "STRING",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "TARGET_PLAN_ID",
        "TARGET_OPER_KEY",
        "TARGET_OPER_UPDT_NO",
        "OPER_ACTION",
        "PRECEDENT_PLAN_ID",
        "PRECEDENT_PLAN_VERSION",
        "PRECEDENT_OPER_KEY",
        "CONDITION",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_OPERATION_PRECEDENCE_FK1", ["TARGET_PLAN_ID","TARGET_OPER_KEY","TARGET_OPER_UPDT_NO"], "SFPL_OPERATION_DESC", ["PLAN_ID","OPER_KEY","OPER_UPDT_NO"]),
        DbForeignKey("SFPL_OPERATION_PRECEDENCE_FK2", ["PRECEDENT_PLAN_ID","PRECEDENT_OPER_KEY"], "SFPL_OPERATION_MASTER", ["PLAN_ID","OPER_KEY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TARGET_PLAN_ID = parse_value(self.schema, column_value_map, "TARGET_PLAN_ID")
        self.TARGET_OPER_KEY = parse_value(self.schema, column_value_map, "TARGET_OPER_KEY")
        self.TARGET_OPER_UPDT_NO = parse_value(self.schema, column_value_map, "TARGET_OPER_UPDT_NO")
        self.OPER_ACTION = parse_value(self.schema, column_value_map, "OPER_ACTION")
        self.PRECEDENT_PLAN_ID = parse_value(self.schema, column_value_map, "PRECEDENT_PLAN_ID")
        self.PRECEDENT_PLAN_VERSION = parse_value(self.schema, column_value_map, "PRECEDENT_PLAN_VERSION")
        self.PRECEDENT_OPER_KEY = parse_value(self.schema, column_value_map, "PRECEDENT_OPER_KEY")
        self.CONDITION = parse_value(self.schema, column_value_map, "CONDITION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")

class SFFND_OOC_REASON_DEF:
    schema = {
        "OOC_CAUSE_FLAG": "STRING",
        "OOC_REASON_NUM": "NUMBER",
        "OOC_REASON_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "OOC_CAUSE_FLAG",
        "OOC_REASON_NUM",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OOC_CAUSE_FLAG = parse_value(self.schema, column_value_map, "OOC_CAUSE_FLAG")
        self.OOC_REASON_NUM = parse_value(self.schema, column_value_map, "OOC_REASON_NUM")
        self.OOC_REASON_DESC = parse_value(self.schema, column_value_map, "OOC_REASON_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_INPLACE_CFG_DATA_HIST:
    schema = {
        "HIST_ID": "STRING",
        "HIST_TIME_STAMP": "STRING",
        "HIST_USERID": "STRING",
        "HIST_ACTION": "STRING",
        "USER_TYPE": "STRING",
        "CFG_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "DESCRIPTION": "STRING",
        "CONTEXT_TEXT": "STRING",
        "CONTEXT_DATA": "STRING",
        "CONTEXT_DATA_KEY": "STRING",
        "IDENTITY_COL": "NUMBER",
    }
    primary_key_columns = [
        "IDENTITY_COL",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.USER_TYPE = parse_value(self.schema, column_value_map, "USER_TYPE")
        self.CFG_TYPE = parse_value(self.schema, column_value_map, "CFG_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.CONTEXT_TEXT = parse_value(self.schema, column_value_map, "CONTEXT_TEXT")
        self.CONTEXT_DATA = parse_value(self.schema, column_value_map, "CONTEXT_DATA")
        self.CONTEXT_DATA_KEY = parse_value(self.schema, column_value_map, "CONTEXT_DATA_KEY")
        self.IDENTITY_COL = parse_value(self.schema, column_value_map, "IDENTITY_COL")

class SFWID_ORDER_OPERS_DISP_DATA:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "ORDER_NO": "STRING",
        "ORDER_TYPE": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "PROGRAM": "STRING",
        "ORDER_STATUS": "STRING",
        "ORDER_HOLD_STATUS": "STRING",
        "ASGND_WORK_LOC": "STRING",
        "ORDER_QTY": "NUMBER",
        "ORIG_ORDER_ID": "STRING",
        "ORDER_CONTROL": "STRING",
        "OPER_NO": "STRING",
        "OPER_STATUS": "STRING",
        "OPER_HOLD_STATUS": "STRING",
        "MOVE_PENDING_FLAG": "STRING",
        "ASGND_WORK_DEPT": "STRING",
        "ASGND_WORK_CENTER": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "OPER_TITLE": "STRING",
        "OPER_OPT_FLAG": "STRING",
        "LTA_SEND_FLAG": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "SECURITY_GROUP": "STRING",
        "PERCENT_COMPLETE": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        self.ORDER_TYPE = parse_value(self.schema, column_value_map, "ORDER_TYPE")
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        self.ORDER_STATUS = parse_value(self.schema, column_value_map, "ORDER_STATUS")
        self.ORDER_HOLD_STATUS = parse_value(self.schema, column_value_map, "ORDER_HOLD_STATUS")
        self.ASGND_WORK_LOC = parse_value(self.schema, column_value_map, "ASGND_WORK_LOC")
        self.ORDER_QTY = parse_value(self.schema, column_value_map, "ORDER_QTY")
        self.ORIG_ORDER_ID = parse_value(self.schema, column_value_map, "ORIG_ORDER_ID")
        self.ORDER_CONTROL = parse_value(self.schema, column_value_map, "ORDER_CONTROL")
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        self.OPER_STATUS = parse_value(self.schema, column_value_map, "OPER_STATUS")
        self.OPER_HOLD_STATUS = parse_value(self.schema, column_value_map, "OPER_HOLD_STATUS")
        self.MOVE_PENDING_FLAG = parse_value(self.schema, column_value_map, "MOVE_PENDING_FLAG")
        self.ASGND_WORK_DEPT = parse_value(self.schema, column_value_map, "ASGND_WORK_DEPT")
        self.ASGND_WORK_CENTER = parse_value(self.schema, column_value_map, "ASGND_WORK_CENTER")
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        self.OPER_TITLE = parse_value(self.schema, column_value_map, "OPER_TITLE")
        self.OPER_OPT_FLAG = parse_value(self.schema, column_value_map, "OPER_OPT_FLAG")
        self.LTA_SEND_FLAG = parse_value(self.schema, column_value_map, "LTA_SEND_FLAG")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.PERCENT_COMPLETE = parse_value(self.schema, column_value_map, "PERCENT_COMPLETE")

class SFFND_LABOR_SIGNON_TYPE_DEF:
    schema = {
        "LABOR_SIGNON_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "LABOR_SIGNON_TYPE_DESC": "STRING",
    }
    primary_key_columns = [
        "LABOR_SIGNON_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_OPER_TYPE_DEF_FK1",
        "SFFND_USER_ACTIVITY_FK1",
    ]
    def __init__(self, column_value_map):
        self.LABOR_SIGNON_TYPE = parse_value(self.schema, column_value_map, "LABOR_SIGNON_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.LABOR_SIGNON_TYPE_DESC = parse_value(self.schema, column_value_map, "LABOR_SIGNON_TYPE_DESC")
        self.SFFND_OPER_TYPE_DEF_FK1 = []
        self.SFFND_USER_ACTIVITY_FK1 = []

class SFWID_OPER_DCFORMULA_VARS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "DAT_COL_ID": "STRING",
        "USE_RANGE": "STRING",
        "EXECUTION_ORDER": "NUMBER",
        "VARIABLE_NAME": "STRING",
        "VISIBILITY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "TEST_VALUE": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "FORMAT": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        self.USE_RANGE = parse_value(self.schema, column_value_map, "USE_RANGE")
        self.EXECUTION_ORDER = parse_value(self.schema, column_value_map, "EXECUTION_ORDER")
        self.VARIABLE_NAME = parse_value(self.schema, column_value_map, "VARIABLE_NAME")
        self.VISIBILITY = parse_value(self.schema, column_value_map, "VISIBILITY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.TEST_VALUE = parse_value(self.schema, column_value_map, "TEST_VALUE")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        self.FORMAT = parse_value(self.schema, column_value_map, "FORMAT")

class SFPL_PLAN_MASTER:
    schema = {
        "PLAN_ID": "STRING",
        "PROGRAM": "STRING",
        "PART_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "LOCK_STATE": "STRING",
        "ITEM_ID": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLAN_MASTER_ITEM_TYPE_FK", ["ITEM_TYPE","ITEM_SUBTYPE"], "SFPL_ITEM_TYPE_DEF", ["ITEM_TYPE","ITEM_SUBTYPE"]),
        DbForeignKey("SFPL_PLAN_MASTER_PRGM_FK", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
    ]
    refs = [
        "SFPL_PLAN_DESC_PLN_MSTR_FK",
        "SFPL_PLANDESC_PLANMAST_FK1",
        "SFPL_OPERMAST_PLANMAST_FK",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.LOCK_STATE = parse_value(self.schema, column_value_map, "LOCK_STATE")
        "The work Plan Revision lock state. Used for creating plan level user lock, GroupWare concept. Not in use."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of a part to be built."
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SFPL_PLAN_DESC_PLN_MSTR_FK = []
        self.SFPL_PLANDESC_PLANMAST_FK1 = []
        self.SFPL_OPERMAST_PLANMAST_FK = []

class SFFND_UID_ENTERPRISE_ID:
    schema = {
        "ENTERPRISE_ID": "STRING",
        "UPDT_USERID": "STRING",
        "ISSUING_AGENCY": "STRING",
        "ISSUE_AGENCY_NO": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ENTERPRISE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_UID_ENTERPRISE_ID_FK01", ["ISSUING_AGENCY"], "SFFND_ISSUING_AGENCY_DEF", ["ISSUING_AGENCY"]),
    ]
    refs = [
        "SFFND_UID_ENTRY_FK01",
    ]
    def __init__(self, column_value_map):
        self.ENTERPRISE_ID = parse_value(self.schema, column_value_map, "ENTERPRISE_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.ISSUING_AGENCY = parse_value(self.schema, column_value_map, "ISSUING_AGENCY")
        self.ISSUE_AGENCY_NO = parse_value(self.schema, column_value_map, "ISSUE_AGENCY_NO")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFFND_UID_ENTRY_FK01 = []

class SFSQA_MONTHS_BY_NUMBER:
    schema = {
        "VALU": "NUMBER",
    }
    primary_key_columns = [
        "VALU",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.VALU = parse_value(self.schema, column_value_map, "VALU")
        "Numeric value associated with any given month, for example 1 = JANUARY."

class SFWID_OPER_PRECEDENCE_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "TARGET_ORDER_ID": "STRING",
        "TARGET_OPER_KEY": "NUMBER",
        "TARGET_STEP_KEY": "NUMBER",
        "OPER_ACTION": "STRING",
        "PRECEDENT_PLAN_ID": "STRING",
        "PRECEDENT_PLAN_VERSION": "NUMBER",
        "PRECEDENT_OPER_KEY": "NUMBER",
        "CONDITION": "STRING",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
        "TIME_STAMP": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        self.TARGET_ORDER_ID = parse_value(self.schema, column_value_map, "TARGET_ORDER_ID")
        self.TARGET_OPER_KEY = parse_value(self.schema, column_value_map, "TARGET_OPER_KEY")
        self.TARGET_STEP_KEY = parse_value(self.schema, column_value_map, "TARGET_STEP_KEY")
        self.OPER_ACTION = parse_value(self.schema, column_value_map, "OPER_ACTION")
        self.PRECEDENT_PLAN_ID = parse_value(self.schema, column_value_map, "PRECEDENT_PLAN_ID")
        self.PRECEDENT_PLAN_VERSION = parse_value(self.schema, column_value_map, "PRECEDENT_PLAN_VERSION")
        self.PRECEDENT_OPER_KEY = parse_value(self.schema, column_value_map, "PRECEDENT_OPER_KEY")
        self.CONDITION = parse_value(self.schema, column_value_map, "CONDITION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")

class SFQA_DISC_ITEM_SEC_GRP:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "SECURITY_GROUP": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "SECURITY_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_ITEM_SEC_GRP_FK1", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
        DbForeignKey("SFQA_DISC_ITEM_SEC_GRP_FK2", ["SECURITY_GROUP"], "SFFND_SECURITY_GROUP_DEF", ["SECURITY_GROUP"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")

class SFSQA_INSP_DEF_CHG_LOG:
    schema = {
        "CHG_LOG_ID": "STRING",
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LOG_ACTION": "STRING",
        "TABLE_NAME": "STRING",
        "KEY_VALUE1": "STRING",
        "KEY_VALUE2": "STRING",
        "KEY_VALUE3": "STRING",
        "KEY_VALUE4": "STRING",
        "KEY_VALUE5": "STRING",
        "COLUMN_NAME": "STRING",
        "OLD_VALUE": "STRING",
        "NEW_VALUE": "STRING",
        "CHANGE_SEQ": "NUMBER",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "CHG_LOG_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_DEF_CHG_LOG_FK1", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"], "SFSQA_INSP_DEFINITION_REV", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CHG_LOG_ID = parse_value(self.schema, column_value_map, "CHG_LOG_ID")
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LOG_ACTION = parse_value(self.schema, column_value_map, "LOG_ACTION")
        self.TABLE_NAME = parse_value(self.schema, column_value_map, "TABLE_NAME")
        self.KEY_VALUE1 = parse_value(self.schema, column_value_map, "KEY_VALUE1")
        self.KEY_VALUE2 = parse_value(self.schema, column_value_map, "KEY_VALUE2")
        self.KEY_VALUE3 = parse_value(self.schema, column_value_map, "KEY_VALUE3")
        self.KEY_VALUE4 = parse_value(self.schema, column_value_map, "KEY_VALUE4")
        self.KEY_VALUE5 = parse_value(self.schema, column_value_map, "KEY_VALUE5")
        self.COLUMN_NAME = parse_value(self.schema, column_value_map, "COLUMN_NAME")
        self.OLD_VALUE = parse_value(self.schema, column_value_map, "OLD_VALUE")
        self.NEW_VALUE = parse_value(self.schema, column_value_map, "NEW_VALUE")
        self.CHANGE_SEQ = parse_value(self.schema, column_value_map, "CHANGE_SEQ")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")

class SFSQA_INSP_ORDER_IS_INSP_ITEMS:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "ITEM_ID": "STRING",
        "INSP_ITEM_ID": "STRING",
        "INSP_ITEM_COUNT": "NUMBER",
        "CHECKLIST_ITEM_NAME": "STRING",
        "STATUS": "STRING",
        "CLASS": "NUMBER",
        "SAMPLE_RULE_TYPE": "STRING",
        "SAMPLE_SIZE": "NUMBER",
        "SAMPLE_TAKEN": "NUMBER",
        "PERFERRED_INSP_METHOD": "STRING",
        "VALIDATE_RESULT_FLAG": "STRING",
        "IC_FLAG": "STRING",
        "FREQUENCY": "NUMBER",
        "FAI_INSPECTION_FLAG": "STRING",
        "CDC_REQUIRED_FLAG": "STRING",
        "FLIGHT_SAFETY_FLAG": "STRING",
        "SAMPLE_RULE_ID": "STRING",
        "INSP_ITEM_SEQ_NO": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "AQL": "NUMBER",
        "UOM": "STRING",
        "SUPPLEMENTAL_FLAG": "STRING",
        "MAST_SUB_FLAG": "STRING",
        "NUMBER_UNITS": "NUMBER",
        "REC_SOURCE": "STRING",
        "B4_FINAL_ASSEMBLY_FLAG": "STRING",
        "NONCONFORMING_QTY": "NUMBER",
        "TRUE_SKIP_TO_INSP_ITEM_ID": "STRING",
        "FALSE_SKIP_TO_INSP_ITEM_ID": "STRING",
        "SKIP_TO_INSP_ITEM_ID": "STRING",
        "NOTES": "STRING",
        "ORIGINAL_INSP_ITEM_ID": "STRING",
        "ACCEPTANCE_QTY": "NUMBER",
        "DATE_COMPLETE": "STRING",
        "OBS_DATE": "STRING",
        "CERT": "STRING",
        "OBSOLETE_COUNT": "NUMBER",
        "INSP_ITEM_GROUPING": "NUMBER",
        "MASTER_INSP_ITEM_ID": "STRING",
        "INSP_ITEM_DESC": "STRING",
        "TARGET_VALUE": "STRING",
        "UCF_INSP_ORDERISII_VCH1": "STRING",
        "UCF_INSP_ORDERISII_VCH2": "STRING",
        "UCF_INSP_ORDERISII_VCH3": "STRING",
        "UCF_INSP_ORDERISII_VCH4": "STRING",
        "UCF_INSP_ORDERISII_VCH5": "STRING",
        "UCF_INSP_ORDERISII_VCH6": "STRING",
        "UCF_INSP_ORDERISII_VCH7": "STRING",
        "UCF_INSP_ORDERISII_VCH8": "STRING",
        "UCF_INSP_ORDERISII_VCH9": "STRING",
        "UCF_INSP_ORDERISII_VCH10": "STRING",
        "UCF_INSP_ORDERISII_VCH11": "STRING",
        "UCF_INSP_ORDERISII_VCH12": "STRING",
        "UCF_INSP_ORDERISII_VCH13": "STRING",
        "UCF_INSP_ORDERISII_VCH14": "STRING",
        "UCF_INSP_ORDERISII_VCH15": "STRING",
        "UCF_INSP_ORDERISII_NUM1": "NUMBER",
        "UCF_INSP_ORDERISII_NUM2": "NUMBER",
        "UCF_INSP_ORDERISII_NUM3": "NUMBER",
        "UCF_INSP_ORDERISII_NUM4": "NUMBER",
        "UCF_INSP_ORDERISII_NUM5": "NUMBER",
        "UCF_INSP_ORDERISII_DATE1": "STRING",
        "UCF_INSP_ORDERISII_DATE2": "STRING",
        "UCF_INSP_ORDERISII_DATE3": "STRING",
        "UCF_INSP_ORDERISII_DATE4": "STRING",
        "UCF_INSP_ORDERISII_DATE5": "STRING",
        "UCF_INSP_ORDERISII_FLAG1": "STRING",
        "UCF_INSP_ORDERISII_FLAG2": "STRING",
        "UCF_INSP_ORDERISII_FLAG3": "STRING",
        "UCF_INSP_ORDERISII_FLAG4": "STRING",
        "UCF_INSP_ORDERISII_FLAG5": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "RESULT_ID": "STRING",
        "REJECT_VALUE": "STRING",
        "SLIDE_ID": "STRING",
        "UCF_INSP_ORDERISII_VCH255_1": "STRING",
        "UCF_INSP_ORDERISII_VCH255_2": "STRING",
        "UCF_INSP_ORDERISII_VCH255_3": "STRING",
        "UCF_INSP_ORDERISII_VCH4000_1": "STRING",
        "LOWER_LIMIT": "STRING",
        "UCF_INSP_ORDERISII_VCH4000_2": "STRING",
        "UPPER_LIMIT": "STRING",
        "INSP_ITEM_NAME_ID": "STRING",
        "IS_ALTERNATE_ASSIGNED": "STRING",
        "ALT_OF_INSP_ITEM_ID": "STRING",
        "COMP_ITEM_ID": "STRING",
        "DAT_COL_TYPE": "STRING",
        "TEMPLATE_UPDT_COUNT": "NUMBER",
        "DRAWING_NO": "STRING",
        "DRAWING_CHG": "STRING",
        "TEMPLATE_FILE_ID": "STRING",
        "SHEET_NO": "STRING",
        "DZONE": "STRING",
        "SKILL_CATEGORY": "STRING",
        "X_COORD": "STRING",
        "Y_COORD": "STRING",
        "Z_COORD": "STRING",
        "ORIG_COMP_ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "INSP_STEP_ID",
        "ITEM_ID",
        "INSP_ITEM_ID",
        "INSP_ITEM_COUNT",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_IDP_IC_I_FK5", ["UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFSQA_INSP_ORDER_ISII_FK1", ["SLIDE_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_ISII_FK5", ["TEMPLATE_FILE_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_ISII_FK6", ["SKILL_CATEGORY"], "SFFND_SKILL_CATEGORY_DEF", ["SKILL_CATEGORY"]),
        DbForeignKey("SFSQA_INSP_ORDER_ISII_FK3", ["INSP_ITEM_NAME_ID"], "SFSQA_INSP_ITEM_NAME_DEF", ["INSP_ITEM_NAME_ID"]),
        DbForeignKey("SFSQA_SAMPLING_RULE_DESC_FK", ["SAMPLE_RULE_ID"], "SFSQA_SAMPLING_RULE_DESC", ["SAMPLE_RULE_ID"]),
        DbForeignKey("SFSQA_IDP_IC_AQL_FK", ["AQL"], "SFSQA_AQL_DEF", ["AQL"]),
        DbForeignKey("SFSQA_IDP_IC_PREFISMETH_FK", ["PERFERRED_INSP_METHOD"], "SFSQA_INSP_METHOD_DEF", ["INSPECTION_METHOD"]),
        DbForeignKey("SFSQA_IDP_IC_CERT_FK", ["CERT"], "SFFND_CERT_DEF", ["CERT"]),
        DbForeignKey("SFSQA_IDP_IC_CLASS_FK", ["CLASS"], "SFSQA_INSP_ITEM_CLASS_DEF", ["CLASS"]),
        DbForeignKey("SFSQA_IDP_IC_I_FK", ["INSP_ORDER_ID","INSP_STEP_ID","ITEM_ID"], "SFSQA_INSP_ORDER_ITEMS", ["INSP_ORDER_ID","INSP_STEP_ID","ITEM_ID"]),
        DbForeignKey("SFSQA_IDP_IC_SRTYPE_FK", ["SAMPLE_RULE_TYPE"], "SFSQA_SR_TYPE_DEF", ["SR_TYPE"]),
        DbForeignKey("SFSQA_INSP_ORDER_ISII_FK2", ["RESULT_ID"], "SFSQA_VALID_RESULT_TYPE_DEF", ["RESULT_ID"]),
    ]
    refs = [
        "SFSQA_IDP_IC_CDCS_IC_FK",
        "SFSQA_IDP_IC_TOOLS_FK1",
        "SFSQA_DISC_ITEM_FK20",
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.INSP_ITEM_COUNT = parse_value(self.schema, column_value_map, "INSP_ITEM_COUNT")
        self.CHECKLIST_ITEM_NAME = parse_value(self.schema, column_value_map, "CHECKLIST_ITEM_NAME")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.CLASS = parse_value(self.schema, column_value_map, "CLASS")
        self.SAMPLE_RULE_TYPE = parse_value(self.schema, column_value_map, "SAMPLE_RULE_TYPE")
        self.SAMPLE_SIZE = parse_value(self.schema, column_value_map, "SAMPLE_SIZE")
        self.SAMPLE_TAKEN = parse_value(self.schema, column_value_map, "SAMPLE_TAKEN")
        self.PERFERRED_INSP_METHOD = parse_value(self.schema, column_value_map, "PERFERRED_INSP_METHOD")
        self.VALIDATE_RESULT_FLAG = parse_value(self.schema, column_value_map, "VALIDATE_RESULT_FLAG")
        self.IC_FLAG = parse_value(self.schema, column_value_map, "IC_FLAG")
        self.FREQUENCY = parse_value(self.schema, column_value_map, "FREQUENCY")
        self.FAI_INSPECTION_FLAG = parse_value(self.schema, column_value_map, "FAI_INSPECTION_FLAG")
        self.CDC_REQUIRED_FLAG = parse_value(self.schema, column_value_map, "CDC_REQUIRED_FLAG")
        self.FLIGHT_SAFETY_FLAG = parse_value(self.schema, column_value_map, "FLIGHT_SAFETY_FLAG")
        self.SAMPLE_RULE_ID = parse_value(self.schema, column_value_map, "SAMPLE_RULE_ID")
        self.INSP_ITEM_SEQ_NO = parse_value(self.schema, column_value_map, "INSP_ITEM_SEQ_NO")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.AQL = parse_value(self.schema, column_value_map, "AQL")
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        self.SUPPLEMENTAL_FLAG = parse_value(self.schema, column_value_map, "SUPPLEMENTAL_FLAG")
        self.MAST_SUB_FLAG = parse_value(self.schema, column_value_map, "MAST_SUB_FLAG")
        self.NUMBER_UNITS = parse_value(self.schema, column_value_map, "NUMBER_UNITS")
        self.REC_SOURCE = parse_value(self.schema, column_value_map, "REC_SOURCE")
        self.B4_FINAL_ASSEMBLY_FLAG = parse_value(self.schema, column_value_map, "B4_FINAL_ASSEMBLY_FLAG")
        self.NONCONFORMING_QTY = parse_value(self.schema, column_value_map, "NONCONFORMING_QTY")
        self.TRUE_SKIP_TO_INSP_ITEM_ID = parse_value(self.schema, column_value_map, "TRUE_SKIP_TO_INSP_ITEM_ID")
        self.FALSE_SKIP_TO_INSP_ITEM_ID = parse_value(self.schema, column_value_map, "FALSE_SKIP_TO_INSP_ITEM_ID")
        self.SKIP_TO_INSP_ITEM_ID = parse_value(self.schema, column_value_map, "SKIP_TO_INSP_ITEM_ID")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.ORIGINAL_INSP_ITEM_ID = parse_value(self.schema, column_value_map, "ORIGINAL_INSP_ITEM_ID")
        self.ACCEPTANCE_QTY = parse_value(self.schema, column_value_map, "ACCEPTANCE_QTY")
        self.DATE_COMPLETE = parse_value(self.schema, column_value_map, "DATE_COMPLETE")
        self.OBS_DATE = parse_value(self.schema, column_value_map, "OBS_DATE")
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        self.OBSOLETE_COUNT = parse_value(self.schema, column_value_map, "OBSOLETE_COUNT")
        self.INSP_ITEM_GROUPING = parse_value(self.schema, column_value_map, "INSP_ITEM_GROUPING")
        self.MASTER_INSP_ITEM_ID = parse_value(self.schema, column_value_map, "MASTER_INSP_ITEM_ID")
        self.INSP_ITEM_DESC = parse_value(self.schema, column_value_map, "INSP_ITEM_DESC")
        self.TARGET_VALUE = parse_value(self.schema, column_value_map, "TARGET_VALUE")
        self.UCF_INSP_ORDERISII_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH1")
        self.UCF_INSP_ORDERISII_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH2")
        self.UCF_INSP_ORDERISII_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH3")
        self.UCF_INSP_ORDERISII_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH4")
        self.UCF_INSP_ORDERISII_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH5")
        self.UCF_INSP_ORDERISII_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH6")
        self.UCF_INSP_ORDERISII_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH7")
        self.UCF_INSP_ORDERISII_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH8")
        self.UCF_INSP_ORDERISII_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH9")
        self.UCF_INSP_ORDERISII_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH10")
        self.UCF_INSP_ORDERISII_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH11")
        self.UCF_INSP_ORDERISII_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH12")
        self.UCF_INSP_ORDERISII_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH13")
        self.UCF_INSP_ORDERISII_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH14")
        self.UCF_INSP_ORDERISII_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH15")
        self.UCF_INSP_ORDERISII_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_NUM1")
        self.UCF_INSP_ORDERISII_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_NUM2")
        self.UCF_INSP_ORDERISII_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_NUM3")
        self.UCF_INSP_ORDERISII_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_NUM4")
        self.UCF_INSP_ORDERISII_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_NUM5")
        self.UCF_INSP_ORDERISII_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_DATE1")
        self.UCF_INSP_ORDERISII_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_DATE2")
        self.UCF_INSP_ORDERISII_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_DATE3")
        self.UCF_INSP_ORDERISII_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_DATE4")
        self.UCF_INSP_ORDERISII_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_DATE5")
        self.UCF_INSP_ORDERISII_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_FLAG1")
        self.UCF_INSP_ORDERISII_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_FLAG2")
        self.UCF_INSP_ORDERISII_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_FLAG3")
        self.UCF_INSP_ORDERISII_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_FLAG4")
        self.UCF_INSP_ORDERISII_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_FLAG5")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.RESULT_ID = parse_value(self.schema, column_value_map, "RESULT_ID")
        self.REJECT_VALUE = parse_value(self.schema, column_value_map, "REJECT_VALUE")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.UCF_INSP_ORDERISII_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH255_1")
        self.UCF_INSP_ORDERISII_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH255_2")
        self.UCF_INSP_ORDERISII_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH255_3")
        self.UCF_INSP_ORDERISII_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH4000_1")
        self.LOWER_LIMIT = parse_value(self.schema, column_value_map, "LOWER_LIMIT")
        self.UCF_INSP_ORDERISII_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERISII_VCH4000_2")
        self.UPPER_LIMIT = parse_value(self.schema, column_value_map, "UPPER_LIMIT")
        self.INSP_ITEM_NAME_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_NAME_ID")
        self.IS_ALTERNATE_ASSIGNED = parse_value(self.schema, column_value_map, "IS_ALTERNATE_ASSIGNED")
        self.ALT_OF_INSP_ITEM_ID = parse_value(self.schema, column_value_map, "ALT_OF_INSP_ITEM_ID")
        self.COMP_ITEM_ID = parse_value(self.schema, column_value_map, "COMP_ITEM_ID")
        "Item id of component part no/revision."
        self.DAT_COL_TYPE = parse_value(self.schema, column_value_map, "DAT_COL_TYPE")
        self.TEMPLATE_UPDT_COUNT = parse_value(self.schema, column_value_map, "TEMPLATE_UPDT_COUNT")
        "This counter will be used to track no of updates in File for different units and it will be used to save as new files on each update with different units."
        self.DRAWING_NO = parse_value(self.schema, column_value_map, "DRAWING_NO")
        "Inspection Item Attribute: Drawing No."
        self.DRAWING_CHG = parse_value(self.schema, column_value_map, "DRAWING_CHG")
        "Inspection Item Attribute: Drawing Revision."
        self.TEMPLATE_FILE_ID = parse_value(self.schema, column_value_map, "TEMPLATE_FILE_ID")
        "The unique identifier of the object being referenced."
        self.SHEET_NO = parse_value(self.schema, column_value_map, "SHEET_NO")
        "Inspection Item Attribute: Sheet No."
        self.DZONE = parse_value(self.schema, column_value_map, "DZONE")
        "Inspection Item Attribute: Zone."
        self.SKILL_CATEGORY = parse_value(self.schema, column_value_map, "SKILL_CATEGORY")
        "A category to which the required skill belongs."
        self.X_COORD = parse_value(self.schema, column_value_map, "X_COORD")
        "Inspection Item Attribute: X Co-ordinate."
        self.Y_COORD = parse_value(self.schema, column_value_map, "Y_COORD")
        "Inspection Item Attribute: Y Co-ordinate."
        self.Z_COORD = parse_value(self.schema, column_value_map, "Z_COORD")
        "Inspection Item Attribute: Z Co-ordinate."
        self.ORIG_COMP_ITEM_ID = parse_value(self.schema, column_value_map, "ORIG_COMP_ITEM_ID")
        "Item Id of Main Component Item of PLIST."
        self.SFSQA_IDP_IC_CDCS_IC_FK = []
        self.SFSQA_IDP_IC_TOOLS_FK1 = []
        self.SFSQA_DISC_ITEM_FK20 = []

class SFPL_AFFECTED_TO_RESULTING:
    schema = {
        "AFFECTED_RESULTING_ID": "STRING",
        "CHANGE_REQUEST_ID": "STRING",
        "AFFECTED_OBJECT_ID": "STRING",
        "RESULTING_OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "AFFECTED_RESULTING_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_AFFECTED_TO_RESULTING_FK1", ["CHANGE_REQUEST_ID"], "SFPL_CHANGE_REQUEST", ["CHANGE_REQUEST_ID"]),
        DbForeignKey("SFPL_AFFECTED_TO_RESULTING_FK2", ["AFFECTED_OBJECT_ID","CHANGE_REQUEST_ID"], "SFPL_AFFECTED_OBJECTS", ["AFFECTED_OBJECT_ID","CHANGE_REQUEST_ID"]),
        DbForeignKey("SFPL_AFFECTED_TO_RESULTING_FK3", ["RESULTING_OBJECT_ID","CHANGE_REQUEST_ID"], "SFPL_RESULTING_OBJECTS", ["RESULTING_OBJECT_ID","CHANGE_REQUEST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.AFFECTED_RESULTING_ID = parse_value(self.schema, column_value_map, "AFFECTED_RESULTING_ID")
        "Unique System Generated Identifier of an Affected to Resulting Object of Change Request."
        self.CHANGE_REQUEST_ID = parse_value(self.schema, column_value_map, "CHANGE_REQUEST_ID")
        "Unique System Generated Identifier of a Change Request."
        self.AFFECTED_OBJECT_ID = parse_value(self.schema, column_value_map, "AFFECTED_OBJECT_ID")
        "Unique System Generated Identifier of an Affected Object of Change Request."
        self.RESULTING_OBJECT_ID = parse_value(self.schema, column_value_map, "RESULTING_OBJECT_ID")
        "Unique System Generated Identifier of an Resulting Object of Change Request."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_LICENSE_TYPE_DEF:
    schema = {
        "LICENSE_TYPE": "STRING",
        "LOADER_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "LICENSE_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFCORE_CONN_DETLS_LIC_TYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.LICENSE_TYPE = parse_value(self.schema, column_value_map, "LICENSE_TYPE")
        "The type of license."
        self.LOADER_FLAG = parse_value(self.schema, column_value_map, "LOADER_FLAG")
        "Flag that indicates if the license loading routine automatically creates an entry for the given license type."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.SFCORE_CONN_DETLS_LIC_TYPE_FK = []

class SFCORE_SUPPLIER_USERS_HIST:
    schema = {
        "HIST_ID": "STRING",
        "OLD_HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "USERID": "STRING",
        "SUPPLIER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.OLD_HIST_ID = parse_value(self.schema, column_value_map, "OLD_HIST_ID")
        "Original numeric system generated unqiue identifier of this historical record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.SUPPLIER_ID = parse_value(self.schema, column_value_map, "SUPPLIER_ID")
        "System generated unique identifier for a given supplier, used for supplier licensing."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFFND_CUST_CALENDAR_TYPE_DEF:
    schema = {
        "CALENDAR_TYPE": "STRING",
        "REQUEST_TYPE": "STRING",
        "CALENDAR_TYPE_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CALENDAR_TYPE",
        "REQUEST_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CALENDAR_TYPE = parse_value(self.schema, column_value_map, "CALENDAR_TYPE")
        self.REQUEST_TYPE = parse_value(self.schema, column_value_map, "REQUEST_TYPE")
        "Type or classification of Corrective Action Request."
        self.CALENDAR_TYPE_DESC = parse_value(self.schema, column_value_map, "CALENDAR_TYPE_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_REPORT_PRIVS:
    schema = {
        "OBJECT_ID": "STRING",
        "REPORT_NAME": "STRING",
        "PRIV": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "OBJECT_ID",
        "REPORT_NAME",
        "PRIV",
    ]
    foreign_keys = [
        DbForeignKey("FWREPPRIV_REPORT_FK", ["OBJECT_ID","REPORT_NAME"], "SFCORE_REPORT_DEF", ["OBJECT_ID","REPORT_NAME"]),
        DbForeignKey("FWREPPRIV_PRIV_FK", ["PRIV"], "SFCORE_PRIVS", ["PRIV"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.REPORT_NAME = parse_value(self.schema, column_value_map, "REPORT_NAME")
        "User defineable name for a given report."
        self.PRIV = parse_value(self.schema, column_value_map, "PRIV")
        "Identifier/name of particular Solumina application privilege granted to the role. Application privileges are used to govern user access to specific functionality of the application."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFBIS_ERP_ORDER_TYPE_DEF:
    schema = {
        "ERP_ORDER_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "SOLUMINA_ORDER_TYPE": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ROUTING_SELECTION": "NUMBER",
        "SOLUMINA_PLAN_TYPE": "STRING",
        "SOLUMINA_PLAN_DOC_TYPE": "STRING",
        "SOLUMINA_ORDER_DOC_TYPE": "STRING",
        "SOLUMINA_PLAN_WORK_FLOW": "STRING",
        "SOLUMINA_ORDER_WORK_FLOW": "STRING",
    }
    primary_key_columns = [
        "ERP_ORDER_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFBIS_ERP_ORDER_TYPE_DEF_FK2", ["SOLUMINA_ORDER_DOC_TYPE","SOLUMINA_ORDER_TYPE","SOLUMINA_ORDER_WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
        DbForeignKey("SFBIS_ERP_ORDER_TYPE_DEF_FK1", ["SOLUMINA_PLAN_DOC_TYPE","SOLUMINA_PLAN_TYPE","SOLUMINA_PLAN_WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ERP_ORDER_TYPE = parse_value(self.schema, column_value_map, "ERP_ORDER_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.SOLUMINA_ORDER_TYPE = parse_value(self.schema, column_value_map, "SOLUMINA_ORDER_TYPE")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.ROUTING_SELECTION = parse_value(self.schema, column_value_map, "ROUTING_SELECTION")
        "Routing selection indicator with possible values 0 = No Plan Used, 1 = Use Plan Effectivity, 2 = ERP Routing ID,3 = Use Plan Effectivity in combination with Location"
        self.SOLUMINA_PLAN_TYPE = parse_value(self.schema, column_value_map, "SOLUMINA_PLAN_TYPE")
        self.SOLUMINA_PLAN_DOC_TYPE = parse_value(self.schema, column_value_map, "SOLUMINA_PLAN_DOC_TYPE")
        self.SOLUMINA_ORDER_DOC_TYPE = parse_value(self.schema, column_value_map, "SOLUMINA_ORDER_DOC_TYPE")
        self.SOLUMINA_PLAN_WORK_FLOW = parse_value(self.schema, column_value_map, "SOLUMINA_PLAN_WORK_FLOW")
        self.SOLUMINA_ORDER_WORK_FLOW = parse_value(self.schema, column_value_map, "SOLUMINA_ORDER_WORK_FLOW")

class SFQA_CA_ATTACHMENTS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "NOTES": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")

class SFSQA_INSP_ORDER_ATTACHMENTS:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "NOTES": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_ORDER_ATTMT_FK2", ["INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_ATT_FK", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")

class SFRPT_REPORT_TYPE_DEF:
    schema = {
        "REPORT_TYPE": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "REPORT_TYPE_DESC": "STRING",
        "UPDT_USERID": "STRING",
    }
    primary_key_columns = [
        "REPORT_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFRPT_REPORT_MAINTENANCE_FK2",
        "SFRPT_REPORT_GRAPH_RTYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.REPORT_TYPE = parse_value(self.schema, column_value_map, "REPORT_TYPE")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.REPORT_TYPE_DESC = parse_value(self.schema, column_value_map, "REPORT_TYPE_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.SFRPT_REPORT_MAINTENANCE_FK2 = []
        self.SFRPT_REPORT_GRAPH_RTYPE_FK = []

class MOTT_FREEZER:
    schema = {
        "FREEZER_ID": "STRING",
        "LOCATION": "STRING",
        "FREEZER_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "FREEZER_DESC": "STRING",
        "LOCATION_ID": "STRING",
        "DEPARTMENT_ID": "STRING",
        "CENTER_ID": "STRING",
    }
    primary_key_columns = [
        "FREEZER_ID",
    ]
    foreign_keys = [
        DbForeignKey("MOTT_FREEZER_FK1", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
    ]
    refs = [
        "MOTT_TIME_MATERIAL_FK4",
    ]
    def __init__(self, column_value_map):
        self.FREEZER_ID = parse_value(self.schema, column_value_map, "FREEZER_ID")
        "Primary Key of the FREEZER"
        self.LOCATION = parse_value(self.schema, column_value_map, "LOCATION")
        "Location description of the Freezer"
        self.FREEZER_NAME = parse_value(self.schema, column_value_map, "FREEZER_NAME")
        "Freezer Name"
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the user"
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was modified."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation"
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.FREEZER_DESC = parse_value(self.schema, column_value_map, "FREEZER_DESC")
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.DEPARTMENT_ID = parse_value(self.schema, column_value_map, "DEPARTMENT_ID")
        "Unique, system-generated identifier of the given Work Department."
        self.CENTER_ID = parse_value(self.schema, column_value_map, "CENTER_ID")
        "Unique, system-generated identifier of the given Work Center."
        self.MOTT_TIME_MATERIAL_FK4 = []

class SFSQA_SUPPLIER_CONTACT_INFO:
    schema = {
        "SUPPLIER_CODE": "STRING",
        "FIRST_NAME": "STRING",
        "LAST_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "EMAIL_ADDRESS": "STRING",
        "BUSINESS_PHONE": "STRING",
        "OFFICE_PHONE": "STRING",
        "FAX": "STRING",
        "LOCATION_DIVISION": "STRING",
        "UCF_SUP_CONTACT_VCH1": "STRING",
        "UCF_SUP_CONTACT_VCH2": "STRING",
        "UCF_SUP_CONTACT_VCH3": "STRING",
        "UCF_SUP_CONTACT_VCH4": "STRING",
        "UCF_SUP_CONTACT_VCH5": "STRING",
        "UCF_SUP_CONTACT_VCH6": "STRING",
        "UCF_SUP_CONTACT_VCH7": "STRING",
        "UCF_SUP_CONTACT_VCH8": "STRING",
        "UCF_SUP_CONTACT_VCH9": "STRING",
        "UCF_SUP_CONTACT_VCH10": "STRING",
        "UCF_SUP_CONTACT_VCH11": "STRING",
        "UCF_SUP_CONTACT_VCH12": "STRING",
        "UCF_SUP_CONTACT_VCH13": "STRING",
        "UCF_SUP_CONTACT_VCH14": "STRING",
        "UCF_SUP_CONTACT_VCH15": "STRING",
        "UCF_SUP_CONTACT_NUM1": "NUMBER",
        "UCF_SUP_CONTACT_NUM2": "NUMBER",
        "UCF_SUP_CONTACT_NUM3": "NUMBER",
        "UCF_SUP_CONTACT_NUM4": "NUMBER",
        "UCF_SUP_CONTACT_NUM5": "NUMBER",
        "UCF_SUP_CONTACT_DATE1": "STRING",
        "UCF_SUP_CONTACT_DATE2": "STRING",
        "UCF_SUP_CONTACT_DATE3": "STRING",
        "UCF_SUP_CONTACT_DATE4": "STRING",
        "UCF_SUP_CONTACT_DATE5": "STRING",
        "UCF_SUP_CONTACT_FLAG1": "STRING",
        "UCF_SUP_CONTACT_FLAG2": "STRING",
        "UCF_SUP_CONTACT_FLAG3": "STRING",
        "UCF_SUP_CONTACT_FLAG4": "STRING",
        "UCF_SUP_CONTACT_FLAG5": "STRING",
        "CONTACT_TYPE": "STRING",
        "UCF_SUP_CONTACT_VCH255_1": "STRING",
        "UCF_SUP_CONTACT_VCH255_2": "STRING",
        "UCF_SUP_CONTACT_VCH255_3": "STRING",
        "UCF_SUP_CONTACT_VCH4000_1": "STRING",
        "UCF_SUP_CONTACT_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "SUPPLIER_CODE",
        "FIRST_NAME",
        "LAST_NAME",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_SUP_CONTACT_INFO_FK2", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFSQA_SUP_CONTACT_INFO_FK1", ["CONTACT_TYPE"], "SFSQA_CONTACT_TYPE_DEF", ["CONTACT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.FIRST_NAME = parse_value(self.schema, column_value_map, "FIRST_NAME")
        self.LAST_NAME = parse_value(self.schema, column_value_map, "LAST_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.EMAIL_ADDRESS = parse_value(self.schema, column_value_map, "EMAIL_ADDRESS")
        self.BUSINESS_PHONE = parse_value(self.schema, column_value_map, "BUSINESS_PHONE")
        self.OFFICE_PHONE = parse_value(self.schema, column_value_map, "OFFICE_PHONE")
        self.FAX = parse_value(self.schema, column_value_map, "FAX")
        self.LOCATION_DIVISION = parse_value(self.schema, column_value_map, "LOCATION_DIVISION")
        self.UCF_SUP_CONTACT_VCH1 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH1")
        self.UCF_SUP_CONTACT_VCH2 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH2")
        self.UCF_SUP_CONTACT_VCH3 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH3")
        self.UCF_SUP_CONTACT_VCH4 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH4")
        self.UCF_SUP_CONTACT_VCH5 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH5")
        self.UCF_SUP_CONTACT_VCH6 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH6")
        self.UCF_SUP_CONTACT_VCH7 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH7")
        self.UCF_SUP_CONTACT_VCH8 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH8")
        self.UCF_SUP_CONTACT_VCH9 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH9")
        self.UCF_SUP_CONTACT_VCH10 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH10")
        self.UCF_SUP_CONTACT_VCH11 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH11")
        self.UCF_SUP_CONTACT_VCH12 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH12")
        self.UCF_SUP_CONTACT_VCH13 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH13")
        self.UCF_SUP_CONTACT_VCH14 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH14")
        self.UCF_SUP_CONTACT_VCH15 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH15")
        self.UCF_SUP_CONTACT_NUM1 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_NUM1")
        self.UCF_SUP_CONTACT_NUM2 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_NUM2")
        self.UCF_SUP_CONTACT_NUM3 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_NUM3")
        self.UCF_SUP_CONTACT_NUM4 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_NUM4")
        self.UCF_SUP_CONTACT_NUM5 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_NUM5")
        self.UCF_SUP_CONTACT_DATE1 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_DATE1")
        self.UCF_SUP_CONTACT_DATE2 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_DATE2")
        self.UCF_SUP_CONTACT_DATE3 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_DATE3")
        self.UCF_SUP_CONTACT_DATE4 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_DATE4")
        self.UCF_SUP_CONTACT_DATE5 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_DATE5")
        self.UCF_SUP_CONTACT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_FLAG1")
        self.UCF_SUP_CONTACT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_FLAG2")
        self.UCF_SUP_CONTACT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_FLAG3")
        self.UCF_SUP_CONTACT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_FLAG4")
        self.UCF_SUP_CONTACT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_FLAG5")
        self.CONTACT_TYPE = parse_value(self.schema, column_value_map, "CONTACT_TYPE")
        self.UCF_SUP_CONTACT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH255_1")
        self.UCF_SUP_CONTACT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH255_2")
        self.UCF_SUP_CONTACT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH255_3")
        self.UCF_SUP_CONTACT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH4000_1")
        self.UCF_SUP_CONTACT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SUP_CONTACT_VCH4000_2")

class SFQA_DISC_ITEM:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "PART_NO": "STRING",
        "ITEM_ID": "STRING",
        "PART_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "ROUTE_TYPE": "STRING",
        "LAST_ACTION": "STRING",
        "REF_DES": "STRING",
        "DISP_INSTR_TYPE": "STRING",
        "REJECT_COMPONENT_FLAG": "STRING",
        "AFFECTED_QTY": "NUMBER",
        "INSPECTED_QTY": "NUMBER",
        "ORDER_MAKE_ITEM_FLAG": "STRING",
        "CA_FLAG": "STRING",
        "CA_CAUSE_OVERRIDE_FLAG": "STRING",
        "DISC_LINE_TITLE": "STRING",
        "DISC_LINE_STATUS": "STRING",
        "FIND_NO": "STRING",
        "PO_LINE_ITEM": "STRING",
        "ORDER_ID": "STRING",
        "UOM": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "DISC_CATEGORY": "STRING",
        "DISP_TYPE": "STRING",
        "DISP_ORDER_ID": "STRING",
        "DISP_DOC_TYPE": "STRING",
        "DISP_DOC_NO": "STRING",
        "DISP_STOP_TYPE": "STRING",
        "CUST_NOTIF_FLAG": "STRING",
        "NOTES": "STRING",
        "CA_ID": "STRING",
        "CUST_ID": "STRING",
        "CA_NOTES": "STRING",
        "UCF_DISC_ITEM_VCH1": "STRING",
        "UCF_DISC_ITEM_VCH2": "STRING",
        "UCF_DISC_ITEM_VCH3": "STRING",
        "ALT_ID": "STRING",
        "UCF_DISC_ITEM_VCH4": "STRING",
        "UCF_DISC_ITEM_VCH5": "STRING",
        "UCF_DISC_ITEM_VCH6": "STRING",
        "UCF_DISC_ITEM_FLAG1": "STRING",
        "UCF_DISC_ITEM_FLAG2": "STRING",
        "UCF_DISC_ITEM_NUM1": "NUMBER",
        "UCF_DISC_ITEM_DATE1": "STRING",
        "LOT_FLAG": "STRING",
        "SERIAL_FLAG": "STRING",
        "OPER_NO": "STRING",
        "APPEND_TO_OPER_KEY": "NUMBER",
        "APPEND_TO_STEP_KEY": "NUMBER",
        "PROGRAM": "STRING",
        "APPEND_TO_OPER_NO": "STRING",
        "UCF_DISC_ITEM_VCH7": "STRING",
        "UCF_DISC_ITEM_VCH8": "STRING",
        "UCF_DISC_ITEM_VCH9": "STRING",
        "UCF_DISC_ITEM_VCH10": "STRING",
        "UCF_DISC_ITEM_VCH11": "STRING",
        "UCF_DISC_ITEM_VCH12": "STRING",
        "UCF_DISC_ITEM_VCH13": "STRING",
        "UCF_DISC_ITEM_VCH14": "STRING",
        "UCF_DISC_ITEM_VCH15": "STRING",
        "UCF_DISC_ITEM_FLAG3": "STRING",
        "UCF_DISC_ITEM_FLAG4": "STRING",
        "UCF_DISC_ITEM_FLAG5": "STRING",
        "UCF_DISC_ITEM_NUM2": "NUMBER",
        "UCF_DISC_ITEM_NUM3": "NUMBER",
        "UCF_DISC_ITEM_NUM4": "NUMBER",
        "UCF_DISC_ITEM_NUM5": "NUMBER",
        "UCF_DISC_ITEM_DATE2": "STRING",
        "UCF_DISC_ITEM_DATE3": "STRING",
        "UCF_DISC_ITEM_DATE4": "STRING",
        "UCF_DISC_ITEM_DATE5": "STRING",
        "UCF_DISC_ITEM_VCH255_1": "STRING",
        "UCF_DISC_ITEM_VCH255_2": "STRING",
        "UCF_DISC_ITEM_VCH255_3": "STRING",
        "UCF_DISC_ITEM_VCH4000_1": "STRING",
        "UCF_DISC_ITEM_VCH4000_2": "STRING",
        "AUTO_UPDATE_TO_IMPLEMENTED": "STRING",
        "ZONE": "STRING",
        "REJECTED_QTY": "NUMBER",
        "RELATED_INSP_ORDER_ID": "STRING",
        "SECURITY_GROUP": "STRING",
        "CUSTOMER_REF_NO": "STRING",
        "REVISION_ISSUE": "STRING",
        "NOTIFICATION_AGENCY": "STRING",
        "AVAILABL_DATE_REPLACEMENT_PART": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "AVAILABL_DATE_PERFORM_WORK": "STRING",
        "INSERVICE_UNIT_AFFECTED_FLAG": "STRING",
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "OVERMAX_UNDERMIN": "STRING",
        "ASSEMBLY_DWG_NO": "STRING",
        "INSP_ITEM_ID": "STRING",
        "INSP_ITEM_COUNT": "NUMBER",
        "FINAL_PRODUCT_MANUFACTURER_SN": "STRING",
        "PRODUCT_CATEGORY": "STRING",
        "CHARGE_CODE": "NUMBER",
        "LIMITATION_FLAG": "STRING",
        "LIMITATION_DESC": "STRING",
        "PART_MARKING": "STRING",
        "ADDITIONAL_COMMENTS": "STRING",
        "DISP_DOC_REV": "STRING",
        "INSP_ITEM_NO": "STRING",
        "ORIG_COMPANY_ID": "STRING",
        "ORIG_COMPANY_NAME": "STRING",
        "LAST_ACTIVITY_TIME_STAMP": "DATE",
        "SUPPLIER_REMARKS": "STRING",
        "APPEND_TO_STEP_NO": "STRING",
        "DC_UPDT_USERID": "STRING",
        "DC_USER_LEVEL_ON_COMP_DI": "NUMBER",
        "DC_USER_STATUS_ON_COMP_DI": "STRING",
        "DC_OVER_INSP_HOLD_ID": "STRING",
        "CA_REQUEST_ID": "STRING",
        "COMMODITY_JURISDICTION": "STRING",
        "COMMODITY_CLASSIFICATION": "STRING",
        "LRU_PART_NO": "STRING",
        "ATA_CHAPTER": "STRING",
        "DISTRIBUTION": "STRING",
        "LIEN_DISC_STOP_ORDERS": "STRING",
        "LIEN_DISC_INH_STOP_ORDERS": "STRING",
        "COPY_FROM_DISC_ID": "STRING",
        "COPY_FROM_DISC_LINE_NO": "NUMBER",
        "SPLIT_FROM_DISC_ID": "STRING",
        "DOC_TYPE": "STRING",
        "SPLIT_FROM_DISC_LINE_NO": "NUMBER",
        "FINAL_DISP_TYPE": "STRING",
        "FINAL_DISP_DOC_TYPE": "STRING",
        "FINAL_DISP_DOC_NO": "STRING",
        "RESP_LOCATION_ID": "STRING",
        "FINAL_DISP_DOC_REV": "STRING",
        "RESP_DEPARTMENT_ID": "STRING",
        "RESP_CENTER_ID": "STRING",
        "REJECT_LOCATION_ID": "STRING",
        "REJECT_DEPARTMENT_ID": "STRING",
        "REJECT_CENTER_ID": "STRING",
        "GROUP_JOB_NO": "STRING",
        "DISC_DESC_UDV_ID": "STRING",
        "ITEM_LOT_SER_UDV_ID": "STRING",
        "COMP_LOT_SER_UDV_ID": "STRING",
        "DEFECT_CLASS_UDV_ID": "STRING",
        "DISP_ACTION_UDV_ID": "STRING",
        "CORR_ACTION_UDV_ID": "STRING",
        "NEXT_DISC_DESC_UDV_ID": "STRING",
        "NEXT_ITEM_LOT_SER_UDV_ID": "STRING",
        "NEXT_COMP_LOT_SER_UDV_ID": "STRING",
        "NEXT_DEFECT_CLASS_UDV_ID": "STRING",
        "NEXT_DISP_ACTION_UDV_ID": "STRING",
        "NEXT_CORR_ACTION_UDV_ID": "STRING",
        "REQUEST_ID": "STRING",
        "DISC_TYPE": "STRING",
        "PARENT_DISC_ID": "STRING",
        "PARENT_DISC_LINE_NO": "NUMBER",
        "COMPLETION_DATE": "STRING",
        "CA_RESP_INFO_OVERRIDE_FLAG": "STRING",
        "BUYER": "STRING",
        "MATERIAL_ID": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_ITEM_FK17", ["RESP_LOCATION_ID","RESP_DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_ALT_ID_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_CUST_FK", ["CUST_ID"], "SFFND_CUST_ID_DEF", ["CUST_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_FK16", ["RESP_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFSQA_DISC_ITEM_FK20", ["INSP_ORDER_ID","INSP_STEP_ID","ITEM_ID","INSP_ITEM_ID","INSP_ITEM_COUNT"], "SFSQA_INSP_ORDER_IS_INSP_ITEMS", ["INSP_ORDER_ID","INSP_STEP_ID","ITEM_ID","INSP_ITEM_ID","INSP_ITEM_COUNT"]),
        DbForeignKey("SFQA_DISC_ITEM_DISCDISP_FK", ["DISC_TYPE","DISP_TYPE"], "SFQA_DISP_TYPE_DEF", ["DISC_TYPE","DISP_TYPE"]),
        DbForeignKey("SFQA_DISC_ITEM_DISC_CAT_FK", ["DISC_CATEGORY"], "SFQA_DISC_CATEGORY_DEF", ["DISC_CATEGORY"]),
        DbForeignKey("SFQA_DISC_ITEM_FK27", ["DISP_ACTION_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_FK29", ["NEXT_DISC_DESC_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_FK30", ["NEXT_ITEM_LOT_SER_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_FK31", ["NEXT_COMP_LOT_SER_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_FK33", ["NEXT_DISP_ACTION_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_FK34", ["NEXT_CORR_ACTION_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_FK28", ["CORR_ACTION_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_UOM_FK", ["UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFSQA_DISC_ITEM_FK19", ["CHARGE_CODE"], "SFSQA_CHARGE_CODE_DEF", ["CHARGE_CODE"]),
        DbForeignKey("SFQA_DISC_ITEM_FK21", ["DOC_TYPE","DISC_TYPE","ROUTE_TYPE"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
        DbForeignKey("SFQA_DISC_ITEM_FK22", ["GROUP_JOB_NO"], "SFWID_GROUP_JOB", ["GROUP_JOB_NO"]),
        DbForeignKey("SFQA_DISC_ITEM_FK26", ["DEFECT_CLASS_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_REQUEST_FK", ["REQUEST_ID"], "SFWID_ORDER_REQUEST", ["REQUEST_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_ITEM_FK", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_ITYPE_FK", ["ITEM_TYPE","ITEM_SUBTYPE"], "SFPL_ITEM_TYPE_DEF", ["ITEM_TYPE","ITEM_SUBTYPE"]),
        DbForeignKey("SFQA_DISC_ITEM_PROG_FK", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("SFQA_DISC_ITEM_REJECT_CNTR_FK", ["REJECT_LOCATION_ID","REJECT_DEPARTMENT_ID","REJECT_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_REJECT_DEPT_FK", ["REJECT_LOCATION_ID","REJECT_DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_REJECT_LOC_FK", ["REJECT_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_DISP_DOC_FK", ["DISP_DOC_TYPE"], "SFQA_DISP_DOC_TYPE_DEF", ["DISP_DOC_TYPE"]),
        DbForeignKey("SFQA_DISC_ITEM_FK35", ["DISC_TYPE","FINAL_DISP_TYPE"], "SFQA_DISP_TYPE_DEF", ["DISC_TYPE","DISP_TYPE"]),
        DbForeignKey("SFQA_DISC_ITEM_FK36", ["FINAL_DISP_DOC_TYPE"], "SFQA_DISP_DOC_TYPE_DEF", ["DISP_DOC_TYPE"]),
        DbForeignKey("SFQA_DISCITEM_DISCDESC_FK", ["DISC_ID"], "SFQA_DISC_DESC", ["DISC_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_FK18", ["RESP_LOCATION_ID","RESP_DEPARTMENT_ID","RESP_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_FK32", ["NEXT_DEFECT_CLASS_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_FK23", ["DISC_DESC_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_FK24", ["ITEM_LOT_SER_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
        DbForeignKey("SFQA_DISC_ITEM_FK38", ["BUYER"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFQA_DISC_ITEM_FK25", ["COMP_LOT_SER_UDV_ID"], "SFCORE_UDV_LIB", ["UDV_ID"]),
    ]
    refs = [
        "SFQA_DISCITEM_PROCLDTWCS_FK1",
        "SFQA_DISC_CAUSE_DISC_ITEM_FK",
        "SFWID_OPER_TEXT_FK01",
        "SFQA_DISC_CMP_DISC_ITEM_FK",
        "SFQA_DISC_ITM_SERL_DISC_ITM_FK",
        "SFQA_DISC_ITEM_ATTACHMENTS_FK1",
        "SFWID_OPER_DESC_FK03",
        "SFQA_DISC_ITEM_MM_OBJECTS_FK2",
        "SFQA_DISC_ALT_ID_LINK_FK1",
        "SFQA_DISC_DEFECT_DISC_ITEM_FK",
        "SFQA_DI_LAST_FILTER_CONTEXT_F1",
        "SFQA_DISC_ITM_BLCK_STATUS_FK1",
        "SFQA_ALT_DISC_ITEM_DISCITEM_FK",
        "SFQA_DISC_ITEM_SEC_GRP_FK1",
        "SFQA_DISC_SYMPTOM_DISC_ITEM_FK",
        "SFOR_SFWID_ORDER_SUBJECT_FK1",
        "SFSQA_INSP_ORDER_HOLDS_FK5",
        "SFSQA_ITEM_SUPPLIER_DATA_FK2",
        "SFQA_DISC_CHG_LOG_FK1",
        "SFQA_DISC_LIENS_FK2",
        "SFQA_DISCITEMTXT_DISCITEM_FK",
        "SFOR_SFWID_OPER_SUBJECT_FK1",
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.ROUTE_TYPE = parse_value(self.schema, column_value_map, "ROUTE_TYPE")
        "The route type associated with a given discrepancy item."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.DISP_INSTR_TYPE = parse_value(self.schema, column_value_map, "DISP_INSTR_TYPE")
        "Type of disposition instructions associated with the discrepancy item."
        self.REJECT_COMPONENT_FLAG = parse_value(self.schema, column_value_map, "REJECT_COMPONENT_FLAG")
        "A flag (Y/N) indicating whether the component/part should be rejected."
        self.AFFECTED_QTY = parse_value(self.schema, column_value_map, "AFFECTED_QTY")
        "Number of components/parts that have been inspected and are found to be affected by the associated discrepancy item."
        self.INSPECTED_QTY = parse_value(self.schema, column_value_map, "INSPECTED_QTY")
        "The number of components/parts that have been inspected."
        self.ORDER_MAKE_ITEM_FLAG = parse_value(self.schema, column_value_map, "ORDER_MAKE_ITEM_FLAG")
        "A flag indicating whether the component is a make part (Y) or a vendor-supplied part (N). Any make part has a work order no."
        self.CA_FLAG = parse_value(self.schema, column_value_map, "CA_FLAG")
        "A flag (Y/N) indicating whether the discrepancy item is associated with a Corrective Action."
        self.CA_CAUSE_OVERRIDE_FLAG = parse_value(self.schema, column_value_map, "CA_CAUSE_OVERRIDE_FLAG")
        "A flag (Y/N) indicating that the original cause of the discrepancy item has been reevaluated and overridden by the cause of the associated Corrective Action."
        self.DISC_LINE_TITLE = parse_value(self.schema, column_value_map, "DISC_LINE_TITLE")
        "Title of the discrepancy item."
        self.DISC_LINE_STATUS = parse_value(self.schema, column_value_map, "DISC_LINE_STATUS")
        "Current status of the discrepancy item."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.PO_LINE_ITEM = parse_value(self.schema, column_value_map, "PO_LINE_ITEM")
        "The line number that corresponds to the discrepancy item in an associated purchase order."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Unit of Measure for the component/part."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.DISC_CATEGORY = parse_value(self.schema, column_value_map, "DISC_CATEGORY")
        "Customer-assigned discrepancy category used to show severity of problem."
        self.DISP_TYPE = parse_value(self.schema, column_value_map, "DISP_TYPE")
        "Type or classification of disposition/rework."
        self.DISP_ORDER_ID = parse_value(self.schema, column_value_map, "DISP_ORDER_ID")
        "Identifier of the rework order associated with the discrepancy item."
        self.DISP_DOC_TYPE = parse_value(self.schema, column_value_map, "DISP_DOC_TYPE")
        "Type or classification of disposition (rework) document, e.g., Work Order."
        self.DISP_DOC_NO = parse_value(self.schema, column_value_map, "DISP_DOC_NO")
        "Number of the disposition document."
        self.DISP_STOP_TYPE = parse_value(self.schema, column_value_map, "DISP_STOP_TYPE")
        "Not in use."
        self.CUST_NOTIF_FLAG = parse_value(self.schema, column_value_map, "CUST_NOTIF_FLAG")
        "A flag (Y/N) indicating whether the customer should be notified."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about the discrepancy item."
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.CUST_ID = parse_value(self.schema, column_value_map, "CUST_ID")
        "Unique identifier of the associated customer."
        self.CA_NOTES = parse_value(self.schema, column_value_map, "CA_NOTES")
        "Additional information about the associated Corrective Action."
        self.UCF_DISC_ITEM_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH3")
        "User-configurable field for VARCHAR data type."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.UCF_DISC_ITEM_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_VCH6 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_DISC_ITEM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_DISC_ITEM_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_DISC_ITEM_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_DATE1")
        "User-configurable field for DATE data type."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating whether the component/part is or should be tracked by lot number."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating whether the component/part is or should be tracked by serial number."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.APPEND_TO_OPER_KEY = parse_value(self.schema, column_value_map, "APPEND_TO_OPER_KEY")
        "Operation where disposition/correction of the discrepancy is to occur."
        self.APPEND_TO_STEP_KEY = parse_value(self.schema, column_value_map, "APPEND_TO_STEP_KEY")
        "Step where disposition/correction of the discrepancy is to occur."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.APPEND_TO_OPER_NO = parse_value(self.schema, column_value_map, "APPEND_TO_OPER_NO")
        "Operation where disposition/correction of the discrepancy is to occur."
        self.UCF_DISC_ITEM_VCH7 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH7")
        self.UCF_DISC_ITEM_VCH8 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH8")
        self.UCF_DISC_ITEM_VCH9 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH9")
        self.UCF_DISC_ITEM_VCH10 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH10")
        self.UCF_DISC_ITEM_VCH11 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH11")
        self.UCF_DISC_ITEM_VCH12 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH12")
        self.UCF_DISC_ITEM_VCH13 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH13")
        self.UCF_DISC_ITEM_VCH14 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH14")
        self.UCF_DISC_ITEM_VCH15 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH15")
        self.UCF_DISC_ITEM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_FLAG3")
        self.UCF_DISC_ITEM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_FLAG4")
        self.UCF_DISC_ITEM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_FLAG5")
        self.UCF_DISC_ITEM_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_NUM2")
        self.UCF_DISC_ITEM_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_NUM3")
        self.UCF_DISC_ITEM_NUM4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_NUM4")
        self.UCF_DISC_ITEM_NUM5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_NUM5")
        self.UCF_DISC_ITEM_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_DATE2")
        self.UCF_DISC_ITEM_DATE3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_DATE3")
        self.UCF_DISC_ITEM_DATE4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_DATE4")
        self.UCF_DISC_ITEM_DATE5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_DATE5")
        self.UCF_DISC_ITEM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH255_1")
        self.UCF_DISC_ITEM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH255_2")
        self.UCF_DISC_ITEM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH255_3")
        self.UCF_DISC_ITEM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH4000_1")
        self.UCF_DISC_ITEM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH4000_2")
        self.AUTO_UPDATE_TO_IMPLEMENTED = parse_value(self.schema, column_value_map, "AUTO_UPDATE_TO_IMPLEMENTED")
        self.ZONE = parse_value(self.schema, column_value_map, "ZONE")
        self.REJECTED_QTY = parse_value(self.schema, column_value_map, "REJECTED_QTY")
        self.RELATED_INSP_ORDER_ID = parse_value(self.schema, column_value_map, "RELATED_INSP_ORDER_ID")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.CUSTOMER_REF_NO = parse_value(self.schema, column_value_map, "CUSTOMER_REF_NO")
        self.REVISION_ISSUE = parse_value(self.schema, column_value_map, "REVISION_ISSUE")
        self.NOTIFICATION_AGENCY = parse_value(self.schema, column_value_map, "NOTIFICATION_AGENCY")
        self.AVAILABL_DATE_REPLACEMENT_PART = parse_value(self.schema, column_value_map, "AVAILABL_DATE_REPLACEMENT_PART")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.AVAILABL_DATE_PERFORM_WORK = parse_value(self.schema, column_value_map, "AVAILABL_DATE_PERFORM_WORK")
        self.INSERVICE_UNIT_AFFECTED_FLAG = parse_value(self.schema, column_value_map, "INSERVICE_UNIT_AFFECTED_FLAG")
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.OVERMAX_UNDERMIN = parse_value(self.schema, column_value_map, "OVERMAX_UNDERMIN")
        self.ASSEMBLY_DWG_NO = parse_value(self.schema, column_value_map, "ASSEMBLY_DWG_NO")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.INSP_ITEM_COUNT = parse_value(self.schema, column_value_map, "INSP_ITEM_COUNT")
        self.FINAL_PRODUCT_MANUFACTURER_SN = parse_value(self.schema, column_value_map, "FINAL_PRODUCT_MANUFACTURER_SN")
        self.PRODUCT_CATEGORY = parse_value(self.schema, column_value_map, "PRODUCT_CATEGORY")
        self.CHARGE_CODE = parse_value(self.schema, column_value_map, "CHARGE_CODE")
        self.LIMITATION_FLAG = parse_value(self.schema, column_value_map, "LIMITATION_FLAG")
        self.LIMITATION_DESC = parse_value(self.schema, column_value_map, "LIMITATION_DESC")
        self.PART_MARKING = parse_value(self.schema, column_value_map, "PART_MARKING")
        self.ADDITIONAL_COMMENTS = parse_value(self.schema, column_value_map, "ADDITIONAL_COMMENTS")
        self.DISP_DOC_REV = parse_value(self.schema, column_value_map, "DISP_DOC_REV")
        self.INSP_ITEM_NO = parse_value(self.schema, column_value_map, "INSP_ITEM_NO")
        self.ORIG_COMPANY_ID = parse_value(self.schema, column_value_map, "ORIG_COMPANY_ID")
        self.ORIG_COMPANY_NAME = parse_value(self.schema, column_value_map, "ORIG_COMPANY_NAME")
        self.LAST_ACTIVITY_TIME_STAMP = parse_value(self.schema, column_value_map, "LAST_ACTIVITY_TIME_STAMP")
        self.SUPPLIER_REMARKS = parse_value(self.schema, column_value_map, "SUPPLIER_REMARKS")
        self.APPEND_TO_STEP_NO = parse_value(self.schema, column_value_map, "APPEND_TO_STEP_NO")
        self.DC_UPDT_USERID = parse_value(self.schema, column_value_map, "DC_UPDT_USERID")
        "UserID of User who performed DC."
        self.DC_USER_LEVEL_ON_COMP_DI = parse_value(self.schema, column_value_map, "DC_USER_LEVEL_ON_COMP_DI")
        "User level at completion time of Discrepancy Item."
        self.DC_USER_STATUS_ON_COMP_DI = parse_value(self.schema, column_value_map, "DC_USER_STATUS_ON_COMP_DI")
        "User status at completion time of Discrepancy Item."
        self.DC_OVER_INSP_HOLD_ID = parse_value(self.schema, column_value_map, "DC_OVER_INSP_HOLD_ID")
        "Over Inspection Hold Id related to Over Inspected DC."
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action Request."
        self.COMMODITY_JURISDICTION = parse_value(self.schema, column_value_map, "COMMODITY_JURISDICTION")
        "Commodity Jurisdiction of Discrepancy Item."
        self.COMMODITY_CLASSIFICATION = parse_value(self.schema, column_value_map, "COMMODITY_CLASSIFICATION")
        "Commodity Classification of Discrepancy Item."
        self.LRU_PART_NO = parse_value(self.schema, column_value_map, "LRU_PART_NO")
        "Lowest Line Replaceable Unit (LRU) or sub-assembly containing the nonconforming part."
        self.ATA_CHAPTER = parse_value(self.schema, column_value_map, "ATA_CHAPTER")
        "Air Transport Association (ATA) chapter for equipment."
        self.DISTRIBUTION = parse_value(self.schema, column_value_map, "DISTRIBUTION")
        "Actual distribution as per approver/customer instructions."
        self.LIEN_DISC_STOP_ORDERS = parse_value(self.schema, column_value_map, "LIEN_DISC_STOP_ORDERS")
        "Determines what orders must be set on hold when a discrepancy is created on a unit."
        self.LIEN_DISC_INH_STOP_ORDERS = parse_value(self.schema, column_value_map, "LIEN_DISC_INH_STOP_ORDERS")
        "Determines what open orders must be set on hold when a discrepancy is inherited from an installed unit."
        self.COPY_FROM_DISC_ID = parse_value(self.schema, column_value_map, "COPY_FROM_DISC_ID")
        "From Which Discrepancy ID, current Discrepancy ID is copied."
        self.COPY_FROM_DISC_LINE_NO = parse_value(self.schema, column_value_map, "COPY_FROM_DISC_LINE_NO")
        "From Which Discrepancy Line Number, current DI Line Number is copied."
        self.SPLIT_FROM_DISC_ID = parse_value(self.schema, column_value_map, "SPLIT_FROM_DISC_ID")
        "From Which Discrepancy ID, current Discrepancy ID is split."
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        self.SPLIT_FROM_DISC_LINE_NO = parse_value(self.schema, column_value_map, "SPLIT_FROM_DISC_LINE_NO")
        "From Which Discrepancy Line Number, current Line Number is split."
        self.FINAL_DISP_TYPE = parse_value(self.schema, column_value_map, "FINAL_DISP_TYPE")
        "Type or classification of disposition/rework."
        self.FINAL_DISP_DOC_TYPE = parse_value(self.schema, column_value_map, "FINAL_DISP_DOC_TYPE")
        "Type or classification of disposition (rework) document, e.g., Work Order."
        self.FINAL_DISP_DOC_NO = parse_value(self.schema, column_value_map, "FINAL_DISP_DOC_NO")
        "Disposition document number."
        self.RESP_LOCATION_ID = parse_value(self.schema, column_value_map, "RESP_LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.FINAL_DISP_DOC_REV = parse_value(self.schema, column_value_map, "FINAL_DISP_DOC_REV")
        "Disposition document revision."
        self.RESP_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "RESP_DEPARTMENT_ID")
        "Unique, system-generated identifier of the given Work Department."
        self.RESP_CENTER_ID = parse_value(self.schema, column_value_map, "RESP_CENTER_ID")
        "Unique, system-generated identifier of the given Work Center."
        self.REJECT_LOCATION_ID = parse_value(self.schema, column_value_map, "REJECT_LOCATION_ID")
        self.REJECT_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "REJECT_DEPARTMENT_ID")
        self.REJECT_CENTER_ID = parse_value(self.schema, column_value_map, "REJECT_CENTER_ID")
        self.GROUP_JOB_NO = parse_value(self.schema, column_value_map, "GROUP_JOB_NO")
        "Link Discrepancy item to group job to identify DI is created from Group Job."
        self.DISC_DESC_UDV_ID = parse_value(self.schema, column_value_map, "DISC_DESC_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.ITEM_LOT_SER_UDV_ID = parse_value(self.schema, column_value_map, "ITEM_LOT_SER_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.COMP_LOT_SER_UDV_ID = parse_value(self.schema, column_value_map, "COMP_LOT_SER_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.DEFECT_CLASS_UDV_ID = parse_value(self.schema, column_value_map, "DEFECT_CLASS_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.DISP_ACTION_UDV_ID = parse_value(self.schema, column_value_map, "DISP_ACTION_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.CORR_ACTION_UDV_ID = parse_value(self.schema, column_value_map, "CORR_ACTION_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_DISC_DESC_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_DISC_DESC_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_ITEM_LOT_SER_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_ITEM_LOT_SER_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_COMP_LOT_SER_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_COMP_LOT_SER_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_DEFECT_CLASS_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_DEFECT_CLASS_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_DISP_ACTION_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_DISP_ACTION_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_CORR_ACTION_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_CORR_ACTION_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.REQUEST_ID = parse_value(self.schema, column_value_map, "REQUEST_ID")
        self.DISC_TYPE = parse_value(self.schema, column_value_map, "DISC_TYPE")
        "Type or classification of discrepancy, e.g., SCRAP, REWORK, REPAIR, AS IS, RETURN."
        self.PARENT_DISC_ID = parse_value(self.schema, column_value_map, "PARENT_DISC_ID")
        "Parent Disc ID."
        self.PARENT_DISC_LINE_NO = parse_value(self.schema, column_value_map, "PARENT_DISC_LINE_NO")
        "Parent Disc Line Number."
        self.COMPLETION_DATE = parse_value(self.schema, column_value_map, "COMPLETION_DATE")
        "Discrepancy Completion Date."
        self.CA_RESP_INFO_OVERRIDE_FLAG = parse_value(self.schema, column_value_map, "CA_RESP_INFO_OVERRIDE_FLAG")
        self.BUYER = parse_value(self.schema, column_value_map, "BUYER")
        "Solumina login ID of the user."
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        self.SFQA_DISCITEM_PROCLDTWCS_FK1 = []
        self.SFQA_DISC_CAUSE_DISC_ITEM_FK = []
        self.SFWID_OPER_TEXT_FK01 = []
        self.SFQA_DISC_CMP_DISC_ITEM_FK = []
        self.SFQA_DISC_ITM_SERL_DISC_ITM_FK = []
        self.SFQA_DISC_ITEM_ATTACHMENTS_FK1 = []
        self.SFWID_OPER_DESC_FK03 = []
        self.SFQA_DISC_ITEM_MM_OBJECTS_FK2 = []
        self.SFQA_DISC_ALT_ID_LINK_FK1 = []
        self.SFQA_DISC_DEFECT_DISC_ITEM_FK = []
        self.SFQA_DI_LAST_FILTER_CONTEXT_F1 = []
        self.SFQA_DISC_ITM_BLCK_STATUS_FK1 = []
        self.SFQA_ALT_DISC_ITEM_DISCITEM_FK = []
        self.SFQA_DISC_ITEM_SEC_GRP_FK1 = []
        self.SFQA_DISC_SYMPTOM_DISC_ITEM_FK = []
        self.SFOR_SFWID_ORDER_SUBJECT_FK1 = []
        self.SFSQA_INSP_ORDER_HOLDS_FK5 = []
        self.SFSQA_ITEM_SUPPLIER_DATA_FK2 = []
        self.SFQA_DISC_CHG_LOG_FK1 = []
        self.SFQA_DISC_LIENS_FK2 = []
        self.SFQA_DISCITEMTXT_DISCITEM_FK = []
        self.SFOR_SFWID_OPER_SUBJECT_FK1 = []

class SFQA_CA_DESC_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "CA_STATUS": "STRING",
        "QUEUE_CATEGORY": "STRING",
        "EFF_VERIF_FLAG": "STRING",
        "FACILITATING_QUEUE_TYPE": "STRING",
        "NEEDS_REVIEW_FLAG": "STRING",
        "FACILITATOR_USER_ID": "STRING",
        "CA_ACTUAL_START_DATE": "STRING",
        "PARENT_CA_ID": "STRING",
        "ORIG_CA_ID": "STRING",
        "SCHED_PRIORITY": "STRING",
        "CA_TITLE": "STRING",
        "CA_DESC": "STRING",
        "STATUS_CHG_NOTES": "STRING",
        "QUEUE_TYPE": "STRING",
        "UCF_CA_VCH1": "STRING",
        "UCF_CA_VCH2": "STRING",
        "UCF_CA_FLAG1": "STRING",
        "UCF_CA_VCH3": "STRING",
        "UCF_CA_VCH4": "STRING",
        "UCF_CA_VCH5": "STRING",
        "UCF_CA_FLAG2": "STRING",
        "UCF_CA_NUM1": "NUMBER",
        "UCF_CA_NUM2": "NUMBER",
        "CA_TYPE": "STRING",
        "CA_REQ_COMPLETE_DATE": "STRING",
        "CA_ISSUE_DESC": "STRING",
        "SOLUTION_DESC": "STRING",
        "SOLUTION_TARGET_DATE": "STRING",
        "PROB_PHYSICAL_EVIDENCE": "STRING",
        "PROB_FIRST_OBSERVED": "STRING",
        "PROB_OCCURRING_TREND": "STRING",
        "PROB_OCCURRING_PLACES": "STRING",
        "PROB_OCCURED_BEFORE": "STRING",
        "PROB_IMPACT": "STRING",
        "AFFECTED_BY_PROBLEM": "STRING",
        "ROOT_CAUSE_DESC": "STRING",
        "ROOT_CAUSE_VERIF_DESC": "STRING",
        "ESCAPE_POINT": "STRING",
        "CA_INVEST_PLAN_ID": "STRING",
        "CA_INVEST_PLAN_REV": "NUMBER",
        "CA_INVEST_ORDER_ID": "STRING",
        "ISSUE_DESC_UDV": "STRING",
        "TEAM_ASSIGN_UDV": "STRING",
        "INVEST_UDV_ID": "STRING",
        "SOL_ACTION_PLAN_UDV": "STRING",
        "EFF_VERIF_PRIORITY": "STRING",
        "EFF_VERIF_CERT": "STRING",
        "EFF_VERIF_INSTRUCTION": "STRING",
        "NO_OF_DAYS_AFTER_COMPLETION": "NUMBER",
        "EFF_VERIF_DUE_DATE": "STRING",
        "RISK_LIKELIHOOD_RAT_ID": "STRING",
        "RISK_SEVERITY_RAT_ID": "STRING",
        "RISK_DETECTABILITY_RAT_ID": "STRING",
        "LAST_ACTIVITY_TIME_STAMP": "STRING",
        "IMPLEMENTATION_DATE": "STRING",
        "DOC_TYPE": "STRING",
        "WORK_FLOW": "STRING",
        "EFF_VERIF_ASSIGNEE_ID": "STRING",
        "EFF_VERIF_RESULT": "STRING",
        "CA_CREATE_USERID": "STRING",
        "CA_CREATE_TIME_STAMP": "STRING",
        "SOURCE_GROUP": "STRING",
        "EFF_VERIF_DEPARTMENT_ID": "STRING",
        "SOURCE_CONTACT": "STRING",
        "UCF_CA_VCH6": "STRING",
        "REQUEST_TYPE": "STRING",
        "UCF_CA_VCH7": "STRING",
        "UCF_CA_VCH8": "STRING",
        "UCF_CA_VCH9": "STRING",
        "UCF_CA_VCH10": "STRING",
        "UCF_CA_VCH11": "STRING",
        "UCF_CA_VCH12": "STRING",
        "UCF_CA_VCH13": "STRING",
        "UCF_CA_VCH14": "STRING",
        "UCF_CA_VCH15": "STRING",
        "UCF_CA_NUM3": "NUMBER",
        "UCF_CA_NUM4": "NUMBER",
        "UCF_CA_NUM5": "NUMBER",
        "UCF_CA_DATE1": "STRING",
        "UCF_CA_DATE2": "STRING",
        "UCF_CA_DATE3": "STRING",
        "UCF_CA_DATE4": "STRING",
        "UCF_CA_DATE5": "STRING",
        "UCF_CA_FLAG3": "STRING",
        "UCF_CA_FLAG4": "STRING",
        "UCF_CA_FLAG5": "STRING",
        "UCF_CA_VCH255_1": "STRING",
        "UCF_CA_VCH255_2": "STRING",
        "UCF_CA_VCH255_3": "STRING",
        "EFF_VERIF_UPDT_USERID": "STRING",
        "UCF_CA_VCH4000_1": "STRING",
        "EFF_VERIF_RESULT_UPDT_USERID": "STRING",
        "UCF_CA_VCH4000_2": "STRING",
        "EFF_VERIF_COMPLETE_DATE": "STRING",
        "EFF_VERIF_TIME_STAMP": "STRING",
        "EFF_VERIF_RESULT_TIME_STAMP": "STRING",
        "EFF_VERIF_LOCATION_ID": "STRING",
        "COMMODITY_JURISDICTION": "STRING",
        "COMMODITY_CLASSIFICATION": "STRING",
        "RISK_ASSESSMENT_UDV_ID": "STRING",
        "RC_ANALYSIS_UDV_ID": "STRING",
        "NEXT_ISSUE_DESC_UDV_ID": "STRING",
        "NEXT_INVEST_UDV_ID": "STRING",
        "NEXT_SOLU_ACTION_PLAN_UDV_ID": "STRING",
        "NEXT_TEAM_ASSIGNED_UDV_ID": "STRING",
        "NEXT_RISK_ASSESSMENT_UDV_ID": "STRING",
        "NEXT_RC_ANALYSIS_UDV_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.CA_STATUS = parse_value(self.schema, column_value_map, "CA_STATUS")
        "Status of the Corrective Action (CA_INITIATION, IN_PROCESS, COMMITMENT, IMPLEMENTED, EFFECTIVE, PARTIAL_EFFECTIVE, NOT_EFFECTIVE, or CANCEL)."
        self.QUEUE_CATEGORY = parse_value(self.schema, column_value_map, "QUEUE_CATEGORY")
        "High-level classification of queues containing queue types. Fixed value CA FACILITATING."
        self.EFF_VERIF_FLAG = parse_value(self.schema, column_value_map, "EFF_VERIF_FLAG")
        "A flag (Y/N) that indicates whether a given Corrective Action requires Effectiveness Verification."
        self.FACILITATING_QUEUE_TYPE = parse_value(self.schema, column_value_map, "FACILITATING_QUEUE_TYPE")
        "Type of queue associated with coordinating a given Corrective Action."
        self.NEEDS_REVIEW_FLAG = parse_value(self.schema, column_value_map, "NEEDS_REVIEW_FLAG")
        "A flag (Y/N) that indicates whether the associated Corrective Action Diagram requires review."
        self.FACILITATOR_USER_ID = parse_value(self.schema, column_value_map, "FACILITATOR_USER_ID")
        "Unique identifier of the user acting as facilitator of a given Corrective Action."
        self.CA_ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "CA_ACTUAL_START_DATE")
        "Actual start date of a given Corrective Action."
        self.PARENT_CA_ID = parse_value(self.schema, column_value_map, "PARENT_CA_ID")
        "Unique identifier of the parent Corrective Action; used to track a related Corrective Action."
        self.ORIG_CA_ID = parse_value(self.schema, column_value_map, "ORIG_CA_ID")
        "Unique identifier of the original or initial Corrective Action to which other Corrective Actions are related."
        self.SCHED_PRIORITY = parse_value(self.schema, column_value_map, "SCHED_PRIORITY")
        "The scheduled priority of the associated Corrective Action, e.g., High, Low, Medium."
        self.CA_TITLE = parse_value(self.schema, column_value_map, "CA_TITLE")
        "Title or name of the associated Corrective Action."
        self.CA_DESC = parse_value(self.schema, column_value_map, "CA_DESC")
        "Description of the associated Corrective Action."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated Corrective Action."
        self.QUEUE_TYPE = parse_value(self.schema, column_value_map, "QUEUE_TYPE")
        "Type or classification of task queue."
        self.UCF_CA_VCH1 = parse_value(self.schema, column_value_map, "UCF_CA_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH2 = parse_value(self.schema, column_value_map, "UCF_CA_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CA_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_CA_VCH3 = parse_value(self.schema, column_value_map, "UCF_CA_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH4 = parse_value(self.schema, column_value_map, "UCF_CA_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH5 = parse_value(self.schema, column_value_map, "UCF_CA_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CA_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_NUM1 = parse_value(self.schema, column_value_map, "UCF_CA_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CA_NUM2 = parse_value(self.schema, column_value_map, "UCF_CA_NUM2")
        "User-configurable field for NUM data type."
        self.CA_TYPE = parse_value(self.schema, column_value_map, "CA_TYPE")
        self.CA_REQ_COMPLETE_DATE = parse_value(self.schema, column_value_map, "CA_REQ_COMPLETE_DATE")
        self.CA_ISSUE_DESC = parse_value(self.schema, column_value_map, "CA_ISSUE_DESC")
        self.SOLUTION_DESC = parse_value(self.schema, column_value_map, "SOLUTION_DESC")
        self.SOLUTION_TARGET_DATE = parse_value(self.schema, column_value_map, "SOLUTION_TARGET_DATE")
        self.PROB_PHYSICAL_EVIDENCE = parse_value(self.schema, column_value_map, "PROB_PHYSICAL_EVIDENCE")
        self.PROB_FIRST_OBSERVED = parse_value(self.schema, column_value_map, "PROB_FIRST_OBSERVED")
        self.PROB_OCCURRING_TREND = parse_value(self.schema, column_value_map, "PROB_OCCURRING_TREND")
        self.PROB_OCCURRING_PLACES = parse_value(self.schema, column_value_map, "PROB_OCCURRING_PLACES")
        self.PROB_OCCURED_BEFORE = parse_value(self.schema, column_value_map, "PROB_OCCURED_BEFORE")
        self.PROB_IMPACT = parse_value(self.schema, column_value_map, "PROB_IMPACT")
        self.AFFECTED_BY_PROBLEM = parse_value(self.schema, column_value_map, "AFFECTED_BY_PROBLEM")
        self.ROOT_CAUSE_DESC = parse_value(self.schema, column_value_map, "ROOT_CAUSE_DESC")
        self.ROOT_CAUSE_VERIF_DESC = parse_value(self.schema, column_value_map, "ROOT_CAUSE_VERIF_DESC")
        self.ESCAPE_POINT = parse_value(self.schema, column_value_map, "ESCAPE_POINT")
        self.CA_INVEST_PLAN_ID = parse_value(self.schema, column_value_map, "CA_INVEST_PLAN_ID")
        self.CA_INVEST_PLAN_REV = parse_value(self.schema, column_value_map, "CA_INVEST_PLAN_REV")
        self.CA_INVEST_ORDER_ID = parse_value(self.schema, column_value_map, "CA_INVEST_ORDER_ID")
        self.ISSUE_DESC_UDV = parse_value(self.schema, column_value_map, "ISSUE_DESC_UDV")
        self.TEAM_ASSIGN_UDV = parse_value(self.schema, column_value_map, "TEAM_ASSIGN_UDV")
        self.INVEST_UDV_ID = parse_value(self.schema, column_value_map, "INVEST_UDV_ID")
        self.SOL_ACTION_PLAN_UDV = parse_value(self.schema, column_value_map, "SOL_ACTION_PLAN_UDV")
        self.EFF_VERIF_PRIORITY = parse_value(self.schema, column_value_map, "EFF_VERIF_PRIORITY")
        self.EFF_VERIF_CERT = parse_value(self.schema, column_value_map, "EFF_VERIF_CERT")
        self.EFF_VERIF_INSTRUCTION = parse_value(self.schema, column_value_map, "EFF_VERIF_INSTRUCTION")
        self.NO_OF_DAYS_AFTER_COMPLETION = parse_value(self.schema, column_value_map, "NO_OF_DAYS_AFTER_COMPLETION")
        self.EFF_VERIF_DUE_DATE = parse_value(self.schema, column_value_map, "EFF_VERIF_DUE_DATE")
        self.RISK_LIKELIHOOD_RAT_ID = parse_value(self.schema, column_value_map, "RISK_LIKELIHOOD_RAT_ID")
        self.RISK_SEVERITY_RAT_ID = parse_value(self.schema, column_value_map, "RISK_SEVERITY_RAT_ID")
        self.RISK_DETECTABILITY_RAT_ID = parse_value(self.schema, column_value_map, "RISK_DETECTABILITY_RAT_ID")
        self.LAST_ACTIVITY_TIME_STAMP = parse_value(self.schema, column_value_map, "LAST_ACTIVITY_TIME_STAMP")
        self.IMPLEMENTATION_DATE = parse_value(self.schema, column_value_map, "IMPLEMENTATION_DATE")
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        self.WORK_FLOW = parse_value(self.schema, column_value_map, "WORK_FLOW")
        self.EFF_VERIF_ASSIGNEE_ID = parse_value(self.schema, column_value_map, "EFF_VERIF_ASSIGNEE_ID")
        "Unique identifier of the user assigned Effectiveness Verification."
        self.EFF_VERIF_RESULT = parse_value(self.schema, column_value_map, "EFF_VERIF_RESULT")
        "Result of Effectiveness Verification."
        self.CA_CREATE_USERID = parse_value(self.schema, column_value_map, "CA_CREATE_USERID")
        "Unique identifier of the user who has created Corrective Action."
        self.CA_CREATE_TIME_STAMP = parse_value(self.schema, column_value_map, "CA_CREATE_TIME_STAMP")
        "The date and time when the Corrective Action is created."
        self.SOURCE_GROUP = parse_value(self.schema, column_value_map, "SOURCE_GROUP")
        "The group that generated the Corrective Action."
        self.EFF_VERIF_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "EFF_VERIF_DEPARTMENT_ID")
        self.SOURCE_CONTACT = parse_value(self.schema, column_value_map, "SOURCE_CONTACT")
        "Contact information of the source group originating the Corrective Action."
        self.UCF_CA_VCH6 = parse_value(self.schema, column_value_map, "UCF_CA_VCH6")
        "User-configurable field for VARCHAR data type."
        self.REQUEST_TYPE = parse_value(self.schema, column_value_map, "REQUEST_TYPE")
        "Type of classification of Request."
        self.UCF_CA_VCH7 = parse_value(self.schema, column_value_map, "UCF_CA_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH8 = parse_value(self.schema, column_value_map, "UCF_CA_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH9 = parse_value(self.schema, column_value_map, "UCF_CA_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH10 = parse_value(self.schema, column_value_map, "UCF_CA_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH11 = parse_value(self.schema, column_value_map, "UCF_CA_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH12 = parse_value(self.schema, column_value_map, "UCF_CA_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH13 = parse_value(self.schema, column_value_map, "UCF_CA_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH14 = parse_value(self.schema, column_value_map, "UCF_CA_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_VCH15 = parse_value(self.schema, column_value_map, "UCF_CA_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_NUM3 = parse_value(self.schema, column_value_map, "UCF_CA_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CA_NUM4 = parse_value(self.schema, column_value_map, "UCF_CA_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_CA_NUM5 = parse_value(self.schema, column_value_map, "UCF_CA_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_CA_DATE1 = parse_value(self.schema, column_value_map, "UCF_CA_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CA_DATE2 = parse_value(self.schema, column_value_map, "UCF_CA_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CA_DATE3 = parse_value(self.schema, column_value_map, "UCF_CA_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_CA_DATE4 = parse_value(self.schema, column_value_map, "UCF_CA_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_CA_DATE5 = parse_value(self.schema, column_value_map, "UCF_CA_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_CA_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CA_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_FLAG4 = parse_value(self.schema, column_value_map, "UCF_CA_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_FLAG5 = parse_value(self.schema, column_value_map, "UCF_CA_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CA_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CA_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_CA_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.EFF_VERIF_UPDT_USERID = parse_value(self.schema, column_value_map, "EFF_VERIF_UPDT_USERID")
        "Solumina login ID of the last user to manipulated the Effectiveness Verification for a given iteration."
        self.UCF_CA_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_CA_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.EFF_VERIF_RESULT_UPDT_USERID = parse_value(self.schema, column_value_map, "EFF_VERIF_RESULT_UPDT_USERID")
        "Solumina login ID of the last user to manipulated the Effectiveness Verification Result for a given iteration."
        self.UCF_CA_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_CA_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.EFF_VERIF_COMPLETE_DATE = parse_value(self.schema, column_value_map, "EFF_VERIF_COMPLETE_DATE")
        "The date and time when the Effectiveness Verification is completed  for a given iteration."
        self.EFF_VERIF_TIME_STAMP = parse_value(self.schema, column_value_map, "EFF_VERIF_TIME_STAMP")
        "The date and time the Effectiveness Verification was last manipulated for a given iteration."
        self.EFF_VERIF_RESULT_TIME_STAMP = parse_value(self.schema, column_value_map, "EFF_VERIF_RESULT_TIME_STAMP")
        "The date and time the Effectiveness Verification Result was last manipulated  for a given iteration."
        self.EFF_VERIF_LOCATION_ID = parse_value(self.schema, column_value_map, "EFF_VERIF_LOCATION_ID")
        self.COMMODITY_JURISDICTION = parse_value(self.schema, column_value_map, "COMMODITY_JURISDICTION")
        "Commodity Jurisdiction of Corrective Action."
        self.COMMODITY_CLASSIFICATION = parse_value(self.schema, column_value_map, "COMMODITY_CLASSIFICATION")
        "Commodity Classification of Corrective Action."
        self.RISK_ASSESSMENT_UDV_ID = parse_value(self.schema, column_value_map, "RISK_ASSESSMENT_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.RC_ANALYSIS_UDV_ID = parse_value(self.schema, column_value_map, "RC_ANALYSIS_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_ISSUE_DESC_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_ISSUE_DESC_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_INVEST_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_INVEST_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_SOLU_ACTION_PLAN_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_SOLU_ACTION_PLAN_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_TEAM_ASSIGNED_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_TEAM_ASSIGNED_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_RISK_ASSESSMENT_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_RISK_ASSESSMENT_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_RC_ANALYSIS_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_RC_ANALYSIS_UDV_ID")
        "Unique, system-generated identifier of a given UDV."

class SFSQA_INSP_STEP_DEF:
    schema = {
        "INSP_STEP_ID": "STRING",
        "INSP_STEP_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "INSP_STEP_DESC": "STRING",
        "STEP_TYPE": "STRING",
        "CERT": "STRING",
    }
    primary_key_columns = [
        "INSP_STEP_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_IS_FK1", ["CERT"], "SFFND_CERT_DEF", ["CERT"]),
        DbForeignKey("SFSQA_STEP_TYPE_DEF_FK", ["STEP_TYPE"], "SFSQA_STEP_TYPE_DEF", ["STEP_TYPE"]),
    ]
    refs = [
        "SFSQA_INSP_PLAN_INSP_STEPS_FK2",
        "SFSQA_INSP_ORD_STEP_INCL_FK2",
        "SFSQA_INSP_DEF_DETAILS_FK2",
        "SFSQA_INSP_ORDER_IS_FK",
    ]
    def __init__(self, column_value_map):
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.INSP_STEP_NAME = parse_value(self.schema, column_value_map, "INSP_STEP_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.INSP_STEP_DESC = parse_value(self.schema, column_value_map, "INSP_STEP_DESC")
        self.STEP_TYPE = parse_value(self.schema, column_value_map, "STEP_TYPE")
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        self.SFSQA_INSP_PLAN_INSP_STEPS_FK2 = []
        self.SFSQA_INSP_ORD_STEP_INCL_FK2 = []
        self.SFSQA_INSP_DEF_DETAILS_FK2 = []
        self.SFSQA_INSP_ORDER_IS_FK = []

class SFWID_OPER_PROCESS_ALT:
    schema = {
        "OPER_PROCESS_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "PROCESS_TYPE": "STRING",
        "OCCUR_COUNT": "NUMBER",
        "OPER_PROC_DNF": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "OPER_PROCESS_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_PROCESS_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_PROCESS_ALT = parse_value(self.schema, column_value_map, "OPER_PROCESS_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        "Type or classification of the associated manufacturing process."
        self.OCCUR_COUNT = parse_value(self.schema, column_value_map, "OCCUR_COUNT")
        "The number of times that the OPER_PROCESS occurs per unit in a given operation"
        self.OPER_PROC_DNF = parse_value(self.schema, column_value_map, "OPER_PROC_DNF")
        "Defect normalization factor that reflects the acceptable defect tolerance for a given operation process. Used to normalize defect statistics."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."

class SFWID_ACTIV_NQ_ORDERS:
    schema = {
        "ORDER_NO": "STRING",
        "ORDER_ID": "STRING",
        "ORDER_TYPE": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "PROGRAM": "STRING",
        "ORDER_STATUS": "STRING",
        "ORDER_HOLD_STATUS": "STRING",
        "ORDER_QTY": "NUMBER",
        "ORIG_ORDER_ID": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "ITEM_ID": "STRING",
        "NEEDS_REVIEW_FLAG": "STRING",
        "ORDER_SCRAP_QTY": "NUMBER",
        "ORDER_COMPLETE_QTY": "NUMBER",
        "ORDER_STOP_QTY": "NUMBER",
        "SPLIT_FLAG": "STRING",
        "UNSCRAP_FLAG": "STRING",
        "PARENT_ORDER_ID": "STRING",
        "SUPERCEDED_ORDER_ID": "STRING",
        "SUPERCEDES_ORDER": "STRING",
        "ORDER_CUST_ID": "STRING",
        "SCHED_PRIORITY": "STRING",
        "ALT_ID": "STRING",
        "ALT_STATUS": "STRING",
        "UNIT_TYPE": "STRING",
        "UNIT_NO": "STRING",
        "ORDER_UOM": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "PROJECT": "STRING",
        "PLAN_TYPE": "STRING",
        "LTA_SEND_FLAG": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "SECURITY_GROUP": "STRING",
        "ASGND_LOCATION_ID": "STRING",
    }
    primary_key_columns = [
        "ORDER_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ACTIV_NQ_ORDERS_LOC_FK", ["ASGND_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        "Unique, user-assigned identifier of a given work order."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.ORDER_TYPE = parse_value(self.schema, column_value_map, "ORDER_TYPE")
        "Type or classification of order."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.ORDER_STATUS = parse_value(self.schema, column_value_map, "ORDER_STATUS")
        "The status of the work order, e.g., ACTIVE, COMPLETE, IN QUEUE, or CANCEL."
        self.ORDER_HOLD_STATUS = parse_value(self.schema, column_value_map, "ORDER_HOLD_STATUS")
        "The on-hold status of the work order, OPEN or CLOSED."
        self.ORDER_QTY = parse_value(self.schema, column_value_map, "ORDER_QTY")
        "The quantity of the part to be made for the given work order. Defaults to PLND_ORDER_QTY but can be changed."
        self.ORIG_ORDER_ID = parse_value(self.schema, column_value_map, "ORIG_ORDER_ID")
        "The identifier of the original work order, which is the initial work order created from work plan release. Used to track splits, rework/dispositions, and supercedes."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which the manufacturing work for the work order is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which the manufacturing work for the work order is scheduled to complete."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised work start date."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised work complete date."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which the work for the manufacturing work order has been started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which the manufacturing work order has been completed."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of the item/part to be made upon the work order."
        self.NEEDS_REVIEW_FLAG = parse_value(self.schema, column_value_map, "NEEDS_REVIEW_FLAG")
        "A flag (Y/N) that indicates whether the associated Corrective Action Diagram requires review."
        self.ORDER_SCRAP_QTY = parse_value(self.schema, column_value_map, "ORDER_SCRAP_QTY")
        "Number of items/component parts that have been scrapped during the process of fulfilling the work order."
        self.ORDER_COMPLETE_QTY = parse_value(self.schema, column_value_map, "ORDER_COMPLETE_QTY")
        "Number of items/component parts that have been completed during the process of fulfilling the given work order."
        self.ORDER_STOP_QTY = parse_value(self.schema, column_value_map, "ORDER_STOP_QTY")
        "Number of items/component parts that have been stopped during the process of fulfilling the given work order."
        self.SPLIT_FLAG = parse_value(self.schema, column_value_map, "SPLIT_FLAG")
        "A flag (Y/N) that indicates whether or not the work order is a split of another work order."
        self.UNSCRAP_FLAG = parse_value(self.schema, column_value_map, "UNSCRAP_FLAG")
        "A flag (Y/N) indicating whether the component/part should be or has been unscrapped."
        self.PARENT_ORDER_ID = parse_value(self.schema, column_value_map, "PARENT_ORDER_ID")
        "The identifier of the parent work order, used to track order splits, and rework/dispositions"
        self.SUPERCEDED_ORDER_ID = parse_value(self.schema, column_value_map, "SUPERCEDED_ORDER_ID")
        "The identifier of the work order superceded by this work order."
        self.SUPERCEDES_ORDER = parse_value(self.schema, column_value_map, "SUPERCEDES_ORDER")
        "The identifier of the work order that supercedes this work order."
        self.ORDER_CUST_ID = parse_value(self.schema, column_value_map, "ORDER_CUST_ID")
        "The customer receiving the completed work, defaulted to PLND_CUST_ID but can be changed."
        self.SCHED_PRIORITY = parse_value(self.schema, column_value_map, "SCHED_PRIORITY")
        "The scheduled priority of the associated work order, e.g., High, Low, Medium."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_STATUS = parse_value(self.schema, column_value_map, "ALT_STATUS")
        "The status of the last alteration on this work order. For example: ORDER_AUTHORING."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.UNIT_NO = parse_value(self.schema, column_value_map, "UNIT_NO")
        "The unit number of the shipping product (e.g. airplane tail #) the work order is related to."
        self.ORDER_UOM = parse_value(self.schema, column_value_map, "ORDER_UOM")
        "The Unit Of Measure associated with PLND_ORDER_QTY and ORDER_QTY."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.PLAN_TYPE = parse_value(self.schema, column_value_map, "PLAN_TYPE")
        "Type or classification of the associated work plan."
        self.LTA_SEND_FLAG = parse_value(self.schema, column_value_map, "LTA_SEND_FLAG")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.ASGND_LOCATION_ID = parse_value(self.schema, column_value_map, "ASGND_LOCATION_ID")

class SFQA_CA_CAUSE:
    schema = {
        "CA_ID": "STRING",
        "CAUSE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DEFECT_TYPE": "STRING",
        "RESP_RESOURCE_TYPE": "STRING",
        "RELATED_TOOL_NO": "STRING",
        "RELATED_MACHINE_NO": "STRING",
        "PROCESS_TYPE": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "CAUSE_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_CAUSE_FK2", ["RESP_RESOURCE_TYPE"], "SFQA_RESP_RESOURCE_TYPE_DEF", ["RESP_RESOURCE_TYPE"]),
        DbForeignKey("SFQA_CA_CAUSE_CA_DESC_FK", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CA_CAUSE_FK1", ["PROCESS_TYPE","DEFECT_TYPE"], "SFQA_DEFECT_TYPE_DEF", ["PROCESS_TYPE","DEFECT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.CAUSE_TYPE = parse_value(self.schema, column_value_map, "CAUSE_TYPE")
        "Type or classification of cause/origin leading to a discrepancy."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DEFECT_TYPE = parse_value(self.schema, column_value_map, "DEFECT_TYPE")
        "Type or classification of defect."
        self.RESP_RESOURCE_TYPE = parse_value(self.schema, column_value_map, "RESP_RESOURCE_TYPE")
        "Type of resource of cause/origin leading to a CA. Possible values are Part, Tool, Machine, Facilities, Skill, Process, System, and Other."
        self.RELATED_TOOL_NO = parse_value(self.schema, column_value_map, "RELATED_TOOL_NO")
        "Related Tool No."
        self.RELATED_MACHINE_NO = parse_value(self.schema, column_value_map, "RELATED_MACHINE_NO")
        "Related Machine No."
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        "A particular class/type of manufacturing process."

class SFSQA_OWNER:
    schema = {
        "OWNER_CODE": "STRING",
        "OWNER_TYPE": "STRING",
        "OWNER_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "ADDRESS": "STRING",
        "UCF_OWNER_VCH1": "STRING",
        "UCF_OWNER_VCH2": "STRING",
        "UCF_OWNER_VCH3": "STRING",
        "UCF_OWNER_VCH4": "STRING",
        "UCF_OWNER_VCH5": "STRING",
        "UCF_OWNER_VCH6": "STRING",
        "UCF_OWNER_VCH7": "STRING",
        "UCF_OWNER_VCH8": "STRING",
        "UCF_OWNER_VCH9": "STRING",
        "UCF_OWNER_VCH10": "STRING",
        "UCF_OWNER_VCH11": "STRING",
        "UCF_OWNER_VCH12": "STRING",
        "UCF_OWNER_VCH13": "STRING",
        "UCF_OWNER_VCH14": "STRING",
        "UCF_OWNER_VCH15": "STRING",
        "UCF_OWNER_NUM1": "NUMBER",
        "UCF_OWNER_NUM2": "NUMBER",
        "UCF_OWNER_NUM3": "NUMBER",
        "UCF_OWNER_NUM4": "NUMBER",
        "UCF_OWNER_NUM5": "NUMBER",
        "UCF_OWNER_DATE1": "STRING",
        "UCF_OWNER_DATE2": "STRING",
        "UCF_OWNER_DATE3": "STRING",
        "UCF_OWNER_DATE4": "STRING",
        "UCF_OWNER_DATE5": "STRING",
        "UCF_OWNER_FLAG1": "STRING",
        "UCF_OWNER_FLAG2": "STRING",
        "UCF_OWNER_FLAG3": "STRING",
        "UCF_OWNER_FLAG4": "STRING",
        "UCF_OWNER_FLAG5": "STRING",
        "MANDATE_TYPE": "STRING",
        "DOCUMENT_REF_NO": "STRING",
        "DOCUMENT_REV": "NUMBER",
        "UCF_OWNER_VCH255_1": "STRING",
        "UCF_OWNER_VCH255_2": "STRING",
        "UCF_OWNER_VCH255_3": "STRING",
        "UCF_OWNER_VCH4000_1": "STRING",
        "UCF_OWNER_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "OWNER_CODE",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_SUPPLIER_STYPE_FK", ["OWNER_TYPE"], "SFSQA_OWNER_TYPE_DEF", ["OWNER_TYPE"]),
        DbForeignKey("SFSQA_OWNER_FK2", ["MANDATE_TYPE"], "SFSQA_MANDATE_TYPE_DEF", ["MANDATE_TYPE"]),
    ]
    refs = [
        "SFSQA_ITEM_MANDATES_FK1",
        "SFSQA_SUPPLIER_MANDATES_FK1",
    ]
    def __init__(self, column_value_map):
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        self.OWNER_TYPE = parse_value(self.schema, column_value_map, "OWNER_TYPE")
        self.OWNER_NAME = parse_value(self.schema, column_value_map, "OWNER_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.ADDRESS = parse_value(self.schema, column_value_map, "ADDRESS")
        self.UCF_OWNER_VCH1 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH1")
        self.UCF_OWNER_VCH2 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH2")
        self.UCF_OWNER_VCH3 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH3")
        self.UCF_OWNER_VCH4 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH4")
        self.UCF_OWNER_VCH5 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH5")
        self.UCF_OWNER_VCH6 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH6")
        self.UCF_OWNER_VCH7 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH7")
        self.UCF_OWNER_VCH8 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH8")
        self.UCF_OWNER_VCH9 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH9")
        self.UCF_OWNER_VCH10 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH10")
        self.UCF_OWNER_VCH11 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH11")
        self.UCF_OWNER_VCH12 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH12")
        self.UCF_OWNER_VCH13 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH13")
        self.UCF_OWNER_VCH14 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH14")
        self.UCF_OWNER_VCH15 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH15")
        self.UCF_OWNER_NUM1 = parse_value(self.schema, column_value_map, "UCF_OWNER_NUM1")
        self.UCF_OWNER_NUM2 = parse_value(self.schema, column_value_map, "UCF_OWNER_NUM2")
        self.UCF_OWNER_NUM3 = parse_value(self.schema, column_value_map, "UCF_OWNER_NUM3")
        self.UCF_OWNER_NUM4 = parse_value(self.schema, column_value_map, "UCF_OWNER_NUM4")
        self.UCF_OWNER_NUM5 = parse_value(self.schema, column_value_map, "UCF_OWNER_NUM5")
        self.UCF_OWNER_DATE1 = parse_value(self.schema, column_value_map, "UCF_OWNER_DATE1")
        self.UCF_OWNER_DATE2 = parse_value(self.schema, column_value_map, "UCF_OWNER_DATE2")
        self.UCF_OWNER_DATE3 = parse_value(self.schema, column_value_map, "UCF_OWNER_DATE3")
        self.UCF_OWNER_DATE4 = parse_value(self.schema, column_value_map, "UCF_OWNER_DATE4")
        self.UCF_OWNER_DATE5 = parse_value(self.schema, column_value_map, "UCF_OWNER_DATE5")
        self.UCF_OWNER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_OWNER_FLAG1")
        self.UCF_OWNER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_OWNER_FLAG2")
        self.UCF_OWNER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_OWNER_FLAG3")
        self.UCF_OWNER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_OWNER_FLAG4")
        self.UCF_OWNER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_OWNER_FLAG5")
        self.MANDATE_TYPE = parse_value(self.schema, column_value_map, "MANDATE_TYPE")
        self.DOCUMENT_REF_NO = parse_value(self.schema, column_value_map, "DOCUMENT_REF_NO")
        self.DOCUMENT_REV = parse_value(self.schema, column_value_map, "DOCUMENT_REV")
        self.UCF_OWNER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH255_1")
        self.UCF_OWNER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH255_2")
        self.UCF_OWNER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH255_3")
        self.UCF_OWNER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH4000_1")
        self.UCF_OWNER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_OWNER_VCH4000_2")
        self.SFSQA_ITEM_MANDATES_FK1 = []
        self.SFSQA_SUPPLIER_MANDATES_FK1 = []

class SFSQA_INSP_ORDER_INSP_STEPS:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "STEP_NO": "STRING",
        "STATUS": "STRING",
        "DATE_CREATED": "DATE",
        "EXE_ORDER": "NUMBER",
        "ENFORCE_INSP_ITEM_SEQENCE_FLAG": "STRING",
        "SUBCOMP_PART_FLAG": "STRING",
        "APPLY_SEVERITY_RULE_FLAG": "STRING",
        "CHECKLIST_FLAG": "STRING",
        "FAI_ONLY_STATE_FLAG": "STRING",
        "FAILURE_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "APPLY_RANDOM_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ALLOW_OVERRIDE_FLAG": "STRING",
        "DATE_STARTED": "STRING",
        "REC_SOURCE": "STRING",
        "IN_QUEUE_DATE": "STRING",
        "DATE_COMPLETED": "STRING",
        "SCHED_END_DATE": "STRING",
        "ASSIGNED_USER_ID": "STRING",
        "PRIORITY": "STRING",
        "SCHED_START_DATE": "STRING",
        "UCF_INSP_ORDERIS_VCH1": "STRING",
        "UCF_INSP_ORDERIS_VCH2": "STRING",
        "UCF_INSP_ORDERIS_VCH3": "STRING",
        "UCF_INSP_ORDERIS_VCH4": "STRING",
        "UCF_INSP_ORDERIS_VCH5": "STRING",
        "UCF_INSP_ORDERIS_VCH6": "STRING",
        "UCF_INSP_ORDERIS_VCH7": "STRING",
        "UCF_INSP_ORDERIS_VCH8": "STRING",
        "UCF_INSP_ORDERIS_VCH9": "STRING",
        "UCF_INSP_ORDERIS_VCH10": "STRING",
        "UCF_INSP_ORDERIS_VCH11": "STRING",
        "UCF_INSP_ORDERIS_VCH12": "STRING",
        "UCF_INSP_ORDERIS_VCH13": "STRING",
        "UCF_INSP_ORDERIS_VCH14": "STRING",
        "UCF_INSP_ORDERIS_VCH15": "STRING",
        "UCF_INSP_ORDERIS_NUM1": "NUMBER",
        "UCF_INSP_ORDERIS_NUM2": "NUMBER",
        "UCF_INSP_ORDERIS_NUM3": "NUMBER",
        "UCF_INSP_ORDERIS_NUM4": "NUMBER",
        "UCF_INSP_ORDERIS_NUM5": "NUMBER",
        "UCF_INSP_ORDERIS_DATE1": "STRING",
        "UCF_INSP_ORDERIS_DATE2": "STRING",
        "UCF_INSP_ORDERIS_DATE3": "STRING",
        "UCF_INSP_ORDERIS_DATE4": "STRING",
        "UCF_INSP_ORDERIS_DATE5": "STRING",
        "UCF_INSP_ORDERIS_FLAG1": "STRING",
        "UCF_INSP_ORDERIS_FLAG2": "STRING",
        "UCF_INSP_ORDERIS_FLAG3": "STRING",
        "UCF_INSP_ORDERIS_FLAG4": "STRING",
        "UCF_INSP_ORDERIS_FLAG5": "STRING",
        "COMMENTS": "STRING",
        "CERT": "STRING",
        "UCF_INSP_ORDERIS_VCH255_1": "STRING",
        "UCF_INSP_ORDERIS_VCH255_2": "STRING",
        "UCF_INSP_ORDERIS_VCH255_3": "STRING",
        "UCF_INSP_ORDERIS_VCH4000_1": "STRING",
        "UCF_INSP_ORDERIS_VCH4000_2": "STRING",
        "LOCATION_ID": "STRING",
        "DEPARTMENT_ID": "STRING",
        "CENTER_ID": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "INSP_STEP_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_ORDER_INSP_STEP_FK5", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_INSP_STEP_FK6", ["LOCATION_ID","DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_INSP_STEP_FK7", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_IS_FK2", ["CERT"], "SFFND_CERT_DEF", ["CERT"]),
        DbForeignKey("SFSQA_INSP_ORDER_INSP_STEP_FK4", ["ASSIGNED_USER_ID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFSQA_INSP_ORDER_IS_FK", ["INSP_STEP_ID"], "SFSQA_INSP_STEP_DEF", ["INSP_STEP_ID"]),
        DbForeignKey("SFSQA_IDP_PSTATE_IDP_FK", ["INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
    ]
    refs = [
        "SFSQA_IDP_PROCESS_STATES_FK",
        "SFSQA_INSP_ORDER_NOTES_FK1",
        "SFSQA_INSP_ORDER_HOLDS_FK3",
        "SFSQA_IDP_ITEMS_PSTATE_FK",
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.DATE_CREATED = parse_value(self.schema, column_value_map, "DATE_CREATED")
        self.EXE_ORDER = parse_value(self.schema, column_value_map, "EXE_ORDER")
        self.ENFORCE_INSP_ITEM_SEQENCE_FLAG = parse_value(self.schema, column_value_map, "ENFORCE_INSP_ITEM_SEQENCE_FLAG")
        self.SUBCOMP_PART_FLAG = parse_value(self.schema, column_value_map, "SUBCOMP_PART_FLAG")
        self.APPLY_SEVERITY_RULE_FLAG = parse_value(self.schema, column_value_map, "APPLY_SEVERITY_RULE_FLAG")
        self.CHECKLIST_FLAG = parse_value(self.schema, column_value_map, "CHECKLIST_FLAG")
        self.FAI_ONLY_STATE_FLAG = parse_value(self.schema, column_value_map, "FAI_ONLY_STATE_FLAG")
        self.FAILURE_FLAG = parse_value(self.schema, column_value_map, "FAILURE_FLAG")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.APPLY_RANDOM_FLAG = parse_value(self.schema, column_value_map, "APPLY_RANDOM_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.ALLOW_OVERRIDE_FLAG = parse_value(self.schema, column_value_map, "ALLOW_OVERRIDE_FLAG")
        self.DATE_STARTED = parse_value(self.schema, column_value_map, "DATE_STARTED")
        self.REC_SOURCE = parse_value(self.schema, column_value_map, "REC_SOURCE")
        self.IN_QUEUE_DATE = parse_value(self.schema, column_value_map, "IN_QUEUE_DATE")
        self.DATE_COMPLETED = parse_value(self.schema, column_value_map, "DATE_COMPLETED")
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        self.ASSIGNED_USER_ID = parse_value(self.schema, column_value_map, "ASSIGNED_USER_ID")
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        self.UCF_INSP_ORDERIS_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH1")
        self.UCF_INSP_ORDERIS_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH2")
        self.UCF_INSP_ORDERIS_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH3")
        self.UCF_INSP_ORDERIS_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH4")
        self.UCF_INSP_ORDERIS_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH5")
        self.UCF_INSP_ORDERIS_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH6")
        self.UCF_INSP_ORDERIS_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH7")
        self.UCF_INSP_ORDERIS_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH8")
        self.UCF_INSP_ORDERIS_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH9")
        self.UCF_INSP_ORDERIS_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH10")
        self.UCF_INSP_ORDERIS_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH11")
        self.UCF_INSP_ORDERIS_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH12")
        self.UCF_INSP_ORDERIS_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH13")
        self.UCF_INSP_ORDERIS_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH14")
        self.UCF_INSP_ORDERIS_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH15")
        self.UCF_INSP_ORDERIS_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_NUM1")
        self.UCF_INSP_ORDERIS_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_NUM2")
        self.UCF_INSP_ORDERIS_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_NUM3")
        self.UCF_INSP_ORDERIS_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_NUM4")
        self.UCF_INSP_ORDERIS_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_NUM5")
        self.UCF_INSP_ORDERIS_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_DATE1")
        self.UCF_INSP_ORDERIS_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_DATE2")
        self.UCF_INSP_ORDERIS_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_DATE3")
        self.UCF_INSP_ORDERIS_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_DATE4")
        self.UCF_INSP_ORDERIS_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_DATE5")
        self.UCF_INSP_ORDERIS_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_FLAG1")
        self.UCF_INSP_ORDERIS_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_FLAG2")
        self.UCF_INSP_ORDERIS_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_FLAG3")
        self.UCF_INSP_ORDERIS_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_FLAG4")
        self.UCF_INSP_ORDERIS_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_FLAG5")
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        self.UCF_INSP_ORDERIS_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH255_1")
        self.UCF_INSP_ORDERIS_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH255_2")
        self.UCF_INSP_ORDERIS_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH255_3")
        self.UCF_INSP_ORDERIS_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH4000_1")
        self.UCF_INSP_ORDERIS_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIS_VCH4000_2")
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        "Location Id of Location ,system generated unique identifier."
        self.DEPARTMENT_ID = parse_value(self.schema, column_value_map, "DEPARTMENT_ID")
        "Department Id of Department ,system generated unique identifier."
        self.CENTER_ID = parse_value(self.schema, column_value_map, "CENTER_ID")
        "Center Id of Center ,system generated unique identifier."
        self.SFSQA_IDP_PROCESS_STATES_FK = []
        self.SFSQA_INSP_ORDER_NOTES_FK1 = []
        self.SFSQA_INSP_ORDER_HOLDS_FK3 = []
        self.SFSQA_IDP_ITEMS_PSTATE_FK = []

class SFCORE_USER_CONTEXT_DATA:
    schema = {
        "USERID": "STRING",
        "TIME_STAMP": "DATE",
        "CONTEXT_DATA": "STRING",
        "CONTEXT_DATA_KEY": "STRING",
    }
    primary_key_columns = [
        "USERID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.CONTEXT_DATA = parse_value(self.schema, column_value_map, "CONTEXT_DATA")
        "User context data as provided by Solumina."
        self.CONTEXT_DATA_KEY = parse_value(self.schema, column_value_map, "CONTEXT_DATA_KEY")

class SFPL_PLAN_PWP_XREF:
    schema = {
        "PWP_ID": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PWP_ID",
        "PLAN_ID",
        "PLAN_VERSION",
        "PLAN_REVISION",
        "PLAN_ALTERATIONS",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLAN_PWP_XREF_FK2", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
        DbForeignKey("SFPL_PLAN_PWP_XREF_FK1", ["PWP_ID"], "SFPL_PWP_DESC", ["PWP_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PWP_ID = parse_value(self.schema, column_value_map, "PWP_ID")
        "The unique identifier of a work package."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_WORK_LOC_DEF:
    schema = {
        "LOCATION_ID": "STRING",
        "WORK_LOC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "LOC_TITLE": "STRING",
        "UCF_WORK_LOC_VCH1": "STRING",
        "REPAIR_STATION": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "UCF_WORK_LOC_VCH2": "STRING",
        "UCF_WORK_LOC_VCH3": "STRING",
        "UCF_WORK_LOC_VCH4": "STRING",
        "UCF_WORK_LOC_VCH5": "STRING",
        "UCF_WORK_LOC_NUM1": "NUMBER",
        "UCF_WORK_LOC_NUM2": "NUMBER",
        "UCF_WORK_LOC_NUM3": "NUMBER",
        "UCF_WORK_LOC_DATE1": "STRING",
        "UCF_WORK_LOC_DATE2": "STRING",
        "UCF_WORK_LOC_FLAG1": "STRING",
        "UCF_WORK_LOC_FLAG2": "STRING",
        "UCF_WORK_LOC_FLAG3": "STRING",
        "UCF_WORK_LOC_VCH255_1": "STRING",
        "UCF_WORK_LOC_VCH255_2": "STRING",
        "COMPANY_ID": "STRING",
        "LOCATION_TYPE": "STRING",
        "RATING_TIMEFRAME": "NUMBER",
        "ADDRESS": "STRING",
        "CITY": "STRING",
        "STATE": "STRING",
        "ZIPCODE": "STRING",
        "COUNTRY_CODE": "STRING",
        "STATUS": "STRING",
        "SUPPLIER_CATEGORY": "STRING",
        "AUDIT_QUALIFIED": "STRING",
        "PURCHASED_PARTS_FLAG": "STRING",
        "AUTO_STATUS_UPDATED": "STRING",
        "UCF_SUPPLIER_VCH1": "STRING",
        "UCF_SUPPLIER_VCH2": "STRING",
        "UCF_SUPPLIER_VCH3": "STRING",
        "UCF_SUPPLIER_VCH4": "STRING",
        "UCF_SUPPLIER_VCH5": "STRING",
        "UCF_SUPPLIER_VCH6": "STRING",
        "UCF_SUPPLIER_VCH7": "STRING",
        "UCF_SUPPLIER_VCH8": "STRING",
        "UCF_SUPPLIER_VCH9": "STRING",
        "UCF_SUPPLIER_VCH10": "STRING",
        "UCF_SUPPLIER_VCH11": "STRING",
        "UCF_SUPPLIER_VCH12": "STRING",
        "UCF_SUPPLIER_VCH13": "STRING",
        "UCF_SUPPLIER_VCH14": "STRING",
        "UCF_SUPPLIER_VCH15": "STRING",
        "UCF_SUPPLIER_NUM1": "NUMBER",
        "UCF_SUPPLIER_NUM2": "NUMBER",
        "UCF_SUPPLIER_NUM3": "NUMBER",
        "UCF_SUPPLIER_NUM4": "NUMBER",
        "UCF_SUPPLIER_NUM5": "NUMBER",
        "UCF_SUPPLIER_DATE1": "STRING",
        "UCF_SUPPLIER_DATE2": "STRING",
        "UCF_SUPPLIER_DATE3": "STRING",
        "UCF_SUPPLIER_DATE4": "STRING",
        "UCF_SUPPLIER_DATE5": "STRING",
        "UCF_SUPPLIER_FLAG1": "STRING",
        "UCF_SUPPLIER_FLAG2": "STRING",
        "UCF_SUPPLIER_FLAG3": "STRING",
        "UCF_SUPPLIER_FLAG4": "STRING",
        "UCF_SUPPLIER_FLAG5": "STRING",
        "UCF_SUPPLIER_VCH255_1": "STRING",
        "UCF_SUPPLIER_VCH255_2": "STRING",
        "UCF_SUPPLIER_VCH255_3": "STRING",
        "UCF_SUPPLIER_VCH4000_1": "STRING",
        "UCF_SUPPLIER_VCH4000_2": "STRING",
        "AVG_LABOR_RATE_UNIT": "STRING",
        "ADDRESS_LINE_2": "STRING",
        "BARCODE_FORMAT": "STRING",
        "SEARCH_COL": "STRING",
    }
    primary_key_columns = [
        "LOCATION_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_WORK_LOC_DEF_COMPANY_FK", ["COMPANY_ID"], "SFFND_COMPANY_DEF", ["COMPANY_ID"]),
        DbForeignKey("SFFND_WORK_LOC_DEF_FK01", ["UID_ENTRY_NAME"], "SFFND_UID_ENTRY", ["UID_ENTRY_NAME"]),
        DbForeignKey("SFFND_WORK_LOC_DEF_FK2", ["BARCODE_FORMAT"], "SFFND_BARCODE_FORMATS", ["BARCODE_FORMAT"]),
    ]
    refs = [
        "SFPL_MFG_BOM_REV_FK4",
        "SFPL_MFG_BOM_COMP_LOCATION_FK",
        "SFPL_ITEM_HOLDS_SUPP_CODE_FK",
        "SFWID_OWP_DEF_FK5",
        "SFQA_CA_AFFECTED_SUPPLIERS_FK2",
        "SFSQA_SUPPLIER_CERT_FK2",
        "SFPL_PLAN_DESC_LOC_FK",
        "SFQA_DISC_COMPONENT_SCODE_FK",
        "SFWID_ORDER_CYCLES_FK1",
        "SFSQA_AUDIT_PLNPRO_SCHD_FK3",
        "SFWID_OPER_DESC_ALT_FK5",
        "SFWID_OPER_DESC_ALT_FK2",
        "SFWID_OPER_DESC_LOCATION_FK",
        "SFWID_OPER_DESC_SUPP_CODE_FK",
        "SFFND_TL_SRL_HOME_LOC_FK",
        "SFFND_TL_SRL_CALIB_LOC_FK",
        "SFFND_TL_SRL_ISSUED_LOC_FK",
        "SFSQA_INSP_ORDER_DESC_FK10",
        "SFPL_OPER_DESC_SUPP_CODE_FK",
        "SFPL_OPER_DESC_LOC_FK",
        "SFPL_MFG_BOM_REV_ORIG_FK3",
        "SFWID_OPERATIONS_LOCATION_FK",
        "SFQA_CA_REQ_AFFECTEDSUPPRS_FK1",
        "SFFND_USER_WORK_CENTERS_FK2",
        "SFWID_ORDER_DESC_FK07",
        "SFWID_ORDER_DESC_FK05",
        "SFWID_ORDER_DESC_WORK_LOC_FK",
        "SFWID_ORDER_DESC_FK06",
        "MOTT_TIME_MATERIAL_FK6",
        "SFSQA_SUPPLIER_HOLDS_FK1",
        "SFSQA_SUPPLIER_MANDATES_FK2",
        "SFPL_MFG_BOM_TOOL_ORIG_FK5",
        "SFQA_CA_DESC_FK11",
        "SFPL_MFG_BOM_COMP_ORIG_FK3",
        "SFSQA_SUP_CONTACT_INFO_FK2",
        "SFQA_DISC_ITEM_FK16",
        "SFQA_DISC_ITEM_REJECT_LOC_FK",
        "SFWID_ACTIV_NQ_ORDERS_LOC_FK",
        "SFSQA_INSP_ORDER_INSP_STEP_FK5",
        "SFSQA_INSP_PLAN_STEP_LOC_FK1",
        "SFSQA_INSP_ORDER_HOLDS_FK6",
        "SFFND_USER_LOC_FK",
        "SFPL_IA_PW_WORKLOC",
        "SFSQA_ITEM_SUPPLIER_DATA_FK4",
        "SFFND_WORKDEPT_WORKLOC_FK",
        "SFPL_MFG_BOM_TOOL_FK5",
        "SFPL_ITEM_PROG_DETLS_WL_FK",
        "SFSQA_USER_SUPPLIERS_SUPS_FK",
        "SFSQA_PO_HDR_FK1",
        "SFQA_CA_RESP_LDC_FK2",
        "SFSQA_INSP_ORD_DELVRY_INFO_FK2",
        "SFWID_ORDER_DESC_ALT_FK9",
    ]
    def __init__(self, column_value_map):
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.WORK_LOC = parse_value(self.schema, column_value_map, "WORK_LOC")
        "The unique identifier of a physical location where the manufacturing work is done. For example: plant or facility."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.LOC_TITLE = parse_value(self.schema, column_value_map, "LOC_TITLE")
        "A descriptive title or name of the manufacturing work location."
        self.UCF_WORK_LOC_VCH1 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_VCH1")
        "User-configurable field for VARCHAR data type."
        self.REPAIR_STATION = parse_value(self.schema, column_value_map, "REPAIR_STATION")
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.UCF_WORK_LOC_VCH2 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_VCH2")
        self.UCF_WORK_LOC_VCH3 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_VCH3")
        self.UCF_WORK_LOC_VCH4 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_VCH4")
        self.UCF_WORK_LOC_VCH5 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_VCH5")
        self.UCF_WORK_LOC_NUM1 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_NUM1")
        self.UCF_WORK_LOC_NUM2 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_NUM2")
        self.UCF_WORK_LOC_NUM3 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_NUM3")
        self.UCF_WORK_LOC_DATE1 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_DATE1")
        self.UCF_WORK_LOC_DATE2 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_DATE2")
        self.UCF_WORK_LOC_FLAG1 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_FLAG1")
        self.UCF_WORK_LOC_FLAG2 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_FLAG2")
        self.UCF_WORK_LOC_FLAG3 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_FLAG3")
        self.UCF_WORK_LOC_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_VCH255_1")
        self.UCF_WORK_LOC_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_WORK_LOC_VCH255_2")
        self.COMPANY_ID = parse_value(self.schema, column_value_map, "COMPANY_ID")
        "Unique Identifier for Compny."
        self.LOCATION_TYPE = parse_value(self.schema, column_value_map, "LOCATION_TYPE")
        "Location Type indicates, SUPPLIER- Supplier Location, INTERNAL  Work Location, CUSTOMER  Customer Location."
        self.RATING_TIMEFRAME = parse_value(self.schema, column_value_map, "RATING_TIMEFRAME")
        "Rating Timeframe."
        self.ADDRESS = parse_value(self.schema, column_value_map, "ADDRESS")
        "Supplier Address."
        self.CITY = parse_value(self.schema, column_value_map, "CITY")
        "City."
        self.STATE = parse_value(self.schema, column_value_map, "STATE")
        "State."
        self.ZIPCODE = parse_value(self.schema, column_value_map, "ZIPCODE")
        "Zip Code."
        self.COUNTRY_CODE = parse_value(self.schema, column_value_map, "COUNTRY_CODE")
        "Country."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Supplier Status."
        self.SUPPLIER_CATEGORY = parse_value(self.schema, column_value_map, "SUPPLIER_CATEGORY")
        "Supplier category."
        self.AUDIT_QUALIFIED = parse_value(self.schema, column_value_map, "AUDIT_QUALIFIED")
        "Supplier Qualification require."
        self.PURCHASED_PARTS_FLAG = parse_value(self.schema, column_value_map, "PURCHASED_PARTS_FLAG")
        "Flag to indiacate supplier of purchase parts."
        self.AUTO_STATUS_UPDATED = parse_value(self.schema, column_value_map, "AUTO_STATUS_UPDATED")
        "Flag indicating if status is updated automatically or manually."
        self.UCF_SUPPLIER_VCH1 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH2 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH3 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH4 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH5 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH6 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH7 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH8 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH9 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH10 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH11 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH12 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH13 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH14 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_VCH15 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_SUPPLIER_NUM1 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_SUPPLIER_NUM2 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_SUPPLIER_NUM3 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_SUPPLIER_NUM4 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_SUPPLIER_NUM5 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_SUPPLIER_DATE1 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SUPPLIER_DATE2 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SUPPLIER_DATE3 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_SUPPLIER_DATE4 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_SUPPLIER_DATE5 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_SUPPLIER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SUPPLIER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SUPPLIER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SUPPLIER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SUPPLIER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SUPPLIER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SUPPLIER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SUPPLIER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SUPPLIER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_SUPPLIER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SUPPLIER_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.AVG_LABOR_RATE_UNIT = parse_value(self.schema, column_value_map, "AVG_LABOR_RATE_UNIT")
        "Indicates the currency (typically dollars or euros) for a given location. It applies to all work centers within the location."
        self.ADDRESS_LINE_2 = parse_value(self.schema, column_value_map, "ADDRESS_LINE_2")
        "Supplier Street address Line 2"
        self.BARCODE_FORMAT = parse_value(self.schema, column_value_map, "BARCODE_FORMAT")
        self.SEARCH_COL = parse_value(self.schema, column_value_map, "SEARCH_COL")
        self.SFPL_MFG_BOM_REV_FK4 = []
        self.SFPL_MFG_BOM_COMP_LOCATION_FK = []
        self.SFPL_ITEM_HOLDS_SUPP_CODE_FK = []
        self.SFWID_OWP_DEF_FK5 = []
        self.SFQA_CA_AFFECTED_SUPPLIERS_FK2 = []
        self.SFSQA_SUPPLIER_CERT_FK2 = []
        self.SFPL_PLAN_DESC_LOC_FK = []
        self.SFQA_DISC_COMPONENT_SCODE_FK = []
        self.SFWID_ORDER_CYCLES_FK1 = []
        self.SFSQA_AUDIT_PLNPRO_SCHD_FK3 = []
        self.SFWID_OPER_DESC_ALT_FK5 = []
        self.SFWID_OPER_DESC_ALT_FK2 = []
        self.SFWID_OPER_DESC_LOCATION_FK = []
        self.SFWID_OPER_DESC_SUPP_CODE_FK = []
        self.SFFND_TL_SRL_HOME_LOC_FK = []
        self.SFFND_TL_SRL_CALIB_LOC_FK = []
        self.SFFND_TL_SRL_ISSUED_LOC_FK = []
        self.SFSQA_INSP_ORDER_DESC_FK10 = []
        self.SFPL_OPER_DESC_SUPP_CODE_FK = []
        self.SFPL_OPER_DESC_LOC_FK = []
        self.SFPL_MFG_BOM_REV_ORIG_FK3 = []
        self.SFWID_OPERATIONS_LOCATION_FK = []
        self.SFQA_CA_REQ_AFFECTEDSUPPRS_FK1 = []
        self.SFFND_USER_WORK_CENTERS_FK2 = []
        self.SFWID_ORDER_DESC_FK07 = []
        self.SFWID_ORDER_DESC_FK05 = []
        self.SFWID_ORDER_DESC_WORK_LOC_FK = []
        self.SFWID_ORDER_DESC_FK06 = []
        self.MOTT_TIME_MATERIAL_FK6 = []
        self.SFSQA_SUPPLIER_HOLDS_FK1 = []
        self.SFSQA_SUPPLIER_MANDATES_FK2 = []
        self.SFPL_MFG_BOM_TOOL_ORIG_FK5 = []
        self.SFQA_CA_DESC_FK11 = []
        self.SFPL_MFG_BOM_COMP_ORIG_FK3 = []
        self.SFSQA_SUP_CONTACT_INFO_FK2 = []
        self.SFQA_DISC_ITEM_FK16 = []
        self.SFQA_DISC_ITEM_REJECT_LOC_FK = []
        self.SFWID_ACTIV_NQ_ORDERS_LOC_FK = []
        self.SFSQA_INSP_ORDER_INSP_STEP_FK5 = []
        self.SFSQA_INSP_PLAN_STEP_LOC_FK1 = []
        self.SFSQA_INSP_ORDER_HOLDS_FK6 = []
        self.SFFND_USER_LOC_FK = []
        self.SFPL_IA_PW_WORKLOC = []
        self.SFSQA_ITEM_SUPPLIER_DATA_FK4 = []
        self.SFFND_WORKDEPT_WORKLOC_FK = []
        self.SFPL_MFG_BOM_TOOL_FK5 = []
        self.SFPL_ITEM_PROG_DETLS_WL_FK = []
        self.SFSQA_USER_SUPPLIERS_SUPS_FK = []
        self.SFSQA_PO_HDR_FK1 = []
        self.SFQA_CA_RESP_LDC_FK2 = []
        self.SFSQA_INSP_ORD_DELVRY_INFO_FK2 = []
        self.SFWID_ORDER_DESC_ALT_FK9 = []

class SFSQA_ITEM_OWNER_ATTACHMENTS:
    schema = {
        "OWNER_CODE": "STRING",
        "UPDT_USERID": "STRING",
        "OBJECT_ID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "NOTES": "STRING",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "OWNER_CODE",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_IO_ATTACHS_FK1", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFSQA_IO_ATTACHS_FK2", ["ITEM_ID","OWNER_CODE"], "SFSQA_ITEM_OWNER", ["ITEM_ID","OWNER_CODE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")

class SFPL_RAW_MATERIALS_DEF:
    schema = {
        "MATERIAL_ID": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "MATERIAL_TITLE": "STRING",
        "MATERIAL_TYPE": "STRING",
        "MATERIAL_SHAPE": "STRING",
        "ALLOY": "STRING",
        "TEMPER": "STRING",
        "SURFACE": "STRING",
        "MATERIAL_SPEC": "STRING",
        "GAUGE": "NUMBER",
        "STOCK_MATERIAL_WIDTH": "NUMBER",
        "STOCK_MATERIAL_LENGTH": "NUMBER",
        "OUTSIDE_DIAMETER": "NUMBER",
        "WEB_LEG1": "NUMBER",
        "LEG2": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "MATERIAL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_RAW_MATERIALS_DEF_FK2", ["MATERIAL_SHAPE"], "SFPL_RAW_MATERIAL_SHAPE_DEF", ["SHAPE"]),
        DbForeignKey("SFPL_RAW_MATERIALS_DEF_FK3", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        self.MATERIAL_TITLE = parse_value(self.schema, column_value_map, "MATERIAL_TITLE")
        self.MATERIAL_TYPE = parse_value(self.schema, column_value_map, "MATERIAL_TYPE")
        self.MATERIAL_SHAPE = parse_value(self.schema, column_value_map, "MATERIAL_SHAPE")
        self.ALLOY = parse_value(self.schema, column_value_map, "ALLOY")
        self.TEMPER = parse_value(self.schema, column_value_map, "TEMPER")
        self.SURFACE = parse_value(self.schema, column_value_map, "SURFACE")
        self.MATERIAL_SPEC = parse_value(self.schema, column_value_map, "MATERIAL_SPEC")
        self.GAUGE = parse_value(self.schema, column_value_map, "GAUGE")
        self.STOCK_MATERIAL_WIDTH = parse_value(self.schema, column_value_map, "STOCK_MATERIAL_WIDTH")
        self.STOCK_MATERIAL_LENGTH = parse_value(self.schema, column_value_map, "STOCK_MATERIAL_LENGTH")
        self.OUTSIDE_DIAMETER = parse_value(self.schema, column_value_map, "OUTSIDE_DIAMETER")
        self.WEB_LEG1 = parse_value(self.schema, column_value_map, "WEB_LEG1")
        self.LEG2 = parse_value(self.schema, column_value_map, "LEG2")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")

class SFSQA_INSP_PLAN_STEP_LOCATIONS:
    schema = {
        "INSP_PLAN_ID": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "INSP_STEP_ID": "STRING",
        "UPDT_USERID": "STRING",
        "LOCATION_ID": "STRING",
        "TIME_STAMP": "DATE",
        "DEPARTMENT_ID": "STRING",
        "CENTER_ID": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "INSP_PLAN_ID",
        "INSP_PLAN_REV",
        "INSP_STEP_ID",
        "LOCATION_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_PLAN_STEP_LOC_FK3", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFSQA_INSP_PLAN_STEP_LOC_FK1", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFSQA_INSP_PLAN_STEP_LOC_FK2", ["LOCATION_ID","DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        "Inspection Plan system generated unique identifier."
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        "Inspection Plan revision."
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        "Inspection Step system generated unique identifier."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        "Location Id of Location ,system generated unique identifier."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.DEPARTMENT_ID = parse_value(self.schema, column_value_map, "DEPARTMENT_ID")
        "Department Id of Department ,system generated unique identifier."
        self.CENTER_ID = parse_value(self.schema, column_value_map, "CENTER_ID")
        "Center Id of Center ,system generated unique identifier."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_MATERIAL_NOTES_MM_OBJECTS:
    schema = {
        "NOTE_ID": "STRING",
        "MATERIAL_ID": "STRING",
        "OBJECT_ID": "STRING",
        "REF_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "NOTE_ID",
        "MATERIAL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MATERIAL_NOTES_MM_OBJECTS_FK1", ["MATERIAL_ID"], "MOTT_TIME_MATERIAL", ["MATERIAL_ID"]),
        DbForeignKey("SFPL_MATERIAL_NOTES_TEXT_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.NOTE_ID = parse_value(self.schema, column_value_map, "NOTE_ID")
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        "Primary Key For Time sensitive material"
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFQRTZ_SIMPROP_TRIGGERS:
    schema = {
        "SCHED_NAME": "STRING",
        "TRIGGER_NAME": "STRING",
        "TRIGGER_GROUP": "STRING",
        "STR_PROP_1": "STRING",
        "STR_PROP_2": "STRING",
        "STR_PROP_3": "STRING",
        "INT_PROP_1": "NUMBER",
        "INT_PROP_2": "NUMBER",
        "LONG_PROP_1": "NUMBER",
        "LONG_PROP_2": "NUMBER",
        "DEC_PROP_1": "NUMBER",
        "DEC_PROP_2": "NUMBER",
        "BOOL_PROP_1": "STRING",
        "BOOL_PROP_2": "STRING",
    }
    primary_key_columns = [
        "SCHED_NAME",
        "TRIGGER_NAME",
        "TRIGGER_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFQRTZ_SIMPROP_TRIG_TO_TRIG_FK", ["SCHED_NAME","TRIGGER_NAME","TRIGGER_GROUP"], "SFQRTZ_TRIGGERS", ["SCHED_NAME","TRIGGER_NAME","TRIGGER_GROUP"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SCHED_NAME = parse_value(self.schema, column_value_map, "SCHED_NAME")
        self.TRIGGER_NAME = parse_value(self.schema, column_value_map, "TRIGGER_NAME")
        self.TRIGGER_GROUP = parse_value(self.schema, column_value_map, "TRIGGER_GROUP")
        self.STR_PROP_1 = parse_value(self.schema, column_value_map, "STR_PROP_1")
        self.STR_PROP_2 = parse_value(self.schema, column_value_map, "STR_PROP_2")
        self.STR_PROP_3 = parse_value(self.schema, column_value_map, "STR_PROP_3")
        self.INT_PROP_1 = parse_value(self.schema, column_value_map, "INT_PROP_1")
        self.INT_PROP_2 = parse_value(self.schema, column_value_map, "INT_PROP_2")
        self.LONG_PROP_1 = parse_value(self.schema, column_value_map, "LONG_PROP_1")
        self.LONG_PROP_2 = parse_value(self.schema, column_value_map, "LONG_PROP_2")
        self.DEC_PROP_1 = parse_value(self.schema, column_value_map, "DEC_PROP_1")
        self.DEC_PROP_2 = parse_value(self.schema, column_value_map, "DEC_PROP_2")
        self.BOOL_PROP_1 = parse_value(self.schema, column_value_map, "BOOL_PROP_1")
        self.BOOL_PROP_2 = parse_value(self.schema, column_value_map, "BOOL_PROP_2")

class SFQA_DISC_SYMPTOM:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "SYMPTOM_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "SYMPTOM_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_SYMPTOM_DISC_ITEM_FK", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.SYMPTOM_TYPE = parse_value(self.schema, column_value_map, "SYMPTOM_TYPE")
        "Type or classification of symptom associated with the discrepancy."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_LICENSE_TOOL:
    schema = {
        "LICENSE_KEY": "STRING",
        "TOOL_TYPE": "STRING",
        "TOOL_COUNT": "STRING",
        "TOOL_MAX": "STRING",
        "TOOL_COMP": "STRING",
        "TOOL_PEAK": "STRING",
    }
    primary_key_columns = [
        "LICENSE_KEY",
        "TOOL_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.LICENSE_KEY = parse_value(self.schema, column_value_map, "LICENSE_KEY")
        "Unique identifier of a Solumina software license."
        self.TOOL_TYPE = parse_value(self.schema, column_value_map, "TOOL_TYPE")
        "Name/identifier of a particular type/types of Solumina tools covered by the license. For instance: CAD, WID, QA, PLG, MRO, or ALL."
        self.TOOL_COUNT = parse_value(self.schema, column_value_map, "TOOL_COUNT")
        "Encrypted tool counts, number of concurrent sessions of the tool allowed under the license. The encryption results in an alphanumeric string."
        self.TOOL_MAX = parse_value(self.schema, column_value_map, "TOOL_MAX")
        "Number of licenses for a given type of license."
        self.TOOL_COMP = parse_value(self.schema, column_value_map, "TOOL_COMP")
        "Number of complimentary licenses for a given type of license."
        self.TOOL_PEAK = parse_value(self.schema, column_value_map, "TOOL_PEAK")
        "Highwater mark of licenses for a given type of license."

class SFFND_USER_SEC_GRP_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "USERID": "STRING",
        "SECURITY_GROUP": "STRING",
        "DEFAULT_ON_CREATE_FLAG": "STRING",
        "EFFECTIVE_START_DATE": "STRING",
        "EFFECTIVE_END_DATE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        "Security group assigned to user."
        self.DEFAULT_ON_CREATE_FLAG = parse_value(self.schema, column_value_map, "DEFAULT_ON_CREATE_FLAG")
        self.EFFECTIVE_START_DATE = parse_value(self.schema, column_value_map, "EFFECTIVE_START_DATE")
        "The effective start date of the security group."
        self.EFFECTIVE_END_DATE = parse_value(self.schema, column_value_map, "EFFECTIVE_END_DATE")
        "The effective end date of the security group."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_AS_WORKED_BOM:
    schema = {
        "AS_WORKED_BOM_ID": "STRING",
        "PART_NO": "STRING",
        "ASGND_ITEM_ID": "STRING",
        "PART_CHG": "STRING",
        "PARENT_ITEM_ID": "STRING",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
        "PARENT_LOT_NO": "STRING",
        "PARENT_SERIAL_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "ORDER_NO": "STRING",
        "OPER_KEY": "NUMBER",
        "OPER_NO": "STRING",
        "REF_DES": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "PARENT_SERIAL_ID": "STRING",
        "PARENT_LOT_ID": "STRING",
        "PART_TITLE": "STRING",
        "PART_QTY": "NUMBER",
        "FIND_NO": "STRING",
        "SPOOL_NO": "STRING",
        "EXP_DATE": "STRING",
        "REMOVE_FLAG": "STRING",
        "PART_ACTION": "STRING",
        "PARENT_PART_NO": "STRING",
        "COMMENTS": "STRING",
        "STEP_KEY": "NUMBER",
        "STEP_NO": "STRING",
        "UOM": "STRING",
        "ALLOC_QTY_FLAG": "STRING",
        "REMOVE_WITHOUT_INSTALL_FLAG": "STRING",
        "OPT_DC1_VALUE": "STRING",
        "OPT_DC2_VALUE": "STRING",
        "OPT_DC3_VALUE": "STRING",
        "OPT_DC4_VALUE": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "PLND_ITEM_ID": "STRING",
        "UCF_ASWRKD_BOM_VCH1": "STRING",
        "UCF_ASWRKD_BOM_VCH2": "STRING",
        "UCF_ASWRKD_BOM_VCH3": "STRING",
        "UCF_ASWRKD_BOM_VCH4": "STRING",
        "UCF_ASWRKD_BOM_VCH5": "STRING",
        "UCF_ASWRKD_BOM_VCH6": "STRING",
        "UCF_ASWRKD_BOM_VCH7": "STRING",
        "UCF_ASWRKD_BOM_VCH8": "STRING",
        "UCF_ASWRKD_BOM_VCH9": "STRING",
        "UCF_ASWRKD_BOM_VCH10": "STRING",
        "UCF_ASWRKD_BOM_VCH11": "STRING",
        "UCF_ASWRKD_BOM_VCH12": "STRING",
        "UCF_ASWRKD_BOM_VCH13": "STRING",
        "UCF_ASWRKD_BOM_VCH14": "STRING",
        "UCF_ASWRKD_BOM_VCH15": "STRING",
        "UCF_ASWRKD_BOM_NUM1": "NUMBER",
        "UCF_ASWRKD_BOM_NUM2": "NUMBER",
        "UCF_ASWRKD_BOM_NUM3": "NUMBER",
        "UCF_ASWRKD_BOM_NUM4": "NUMBER",
        "UCF_ASWRKD_BOM_NUM5": "NUMBER",
        "UCF_ASWRKD_BOM_DATE1": "STRING",
        "UCF_ASWRKD_BOM_DATE2": "STRING",
        "UCF_ASWRKD_BOM_DATE3": "STRING",
        "UCF_ASWRKD_BOM_DATE4": "STRING",
        "UCF_ASWRKD_BOM_DATE5": "STRING",
        "UCF_ASWRKD_BOM_FLAG1": "STRING",
        "UCF_ASWRKD_BOM_FLAG2": "STRING",
        "UCF_ASWRKD_BOM_FLAG3": "STRING",
        "UCF_ASWRKD_BOM_FLAG4": "STRING",
        "UCF_ASWRKD_BOM_FLAG5": "STRING",
        "UCF_ASWRKD_BOM_VCH255_1": "STRING",
        "UCF_ASWRKD_BOM_VCH255_2": "STRING",
        "UCF_ASWRKD_BOM_VCH255_3": "STRING",
        "UCF_ASWRKD_BOM_VCH4000_1": "STRING",
        "UCF_ASWRKD_BOM_VCH4000_2": "STRING",
        "REPLACEMENT_ACTION": "STRING",
        "NEW_SERIAL_NO": "STRING",
        "REF_DOC": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "UID_COMPOSITE": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "PART_DAT_COL_ID": "STRING",
        "UID_LABEL": "STRING",
        "SECURITY_GROUP": "STRING",
        "REMOVE_FROM_PART": "STRING",
        "REMOVE_FROM_SERIAL_NO": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "REMOVE_FROM_LOT_NO": "STRING",
        "CONSTRUCT_TYPE": "STRING",
        "NEW_LOT_NO": "STRING",
        "INSTALL_IN_PART_NO": "STRING",
        "INSTALL_IN_SERIAL_NO": "STRING",
        "INSTALL_IN_LOT_NO": "STRING",
        "INSTALL_AGAINST_PART_NO": "STRING",
        "INSTALL_AGAINST_SERIAL_NO": "STRING",
        "INSTALL_AGAINST_LOT_NO": "STRING",
        "DESIGN_AUTHORITY": "STRING",
        "MANUFACTURER_CODE": "STRING",
        "MANUFACTURER_PART_NO": "STRING",
        "MANUFACTURER_SERIAL_NO": "STRING",
        "MANUFACTURER_LOT_NO": "STRING",
    }
    primary_key_columns = [
        "AS_WORKED_BOM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_AWB_UID_ENTRY_FK", ["UID_ENTRY_NAME"], "SFFND_UID_ENTRY", ["UID_ENTRY_NAME"]),
        DbForeignKey("SFWID_SAWB_ITEM_FK", ["ASGND_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFWID_AS_WORKED_BOM_ITYPE_FK", ["ITEM_TYPE","ITEM_SUBTYPE"], "SFPL_ITEM_TYPE_DEF", ["ITEM_TYPE","ITEM_SUBTYPE"]),
    ]
    refs = [
        "SFWID_STAGING_LOCATION_FK3",
    ]
    def __init__(self, column_value_map):
        self.AS_WORKED_BOM_ID = parse_value(self.schema, column_value_map, "AS_WORKED_BOM_ID")
        "System-generated identifier of the as-worked BOM."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.ASGND_ITEM_ID = parse_value(self.schema, column_value_map, "ASGND_ITEM_ID")
        "Unique, system-generated ID of the given serialized component/part as used in the operation."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.PARENT_ITEM_ID = parse_value(self.schema, column_value_map, "PARENT_ITEM_ID")
        "The unique identifier of the parent part/item on which the component item has been installed."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.PARENT_LOT_NO = parse_value(self.schema, column_value_map, "PARENT_LOT_NO")
        "User-assigned lot number of a given component/part."
        self.PARENT_SERIAL_NO = parse_value(self.schema, column_value_map, "PARENT_SERIAL_NO")
        "User-assigned serial number of the parent component/part."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        "Unique, user-assigned identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "The identifier of the physical location/position on the parent part where the part has been installed."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.PARENT_SERIAL_ID = parse_value(self.schema, column_value_map, "PARENT_SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to the parent component/part."
        self.PARENT_LOT_ID = parse_value(self.schema, column_value_map, "PARENT_LOT_ID")
        "Unique, system-generated identifier of a lot number assigned to the parent component/part."
        self.PART_TITLE = parse_value(self.schema, column_value_map, "PART_TITLE")
        "A descriptive title or name of the part."
        self.PART_QTY = parse_value(self.schema, column_value_map, "PART_QTY")
        "Number of components/parts."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.SPOOL_NO = parse_value(self.schema, column_value_map, "SPOOL_NO")
        "Number of the associated spool."
        self.EXP_DATE = parse_value(self.schema, column_value_map, "EXP_DATE")
        "The expiration date of the component part if perishable."
        self.REMOVE_FLAG = parse_value(self.schema, column_value_map, "REMOVE_FLAG")
        "A flag (Y/N) indicating whether a currently used component/part should be or was removed."
        self.PART_ACTION = parse_value(self.schema, column_value_map, "PART_ACTION")
        "The intended action of the component/part, i.e., USE or REMOVE."
        self.PARENT_PART_NO = parse_value(self.schema, column_value_map, "PARENT_PART_NO")
        "The part number of the parent part."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Additional comments about a given as-worked BOM."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Unit of Measure for the component/part."
        self.ALLOC_QTY_FLAG = parse_value(self.schema, column_value_map, "ALLOC_QTY_FLAG")
        "In the case of a split involving a non-serialized part, a flag (Y/N) indicating whether the component has been allocated to the split order."
        self.REMOVE_WITHOUT_INSTALL_FLAG = parse_value(self.schema, column_value_map, "REMOVE_WITHOUT_INSTALL_FLAG")
        "In the case of a split involving a non-serialized part, a flag (Y/N) indicating whether the component has undergone an unplanned removal."
        self.OPT_DC1_VALUE = parse_value(self.schema, column_value_map, "OPT_DC1_VALUE")
        "For the given item/part, value of user-configured data collection 1."
        self.OPT_DC2_VALUE = parse_value(self.schema, column_value_map, "OPT_DC2_VALUE")
        "For the given item/part, value of user-configured data collection 2."
        self.OPT_DC3_VALUE = parse_value(self.schema, column_value_map, "OPT_DC3_VALUE")
        "For the given item/part, value of user-configured data collection 3."
        self.OPT_DC4_VALUE = parse_value(self.schema, column_value_map, "OPT_DC4_VALUE")
        "For the given item/part, value of user-configured data collection 4."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.PLND_ITEM_ID = parse_value(self.schema, column_value_map, "PLND_ITEM_ID")
        "Unique, system-generated ID of the given component/part."
        self.UCF_ASWRKD_BOM_VCH1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH1")
        self.UCF_ASWRKD_BOM_VCH2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH2")
        self.UCF_ASWRKD_BOM_VCH3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH3")
        self.UCF_ASWRKD_BOM_VCH4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH4")
        self.UCF_ASWRKD_BOM_VCH5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH5")
        self.UCF_ASWRKD_BOM_VCH6 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH6")
        self.UCF_ASWRKD_BOM_VCH7 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH7")
        self.UCF_ASWRKD_BOM_VCH8 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH8")
        self.UCF_ASWRKD_BOM_VCH9 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH9")
        self.UCF_ASWRKD_BOM_VCH10 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH10")
        self.UCF_ASWRKD_BOM_VCH11 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH11")
        self.UCF_ASWRKD_BOM_VCH12 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH12")
        self.UCF_ASWRKD_BOM_VCH13 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH13")
        self.UCF_ASWRKD_BOM_VCH14 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH14")
        self.UCF_ASWRKD_BOM_VCH15 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH15")
        self.UCF_ASWRKD_BOM_NUM1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_NUM1")
        self.UCF_ASWRKD_BOM_NUM2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_NUM2")
        self.UCF_ASWRKD_BOM_NUM3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_NUM3")
        self.UCF_ASWRKD_BOM_NUM4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_NUM4")
        self.UCF_ASWRKD_BOM_NUM5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_NUM5")
        self.UCF_ASWRKD_BOM_DATE1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_DATE1")
        self.UCF_ASWRKD_BOM_DATE2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_DATE2")
        self.UCF_ASWRKD_BOM_DATE3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_DATE3")
        self.UCF_ASWRKD_BOM_DATE4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_DATE4")
        self.UCF_ASWRKD_BOM_DATE5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_DATE5")
        self.UCF_ASWRKD_BOM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_FLAG1")
        self.UCF_ASWRKD_BOM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_FLAG2")
        self.UCF_ASWRKD_BOM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_FLAG3")
        self.UCF_ASWRKD_BOM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_FLAG4")
        self.UCF_ASWRKD_BOM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_FLAG5")
        self.UCF_ASWRKD_BOM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH255_1")
        self.UCF_ASWRKD_BOM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH255_2")
        self.UCF_ASWRKD_BOM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH255_3")
        self.UCF_ASWRKD_BOM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH4000_1")
        self.UCF_ASWRKD_BOM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH4000_2")
        self.REPLACEMENT_ACTION = parse_value(self.schema, column_value_map, "REPLACEMENT_ACTION")
        self.NEW_SERIAL_NO = parse_value(self.schema, column_value_map, "NEW_SERIAL_NO")
        self.REF_DOC = parse_value(self.schema, column_value_map, "REF_DOC")
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.UID_COMPOSITE = parse_value(self.schema, column_value_map, "UID_COMPOSITE")
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.UID_LABEL = parse_value(self.schema, column_value_map, "UID_LABEL")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.REMOVE_FROM_PART = parse_value(self.schema, column_value_map, "REMOVE_FROM_PART")
        self.REMOVE_FROM_SERIAL_NO = parse_value(self.schema, column_value_map, "REMOVE_FROM_SERIAL_NO")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.REMOVE_FROM_LOT_NO = parse_value(self.schema, column_value_map, "REMOVE_FROM_LOT_NO")
        self.CONSTRUCT_TYPE = parse_value(self.schema, column_value_map, "CONSTRUCT_TYPE")
        self.NEW_LOT_NO = parse_value(self.schema, column_value_map, "NEW_LOT_NO")
        "New Lot No for Part Replacement Action."
        self.INSTALL_IN_PART_NO = parse_value(self.schema, column_value_map, "INSTALL_IN_PART_NO")
        "this is parent part number where actually this component part is going to be installed."
        self.INSTALL_IN_SERIAL_NO = parse_value(self.schema, column_value_map, "INSTALL_IN_SERIAL_NO")
        "this is parent serial number where actually this component part is going to be installed."
        self.INSTALL_IN_LOT_NO = parse_value(self.schema, column_value_map, "INSTALL_IN_LOT_NO")
        "this is parent lot number where actually this component part is going to be installed."
        self.INSTALL_AGAINST_PART_NO = parse_value(self.schema, column_value_map, "INSTALL_AGAINST_PART_NO")
        "this is component part number which is replaced by current component part number."
        self.INSTALL_AGAINST_SERIAL_NO = parse_value(self.schema, column_value_map, "INSTALL_AGAINST_SERIAL_NO")
        "this is component part serial number which is replaced by current component serial number."
        self.INSTALL_AGAINST_LOT_NO = parse_value(self.schema, column_value_map, "INSTALL_AGAINST_LOT_NO")
        "this is component part lot number which is replaced by current component lot number."
        self.DESIGN_AUTHORITY = parse_value(self.schema, column_value_map, "DESIGN_AUTHORITY")
        self.MANUFACTURER_CODE = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE")
        self.MANUFACTURER_PART_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_PART_NO")
        self.MANUFACTURER_SERIAL_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_SERIAL_NO")
        self.MANUFACTURER_LOT_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_LOT_NO")
        self.SFWID_STAGING_LOCATION_FK3 = []

class SFFND_SHIP_TO_ID_DEF:
    schema = {
        "CUST_ID": "STRING",
        "SHIP_TO_CODE": "STRING",
        "DESCRIPTION": "STRING",
        "OBSOLETE_FLAG": "STRING",
        "ADDRESS_LINE_1": "STRING",
        "ADDRESS_LINE_2": "STRING",
        "CITY": "STRING",
        "STATE": "STRING",
        "POSTAL_CODE": "STRING",
        "COUNTRY_CODE": "STRING",
        "UCF_SHIP_TO_ID_DATE1": "STRING",
        "UCF_SHIP_TO_ID_DATE2": "STRING",
        "UCF_SHIP_TO_ID_NUM1": "NUMBER",
        "UCF_SHIP_TO_ID_NUM2": "NUMBER",
        "UCF_SHIP_TO_ID_NUM3": "NUMBER",
        "UCF_SHIP_TO_ID_FLAG1": "STRING",
        "UCF_SHIP_TO_ID_FLAG2": "STRING",
        "UCF_SHIP_TO_ID_FLAG3": "STRING",
        "UCF_SHIP_TO_ID_VCH1": "STRING",
        "UCF_SHIP_TO_ID_VCH2": "STRING",
        "UCF_SHIP_TO_ID_VCH3": "STRING",
        "UCF_SHIP_TO_ID_VCH4": "STRING",
        "UCF_SHIP_TO_ID_VCH5": "STRING",
        "UCF_SHIP_TO_ID_VCH255_1": "STRING",
        "UCF_SHIP_TO_ID_VCH255_2": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CUST_ID",
        "SHIP_TO_CODE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_SHIP_TO_ID_DEF_FK1", ["CUST_ID"], "SFFND_CUST_ID_DEF", ["CUST_ID"]),
        DbForeignKey("SFFND_SHIP_TO_ID_DEF_FK2", ["COUNTRY_CODE"], "SFFND_COUNTRY_CODE_DEF", ["COUNTRY_CODE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CUST_ID = parse_value(self.schema, column_value_map, "CUST_ID")
        "Unique identifier of a specific customer."
        self.SHIP_TO_CODE = parse_value(self.schema, column_value_map, "SHIP_TO_CODE")
        "Sold to Party Code(SP)"
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        "Descriptive Name"
        self.OBSOLETE_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_FLAG")
        "If Y then it will Obsoleted"
        self.ADDRESS_LINE_1 = parse_value(self.schema, column_value_map, "ADDRESS_LINE_1")
        "Street address Line 1. (Includes house number and street or PO delivery)"
        self.ADDRESS_LINE_2 = parse_value(self.schema, column_value_map, "ADDRESS_LINE_2")
        "Street address Line 2."
        self.CITY = parse_value(self.schema, column_value_map, "CITY")
        "Name of the City for postal delivery or shipping address"
        self.STATE = parse_value(self.schema, column_value_map, "STATE")
        "Name of the state or region for shipping or postal delivery (state code in US, Canada, Australia; region or not used in Europe)"
        self.POSTAL_CODE = parse_value(self.schema, column_value_map, "POSTAL_CODE")
        "Postal code (Zip code) for the Customer address"
        self.COUNTRY_CODE = parse_value(self.schema, column_value_map, "COUNTRY_CODE")
        "ISO 3166 Alpha-3 code for Country - look up from SFFND_COUNTRY_CODE_DEF"
        self.UCF_SHIP_TO_ID_DATE1 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SHIP_TO_ID_DATE2 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SHIP_TO_ID_NUM1 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_SHIP_TO_ID_NUM2 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_SHIP_TO_ID_NUM3 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_SHIP_TO_ID_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SHIP_TO_ID_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SHIP_TO_ID_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SHIP_TO_ID_VCH1 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SHIP_TO_ID_VCH2 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SHIP_TO_ID_VCH3 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SHIP_TO_ID_VCH4 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SHIP_TO_ID_VCH5 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SHIP_TO_ID_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SHIP_TO_ID_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SHIP_TO_ID_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_TASK_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "TASK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "TASK_TYPE": "STRING",
        "QUEUE_TYPE": "STRING",
        "QUEUE_ID": "STRING",
        "PRIORITY": "STRING",
        "ASSIGNED_TO_USERID": "STRING",
        "STATUS": "STRING",
        "SCH_START_DATE": "STRING",
        "SCH_END_DATE": "STRING",
        "SCH_DAYS": "NUMBER",
        "REV_START_DATE": "STRING",
        "REV_END_DATE": "STRING",
        "REV_DAYS": "NUMBER",
        "NOTES": "STRING",
        "AUTO_COMPLETE_TASK_FLAG": "STRING",
        "ASSIGNED_FLAG": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.TASK_ID = parse_value(self.schema, column_value_map, "TASK_ID")
        "The unique system-generated identifier of a task."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TASK_TYPE = parse_value(self.schema, column_value_map, "TASK_TYPE")
        "The type or class of task (e.g., DISC_WO_MR, DISC_WO_PR, or PLG_AUTH)."
        self.QUEUE_TYPE = parse_value(self.schema, column_value_map, "QUEUE_TYPE")
        "Type or classification of task queue, e.g., PLG AUTHORING, DISC_INITIATION."
        self.QUEUE_ID = parse_value(self.schema, column_value_map, "QUEUE_ID")
        "The system-generated identifier of a given queue type."
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        "The priority of the task."
        self.ASSIGNED_TO_USERID = parse_value(self.schema, column_value_map, "ASSIGNED_TO_USERID")
        "Identifier of the Solumina user the task is assigned to."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The current status of the task, e.g., IN QUEUE, ACTIVE, ACCEPT, or REJECT-IE."
        self.SCH_START_DATE = parse_value(self.schema, column_value_map, "SCH_START_DATE")
        "The date the task is scheduled to start."
        self.SCH_END_DATE = parse_value(self.schema, column_value_map, "SCH_END_DATE")
        "The date the task is scheduled to end."
        self.SCH_DAYS = parse_value(self.schema, column_value_map, "SCH_DAYS")
        "The scheduled duration of the task in days."
        self.REV_START_DATE = parse_value(self.schema, column_value_map, "REV_START_DATE")
        "The revised start date of the task."
        self.REV_END_DATE = parse_value(self.schema, column_value_map, "REV_END_DATE")
        "The revised completion date of the task."
        self.REV_DAYS = parse_value(self.schema, column_value_map, "REV_DAYS")
        "The revised duration of the task."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about the task."
        self.AUTO_COMPLETE_TASK_FLAG = parse_value(self.schema, column_value_map, "AUTO_COMPLETE_TASK_FLAG")
        "Flag to find the task internally/automatically completed."
        self.ASSIGNED_FLAG = parse_value(self.schema, column_value_map, "ASSIGNED_FLAG")
        "Flag to identify whether user has claimed or been assigned Task. Possible value 'A' or 'C'."

class SFFND_COUNTRY_CODE_DEF:
    schema = {
        "COUNTRY_CODE": "STRING",
        "COUNTRY_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
    }
    primary_key_columns = [
        "COUNTRY_CODE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_CUST_ID_DEF_FK",
        "SFFND_SHIP_TO_ID_DEF_FK2",
    ]
    def __init__(self, column_value_map):
        self.COUNTRY_CODE = parse_value(self.schema, column_value_map, "COUNTRY_CODE")
        "3 Digit ISO 3166 Alpha-3 Code - Unique Key"
        self.COUNTRY_NAME = parse_value(self.schema, column_value_map, "COUNTRY_NAME")
        "ISO 3166 Short Name of Country in English"
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.SFFND_CUST_ID_DEF_FK = []
        self.SFFND_SHIP_TO_ID_DEF_FK2 = []

class SFCORE_TEMPLATE_TYPE_DEF:
    schema = {
        "TEMPLATE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "MAX_LENGTH_IN_CHARS": "NUMBER",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "DESCRIPTION": "STRING",
    }
    primary_key_columns = [
        "TEMPLATE_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFCORE_TEMPLATE_DEF_FK1",
    ]
    def __init__(self, column_value_map):
        self.TEMPLATE_TYPE = parse_value(self.schema, column_value_map, "TEMPLATE_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.MAX_LENGTH_IN_CHARS = parse_value(self.schema, column_value_map, "MAX_LENGTH_IN_CHARS")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.SFCORE_TEMPLATE_DEF_FK1 = []

class SFFND_RISK_LIKELIHOOD_RAT_DEF:
    schema = {
        "RISK_LIKELIHOOD_RAT_ID": "STRING",
        "RISK_LIKELIHOOD_RAT_DESC": "STRING",
        "RISK_LIKELIHOOD_RAT_SCORE": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "RISK_LIKELIHOOD_RAT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_CA_REQUEST_FK5",
        "SFQA_CA_DESC_RISK_LIKLIHOOD_FK",
    ]
    def __init__(self, column_value_map):
        self.RISK_LIKELIHOOD_RAT_ID = parse_value(self.schema, column_value_map, "RISK_LIKELIHOOD_RAT_ID")
        self.RISK_LIKELIHOOD_RAT_DESC = parse_value(self.schema, column_value_map, "RISK_LIKELIHOOD_RAT_DESC")
        self.RISK_LIKELIHOOD_RAT_SCORE = parse_value(self.schema, column_value_map, "RISK_LIKELIHOOD_RAT_SCORE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFQA_CA_REQUEST_FK5 = []
        self.SFQA_CA_DESC_RISK_LIKLIHOOD_FK = []

class SFOR_SFWID_ORDER_SUBJECT:
    schema = {
        "SUBJECT_NO": "NUMBER",
        "ORDER_ID": "STRING",
        "SUBJECT_REV": "NUMBER",
        "TITLE": "STRING",
        "AUTHORITY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "INCLUDED_FLAG": "STRING",
        "STANDARD_FLAG": "STRING",
        "SUBJECT_STATUS": "STRING",
        "ALT_COUNT": "NUMBER",
        "ALT_ID": "STRING",
        "NOTES": "STRING",
        "UCF_ORDER_SUBJECT_VCH1": "STRING",
        "UCF_ORDER_SUBJECT_VCH2": "STRING",
        "UCF_ORDER_SUBJECT_VCH3": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "UCF_ORDER_SUBJECT_VCH4": "STRING",
        "UCF_ORDER_SUBJECT_VCH5": "STRING",
        "UCF_ORDER_SUBJECT_VCH6": "STRING",
        "UCF_ORDER_SUBJECT_VCH7": "STRING",
        "UCF_ORDER_SUBJECT_VCH8": "STRING",
        "UCF_ORDER_SUBJECT_VCH9": "STRING",
        "UCF_ORDER_SUBJECT_VCH10": "STRING",
        "UCF_ORDER_SUBJECT_VCH11": "STRING",
        "UCF_ORDER_SUBJECT_VCH12": "STRING",
        "UCF_ORDER_SUBJECT_VCH13": "STRING",
        "UCF_ORDER_SUBJECT_VCH14": "STRING",
        "UCF_ORDER_SUBJECT_VCH15": "STRING",
        "UCF_ORDER_SUBJECT_NUM1": "NUMBER",
        "UCF_ORDER_SUBJECT_NUM2": "NUMBER",
        "UCF_ORDER_SUBJECT_NUM3": "NUMBER",
        "UCF_ORDER_SUBJECT_NUM4": "NUMBER",
        "UCF_ORDER_SUBJECT_NUM5": "NUMBER",
        "UCF_ORDER_SUBJECT_FLAG1": "STRING",
        "UCF_ORDER_SUBJECT_FLAG2": "STRING",
        "UCF_ORDER_SUBJECT_FLAG3": "STRING",
        "UCF_ORDER_SUBJECT_FLAG4": "STRING",
        "UCF_ORDER_SUBJECT_FLAG5": "STRING",
        "UCF_ORDER_SUBJECT_DATE1": "STRING",
        "UCF_ORDER_SUBJECT_DATE2": "STRING",
        "UCF_ORDER_SUBJECT_DATE3": "STRING",
        "UCF_ORDER_SUBJECT_DATE4": "STRING",
        "UCF_ORDER_SUBJECT_DATE5": "DATE",
    }
    primary_key_columns = [
        "ORDER_ID",
        "SUBJECT_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFOR_SFWID_ORDER_SUB_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFOR_SFWID_ORDER_SUB_ORD_FK", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFOR_SFWID_ORDER_SUBJECT_FK1", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
    ]
    refs = [
        "SFOR_SFWID_OPER_SUB_ORDSUB_FK",
    ]
    def __init__(self, column_value_map):
        self.SUBJECT_NO = parse_value(self.schema, column_value_map, "SUBJECT_NO")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.SUBJECT_REV = parse_value(self.schema, column_value_map, "SUBJECT_REV")
        self.TITLE = parse_value(self.schema, column_value_map, "TITLE")
        "Title or name of the given operation."
        self.AUTHORITY = parse_value(self.schema, column_value_map, "AUTHORITY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.INCLUDED_FLAG = parse_value(self.schema, column_value_map, "INCLUDED_FLAG")
        self.STANDARD_FLAG = parse_value(self.schema, column_value_map, "STANDARD_FLAG")
        self.SUBJECT_STATUS = parse_value(self.schema, column_value_map, "SUBJECT_STATUS")
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.UCF_ORDER_SUBJECT_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH3")
        "User-configurable field for VARCHAR data type."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        self.UCF_ORDER_SUBJECT_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_SUBJECT_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_SUBJECT_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_SUBJECT_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_SUBJECT_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_SUBJECT_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_SUBJECT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_SUBJECT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_SUBJECT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_SUBJECT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_SUBJECT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_SUBJECT_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_SUBJECT_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_SUBJECT_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_SUBJECT_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_SUBJECT_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_SUBJECT_DATE5")
        "User-configurable field for DATE data type."
        self.SFOR_SFWID_OPER_SUB_ORDSUB_FK = []

class SFWID_GROUP_JOB:
    schema = {
        "GROUP_JOB_NO": "STRING",
        "GROUP_JOB_STATUS": "STRING",
        "STDOPER_OBJECT_ID": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SECURITY_GROUP": "STRING",
    }
    primary_key_columns = [
        "GROUP_JOB_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_GROUP_JOB_FK1", ["STDOPER_OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
        "SFWID_USER_GRP_JOB_CHG_ACK_FK2",
        "SFFND_USER_ACTIVITY_FK3",
        "SFWID_HOLDS_GROUP_JOB_FK",
        "SFQA_DISC_ITEM_FK22",
        "SFWID_USER_GRP_JOB_LST_POS_FK1",
        "SFWID_GROUP_JOB_SEC_GRP_FK1",
        "SFWID_GROUP_JOB_SERIAL_FK3",
    ]
    def __init__(self, column_value_map):
        self.GROUP_JOB_NO = parse_value(self.schema, column_value_map, "GROUP_JOB_NO")
        "Unique number representing the batched standard operation."
        self.GROUP_JOB_STATUS = parse_value(self.schema, column_value_map, "GROUP_JOB_STATUS")
        "Status of Job group used for batched standard operation."
        self.STDOPER_OBJECT_ID = parse_value(self.schema, column_value_map, "STDOPER_OBJECT_ID")
        "Standard Operation object associated with given group job."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "Starting date of Job Group."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "Ending date of Job Group."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        "Security group(s) assigned to group job."
        self.SFWID_USER_GRP_JOB_CHG_ACK_FK2 = []
        self.SFFND_USER_ACTIVITY_FK3 = []
        self.SFWID_HOLDS_GROUP_JOB_FK = []
        self.SFQA_DISC_ITEM_FK22 = []
        self.SFWID_USER_GRP_JOB_LST_POS_FK1 = []
        self.SFWID_GROUP_JOB_SEC_GRP_FK1 = []
        self.SFWID_GROUP_JOB_SERIAL_FK3 = []

class SFWID_ORDER_TEXT_SUBVAR_ALT:
    schema = {
        "ORDER_TEXT_SUBVAR_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ORDER_TEXT_SUBVAR_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_TX_SUBVR_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_TEXT_SUBVAR_ALT = parse_value(self.schema, column_value_map, "ORDER_TEXT_SUBVAR_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_LAST_FILTER_CONTEXT:
    schema = {
        "CONTEXT_ID": "STRING",
        "ORDER_ID": "STRING",
        "USERID": "STRING",
        "LAST_FILTER": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CONTEXT_ID",
        "ORDER_ID",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_LAST_FILTER_CONTEXT_FK1", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONTEXT_ID = parse_value(self.schema, column_value_map, "CONTEXT_ID")
        "Value of variable @ContextId. Usually it contains [select source name - select SQL ID]."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.LAST_FILTER = parse_value(self.schema, column_value_map, "LAST_FILTER")
        "Value of last filter applied on the grid."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFSQA_INSP_ORDER_HOLDS:
    schema = {
        "HOLD_ID": "STRING",
        "INSP_ORDER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "INSP_STEP_ID": "STRING",
        "ITEM_ID": "STRING",
        "HOLD_TYPE": "STRING",
        "HOLD_STATUS": "STRING",
        "STOP_TYPE": "STRING",
        "SCHED_END_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "DATE_CREATED": "STRING",
        "QTY_SHORT": "NUMBER",
        "NOTES": "STRING",
        "RELATED_INSP_ORDER_ID": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "RELATED_ORDER_ID": "STRING",
        "INSP_ITEM_ID": "STRING",
        "REQUEST_LIEN_REASON": "STRING",
        "HOLD_REF1": "STRING",
        "SUPPLIER_CODE": "STRING",
        "CA_ID": "STRING",
    }
    primary_key_columns = [
        "HOLD_ID",
        "INSP_ORDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_ORDER_HOLDS_FK6", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_HOLDS_FK4", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_HOLDS_FK5", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
        DbForeignKey("SFSQA_IDP_HOLDS_RELATED_IDP_ID", ["RELATED_INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_HOLDS_FK3", ["INSP_ORDER_ID","INSP_STEP_ID"], "SFSQA_INSP_ORDER_INSP_STEPS", ["INSP_ORDER_ID","INSP_STEP_ID"]),
        DbForeignKey("SFSQA_IDP_HOLDS_HOLDTYPE_FK", ["HOLD_TYPE"], "SFSQA_HOLD_TYPE_DEF", ["HOLD_TYPE"]),
    ]
    refs = [
        "SFSQA_IO_HOLD_SRLS_FK1",
    ]
    def __init__(self, column_value_map):
        self.HOLD_ID = parse_value(self.schema, column_value_map, "HOLD_ID")
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.HOLD_TYPE = parse_value(self.schema, column_value_map, "HOLD_TYPE")
        self.HOLD_STATUS = parse_value(self.schema, column_value_map, "HOLD_STATUS")
        self.STOP_TYPE = parse_value(self.schema, column_value_map, "STOP_TYPE")
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        self.DATE_CREATED = parse_value(self.schema, column_value_map, "DATE_CREATED")
        self.QTY_SHORT = parse_value(self.schema, column_value_map, "QTY_SHORT")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.RELATED_INSP_ORDER_ID = parse_value(self.schema, column_value_map, "RELATED_INSP_ORDER_ID")
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        self.RELATED_ORDER_ID = parse_value(self.schema, column_value_map, "RELATED_ORDER_ID")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.REQUEST_LIEN_REASON = parse_value(self.schema, column_value_map, "REQUEST_LIEN_REASON")
        self.HOLD_REF1 = parse_value(self.schema, column_value_map, "HOLD_REF1")
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.SFSQA_IO_HOLD_SRLS_FK1 = []

class SFWID_OPER_TOOL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
        "STEP_NO": "STRING",
        "OPER_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "TOOL_TITLE": "STRING",
        "TOOL_NOTES": "STRING",
        "SERIAL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "QTY": "NUMBER",
        "MANUFACTURER": "STRING",
        "TOOL_MODEL": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "HIST_ALT_ID": "STRING",
        "UCF_PLAN_TOOL_VCH1": "STRING",
        "UCF_PLAN_TOOL_VCH2": "STRING",
        "UCF_PLAN_TOOL_VCH3": "STRING",
        "UCF_PLAN_TOOL_FLAG1": "STRING",
        "UCF_PLAN_TOOL_DATE1": "STRING",
        "UCF_PLAN_TOOL_NUM1": "NUMBER",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "SUSPECT_FLAG": "STRING",
        "UCF_PLAN_TOOL_VCH4": "STRING",
        "UCF_PLAN_TOOL_VCH5": "STRING",
        "UCF_PLAN_TOOL_VCH6": "STRING",
        "UCF_PLAN_TOOL_VCH7": "STRING",
        "UCF_PLAN_TOOL_VCH8": "STRING",
        "UCF_PLAN_TOOL_VCH9": "STRING",
        "UCF_PLAN_TOOL_VCH10": "STRING",
        "UCF_PLAN_TOOL_VCH11": "STRING",
        "UCF_PLAN_TOOL_VCH12": "STRING",
        "UCF_PLAN_TOOL_VCH13": "STRING",
        "UCF_PLAN_TOOL_VCH14": "STRING",
        "UCF_PLAN_TOOL_VCH15": "STRING",
        "UCF_PLAN_TOOL_NUM2": "NUMBER",
        "UCF_PLAN_TOOL_NUM3": "NUMBER",
        "UCF_PLAN_TOOL_NUM4": "NUMBER",
        "UCF_PLAN_TOOL_NUM5": "NUMBER",
        "UCF_PLAN_TOOL_DATE2": "STRING",
        "UCF_PLAN_TOOL_DATE3": "STRING",
        "UCF_PLAN_TOOL_DATE4": "STRING",
        "UCF_PLAN_TOOL_DATE5": "STRING",
        "UCF_PLAN_TOOL_FLAG2": "STRING",
        "UCF_PLAN_TOOL_FLAG3": "STRING",
        "UCF_PLAN_TOOL_FLAG4": "STRING",
        "UCF_PLAN_TOOL_FLAG5": "STRING",
        "UCF_PLAN_TOOL_VCH255_1": "STRING",
        "UCF_PLAN_TOOL_VCH255_2": "STRING",
        "UCF_PLAN_TOOL_VCH255_3": "STRING",
        "UCF_PLAN_TOOL_VCH4000_1": "STRING",
        "UCF_PLAN_TOOL_VCH4000_2": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "IS_TOOL_KITTED": "STRING",
        "SERIAL_KITTED": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "SECURITY_GROUP": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "OVERUSE_FLAG": "STRING",
        "TOOL_ID": "STRING",
        "BOM_COMP_TOOL_ID": "STRING",
        "EXTERNAL_FLAG": "STRING",
        "TEMPLATE_NO": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "BOM_LINE_NO": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "Identifying number of the tool required for the given operation."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of the given tool."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TOOL_TITLE = parse_value(self.schema, column_value_map, "TOOL_TITLE")
        "Title or name of the given tool."
        self.TOOL_NOTES = parse_value(self.schema, column_value_map, "TOOL_NOTES")
        "Additional information about the tool."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the tool is or should be tracked by serial number."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the tool is or should be tracked by expiration date."
        self.QTY = parse_value(self.schema, column_value_map, "QTY")
        "The quantity of a given tool required for a given operation."
        self.MANUFACTURER = parse_value(self.schema, column_value_map, "MANUFACTURER")
        "The manufacturer/maker of the given tool."
        self.TOOL_MODEL = parse_value(self.schema, column_value_map, "TOOL_MODEL")
        "The manufacturer's model of the given tool."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.UCF_PLAN_TOOL_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_TOOL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_TOOL_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_TOOL_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM1")
        "User-configurable field for NUM data type."
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.UCF_PLAN_TOOL_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH4")
        self.UCF_PLAN_TOOL_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH5")
        self.UCF_PLAN_TOOL_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH6")
        self.UCF_PLAN_TOOL_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH7")
        self.UCF_PLAN_TOOL_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH8")
        self.UCF_PLAN_TOOL_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH9")
        self.UCF_PLAN_TOOL_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH10")
        self.UCF_PLAN_TOOL_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH11")
        self.UCF_PLAN_TOOL_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH12")
        self.UCF_PLAN_TOOL_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH13")
        self.UCF_PLAN_TOOL_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH14")
        self.UCF_PLAN_TOOL_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH15")
        self.UCF_PLAN_TOOL_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM2")
        self.UCF_PLAN_TOOL_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM3")
        self.UCF_PLAN_TOOL_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM4")
        self.UCF_PLAN_TOOL_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_NUM5")
        self.UCF_PLAN_TOOL_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE2")
        self.UCF_PLAN_TOOL_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE3")
        self.UCF_PLAN_TOOL_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE4")
        self.UCF_PLAN_TOOL_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_DATE5")
        self.UCF_PLAN_TOOL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG2")
        self.UCF_PLAN_TOOL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG3")
        self.UCF_PLAN_TOOL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG4")
        self.UCF_PLAN_TOOL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_FLAG5")
        self.UCF_PLAN_TOOL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH255_1")
        self.UCF_PLAN_TOOL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH255_2")
        self.UCF_PLAN_TOOL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH255_3")
        self.UCF_PLAN_TOOL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH4000_1")
        self.UCF_PLAN_TOOL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_TOOL_VCH4000_2")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.IS_TOOL_KITTED = parse_value(self.schema, column_value_map, "IS_TOOL_KITTED")
        self.SERIAL_KITTED = parse_value(self.schema, column_value_map, "SERIAL_KITTED")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.OVERUSE_FLAG = parse_value(self.schema, column_value_map, "OVERUSE_FLAG")
        self.TOOL_ID = parse_value(self.schema, column_value_map, "TOOL_ID")
        "Unique, system-generated identifier of the tool."
        self.BOM_COMP_TOOL_ID = parse_value(self.schema, column_value_map, "BOM_COMP_TOOL_ID")
        "Determines if tool is authored from BOM or not. Contains value if tool is authored from BOM."
        self.EXTERNAL_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_FLAG")
        self.TEMPLATE_NO = parse_value(self.schema, column_value_map, "TEMPLATE_NO")
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        "EFF Group Id"
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        "Next Higher Assembly given by User"

class SFFND_USER:
    schema = {
        "USERID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "LAST_NAME": "STRING",
        "FIRST_NAME": "STRING",
        "MIDDLE_NAME": "STRING",
        "FULL_NAME": "STRING",
        "NAME_SUFFIX": "STRING",
        "SHIFT": "STRING",
        "PAYROLL_ID": "STRING",
        "UCF_USER_VCH1": "STRING",
        "UCF_USER_VCH2": "STRING",
        "UCF_USER_VCH3": "STRING",
        "UCF_USER_VCH4": "STRING",
        "WC_INFO": "STRING",
        "USER_CLASS": "STRING",
        "EMAIL_ADDRESS": "STRING",
        "UCF_USER_VCH5": "STRING",
        "UCF_USER_VCH6": "STRING",
        "UCF_USER_VCH7": "STRING",
        "UCF_USER_VCH8": "STRING",
        "UCF_USER_VCH9": "STRING",
        "UCF_USER_VCH10": "STRING",
        "UCF_USER_VCH11": "STRING",
        "UCF_USER_VCH12": "STRING",
        "UCF_USER_VCH13": "STRING",
        "UCF_USER_VCH14": "STRING",
        "UCF_USER_VCH15": "STRING",
        "UCF_USER_NUM1": "NUMBER",
        "UCF_USER_NUM2": "NUMBER",
        "UCF_USER_NUM3": "NUMBER",
        "UCF_USER_NUM4": "NUMBER",
        "UCF_USER_NUM5": "NUMBER",
        "UCF_USER_DATE1": "STRING",
        "UCF_USER_DATE2": "STRING",
        "UCF_USER_DATE3": "STRING",
        "UCF_USER_DATE4": "STRING",
        "UCF_USER_DATE5": "STRING",
        "UCF_USER_FLAG1": "STRING",
        "UCF_USER_FLAG2": "STRING",
        "UCF_USER_FLAG3": "STRING",
        "UCF_USER_FLAG4": "STRING",
        "UCF_USER_FLAG5": "STRING",
        "INCLUDE_ALL_SUPPLIERS": "STRING",
        "CITIZENSHIP_COUNTRY": "STRING",
        "FOREIGN_NATIONAL_FLAG": "STRING",
        "GC_EXPIRATION_DATE": "STRING",
        "USER_TYPE": "STRING",
        "LAST_EYE_EXAM_DATE": "STRING",
        "CURRENT_LEVEL": "NUMBER",
        "MAX_LEVEL": "NUMBER",
        "LEVEL_START_DATE": "STRING",
        "STATUS": "STRING",
        "UNDER_REVIEW_FLAG": "STRING",
        "PRODUCTION_COUNT": "NUMBER",
        "PRODUCTION_RATE": "NUMBER",
        "OI_NO_OF_UNITS": "NUMBER",
        "OI_NO_OF_DATA_COLLECTIONS": "NUMBER",
        "NO_OF_REJECTS": "NUMBER",
        "LAST_ACTIVITY_DATE": "STRING",
        "LAST_DECERTIFICATION_DATE": "STRING",
        "NOTES": "STRING",
        "LEVEL_UPDT_USERID": "STRING",
        "LEVEL_TIME_STAMP": "STRING",
        "OI_START_DATE": "STRING",
        "OI_STATUS": "STRING",
        "OI_NOTES": "STRING",
        "OI_UPDT_USERID": "STRING",
        "OI_TIME_STAMP": "STRING",
        "LAST_LEVEL_STATUS_CHG_DATE": "STRING",
        "LOCATION_ID": "STRING",
        "DEPARTMENT_ID": "STRING",
        "CENTER_ID": "STRING",
        "UCF_USER_VCH255_1": "STRING",
        "UCF_USER_VCH255_2": "STRING",
        "UCF_USER_VCH255_3": "STRING",
        "UCF_USER_VCH4000_1": "STRING",
        "UCF_USER_VCH4000_2": "STRING",
        "LABOR_TYPE": "STRING",
        "USER_DEFINITION": "STRING",
        "USER_LOGIN_ATTEMPT": "NUMBER",
        "MI_USER_FLAG": "STRING",
        "UUID": "STRING",
        "EXTERNAL_ID": "STRING",
    }
    primary_key_columns = [
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_USER_MAX_LEVEL_FK", ["MAX_LEVEL"], "SFFND_AUDIT_LEVEL_DEF", ["AUDIT_LEVEL"]),
        DbForeignKey("SFFND_USER_USER_CLASS_FK", ["USER_CLASS"], "SFFND_USER_CLASS_DEF", ["USER_CLASS"]),
        DbForeignKey("SFFND_USER_CENTER_FK", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFFND_USER_CUR_LEVEL_FK", ["CURRENT_LEVEL"], "SFFND_AUDIT_LEVEL_DEF", ["AUDIT_LEVEL"]),
        DbForeignKey("SFFND_USER_USERTYPE_FK", ["USER_TYPE"], "SFCORE_USER_TYPE_DEF", ["USER_TYPE"]),
        DbForeignKey("SFFND_USER_DEPT_FK", ["LOCATION_ID","DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFFND_USER_LABOR_TYPE_FK", ["LABOR_TYPE"], "SFFND_LABOR_TYPE_DEF", ["LABOR_TYPE"]),
        DbForeignKey("SFFND_USER_LOC_FK", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
    ]
    refs = [
        "SFFND_USER_PROGRAM_USER_FK",
        "SFFND_ALERT_USER_XREF_FK1",
        "SFFND_USRCRT_USERS_FK",
        "SFFND_USER_CERT_PRGM_USER_FK",
        "SFSQA_PO_LINE_FK6",
        "SFWID_USER_OPER_CHG_ACK_FK3",
        "SFFND_USER_SKILL_USER_FK",
        "SFQA_CA_ACTION_ITEM_DESC_FK5",
        "SFQA_CA_ACTION_ITEM_DESC_FK4",
        "SFSQA_IDP_PS_NOTE_OWNER_FK",
        "SFWID_USER_OPER_DEV_ACK_FK3",
        "SFCORE_CONCURRENT_USER_DTL_FK2",
        "SFWID_USER_GRP_JOB_CHG_ACK_FK3",
        "SFFND_TOOL_SERIAL_DEF_FK1",
        "SFSQA_INSP_ORDER_DESC_FK7",
        "SFSQA_INSP_ORDER_DESC_FK8",
        "SFSQA_INSP_ORDER_DESC_FK14",
        "SFLTA_JOB_USERID_FK",
        "SFWID_OPER_ASSIGNMENT_FK2",
        "SFFND_USER_WORK_CENTERS_FK1",
        "SFWID_USER_OVER_INSP_UNITS_FK1",
        "SFWID_USER_OPER_LAST_POS_FK2",
        "SFFND_LICENSE_USERS_FK2",
        "SFFND_USER_ACT_SON_USER_FK",
        "SFFND_USER_ACT_SOF_USER_FK",
        "SFQA_CA_REQUEST_FK8",
        "SFQA_CA_DESC_FK10",
        "SFQA_CA_DESC_FK13",
        "SFWID_OPER_CREW_USER_FK",
        "SFFND_USER_OWNGRP_XREF_USER_FK",
        "SFQA_DISC_ITEM_FK38",
        "SFSQA_INSP_ORDER_INSP_STEP_FK4",
        "SFWID_USER_CURRENT_UNITS_FK2",
        "SFQA_CA_TEAM_ASSIGNMENT_FK2",
        "SFPL_PWP_DESC_FK3",
        "SFWID_USER_GRP_JOB_LST_POS_FK2",
        "SFQA_CA_REQ_AFFECTEDTMASGN_FK1",
        "SFSQA_USER_SUPLR_USER_FK",
        "SFFND_USER_SEC_GROUP_XREF_FK2",
        "SFFND_USER_LOCALE_SETTINGS_FK1",
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.LAST_NAME = parse_value(self.schema, column_value_map, "LAST_NAME")
        "The user's last name."
        self.FIRST_NAME = parse_value(self.schema, column_value_map, "FIRST_NAME")
        "The user's first name."
        self.MIDDLE_NAME = parse_value(self.schema, column_value_map, "MIDDLE_NAME")
        "The user's middle name initial."
        self.FULL_NAME = parse_value(self.schema, column_value_map, "FULL_NAME")
        "The user's full name."
        self.NAME_SUFFIX = parse_value(self.schema, column_value_map, "NAME_SUFFIX")
        "The user's name suffix. For example: Mr., Miss, or Mrs."
        self.SHIFT = parse_value(self.schema, column_value_map, "SHIFT")
        "The shift the user normally works at the work center he/she belongs to."
        self.PAYROLL_ID = parse_value(self.schema, column_value_map, "PAYROLL_ID")
        "The payroll id, normally social security number of the user."
        self.UCF_USER_VCH1 = parse_value(self.schema, column_value_map, "UCF_USER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH2 = parse_value(self.schema, column_value_map, "UCF_USER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH3 = parse_value(self.schema, column_value_map, "UCF_USER_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_USER_VCH4 = parse_value(self.schema, column_value_map, "UCF_USER_VCH4")
        "User-configurable field for VARCHAR data type."
        self.WC_INFO = parse_value(self.schema, column_value_map, "WC_INFO")
        "Denormalized concatenated work center information used to greatly enhance certain dispatch list(s) performance."
        self.USER_CLASS = parse_value(self.schema, column_value_map, "USER_CLASS")
        self.EMAIL_ADDRESS = parse_value(self.schema, column_value_map, "EMAIL_ADDRESS")
        self.UCF_USER_VCH5 = parse_value(self.schema, column_value_map, "UCF_USER_VCH5")
        self.UCF_USER_VCH6 = parse_value(self.schema, column_value_map, "UCF_USER_VCH6")
        self.UCF_USER_VCH7 = parse_value(self.schema, column_value_map, "UCF_USER_VCH7")
        self.UCF_USER_VCH8 = parse_value(self.schema, column_value_map, "UCF_USER_VCH8")
        self.UCF_USER_VCH9 = parse_value(self.schema, column_value_map, "UCF_USER_VCH9")
        self.UCF_USER_VCH10 = parse_value(self.schema, column_value_map, "UCF_USER_VCH10")
        self.UCF_USER_VCH11 = parse_value(self.schema, column_value_map, "UCF_USER_VCH11")
        self.UCF_USER_VCH12 = parse_value(self.schema, column_value_map, "UCF_USER_VCH12")
        self.UCF_USER_VCH13 = parse_value(self.schema, column_value_map, "UCF_USER_VCH13")
        self.UCF_USER_VCH14 = parse_value(self.schema, column_value_map, "UCF_USER_VCH14")
        self.UCF_USER_VCH15 = parse_value(self.schema, column_value_map, "UCF_USER_VCH15")
        self.UCF_USER_NUM1 = parse_value(self.schema, column_value_map, "UCF_USER_NUM1")
        self.UCF_USER_NUM2 = parse_value(self.schema, column_value_map, "UCF_USER_NUM2")
        self.UCF_USER_NUM3 = parse_value(self.schema, column_value_map, "UCF_USER_NUM3")
        self.UCF_USER_NUM4 = parse_value(self.schema, column_value_map, "UCF_USER_NUM4")
        self.UCF_USER_NUM5 = parse_value(self.schema, column_value_map, "UCF_USER_NUM5")
        self.UCF_USER_DATE1 = parse_value(self.schema, column_value_map, "UCF_USER_DATE1")
        self.UCF_USER_DATE2 = parse_value(self.schema, column_value_map, "UCF_USER_DATE2")
        self.UCF_USER_DATE3 = parse_value(self.schema, column_value_map, "UCF_USER_DATE3")
        self.UCF_USER_DATE4 = parse_value(self.schema, column_value_map, "UCF_USER_DATE4")
        self.UCF_USER_DATE5 = parse_value(self.schema, column_value_map, "UCF_USER_DATE5")
        self.UCF_USER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_USER_FLAG1")
        self.UCF_USER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_USER_FLAG2")
        self.UCF_USER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_USER_FLAG3")
        self.UCF_USER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_USER_FLAG4")
        self.UCF_USER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_USER_FLAG5")
        self.INCLUDE_ALL_SUPPLIERS = parse_value(self.schema, column_value_map, "INCLUDE_ALL_SUPPLIERS")
        self.CITIZENSHIP_COUNTRY = parse_value(self.schema, column_value_map, "CITIZENSHIP_COUNTRY")
        self.FOREIGN_NATIONAL_FLAG = parse_value(self.schema, column_value_map, "FOREIGN_NATIONAL_FLAG")
        self.GC_EXPIRATION_DATE = parse_value(self.schema, column_value_map, "GC_EXPIRATION_DATE")
        self.USER_TYPE = parse_value(self.schema, column_value_map, "USER_TYPE")
        self.LAST_EYE_EXAM_DATE = parse_value(self.schema, column_value_map, "LAST_EYE_EXAM_DATE")
        "Date of last eye exam."
        self.CURRENT_LEVEL = parse_value(self.schema, column_value_map, "CURRENT_LEVEL")
        "User Start Level."
        self.MAX_LEVEL = parse_value(self.schema, column_value_map, "MAX_LEVEL")
        "Max level this user can get to."
        self.LEVEL_START_DATE = parse_value(self.schema, column_value_map, "LEVEL_START_DATE")
        "Date when current level was assigned."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "User Level status."
        self.UNDER_REVIEW_FLAG = parse_value(self.schema, column_value_map, "UNDER_REVIEW_FLAG")
        "Flag for whether this Operator-Inspector  is under review."
        self.PRODUCTION_COUNT = parse_value(self.schema, column_value_map, "PRODUCTION_COUNT")
        "No of times the operator inspection logic is invoked at this level/status."
        self.PRODUCTION_RATE = parse_value(self.schema, column_value_map, "PRODUCTION_RATE")
        "Calculated value from Operator Audit to be used to determine threshold. This is calculated when the operator is moved to a new level/status."
        self.OI_NO_OF_UNITS = parse_value(self.schema, column_value_map, "OI_NO_OF_UNITS")
        "Number of units or lots of successful over-inspected at the current level. Number of inspections at the current level. (An inspection is when a user has completed at least 50% of the operator inspection data collections in an op)."
        self.OI_NO_OF_DATA_COLLECTIONS = parse_value(self.schema, column_value_map, "OI_NO_OF_DATA_COLLECTIONS")
        "Number of data collections of successful over-inspected at the current level."
        self.NO_OF_REJECTS = parse_value(self.schema, column_value_map, "NO_OF_REJECTS")
        "Number of rejects at the current level."
        self.LAST_ACTIVITY_DATE = parse_value(self.schema, column_value_map, "LAST_ACTIVITY_DATE")
        "The last recorded time stamp when data collection was performed."
        self.LAST_DECERTIFICATION_DATE = parse_value(self.schema, column_value_map, "LAST_DECERTIFICATION_DATE")
        "The last date when the status of the Operator-Inspector had a status of DECERTIFIED."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "User Level Notes."
        self.LEVEL_UPDT_USERID = parse_value(self.schema, column_value_map, "LEVEL_UPDT_USERID")
        "User Level Update user id."
        self.LEVEL_TIME_STAMP = parse_value(self.schema, column_value_map, "LEVEL_TIME_STAMP")
        "User Level Update time stamp."
        self.OI_START_DATE = parse_value(self.schema, column_value_map, "OI_START_DATE")
        "Date Inspector Auditing becomes effective."
        self.OI_STATUS = parse_value(self.schema, column_value_map, "OI_STATUS")
        "Over Inspection User Status."
        self.OI_NOTES = parse_value(self.schema, column_value_map, "OI_NOTES")
        "Over Inspection Notes."
        self.OI_UPDT_USERID = parse_value(self.schema, column_value_map, "OI_UPDT_USERID")
        "Over Inspection Update User ID."
        self.OI_TIME_STAMP = parse_value(self.schema, column_value_map, "OI_TIME_STAMP")
        "Over Inspection Update time stamp."
        self.LAST_LEVEL_STATUS_CHG_DATE = parse_value(self.schema, column_value_map, "LAST_LEVEL_STATUS_CHG_DATE")
        "Most recent date when status of level was changed."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        self.DEPARTMENT_ID = parse_value(self.schema, column_value_map, "DEPARTMENT_ID")
        self.CENTER_ID = parse_value(self.schema, column_value_map, "CENTER_ID")
        self.UCF_USER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_USER_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_USER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_USER_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_USER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_USER_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_USER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_USER_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_USER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_USER_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.LABOR_TYPE = parse_value(self.schema, column_value_map, "LABOR_TYPE")
        "Labor Type Identifier."
        self.USER_DEFINITION = parse_value(self.schema, column_value_map, "USER_DEFINITION")
        "User definition identifier."
        self.USER_LOGIN_ATTEMPT = parse_value(self.schema, column_value_map, "USER_LOGIN_ATTEMPT")
        "Number of User Login Attempts."
        self.MI_USER_FLAG = parse_value(self.schema, column_value_map, "MI_USER_FLAG")
        "A flag (Y/N) that indicates whether the user belongs to the Manufacturing Intelligence user category."
        self.UUID = parse_value(self.schema, column_value_map, "UUID")
        "unique identification auto-generated key - to be used with user provisioning"
        self.EXTERNAL_ID = parse_value(self.schema, column_value_map, "EXTERNAL_ID")
        "external Id coming from IDP - to be used with user provisioning"
        self.SFFND_USER_PROGRAM_USER_FK = []
        self.SFFND_ALERT_USER_XREF_FK1 = []
        self.SFFND_USRCRT_USERS_FK = []
        self.SFFND_USER_CERT_PRGM_USER_FK = []
        self.SFSQA_PO_LINE_FK6 = []
        self.SFWID_USER_OPER_CHG_ACK_FK3 = []
        self.SFFND_USER_SKILL_USER_FK = []
        self.SFQA_CA_ACTION_ITEM_DESC_FK5 = []
        self.SFQA_CA_ACTION_ITEM_DESC_FK4 = []
        self.SFSQA_IDP_PS_NOTE_OWNER_FK = []
        self.SFWID_USER_OPER_DEV_ACK_FK3 = []
        self.SFCORE_CONCURRENT_USER_DTL_FK2 = []
        self.SFWID_USER_GRP_JOB_CHG_ACK_FK3 = []
        self.SFFND_TOOL_SERIAL_DEF_FK1 = []
        self.SFSQA_INSP_ORDER_DESC_FK7 = []
        self.SFSQA_INSP_ORDER_DESC_FK8 = []
        self.SFSQA_INSP_ORDER_DESC_FK14 = []
        self.SFLTA_JOB_USERID_FK = []
        self.SFWID_OPER_ASSIGNMENT_FK2 = []
        self.SFFND_USER_WORK_CENTERS_FK1 = []
        self.SFWID_USER_OVER_INSP_UNITS_FK1 = []
        self.SFWID_USER_OPER_LAST_POS_FK2 = []
        self.SFFND_LICENSE_USERS_FK2 = []
        self.SFFND_USER_ACT_SON_USER_FK = []
        self.SFFND_USER_ACT_SOF_USER_FK = []
        self.SFQA_CA_REQUEST_FK8 = []
        self.SFQA_CA_DESC_FK10 = []
        self.SFQA_CA_DESC_FK13 = []
        self.SFWID_OPER_CREW_USER_FK = []
        self.SFFND_USER_OWNGRP_XREF_USER_FK = []
        self.SFQA_DISC_ITEM_FK38 = []
        self.SFSQA_INSP_ORDER_INSP_STEP_FK4 = []
        self.SFWID_USER_CURRENT_UNITS_FK2 = []
        self.SFQA_CA_TEAM_ASSIGNMENT_FK2 = []
        self.SFPL_PWP_DESC_FK3 = []
        self.SFWID_USER_GRP_JOB_LST_POS_FK2 = []
        self.SFQA_CA_REQ_AFFECTEDTMASGN_FK1 = []
        self.SFSQA_USER_SUPLR_USER_FK = []
        self.SFFND_USER_SEC_GROUP_XREF_FK2 = []
        self.SFFND_USER_LOCALE_SETTINGS_FK1 = []

class SFCORE_OBJECT_TYPE_DEF:
    schema = {
        "OBJECT_TYPE": "STRING",
        "TYPE_DESC": "STRING",
        "DATA_TYPE": "STRING",
        "INTERNAL_FLAG": "STRING",
    }
    primary_key_columns = [
        "OBJECT_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFCORE_MM_OBJECT_OBJ_TYPE_FK",
        "SFCORE_MM_HTREF_OBJ_TYPE_FK",
        "SFCORE_ATTACHMENT_OBJECT_FK2",
        "SFCORE_MM_EXT_OBJ_TYPES_FK",
        "SFCORE_ATTACH_ACTION_TYPE_FK1",
    ]
    def __init__(self, column_value_map):
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The type of configuration object, e.g., UDV, Report, SQL, INI, etc."
        self.TYPE_DESC = parse_value(self.schema, column_value_map, "TYPE_DESC")
        "A detailed description of the object type."
        self.DATA_TYPE = parse_value(self.schema, column_value_map, "DATA_TYPE")
        "Indicates the type of object a given SFCORE_OBJECT_TYPE is associated with: BINARY, TEXT or EXTERNAL."
        self.INTERNAL_FLAG = parse_value(self.schema, column_value_map, "INTERNAL_FLAG")
        "Used to identify if OBJECT_TYPE is for internal use in system."
        self.SFCORE_MM_OBJECT_OBJ_TYPE_FK = []
        self.SFCORE_MM_HTREF_OBJ_TYPE_FK = []
        self.SFCORE_ATTACHMENT_OBJECT_FK2 = []
        self.SFCORE_MM_EXT_OBJ_TYPES_FK = []
        self.SFCORE_ATTACH_ACTION_TYPE_FK1 = []

class SFSQA_DISPLAY_FLAGS_DEF:
    schema = {
        "FLAG_TYPE": "STRING",
        "FLAG_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "FLAG_DESC": "STRING",
    }
    primary_key_columns = [
        "FLAG_TYPE",
        "FLAG_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.FLAG_TYPE = parse_value(self.schema, column_value_map, "FLAG_TYPE")
        self.FLAG_NAME = parse_value(self.schema, column_value_map, "FLAG_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.ACTION = parse_value(self.schema, column_value_map, "ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.FLAG_DESC = parse_value(self.schema, column_value_map, "FLAG_DESC")

class SFSQA_INSP_DEF_REV_SEC_GRP:
    schema = {
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "SECURITY_GROUP": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "OWNER_CODE",
        "INSP_DEF_REV",
        "SECURITY_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_DEF_REV_SEC_GRP_FK1", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"], "SFSQA_INSP_DEFINITION_REV", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"]),
        DbForeignKey("SFSQA_INSP_DEF_REV_SEC_GRP_FK2", ["SECURITY_GROUP"], "SFFND_SECURITY_GROUP_DEF", ["SECURITY_GROUP"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        "The unique identifier of an Owner."
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        "The revision number of the inspection definition."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        "The unique identifier of a security group."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of an item/part."

class SFQA_CA_AFFECTED_MACHINES:
    schema = {
        "CA_ID": "STRING",
        "UPDT_USERID": "STRING",
        "MACHINE_NO": "STRING",
        "MACHINE_CHG": "STRING",
        "MACHINE_ID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "MACHINE_ID",
        "MACHINE_NO",
        "MACHINE_CHG",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_AFFECTED_MACHINES_FK2", ["MACHINE_NO","MACHINE_CHG","MACHINE_ID"], "SFFND_TOOL_SERIAL_DEF", ["TOOL_NO","TOOL_CHG","TOOL_SERIAL_NO"]),
        DbForeignKey("SFQA_CA_AFFECTED_MACHINES_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.MACHINE_NO = parse_value(self.schema, column_value_map, "MACHINE_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.MACHINE_CHG = parse_value(self.schema, column_value_map, "MACHINE_CHG")
        "The change number, secondary identifier, of the tool."
        self.MACHINE_ID = parse_value(self.schema, column_value_map, "MACHINE_ID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFPL_ITEM_ALT_XREF:
    schema = {
        "ITEM_ID": "STRING",
        "ALT_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "PROGRAM": "STRING",
        "LOCATION_ID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UCF_ITEM_ALT_VCH1": "STRING",
        "UCF_ITEM_ALT_VCH2": "STRING",
        "UCF_ITEM_ALT_VCH3": "STRING",
        "UCF_ITEM_ALT_VCH4": "STRING",
        "UCF_ITEM_ALT_VCH5": "STRING",
        "UCF_ITEM_ALT_NUM1": "NUMBER",
        "UCF_ITEM_ALT_NUM2": "NUMBER",
        "UCF_ITEM_ALT_FLAG1": "STRING",
        "UCF_ITEM_ALT_FLAG2": "STRING",
        "UCF_ITEM_ALT_DATE1": "STRING",
        "UCF_ITEM_ALT_DATE2": "STRING",
        "ALT_PART_RANK": "NUMBER",
        "COMMENTS": "STRING",
        "UCF_ITEM_ALT_VCH6": "STRING",
        "UCF_ITEM_ALT_VCH7": "STRING",
        "UCF_ITEM_ALT_VCH8": "STRING",
        "UCF_ITEM_ALT_VCH9": "STRING",
        "UCF_ITEM_ALT_VCH10": "STRING",
        "UCF_ITEM_ALT_VCH11": "STRING",
        "UCF_ITEM_ALT_VCH12": "STRING",
        "UCF_ITEM_ALT_VCH13": "STRING",
        "UCF_ITEM_ALT_VCH14": "STRING",
        "UCF_ITEM_ALT_VCH15": "STRING",
        "UCF_ITEM_ALT_NUM3": "NUMBER",
        "UCF_ITEM_ALT_NUM4": "NUMBER",
        "UCF_ITEM_ALT_NUM5": "NUMBER",
        "UCF_ITEM_ALT_DATE3": "STRING",
        "UCF_ITEM_ALT_DATE4": "STRING",
        "UCF_ITEM_ALT_DATE5": "STRING",
        "UCF_ITEM_ALT_FLAG3": "STRING",
        "UCF_ITEM_ALT_FLAG4": "STRING",
        "UCF_ITEM_ALT_FLAG5": "STRING",
        "UCF_ITEM_ALT_VCH255_1": "STRING",
        "UCF_ITEM_ALT_VCH255_2": "STRING",
        "UCF_ITEM_ALT_VCH255_3": "STRING",
        "UCF_ITEM_ALT_VCH4000_1": "STRING",
        "UCF_ITEM_ALT_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "ALT_ITEM_ID",
        "PROGRAM",
        "LOCATION_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_IA_PW_PROGRAM_FK", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("SFPL_ALTITEM_ITEMMSTR2_FK", ["ALT_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_ALTITEM_ITEMMSTR1_FK", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_IA_PW_WORKLOC", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of an item/part."
        self.ALT_ITEM_ID = parse_value(self.schema, column_value_map, "ALT_ITEM_ID")
        "Alternate part as identified b its unique system generated identifier."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UCF_ITEM_ALT_VCH1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ALT_VCH2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ALT_VCH3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH3")
        self.UCF_ITEM_ALT_VCH4 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ALT_VCH5 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH5")
        self.UCF_ITEM_ALT_NUM1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ALT_NUM2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ALT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ALT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ALT_DATE1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ALT_DATE2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_DATE2")
        "User-configurable field for DATE data type."
        self.ALT_PART_RANK = parse_value(self.schema, column_value_map, "ALT_PART_RANK")
        "Ranking associated with a gvien set og lternate parts."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Comments about loading of the current product version."
        self.UCF_ITEM_ALT_VCH6 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ALT_VCH7 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ALT_VCH8 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ALT_VCH9 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ALT_VCH10 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ALT_VCH11 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ALT_VCH12 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ALT_VCH13 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ALT_VCH14 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ALT_VCH15 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_ALT_NUM3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ALT_NUM4 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ALT_NUM5 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_ALT_DATE3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ALT_DATE4 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ALT_DATE5 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_ALT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ALT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ALT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_ALT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_ALT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_ALT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_ALT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ITEM_ALT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_ALT_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."

class SFQA_DISC_ITEM_TEXT_SV_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_CA_SECTION_ATTACHMEN_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "OBJECT_ID": "STRING",
        "CA_SECTION": "STRING",
        "PROTECTED": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "NOTES": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.CA_SECTION = parse_value(self.schema, column_value_map, "CA_SECTION")
        self.PROTECTED = parse_value(self.schema, column_value_map, "PROTECTED")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")

class SFWID_USER_CURRENT_UNITS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "USERID": "STRING",
        "CURRENT_UNITS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SUBSELECTED_FLAG": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_USER_CURRENT_UNITS_FK1", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_USER_CURRENT_UNITS_FK2", ["USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.CURRENT_UNITS = parse_value(self.schema, column_value_map, "CURRENT_UNITS")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SUBSELECTED_FLAG = parse_value(self.schema, column_value_map, "SUBSELECTED_FLAG")

class SFWID_SERIAL_OPER_MATERIAL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "ASGND_MATERIAL_ID": "STRING",
        "ASGND_MATERIAL_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "MATERIAL_DAT_COL_STATUS": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        self.ASGND_MATERIAL_ID = parse_value(self.schema, column_value_map, "ASGND_MATERIAL_ID")
        self.ASGND_MATERIAL_NAME = parse_value(self.schema, column_value_map, "ASGND_MATERIAL_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.MATERIAL_DAT_COL_STATUS = parse_value(self.schema, column_value_map, "MATERIAL_DAT_COL_STATUS")
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")

class SFWID_ALT_CHG_LOG_TAB_DESC:
    schema = {
        "TABLE_NAME": "STRING",
        "DESCRIPTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "KEY_COLUMN1": "STRING",
        "KEY_COLUMN2": "STRING",
        "KEY_COLUMN3": "STRING",
        "KEY_COLUMN4": "STRING",
        "KEY_COLUMN5": "STRING",
        "KEY_COLUMN6": "STRING",
        "KEY_COLUMN7": "STRING",
        "KEY_COLUMN8": "STRING",
        "REF_COLUMN1": "STRING",
        "REF_COLUMN2": "STRING",
        "REF_COLUMN3": "STRING",
        "REF_COLUMN4": "STRING",
        "REF_COLUMN5": "STRING",
        "REF_COLUMN6": "STRING",
        "REF_COLUMN7": "STRING",
        "REF_COLUMN8": "STRING",
        "REF_COLUMN9": "STRING",
    }
    primary_key_columns = [
        "TABLE_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TABLE_NAME = parse_value(self.schema, column_value_map, "TABLE_NAME")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.KEY_COLUMN1 = parse_value(self.schema, column_value_map, "KEY_COLUMN1")
        self.KEY_COLUMN2 = parse_value(self.schema, column_value_map, "KEY_COLUMN2")
        self.KEY_COLUMN3 = parse_value(self.schema, column_value_map, "KEY_COLUMN3")
        self.KEY_COLUMN4 = parse_value(self.schema, column_value_map, "KEY_COLUMN4")
        self.KEY_COLUMN5 = parse_value(self.schema, column_value_map, "KEY_COLUMN5")
        self.KEY_COLUMN6 = parse_value(self.schema, column_value_map, "KEY_COLUMN6")
        self.KEY_COLUMN7 = parse_value(self.schema, column_value_map, "KEY_COLUMN7")
        self.KEY_COLUMN8 = parse_value(self.schema, column_value_map, "KEY_COLUMN8")
        self.REF_COLUMN1 = parse_value(self.schema, column_value_map, "REF_COLUMN1")
        self.REF_COLUMN2 = parse_value(self.schema, column_value_map, "REF_COLUMN2")
        self.REF_COLUMN3 = parse_value(self.schema, column_value_map, "REF_COLUMN3")
        self.REF_COLUMN4 = parse_value(self.schema, column_value_map, "REF_COLUMN4")
        self.REF_COLUMN5 = parse_value(self.schema, column_value_map, "REF_COLUMN5")
        self.REF_COLUMN6 = parse_value(self.schema, column_value_map, "REF_COLUMN6")
        self.REF_COLUMN7 = parse_value(self.schema, column_value_map, "REF_COLUMN7")
        self.REF_COLUMN8 = parse_value(self.schema, column_value_map, "REF_COLUMN8")
        self.REF_COLUMN9 = parse_value(self.schema, column_value_map, "REF_COLUMN9")
        "This Column will maintaining the New Value of FORMAT."

class SFSQA_INSP_DEF_BLOCK_STATUS:
    schema = {
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "BLOCK_ID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "OWNER_CODE",
        "INSP_DEF_REV",
        "BLOCK_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_DEF_BLCK_STATUS_FK2", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
        DbForeignKey("SFSQA_INSP_DEF_BLCK_STATUS_FK1", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"], "SFSQA_INSP_DEFINITION_REV", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        "Supplier Code / Requirement Group Id of Inspection Def type."
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        "Inspection Definition Revision number."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Current status of the block."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Name/Unique identifier of block of Inspection Definition."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique, system-generated identifier of an item."

class SFWID_ORDER_REV_CONTROL:
    schema = {
        "ORDER_ID": "STRING",
        "LAST_REV": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_REV_CONTROL_FK", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.LAST_REV = parse_value(self.schema, column_value_map, "LAST_REV")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFQA_CA_REQUEST_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_REQUEST_ID": "STRING",
        "REQUEST_TYPE": "STRING",
        "REQUEST_STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "AFFECTED_PROGRAM": "STRING",
        "SOURCE_GROUP": "STRING",
        "SOURCE_CONTACT": "STRING",
        "SOURCE_DOC_TYPE": "STRING",
        "SOURCE_DOC_NO": "STRING",
        "SCHED_PRIORITY": "STRING",
        "REQUEST_TITLE": "STRING",
        "CUST_ID": "STRING",
        "STATUS_CHG_NOTES": "STRING",
        "ISSUE_DESC": "STRING",
        "PROB_PHYSICAL_EVIDENCE": "STRING",
        "PROB_FIRST_OBSERVED": "STRING",
        "PROB_OCCURRING_TREND": "STRING",
        "PROB_OCCURRING_PLACES": "STRING",
        "PROB_OCCURED_BEFORE": "STRING",
        "PROB_IMPACT": "STRING",
        "AFFECTED_BY_PROBLEM": "STRING",
        "RISK_LIKELIHOOD_RAT_ID": "STRING",
        "RISK_SEVERITY_RAT_ID": "STRING",
        "RISK_DETECTABILITY_RAT_ID": "STRING",
        "REQUEST_CREATE_USERID": "STRING",
        "REQUEST_CREATE_TIME_STAMP": "STRING",
        "UCF_CA_REQUEST_VCH1": "STRING",
        "UCF_CA_REQUEST_VCH2": "STRING",
        "UCF_CA_REQUEST_VCH3": "STRING",
        "UCF_CA_REQUEST_VCH4": "STRING",
        "UCF_CA_REQUEST_VCH5": "STRING",
        "UCF_CA_REQUEST_VCH6": "STRING",
        "UCF_CA_REQUEST_VCH7": "STRING",
        "UCF_CA_REQUEST_VCH8": "STRING",
        "UCF_CA_REQUEST_VCH9": "STRING",
        "UCF_CA_REQUEST_VCH10": "STRING",
        "UCF_CA_REQUEST_VCH11": "STRING",
        "UCF_CA_REQUEST_VCH12": "STRING",
        "UCF_CA_REQUEST_VCH13": "STRING",
        "UCF_CA_REQUEST_VCH14": "STRING",
        "UCF_CA_REQUEST_VCH15": "STRING",
        "UCF_CA_REQUEST_NUM1": "NUMBER",
        "UCF_CA_REQUEST_NUM2": "NUMBER",
        "UCF_CA_REQUEST_NUM3": "NUMBER",
        "UCF_CA_REQUEST_NUM4": "NUMBER",
        "UCF_CA_REQUEST_NUM5": "NUMBER",
        "UCF_CA_REQUEST_DATE1": "STRING",
        "UCF_CA_REQUEST_DATE2": "STRING",
        "UCF_CA_REQUEST_DATE3": "STRING",
        "UCF_CA_REQUEST_DATE4": "STRING",
        "UCF_CA_REQUEST_DATE5": "STRING",
        "UCF_CA_REQUEST_FLAG1": "STRING",
        "UCF_CA_REQUEST_FLAG2": "STRING",
        "UCF_CA_REQUEST_FLAG3": "STRING",
        "UCF_CA_REQUEST_FLAG4": "STRING",
        "UCF_CA_REQUEST_FLAG5": "STRING",
        "UCF_CA_REQUEST_VCH255_1": "STRING",
        "UCF_CA_REQUEST_VCH255_2": "STRING",
        "UCF_CA_REQUEST_VCH255_3": "STRING",
        "UCF_CA_REQUEST_VCH4000_1": "STRING",
        "UCF_CA_REQUEST_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.REQUEST_TYPE = parse_value(self.schema, column_value_map, "REQUEST_TYPE")
        "Type or classification of Corrective Action Request."
        self.REQUEST_STATUS = parse_value(self.schema, column_value_map, "REQUEST_STATUS")
        "Current status of the Corrective Action Request, e.g., IN QUEUE, ACCEPT, CANCEL."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.AFFECTED_PROGRAM = parse_value(self.schema, column_value_map, "AFFECTED_PROGRAM")
        "The program that is affected by the problem described in the Corrective Action Request."
        self.SOURCE_GROUP = parse_value(self.schema, column_value_map, "SOURCE_GROUP")
        "The group that generated the Corrective Action Request."
        self.SOURCE_CONTACT = parse_value(self.schema, column_value_map, "SOURCE_CONTACT")
        "Contact information for the source group originating the Corrective Action Request."
        self.SOURCE_DOC_TYPE = parse_value(self.schema, column_value_map, "SOURCE_DOC_TYPE")
        "Type or classification of document used to create the Corrective Action Request."
        self.SOURCE_DOC_NO = parse_value(self.schema, column_value_map, "SOURCE_DOC_NO")
        "Identifier of the document used to create the Corrective Action Request."
        self.SCHED_PRIORITY = parse_value(self.schema, column_value_map, "SCHED_PRIORITY")
        "The scheduled priority of the associated Corrective Action request, e.g., High, Low, Medium."
        self.REQUEST_TITLE = parse_value(self.schema, column_value_map, "REQUEST_TITLE")
        "Title or name of the Corrective Action Request."
        self.CUST_ID = parse_value(self.schema, column_value_map, "CUST_ID")
        "Unique identifier of the associated customer."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated Correction Action request."
        self.ISSUE_DESC = parse_value(self.schema, column_value_map, "ISSUE_DESC")
        "Actual Condition of the Issue."
        self.PROB_PHYSICAL_EVIDENCE = parse_value(self.schema, column_value_map, "PROB_PHYSICAL_EVIDENCE")
        "Physical Evidence of the Problem."
        self.PROB_FIRST_OBSERVED = parse_value(self.schema, column_value_map, "PROB_FIRST_OBSERVED")
        "Where was the Problem first observed?"
        self.PROB_OCCURRING_TREND = parse_value(self.schema, column_value_map, "PROB_OCCURRING_TREND")
        "Problem occurring Trend."
        self.PROB_OCCURRING_PLACES = parse_value(self.schema, column_value_map, "PROB_OCCURRING_PLACES")
        "Problem occurring Places."
        self.PROB_OCCURED_BEFORE = parse_value(self.schema, column_value_map, "PROB_OCCURED_BEFORE")
        "Has Problem occured before?"
        self.PROB_IMPACT = parse_value(self.schema, column_value_map, "PROB_IMPACT")
        "Impact of the Problem."
        self.AFFECTED_BY_PROBLEM = parse_value(self.schema, column_value_map, "AFFECTED_BY_PROBLEM")
        "Who is affected by Problem?"
        self.RISK_LIKELIHOOD_RAT_ID = parse_value(self.schema, column_value_map, "RISK_LIKELIHOOD_RAT_ID")
        "Unique identifier of a given Risk Likelihood Rating."
        self.RISK_SEVERITY_RAT_ID = parse_value(self.schema, column_value_map, "RISK_SEVERITY_RAT_ID")
        "Unique identifier of a given Risk Severity Rating."
        self.RISK_DETECTABILITY_RAT_ID = parse_value(self.schema, column_value_map, "RISK_DETECTABILITY_RAT_ID")
        "Unique identifier of a given Risk Detectability Rating."
        self.REQUEST_CREATE_USERID = parse_value(self.schema, column_value_map, "REQUEST_CREATE_USERID")
        "Unique identifier of the user who has created Request."
        self.REQUEST_CREATE_TIME_STAMP = parse_value(self.schema, column_value_map, "REQUEST_CREATE_TIME_STAMP")
        "The date and time when the Request is created."
        self.UCF_CA_REQUEST_VCH1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH4 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH5 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH6 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH7 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH8 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH9 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH10 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH11 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH12 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH13 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH14 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_VCH15 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_NUM1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_NUM2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_NUM3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_NUM4 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_NUM5 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_DATE1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_DATE2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_DATE3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_DATE4 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_DATE5 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_FLAG4 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_FLAG5 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_REQUEST_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_REQUEST_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_REQUEST_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_CA_REQUEST_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."

class SFSQA_INSP_ORDER_SUBCOMPS:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "BUILD_UNIT_ID": "STRING",
        "BUILD_ITEM_ID": "STRING",
        "SUBCOMP_UNIT_ID": "STRING",
        "SUBCOMP_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH1": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH2": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH3": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH4": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH5": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH6": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH7": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH8": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH9": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH10": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH11": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH12": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH13": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH14": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_VCH15": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_NUM1": "NUMBER",
        "UCF_INSP_ORDERUNITSCOMP_NUM2": "NUMBER",
        "UCF_INSP_ORDERUNITSCOMP_NUM3": "NUMBER",
        "UCF_INSP_ORDERUNITSCOMP_NUM4": "NUMBER",
        "UCF_INSP_ORDERUNITSCOMP_NUM5": "NUMBER",
        "UCF_INSP_ORDERUNITSCOMP_DATE1": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_DATE2": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_DATE3": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_DATE4": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_DATE5": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_FLAG1": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_FLAG2": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_FLAG3": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_FLAG4": "STRING",
        "UCF_INSP_ORDERUNITSCOMP_FLAG5": "STRING",
        "UCF_INSP_ORDERUSCOMP_VCH255_1": "STRING",
        "UCF_INSP_ORDERUSCOMP_VCH255_2": "STRING",
        "UCF_INSP_ORDERUSCOMP_VCH255_3": "STRING",
        "UCF_INSP_ORDERUSCOMP_VCH4000_1": "STRING",
        "UCF_INSP_ORDERUSCOMP_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "BUILD_ITEM_ID",
        "BUILD_UNIT_ID",
        "SUBCOMP_ITEM_ID",
        "SUBCOMP_UNIT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_IDP_SUBCOMPS_FK1", ["INSP_ORDER_ID","BUILD_ITEM_ID","BUILD_UNIT_ID"], "SFSQA_INSP_ORDER_UNITS", ["INSP_ORDER_ID","ITEM_ID","UNIT_ID"]),
        DbForeignKey("SFSQA_IDP_SUBCOMPS_FK2", ["INSP_ORDER_ID","SUBCOMP_ITEM_ID","SUBCOMP_UNIT_ID"], "SFSQA_INSP_ORDER_UNITS", ["INSP_ORDER_ID","ITEM_ID","UNIT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.BUILD_UNIT_ID = parse_value(self.schema, column_value_map, "BUILD_UNIT_ID")
        self.BUILD_ITEM_ID = parse_value(self.schema, column_value_map, "BUILD_ITEM_ID")
        self.SUBCOMP_UNIT_ID = parse_value(self.schema, column_value_map, "SUBCOMP_UNIT_ID")
        self.SUBCOMP_ITEM_ID = parse_value(self.schema, column_value_map, "SUBCOMP_ITEM_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.UCF_INSP_ORDERUNITSCOMP_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH1")
        self.UCF_INSP_ORDERUNITSCOMP_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH2")
        self.UCF_INSP_ORDERUNITSCOMP_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH3")
        self.UCF_INSP_ORDERUNITSCOMP_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH4")
        self.UCF_INSP_ORDERUNITSCOMP_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH5")
        self.UCF_INSP_ORDERUNITSCOMP_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH6")
        self.UCF_INSP_ORDERUNITSCOMP_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH7")
        self.UCF_INSP_ORDERUNITSCOMP_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH8")
        self.UCF_INSP_ORDERUNITSCOMP_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH9")
        self.UCF_INSP_ORDERUNITSCOMP_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH10")
        self.UCF_INSP_ORDERUNITSCOMP_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH11")
        self.UCF_INSP_ORDERUNITSCOMP_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH12")
        self.UCF_INSP_ORDERUNITSCOMP_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH13")
        self.UCF_INSP_ORDERUNITSCOMP_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH14")
        self.UCF_INSP_ORDERUNITSCOMP_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_VCH15")
        self.UCF_INSP_ORDERUNITSCOMP_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_NUM1")
        self.UCF_INSP_ORDERUNITSCOMP_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_NUM2")
        self.UCF_INSP_ORDERUNITSCOMP_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_NUM3")
        self.UCF_INSP_ORDERUNITSCOMP_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_NUM4")
        self.UCF_INSP_ORDERUNITSCOMP_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_NUM5")
        self.UCF_INSP_ORDERUNITSCOMP_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_DATE1")
        self.UCF_INSP_ORDERUNITSCOMP_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_DATE2")
        self.UCF_INSP_ORDERUNITSCOMP_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_DATE3")
        self.UCF_INSP_ORDERUNITSCOMP_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_DATE4")
        self.UCF_INSP_ORDERUNITSCOMP_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_DATE5")
        self.UCF_INSP_ORDERUNITSCOMP_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_FLAG1")
        self.UCF_INSP_ORDERUNITSCOMP_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_FLAG2")
        self.UCF_INSP_ORDERUNITSCOMP_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_FLAG3")
        self.UCF_INSP_ORDERUNITSCOMP_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_FLAG4")
        self.UCF_INSP_ORDERUNITSCOMP_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUNITSCOMP_FLAG5")
        self.UCF_INSP_ORDERUSCOMP_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUSCOMP_VCH255_1")
        self.UCF_INSP_ORDERUSCOMP_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUSCOMP_VCH255_2")
        self.UCF_INSP_ORDERUSCOMP_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUSCOMP_VCH255_3")
        self.UCF_INSP_ORDERUSCOMP_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUSCOMP_VCH4000_1")
        self.UCF_INSP_ORDERUSCOMP_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERUSCOMP_VCH4000_2")

class SFWID_ORDER_LINK:
    schema = {
        "ORDER_ID": "STRING",
        "LINK_ID": "STRING",
        "LINK_TYPE": "STRING",
        "PRED_NODE_ROW": "NUMBER",
        "PRED_NODE_COLUMN": "NUMBER",
        "SUCC_NODE_ROW": "NUMBER",
        "SUCC_NODE_COLUMN": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PRED_NODE_ID": "STRING",
        "SUCC_NODE_ID": "STRING",
        "LINK_TITLE": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "LINK_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_LINK_ORDER_FK", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_LINK_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.LINK_ID = parse_value(self.schema, column_value_map, "LINK_ID")
        "The unique system-generated identifier of a link in an Operation Flow Diagram."
        self.LINK_TYPE = parse_value(self.schema, column_value_map, "LINK_TYPE")
        "Type or classification of link in the associated Operation Flow diagram."
        self.PRED_NODE_ROW = parse_value(self.schema, column_value_map, "PRED_NODE_ROW")
        "The number of the grid row containing the predecessor (preceding) node. In combination with PRED_NODE_COLUMN, shows starting position of link."
        self.PRED_NODE_COLUMN = parse_value(self.schema, column_value_map, "PRED_NODE_COLUMN")
        "The number of the grid column containing the predecessor (preceding) node. In combination with PRED_NODE_ROW, shows starting position of link."
        self.SUCC_NODE_ROW = parse_value(self.schema, column_value_map, "SUCC_NODE_ROW")
        "The number of the grid row containing the successor (following) node. In combination with SUCC_NODE_COLUMN, shows ending position of link."
        self.SUCC_NODE_COLUMN = parse_value(self.schema, column_value_map, "SUCC_NODE_COLUMN")
        "The number of the grid column containing the successor (following) node. In combination with SUCC_NODE_ROW, shows ending position of link."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PRED_NODE_ID = parse_value(self.schema, column_value_map, "PRED_NODE_ID")
        "The unique system-generated identifier of the predecessor node in the Operation Flow Diagram."
        self.SUCC_NODE_ID = parse_value(self.schema, column_value_map, "SUCC_NODE_ID")
        "The unique system-generated identifier of the successor node in the Operation Flow Diagram."
        self.LINK_TITLE = parse_value(self.schema, column_value_map, "LINK_TITLE")
        "A name/short description of the link."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."

class SFWID_ORDER_OOC_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "ORDER_NO": "STRING",
        "OPER_NO": "STRING",
        "OPER_STATUS": "STRING",
        "STEP_NO": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "ORDER_QTY": "NUMBER",
        "ASGND_WORK_CENTER": "STRING",
        "OOC_CAUSE_FLAG": "STRING",
        "OOC_REASON": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        "Unique, user-assigned identifier of a given work order."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.OPER_STATUS = parse_value(self.schema, column_value_map, "OPER_STATUS")
        "Status of the operation, e.g., IN QUEUE, ACTIVE, COMPLETE, HOLD, CANCEL."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier of the component/part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.ORDER_QTY = parse_value(self.schema, column_value_map, "ORDER_QTY")
        "The quantity of the part to be made for the given work order. Defaults to PLND_ORDER_QTY but can be changed."
        self.ASGND_WORK_CENTER = parse_value(self.schema, column_value_map, "ASGND_WORK_CENTER")
        "The assigned work center for the given ooc record."
        self.OOC_CAUSE_FLAG = parse_value(self.schema, column_value_map, "OOC_CAUSE_FLAG")
        self.OOC_REASON = parse_value(self.schema, column_value_map, "OOC_REASON")

class SFQA_CA_AFFECTED_CUSTOMERS:
    schema = {
        "CA_ID": "STRING",
        "CUST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "CUST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_AFFECTED_CUSTOMERS_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CA_AFFECTED_CUSTOMERS_FK2", ["CUST_ID"], "SFFND_CUST_ID_DEF", ["CUST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.CUST_ID = parse_value(self.schema, column_value_map, "CUST_ID")
        "Unique identifier of a specific customer."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFFND_USER_CERTS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "USERID": "STRING",
        "CERT": "STRING",
        "EFF_DATE": "STRING",
        "EXP_DATE": "STRING",
        "CERT_STAMP_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        "The unique identifier of a particular certification possessed by the user."
        self.EFF_DATE = parse_value(self.schema, column_value_map, "EFF_DATE")
        "The effective date of the certification."
        self.EXP_DATE = parse_value(self.schema, column_value_map, "EXP_DATE")
        "The expiration date of the certification."
        self.CERT_STAMP_NO = parse_value(self.schema, column_value_map, "CERT_STAMP_NO")
        "Certification stamp number."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFSQA_INSP_ORDER_INSP_DEF:
    schema = {
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "INSP_ORDER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "OWNER_CODE",
        "INSP_DEF_REV",
        "INSP_ORDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_ORDER_INSP_DEF_FK2", ["INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_INSP_DEF_FK1", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"], "SFSQA_INSP_DEFINITION_REV", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        "Key Field for Inspection Definition."
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        "Key Field for Inspection Definition."
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        "Key Field for Inspection Order."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Key Field for Part, Tool, Machine, etc."

class SFWID_OPER_PRECEDENCE_ALT:
    schema = {
        "OPER_PRECEDENCE_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "TARGET_ORDER_ID": "STRING",
        "TARGET_OPER_KEY": "NUMBER",
        "TARGET_STEP_KEY": "NUMBER",
        "OPER_ACTION": "STRING",
        "PRECEDENT_PLAN_ID": "STRING",
        "PRECEDENT_PLAN_VERSION": "NUMBER",
        "PRECEDENT_OPER_KEY": "NUMBER",
        "CONDITION": "STRING",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
        "TIME_STAMP": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "OPER_PRECEDENCE_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_PRECEDENCE_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_PRECEDENCE_ALT = parse_value(self.schema, column_value_map, "OPER_PRECEDENCE_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.TARGET_ORDER_ID = parse_value(self.schema, column_value_map, "TARGET_ORDER_ID")
        "Unique, system-generated identifier of a target work order."
        self.TARGET_OPER_KEY = parse_value(self.schema, column_value_map, "TARGET_OPER_KEY")
        "Unique, system-generated identifier of a target operation."
        self.TARGET_STEP_KEY = parse_value(self.schema, column_value_map, "TARGET_STEP_KEY")
        "Unique, system-generated identifier of a target step."
        self.OPER_ACTION = parse_value(self.schema, column_value_map, "OPER_ACTION")
        self.PRECEDENT_PLAN_ID = parse_value(self.schema, column_value_map, "PRECEDENT_PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PRECEDENT_PLAN_VERSION = parse_value(self.schema, column_value_map, "PRECEDENT_PLAN_VERSION")
        "The version number of the work plan."
        self.PRECEDENT_OPER_KEY = parse_value(self.schema, column_value_map, "PRECEDENT_OPER_KEY")
        "Unique, system-generated identifier of operation"
        self.CONDITION = parse_value(self.schema, column_value_map, "CONDITION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."

class SFFND_WORK_CENTER_TYPE_DEF:
    schema = {
        "WORK_CENTER_TYPE": "STRING",
        "WORK_CENTER_TYPE_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "MUST_ISSUE_PARTS_FLAG": "STRING",
        "UNIT_PROCESSING": "STRING",
    }
    primary_key_columns = [
        "WORK_CENTER_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_WORK_CENTER_DEF_FK1",
    ]
    def __init__(self, column_value_map):
        self.WORK_CENTER_TYPE = parse_value(self.schema, column_value_map, "WORK_CENTER_TYPE")
        self.WORK_CENTER_TYPE_DESC = parse_value(self.schema, column_value_map, "WORK_CENTER_TYPE_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.MUST_ISSUE_PARTS_FLAG = parse_value(self.schema, column_value_map, "MUST_ISSUE_PARTS_FLAG")
        self.UNIT_PROCESSING = parse_value(self.schema, column_value_map, "UNIT_PROCESSING")
        "Signifies how the operations would be handled. This column can hold values like Normal, Low Touch, Cycle."
        self.SFFND_WORK_CENTER_DEF_FK1 = []

class SFFND_STD_DATCOL_TOOL:
    schema = {
        "STD_DATCOL_ID": "STRING",
        "SERIAL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "TOOL_QTY": "NUMBER",
        "TOOL_NOTES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
    }
    primary_key_columns = [
        "STD_DATCOL_ID",
        "TOOL_NO",
        "TOOL_CHG",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_STD_DATCOL_TOOL_FK2", ["STD_DATCOL_ID"], "SFFND_STD_DATCOL_TYPE_DEF", ["STD_DATCOL_ID"]),
        DbForeignKey("SFFND_STD_DATCOL_TOOL_FK1", ["TOOL_NO","TOOL_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.STD_DATCOL_ID = parse_value(self.schema, column_value_map, "STD_DATCOL_ID")
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        self.TOOL_QTY = parse_value(self.schema, column_value_map, "TOOL_QTY")
        self.TOOL_NOTES = parse_value(self.schema, column_value_map, "TOOL_NOTES")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The change number, secondary identifier, of the tool."

class SFWID_SERIAL_OPER:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "SERIAL_OPER_STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "MOVE_PENDING_FLAG": "STRING",
        "STATUS_CHG_NOTES": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "SERIAL_OPER_HOLD_STATUS": "STRING",
        "ACTUAL_IN_QUEUE_DATE": "STRING",
        "STATUS_CHG_REASON": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "OPER_URC": "NUMBER",
        "SERIAL_OPER_DOC_STATUS": "STRING",
        "USER_OI_UNIT_COUNTED_FLAG": "STRING",
        "ITEM_LOC": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "LOT_ID",
        "SERIAL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_SERIAL_OPER_SER_DESC_FK", ["ORDER_ID","LOT_ID","SERIAL_ID"], "SFWID_SERIAL_DESC", ["ORDER_ID","LOT_ID","SERIAL_ID"]),
        DbForeignKey("SFWID_SERIAL_OPER_OPER_DESC_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.SERIAL_OPER_STATUS = parse_value(self.schema, column_value_map, "SERIAL_OPER_STATUS")
        "Status of the operation for the given serial number."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.MOVE_PENDING_FLAG = parse_value(self.schema, column_value_map, "MOVE_PENDING_FLAG")
        "A flag (Y/N) indicating whether components/parts at a given operation have been flagged to move to the next operation pending a decision."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated component/part."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised operation start date."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised operation complete date."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which work for the operation was actually started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which the manufacturing operation has been completed."
        self.SERIAL_OPER_HOLD_STATUS = parse_value(self.schema, column_value_map, "SERIAL_OPER_HOLD_STATUS")
        "Status of the operation hold for the given serial number."
        self.ACTUAL_IN_QUEUE_DATE = parse_value(self.schema, column_value_map, "ACTUAL_IN_QUEUE_DATE")
        "Date that the status of the given serial number moved to IN QUEUE at the given operation."
        self.STATUS_CHG_REASON = parse_value(self.schema, column_value_map, "STATUS_CHG_REASON")
        "Reason for a change in status."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.OPER_URC = parse_value(self.schema, column_value_map, "OPER_URC")
        "When executing a work order with returns (iterative branching) this is a user configurable counter."
        self.SERIAL_OPER_DOC_STATUS = parse_value(self.schema, column_value_map, "SERIAL_OPER_DOC_STATUS")
        "Status to know whether serial oper status has been updated since last outbound document was sent"
        self.USER_OI_UNIT_COUNTED_FLAG = parse_value(self.schema, column_value_map, "USER_OI_UNIT_COUNTED_FLAG")
        "Set Y means selected Unit/Lot is considered for user over inspection Unit/Lot counter. Default is N."
        self.ITEM_LOC = parse_value(self.schema, column_value_map, "ITEM_LOC")
        "Item location of unit."

class SFPL_STEP_MASTER:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "LOCK_STATE": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEPMAST_OPERMAST_FK", ["PLAN_ID","OPER_KEY"], "SFPL_OPERATION_MASTER", ["PLAN_ID","OPER_KEY"]),
    ]
    refs = [
        "SFPL_STEPDESC_STEPMAST_FK",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.LOCK_STATE = parse_value(self.schema, column_value_map, "LOCK_STATE")
        "The work Plan Revision lock state. Used for creating plan level user lock, GroupWare concept. Not in use."
        self.SFPL_STEPDESC_STEPMAST_FK = []

class SFSQA_ITEM_SUPPLIER_DATA:
    schema = {
        "TIME_STAMP": "DATE",
        "ITEM_ID": "STRING",
        "ACTION_TYPE": "STRING",
        "SUPPLIER_CODE": "STRING",
        "QTY": "NUMBER",
        "UPDT_USERID": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "DISC_SUBMIT_DATE": "STRING",
        "ASSOCIATED_ORDER_ID": "STRING",
        "DISC_ID": "STRING",
        "ASSOCIATED_INSP_ORDER_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "SUPPLIER_NAME": "STRING",
        "EQTY": "NUMBER",
        "RQTY": "NUMBER",
        "DQTY": "NUMBER",
        "DYEAR": "NUMBER",
        "DMONTH": "NUMBER",
        "MONTH_NAME": "STRING",
        "RATING_FILTER1": "NUMBER",
        "NQTY": "NUMBER",
        "IDENTITY_COL": "NUMBER",
    }
    primary_key_columns = [
        "IDENTITY_COL",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_ITEM_SUPPLIER_DATA_FK4", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFSQA_ITEM_SUPPLIER_DATA_FK3", ["ASSOCIATED_INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFSQA_ITEM_SUPPLIER_DATA_FK2", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of an item/part."
        self.ACTION_TYPE = parse_value(self.schema, column_value_map, "ACTION_TYPE")
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        "User definable unique identifier for a given supplier."
        self.QTY = parse_value(self.schema, column_value_map, "QTY")
        "The quantity of component item/parts required to fabricate/assemble the parent part."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier of the component/part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.DISC_SUBMIT_DATE = parse_value(self.schema, column_value_map, "DISC_SUBMIT_DATE")
        self.ASSOCIATED_ORDER_ID = parse_value(self.schema, column_value_map, "ASSOCIATED_ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.ASSOCIATED_INSP_ORDER_ID = parse_value(self.schema, column_value_map, "ASSOCIATED_INSP_ORDER_ID")
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.SUPPLIER_NAME = parse_value(self.schema, column_value_map, "SUPPLIER_NAME")
        self.EQTY = parse_value(self.schema, column_value_map, "EQTY")
        self.RQTY = parse_value(self.schema, column_value_map, "RQTY")
        self.DQTY = parse_value(self.schema, column_value_map, "DQTY")
        self.DYEAR = parse_value(self.schema, column_value_map, "DYEAR")
        self.DMONTH = parse_value(self.schema, column_value_map, "DMONTH")
        self.MONTH_NAME = parse_value(self.schema, column_value_map, "MONTH_NAME")
        self.RATING_FILTER1 = parse_value(self.schema, column_value_map, "RATING_FILTER1")
        self.NQTY = parse_value(self.schema, column_value_map, "NQTY")
        self.IDENTITY_COL = parse_value(self.schema, column_value_map, "IDENTITY_COL")

class OAUTH2_AUTHORIZATION:
    schema = {
        "ID": "STRING",
        "REGISTERED_CLIENT_ID": "STRING",
        "PRINCIPAL_NAME": "STRING",
        "AUTHORIZATION_GRANT_TYPE": "STRING",
        "ATTRIBUTES": "STRING",
        "STATE": "STRING",
        "AUTHORIZATION_CODE_VALUE": "STRING",
        "AUTHORIZATION_CODE_ISSUED_AT": "STRING",
        "AUTHORIZATION_CODE_EXPIRES_AT": "STRING",
        "AUTHORIZATION_CODE_METADATA": "STRING",
        "ACCESS_TOKEN_VALUE": "STRING",
        "ACCESS_TOKEN_ISSUED_AT": "STRING",
        "ACCESS_TOKEN_EXPIRES_AT": "STRING",
        "ACCESS_TOKEN_METADATA": "STRING",
        "ACCESS_TOKEN_TYPE": "STRING",
        "ACCESS_TOKEN_SCOPES": "STRING",
        "OIDC_ID_TOKEN_VALUE": "STRING",
        "OIDC_ID_TOKEN_ISSUED_AT": "STRING",
        "OIDC_ID_TOKEN_EXPIRES_AT": "STRING",
        "OIDC_ID_TOKEN_METADATA": "STRING",
        "REFRESH_TOKEN_VALUE": "STRING",
        "REFRESH_TOKEN_ISSUED_AT": "STRING",
        "REFRESH_TOKEN_EXPIRES_AT": "STRING",
        "REFRESH_TOKEN_METADATA": "STRING",
    }
    primary_key_columns = [
        "ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ID = parse_value(self.schema, column_value_map, "ID")
        self.REGISTERED_CLIENT_ID = parse_value(self.schema, column_value_map, "REGISTERED_CLIENT_ID")
        self.PRINCIPAL_NAME = parse_value(self.schema, column_value_map, "PRINCIPAL_NAME")
        self.AUTHORIZATION_GRANT_TYPE = parse_value(self.schema, column_value_map, "AUTHORIZATION_GRANT_TYPE")
        self.ATTRIBUTES = parse_value(self.schema, column_value_map, "ATTRIBUTES")
        self.STATE = parse_value(self.schema, column_value_map, "STATE")
        self.AUTHORIZATION_CODE_VALUE = parse_value(self.schema, column_value_map, "AUTHORIZATION_CODE_VALUE")
        self.AUTHORIZATION_CODE_ISSUED_AT = parse_value(self.schema, column_value_map, "AUTHORIZATION_CODE_ISSUED_AT")
        self.AUTHORIZATION_CODE_EXPIRES_AT = parse_value(self.schema, column_value_map, "AUTHORIZATION_CODE_EXPIRES_AT")
        self.AUTHORIZATION_CODE_METADATA = parse_value(self.schema, column_value_map, "AUTHORIZATION_CODE_METADATA")
        self.ACCESS_TOKEN_VALUE = parse_value(self.schema, column_value_map, "ACCESS_TOKEN_VALUE")
        self.ACCESS_TOKEN_ISSUED_AT = parse_value(self.schema, column_value_map, "ACCESS_TOKEN_ISSUED_AT")
        self.ACCESS_TOKEN_EXPIRES_AT = parse_value(self.schema, column_value_map, "ACCESS_TOKEN_EXPIRES_AT")
        self.ACCESS_TOKEN_METADATA = parse_value(self.schema, column_value_map, "ACCESS_TOKEN_METADATA")
        self.ACCESS_TOKEN_TYPE = parse_value(self.schema, column_value_map, "ACCESS_TOKEN_TYPE")
        self.ACCESS_TOKEN_SCOPES = parse_value(self.schema, column_value_map, "ACCESS_TOKEN_SCOPES")
        self.OIDC_ID_TOKEN_VALUE = parse_value(self.schema, column_value_map, "OIDC_ID_TOKEN_VALUE")
        self.OIDC_ID_TOKEN_ISSUED_AT = parse_value(self.schema, column_value_map, "OIDC_ID_TOKEN_ISSUED_AT")
        self.OIDC_ID_TOKEN_EXPIRES_AT = parse_value(self.schema, column_value_map, "OIDC_ID_TOKEN_EXPIRES_AT")
        self.OIDC_ID_TOKEN_METADATA = parse_value(self.schema, column_value_map, "OIDC_ID_TOKEN_METADATA")
        self.REFRESH_TOKEN_VALUE = parse_value(self.schema, column_value_map, "REFRESH_TOKEN_VALUE")
        self.REFRESH_TOKEN_ISSUED_AT = parse_value(self.schema, column_value_map, "REFRESH_TOKEN_ISSUED_AT")
        self.REFRESH_TOKEN_EXPIRES_AT = parse_value(self.schema, column_value_map, "REFRESH_TOKEN_EXPIRES_AT")
        self.REFRESH_TOKEN_METADATA = parse_value(self.schema, column_value_map, "REFRESH_TOKEN_METADATA")

class SFPL_PLAN_TEXT:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_UPDT_NO",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLANTEXT_PLANDESC_FK", ["PLAN_ID","PLAN_UPDT_NO"], "SFPL_PLAN_DESC", ["PLAN_ID","PLAN_UPDT_NO"]),
    ]
    refs = [
        "SFPL_PLAN_TEXT_SUBVAR_FK1",
        "SFFND_HTREFPLNTXT_PLNTXT_FK",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.SFPL_PLAN_TEXT_SUBVAR_FK1 = []
        self.SFFND_HTREFPLNTXT_PLNTXT_FK = []

class SFFND_CUST_LOGO_XREF:
    schema = {
        "CUST_ID": "STRING",
        "OBJECT_ID": "STRING",
        "DEFAULT_LOGO_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CUST_ID",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_CUST_LOGO_XREF_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFFND_CUST_LOGO_XREF_FK1", ["CUST_ID"], "SFFND_CUST_ID_DEF", ["CUST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CUST_ID = parse_value(self.schema, column_value_map, "CUST_ID")
        "Unique identifier of a specific customer."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.DEFAULT_LOGO_FLAG = parse_value(self.schema, column_value_map, "DEFAULT_LOGO_FLAG")
        "If Y then it will default to customer display"
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_CA_DESC_MM_OBJECTS:
    schema = {
        "CA_ID": "STRING",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH1": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH2": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH3": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH4": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH5": "STRING",
        "UCF_CA_DESC_MM_OBJ_NUM1": "NUMBER",
        "UCF_CA_DESC_MM_OBJ_NUM2": "NUMBER",
        "UCF_CA_DESC_MM_OBJ_NUM3": "NUMBER",
        "UCF_CA_DESC_MM_OBJ_DATE1": "STRING",
        "UCF_CA_DESC_MM_OBJ_DATE2": "STRING",
        "UCF_CA_DESC_MM_OBJ_FLAG1": "STRING",
        "UCF_CA_DESC_MM_OBJ_FLAG2": "STRING",
        "UCF_CA_DESC_MM_OBJ_FLAG3": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH255_1": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH255_2": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "RTF_LINK_ID": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "OBJECT_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_DESC_MM_OBJECTS_FK2", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CA_DESC_MM_OBJECTS_FK1", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_CA_DESC_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_DESC_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_DESC_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_DESC_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_DESC_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_DESC_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CA_DESC_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_CA_DESC_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CA_DESC_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CA_DESC_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CA_DESC_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_DESC_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_DESC_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_DESC_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_DESC_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."

class SFWID_ORDER_LIENS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "LIEN_ID": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "INH_LIEN_ID": "STRING",
        "ORDER_ID": "STRING",
        "LIEN_STATUS": "STRING",
        "LIEN_START_DATE": "STRING",
        "LIEN_END_DATE": "STRING",
        "LIEN_WO_PERSIST_AUTH_FLAG": "STRING",
        "AUTHORIZATION_NOTES": "STRING",
        "LIEN_PERSIST_UPTO_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "PART_NO": "STRING",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.LIEN_ID = parse_value(self.schema, column_value_map, "LIEN_ID")
        "Unique identifier of the Lien."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique identifier of the Lot."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique identifier of the Serial."
        self.INH_LIEN_ID = parse_value(self.schema, column_value_map, "INH_LIEN_ID")
        "The unique identifier of the lien being inherited."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Identifier of the Order on which the Lien is created."
        self.LIEN_STATUS = parse_value(self.schema, column_value_map, "LIEN_STATUS")
        "Status of the Lien/Inherited lien."
        self.LIEN_START_DATE = parse_value(self.schema, column_value_map, "LIEN_START_DATE")
        "Timestamp on which the discrepancy is created for the unit."
        self.LIEN_END_DATE = parse_value(self.schema, column_value_map, "LIEN_END_DATE")
        "Timestamp on which the lien is closed, or cancelled."
        self.LIEN_WO_PERSIST_AUTH_FLAG = parse_value(self.schema, column_value_map, "LIEN_WO_PERSIST_AUTH_FLAG")
        "Indicates whether an authorization for the lien must be persisted."
        self.AUTHORIZATION_NOTES = parse_value(self.schema, column_value_map, "AUTHORIZATION_NOTES")
        "Authorization Notes."
        self.LIEN_PERSIST_UPTO_ITEM_ID = parse_value(self.schema, column_value_map, "LIEN_PERSIST_UPTO_ITEM_ID")
        "Indicates the item id of the higher level unit that must be held when the discrepancy lien is inherited."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")

class SFCORE_SQLLIB_FOLDER_ORG:
    schema = {
        "FOLDER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "FOLDER_TYPE": "STRING",
        "FOLDER_TAG": "STRING",
        "FOLDER_DESC": "STRING",
        "PARENT_FOLDER_ID": "STRING",
        "LOAD_REF": "STRING",
        "PARENT_FOLDER_TYPE": "STRING",
    }
    primary_key_columns = [
        "FOLDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_SQLFLDORG_SQLFLDORG_FK", ["PARENT_FOLDER_ID"], "SFCORE_SQLLIB_FOLDER_ORG", ["FOLDER_ID"]),
    ]
    refs = [
        "SFCORE_SQLFLDR_FLDRORG_FK",
        "SFCORE_SQLFLDORG_SQLFLDORG_FK",
    ]
    def __init__(self, column_value_map):
        self.FOLDER_ID = parse_value(self.schema, column_value_map, "FOLDER_ID")
        "Unique, system generated identifier of the folder."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.FOLDER_TYPE = parse_value(self.schema, column_value_map, "FOLDER_TYPE")
        "The purpose/intent of the folder."
        self.FOLDER_TAG = parse_value(self.schema, column_value_map, "FOLDER_TAG")
        "Unique, user provided identifier/name of the folder; can be modified."
        self.FOLDER_DESC = parse_value(self.schema, column_value_map, "FOLDER_DESC")
        "A detailed description of the folder."
        self.PARENT_FOLDER_ID = parse_value(self.schema, column_value_map, "PARENT_FOLDER_ID")
        "Identifier of the folder's parent folder."
        self.LOAD_REF = parse_value(self.schema, column_value_map, "LOAD_REF")
        "Name of the data source when data in the database record has been loaded from another system. Not in use."
        self.PARENT_FOLDER_TYPE = parse_value(self.schema, column_value_map, "PARENT_FOLDER_TYPE")
        "The purpose/intent of the parent folder."
        self.SFCORE_SQLFLDR_FLDRORG_FK = []
        self.SFCORE_SQLFLDORG_SQLFLDORG_FK = []

class SFWID_SERIAL_DESC_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "SERIAL_NO": "STRING",
        "CUST_ORDER_ID": "STRING",
        "SERIAL_STATUS": "STRING",
        "ASGND_WORK_LOC": "STRING",
        "SCHED_PRIORITY": "STRING",
        "FINAL_STORES": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "SERIAL_HOLD_STATUS": "STRING",
        "STATUS_CHG_NOTES": "STRING",
        "STATUS_CHG_REASON": "STRING",
        "HIST_ALT_ID": "STRING",
        "UCF_SERIAL_VCH1": "STRING",
        "UCF_SERIAL_VCH2": "STRING",
        "UCF_SERIAL_VCH3": "STRING",
        "UCF_SERIAL_VCH4": "STRING",
        "UCF_SERIAL_VCH5": "STRING",
        "UCF_SERIAL_VCH6": "STRING",
        "UCF_SERIAL_VCH7": "STRING",
        "UCF_SERIAL_VCH8": "STRING",
        "UCF_SERIAL_VCH9": "STRING",
        "UCF_SERIAL_VCH10": "STRING",
        "UCF_SERIAL_VCH11": "STRING",
        "UCF_SERIAL_VCH12": "STRING",
        "UCF_SERIAL_VCH13": "STRING",
        "UCF_SERIAL_VCH14": "STRING",
        "UCF_SERIAL_VCH15": "STRING",
        "UCF_SERIAL_NUM1": "NUMBER",
        "UCF_SERIAL_NUM2": "NUMBER",
        "UCF_SERIAL_NUM3": "NUMBER",
        "UCF_SERIAL_NUM4": "NUMBER",
        "UCF_SERIAL_NUM5": "NUMBER",
        "UCF_SERIAL_DATE1": "STRING",
        "UCF_SERIAL_DATE2": "STRING",
        "UCF_SERIAL_DATE3": "STRING",
        "UCF_SERIAL_DATE4": "STRING",
        "UCF_SERIAL_DATE5": "STRING",
        "UCF_SERIAL_FLAG1": "STRING",
        "UCF_SERIAL_FLAG2": "STRING",
        "UCF_SERIAL_FLAG3": "STRING",
        "UCF_SERIAL_FLAG4": "STRING",
        "UCF_SERIAL_FLAG5": "STRING",
        "UCF_SERIAL_VCH255_1": "STRING",
        "UCF_SERIAL_VCH255_2": "STRING",
        "UCF_SERIAL_VCH255_3": "STRING",
        "UCF_SERIAL_VCH4000_1": "STRING",
        "UCF_SERIAL_VCH4000_2": "STRING",
        "SERIAL_CONDITION": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "UID_COMPOSITE": "STRING",
        "UID_LABEL": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.CUST_ORDER_ID = parse_value(self.schema, column_value_map, "CUST_ORDER_ID")
        "System-generated identifier of a given order for a given customer."
        self.SERIAL_STATUS = parse_value(self.schema, column_value_map, "SERIAL_STATUS")
        "Status of the given serial number, e.g., COMPLETE, SCRAP"
        self.ASGND_WORK_LOC = parse_value(self.schema, column_value_map, "ASGND_WORK_LOC")
        "The assigned work location for the given work order."
        self.SCHED_PRIORITY = parse_value(self.schema, column_value_map, "SCHED_PRIORITY")
        "The scheduled priority of the associated component, e.g., High, Low, Medium."
        self.FINAL_STORES = parse_value(self.schema, column_value_map, "FINAL_STORES")
        "Storage or process location associated with the final phases of the given work plan or work order."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised start date for the given order."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised end date for the given order."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which work for the work order was actually started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which work for the work order was actually completed."
        self.SERIAL_HOLD_STATUS = parse_value(self.schema, column_value_map, "SERIAL_HOLD_STATUS")
        "Status of the hold on the given serial number."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated component/part."
        self.STATUS_CHG_REASON = parse_value(self.schema, column_value_map, "STATUS_CHG_REASON")
        "Reason for a change in status."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.UCF_SERIAL_VCH1 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH1")
        self.UCF_SERIAL_VCH2 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH2")
        self.UCF_SERIAL_VCH3 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH3")
        self.UCF_SERIAL_VCH4 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH4")
        self.UCF_SERIAL_VCH5 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH5")
        self.UCF_SERIAL_VCH6 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH6")
        self.UCF_SERIAL_VCH7 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH7")
        self.UCF_SERIAL_VCH8 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH8")
        self.UCF_SERIAL_VCH9 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH9")
        self.UCF_SERIAL_VCH10 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH10")
        self.UCF_SERIAL_VCH11 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH11")
        self.UCF_SERIAL_VCH12 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH12")
        self.UCF_SERIAL_VCH13 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH13")
        self.UCF_SERIAL_VCH14 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH14")
        self.UCF_SERIAL_VCH15 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH15")
        self.UCF_SERIAL_NUM1 = parse_value(self.schema, column_value_map, "UCF_SERIAL_NUM1")
        self.UCF_SERIAL_NUM2 = parse_value(self.schema, column_value_map, "UCF_SERIAL_NUM2")
        self.UCF_SERIAL_NUM3 = parse_value(self.schema, column_value_map, "UCF_SERIAL_NUM3")
        self.UCF_SERIAL_NUM4 = parse_value(self.schema, column_value_map, "UCF_SERIAL_NUM4")
        self.UCF_SERIAL_NUM5 = parse_value(self.schema, column_value_map, "UCF_SERIAL_NUM5")
        self.UCF_SERIAL_DATE1 = parse_value(self.schema, column_value_map, "UCF_SERIAL_DATE1")
        self.UCF_SERIAL_DATE2 = parse_value(self.schema, column_value_map, "UCF_SERIAL_DATE2")
        self.UCF_SERIAL_DATE3 = parse_value(self.schema, column_value_map, "UCF_SERIAL_DATE3")
        self.UCF_SERIAL_DATE4 = parse_value(self.schema, column_value_map, "UCF_SERIAL_DATE4")
        self.UCF_SERIAL_DATE5 = parse_value(self.schema, column_value_map, "UCF_SERIAL_DATE5")
        self.UCF_SERIAL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SERIAL_FLAG1")
        self.UCF_SERIAL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SERIAL_FLAG2")
        self.UCF_SERIAL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SERIAL_FLAG3")
        self.UCF_SERIAL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SERIAL_FLAG4")
        self.UCF_SERIAL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SERIAL_FLAG5")
        self.UCF_SERIAL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH255_1")
        self.UCF_SERIAL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH255_2")
        self.UCF_SERIAL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH255_3")
        self.UCF_SERIAL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH4000_1")
        self.UCF_SERIAL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SERIAL_VCH4000_2")
        self.SERIAL_CONDITION = parse_value(self.schema, column_value_map, "SERIAL_CONDITION")
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.UID_COMPOSITE = parse_value(self.schema, column_value_map, "UID_COMPOSITE")
        self.UID_LABEL = parse_value(self.schema, column_value_map, "UID_LABEL")

class SFFND_PLG_GROUP_DEF:
    schema = {
        "PLG_GROUP": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "GROUP_DESC": "STRING",
    }
    primary_key_columns = [
        "PLG_GROUP",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_MFG_BOM_REV_FK6",
        "SFPL_PLAN_DESC_PLG_GRP_FK",
        "SFPL_MFG_BOM_REV_ORIG_FK5",
    ]
    def __init__(self, column_value_map):
        self.PLG_GROUP = parse_value(self.schema, column_value_map, "PLG_GROUP")
        "Unique identifier of the associated process planning group."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.GROUP_DESC = parse_value(self.schema, column_value_map, "GROUP_DESC")
        "A description or name of the process planning group."
        self.SFPL_MFG_BOM_REV_FK6 = []
        self.SFPL_PLAN_DESC_PLG_GRP_FK = []
        self.SFPL_MFG_BOM_REV_ORIG_FK5 = []

class SFWID_ORDER_TOOL_ALT_XREF:
    schema = {
        "ORDER_TOOL_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TOOL_ID": "STRING",
        "ASSIGNED_TOOL_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "ASGND_TOOL_NO": "STRING",
        "ASGND_TOOL_CHG": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH1": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH2": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH3": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH4": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH5": "STRING",
        "UCF_ORDER_TOOL_ALT_NUM1": "NUMBER",
        "UCF_ORDER_TOOL_ALT_NUM2": "NUMBER",
        "UCF_ORDER_TOOL_ALT_NUM3": "NUMBER",
        "UCF_ORDER_TOOL_ALT_FLAG1": "STRING",
        "UCF_ORDER_TOOL_ALT_FLAG2": "STRING",
        "UCF_ORDER_TOOL_ALT_FLAG3": "STRING",
        "UCF_ORDER_TOOL_ALT_DATE1": "STRING",
        "UCF_ORDER_TOOL_ALT_DATE2": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH255_1": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH255_2": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH6": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH7": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH8": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH9": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH10": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH11": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH12": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH13": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH14": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH15": "STRING",
        "UCF_ORDER_TOOL_ALT_NUM4": "NUMBER",
        "UCF_ORDER_TOOL_ALT_NUM5": "NUMBER",
        "UCF_ORDER_TOOL_ALT_DATE3": "STRING",
        "UCF_ORDER_TOOL_ALT_DATE4": "STRING",
        "UCF_ORDER_TOOL_ALT_DATE5": "STRING",
        "UCF_ORDER_TOOL_ALT_FLAG4": "STRING",
        "UCF_ORDER_TOOL_ALT_FLAG5": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH255_3": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH4000_1": "STRING",
        "UCF_ORDER_TOOL_ALT_VCH4000_2": "STRING",
        "PLND_TOOL_NO": "STRING",
        "PLND_TOOL_CHG": "STRING",
        "ALT_PART_RANK": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_TOOL_ALT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_TOOL_ALT_XREF_FK1", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
        DbForeignKey("SFWID_ORDER_TOOL_ALT_XREF_FK2", ["PLND_TOOL_NO","PLND_TOOL_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
        DbForeignKey("SFWID_ORDER_TOOL_ALT_XREF_FK3", ["ASGND_TOOL_NO","ASGND_TOOL_CHG"], "SFFND_TOOL", ["TOOL_NO","TOOL_CHG"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_TOOL_ALT_ID = parse_value(self.schema, column_value_map, "ORDER_TOOL_ALT_ID")
        "Unique system generated tool identiifer that has been used as an alternate."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TOOL_ID = parse_value(self.schema, column_value_map, "TOOL_ID")
        "Tool Data Collection ID."
        self.ASSIGNED_TOOL_FLAG = parse_value(self.schema, column_value_map, "ASSIGNED_TOOL_FLAG")
        "Flag to check if Tool is assigned or not."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.ASGND_TOOL_NO = parse_value(self.schema, column_value_map, "ASGND_TOOL_NO")
        "The identifying number of the required tool as actually assigned to the given operation."
        self.ASGND_TOOL_CHG = parse_value(self.schema, column_value_map, "ASGND_TOOL_CHG")
        "The change letter (revision) of the required tool as actually assigned to the given operation."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_ORDER_TOOL_ALT_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_ORDER_TOOL_ALT_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_ORDER_TOOL_ALT_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_ORDER_TOOL_ALT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_TOOL_ALT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_TOOL_ALT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_TOOL_ALT_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_TOOL_ALT_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_TOOL_ALT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH255_1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH255_2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_TOOL_ALT_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_TOOL_ALT_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_TOOL_ALT_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_TOOL_ALT_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_TOOL_ALT_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_TOOL_ALT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_TOOL_ALT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_TOOL_ALT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_TOOL_ALT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ORDER_TOOL_ALT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_TOOL_ALT_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.PLND_TOOL_NO = parse_value(self.schema, column_value_map, "PLND_TOOL_NO")
        "The identifying number of the required tool as planned in the given operation."
        self.PLND_TOOL_CHG = parse_value(self.schema, column_value_map, "PLND_TOOL_CHG")
        "The change letter (revision) of the required tool as planned in the given operation."
        self.ALT_PART_RANK = parse_value(self.schema, column_value_map, "ALT_PART_RANK")

class SFWID_DAT_COL_SPC_DATA:
    schema = {
        "DP_SUBGROUP_SIZE": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "XBAR_DATAPOINT": "NUMBER",
        "RBAR_DATAPOINT": "NUMBER",
        "OUTLIER_FLAG": "STRING",
        "WE_RULE": "NUMBER",
        "PART_NO": "STRING",
        "STD_DATCOL_ID": "STRING",
        "IDENTITY_COL": "NUMBER",
    }
    primary_key_columns = [
        "IDENTITY_COL",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DP_SUBGROUP_SIZE = parse_value(self.schema, column_value_map, "DP_SUBGROUP_SIZE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.XBAR_DATAPOINT = parse_value(self.schema, column_value_map, "XBAR_DATAPOINT")
        self.RBAR_DATAPOINT = parse_value(self.schema, column_value_map, "RBAR_DATAPOINT")
        self.OUTLIER_FLAG = parse_value(self.schema, column_value_map, "OUTLIER_FLAG")
        self.WE_RULE = parse_value(self.schema, column_value_map, "WE_RULE")
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier of the component/part."
        self.STD_DATCOL_ID = parse_value(self.schema, column_value_map, "STD_DATCOL_ID")
        self.IDENTITY_COL = parse_value(self.schema, column_value_map, "IDENTITY_COL")

class SFQA_CA_TEAM_ASSIGNMENT:
    schema = {
        "CA_ID": "STRING",
        "USERID": "STRING",
        "FIRST_NAME": "STRING",
        "LAST_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TEAM_LEAD_FLAG": "STRING",
        "CAN_MODIFY_FLAG": "STRING",
        "FACILITATOR_FLAG": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH1": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH2": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH3": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH4": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH5": "STRING",
        "UCF_CA_TEAM_ASSIGN_NUM1": "NUMBER",
        "UCF_CA_TEAM_ASSIGN_NUM2": "NUMBER",
        "UCF_CA_TEAM_ASSIGN_NUM3": "NUMBER",
        "UCF_CA_TEAM_ASSIGN_DATE1": "STRING",
        "UCF_CA_TEAM_ASSIGN_DATE2": "STRING",
        "UCF_CA_TEAM_ASSIGN_FLAG1": "STRING",
        "UCF_CA_TEAM_ASSIGN_FLAG2": "STRING",
        "UCF_CA_TEAM_ASSIGN_FLAG3": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH255_1": "STRING",
        "UCF_CA_TEAM_ASSIGN_VCH255_2": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_TEAM_ASSIGNMENT_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CA_TEAM_ASSIGNMENT_FK2", ["USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.FIRST_NAME = parse_value(self.schema, column_value_map, "FIRST_NAME")
        self.LAST_NAME = parse_value(self.schema, column_value_map, "LAST_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.TEAM_LEAD_FLAG = parse_value(self.schema, column_value_map, "TEAM_LEAD_FLAG")
        self.CAN_MODIFY_FLAG = parse_value(self.schema, column_value_map, "CAN_MODIFY_FLAG")
        self.FACILITATOR_FLAG = parse_value(self.schema, column_value_map, "FACILITATOR_FLAG")
        "A flag (Y/N) indicating whether the team member is a Gate Keeper or not."
        self.UCF_CA_TEAM_ASSIGN_VCH1 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_TEAM_ASSIGN_VCH2 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_TEAM_ASSIGN_VCH3 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_TEAM_ASSIGN_VCH4 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_TEAM_ASSIGN_VCH5 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_TEAM_ASSIGN_NUM1 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CA_TEAM_ASSIGN_NUM2 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_CA_TEAM_ASSIGN_NUM3 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CA_TEAM_ASSIGN_DATE1 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CA_TEAM_ASSIGN_DATE2 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CA_TEAM_ASSIGN_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_TEAM_ASSIGN_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_TEAM_ASSIGN_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_TEAM_ASSIGN_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_TEAM_ASSIGN_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CA_TEAM_ASSIGN_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."

class SFPL_PWP_DESC:
    schema = {
        "PWP_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PWP_STATUS": "STRING",
        "PWP_DESC": "STRING",
        "PWP_NOTE": "STRING",
        "BOM_NO": "STRING",
        "MFG_BOM_CHG": "STRING",
        "EXCLUDE_ITEM_LIST_PARTS_FLAG": "STRING",
        "CHG_AUTH_NUM": "STRING",
        "CHG_AUTH_TYPE": "STRING",
        "PRIORITY": "STRING",
        "START_DATE": "STRING",
        "END_DATE": "STRING",
        "DISPOSITION": "STRING",
        "RESP_USER_ID": "STRING",
        "EFF_FROM": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "DATE",
    }
    primary_key_columns = [
        "PWP_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PWP_DESC_FK3", ["RESP_USER_ID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFPL_PWP_DESC_FK2", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
    ]
    refs = [
        "SFCORE_MM_OBJECT_PWP_FK",
        "SFPL_PLANNED_ACTIONS_FK14",
        "SFSQA_PWP_INSP_DEF_XREF_FK2",
        "SFPL_PLAN_PWP_XREF_FK1",
        "SFSQA_PWP_INSP_PLAN_XREF_FK2",
    ]
    def __init__(self, column_value_map):
        self.PWP_ID = parse_value(self.schema, column_value_map, "PWP_ID")
        "The unique identifier of a work package."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PWP_STATUS = parse_value(self.schema, column_value_map, "PWP_STATUS")
        "The status of the work package, ACTIVE or CLOSED."
        self.PWP_DESC = parse_value(self.schema, column_value_map, "PWP_DESC")
        "A description or name of the work package."
        self.PWP_NOTE = parse_value(self.schema, column_value_map, "PWP_NOTE")
        "Additional information concerning the work package."
        self.BOM_NO = parse_value(self.schema, column_value_map, "BOM_NO")
        self.MFG_BOM_CHG = parse_value(self.schema, column_value_map, "MFG_BOM_CHG")
        self.EXCLUDE_ITEM_LIST_PARTS_FLAG = parse_value(self.schema, column_value_map, "EXCLUDE_ITEM_LIST_PARTS_FLAG")
        self.CHG_AUTH_NUM = parse_value(self.schema, column_value_map, "CHG_AUTH_NUM")
        self.CHG_AUTH_TYPE = parse_value(self.schema, column_value_map, "CHG_AUTH_TYPE")
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        self.START_DATE = parse_value(self.schema, column_value_map, "START_DATE")
        self.END_DATE = parse_value(self.schema, column_value_map, "END_DATE")
        self.DISPOSITION = parse_value(self.schema, column_value_map, "DISPOSITION")
        self.RESP_USER_ID = parse_value(self.schema, column_value_map, "RESP_USER_ID")
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.SFCORE_MM_OBJECT_PWP_FK = []
        self.SFPL_PLANNED_ACTIONS_FK14 = []
        self.SFSQA_PWP_INSP_DEF_XREF_FK2 = []
        self.SFPL_PLAN_PWP_XREF_FK1 = []
        self.SFSQA_PWP_INSP_PLAN_XREF_FK2 = []

class SFQA_DISC_PROCESS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "PROCESS_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "RESP_LOCATION_ID": "STRING",
        "RESP_DEPARTMENT_ID": "STRING",
        "RESP_CENTER_ID": "STRING",
        "DEFECT_TYPE": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.RESP_LOCATION_ID = parse_value(self.schema, column_value_map, "RESP_LOCATION_ID")
        self.RESP_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "RESP_DEPARTMENT_ID")
        self.RESP_CENTER_ID = parse_value(self.schema, column_value_map, "RESP_CENTER_ID")
        self.DEFECT_TYPE = parse_value(self.schema, column_value_map, "DEFECT_TYPE")
        "Type or classification of defect."

class SFPL_STEP_DAT_COL_LIMIT:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "DAT_COL_ID": "STRING",
        "DAT_COL_LIMIT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UPPER_LIMIT": "STRING",
        "LOWER_LIMIT": "STRING",
        "TARGET_VALUE": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "DAT_COL_ID",
        "DAT_COL_LIMIT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STPDTCLLMT_STPDTCL_FK", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO","DAT_COL_ID"], "SFPL_STEP_DAT_COL", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO","DAT_COL_ID"]),
    ]
    refs = [
        "SFPL_STPDTCL_EFF_STPDTCLLMT_FK",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        "Unique, system-generated identifier of the data collection."
        self.DAT_COL_LIMIT_ID = parse_value(self.schema, column_value_map, "DAT_COL_LIMIT_ID")
        "The unique identifier/sequence of a particular data collection value domain definition associated with the data collection point."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UPPER_LIMIT = parse_value(self.schema, column_value_map, "UPPER_LIMIT")
        "The highest allowable data value for the given data collection."
        self.LOWER_LIMIT = parse_value(self.schema, column_value_map, "LOWER_LIMIT")
        "The lowest allowable data value for the given data collection."
        self.TARGET_VALUE = parse_value(self.schema, column_value_map, "TARGET_VALUE")
        "The optimal/expected value for the given data collection."
        self.SFPL_STPDTCL_EFF_STPDTCLLMT_FK = []

class SFFND_SQL_QUERY_TIME_LOG:
    schema = {
        "RECORD_ID": "STRING",
        "SQL_TYPE": "STRING",
        "CALLER_NAME": "STRING",
        "SQL_TEXT": "STRING",
        "TIME_TAKEN": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
    }
    primary_key_columns = [
        "RECORD_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.RECORD_ID = parse_value(self.schema, column_value_map, "RECORD_ID")
        "Unique identified record."
        self.SQL_TYPE = parse_value(self.schema, column_value_map, "SQL_TYPE")
        "The type of sql stement."
        self.CALLER_NAME = parse_value(self.schema, column_value_map, "CALLER_NAME")
        "The name of the calling object."
        self.SQL_TEXT = parse_value(self.schema, column_value_map, "SQL_TEXT")
        "The sql statement text."
        self.TIME_TAKEN = parse_value(self.schema, column_value_map, "TIME_TAKEN")
        "The time taken to execute the sql text."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFPL_PLAN_IMAGE:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PLAN_IMAGE": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_VERSION",
        "PLAN_REVISION",
        "PLAN_ALTERATIONS",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLANIMG_PLANREV_FK", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.PLAN_IMAGE = parse_value(self.schema, column_value_map, "PLAN_IMAGE")

class SFQA_CA_AFFECTED_PERF_DESC:
    schema = {
        "CA_ID": "STRING",
        "AFFECTED_PERFORMANCE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "AFFECTED_PERFORMANCE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_AFFECTED_PERF_DESC_FK2", ["AFFECTED_PERFORMANCE"], "SFQA_AFFECTED_PERFORMANCE_DEF", ["AFFECTED_PERFORMANCE"]),
        DbForeignKey("SFQA_CA_AFFECTED_PERF_DESC_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.AFFECTED_PERFORMANCE = parse_value(self.schema, column_value_map, "AFFECTED_PERFORMANCE")
        "Affected Performance Area of Corrective Action."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_OPERATION_TEXT_SUBVAR:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "OPER_UPDT_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "OPER_UPDT_NO",
        "TEXT_TYPE",
        "TAG",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_OPERATION_TEXT_SV_FK1", ["PLAN_ID","OPER_KEY","OPER_UPDT_NO","TEXT_TYPE"], "SFPL_OPERATION_TEXT", ["PLAN_ID","OPER_KEY","OPER_UPDT_NO","TEXT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFQRTZ_BLOB_TRIGGERS:
    schema = {
        "SCHED_NAME": "STRING",
        "TRIGGER_NAME": "STRING",
        "TRIGGER_GROUP": "STRING",
        "BLOB_DATA": "STRING",
    }
    primary_key_columns = [
        "SCHED_NAME",
        "TRIGGER_NAME",
        "TRIGGER_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFQRTZ_BLOB_TRIG_TO_TRIG_FK", ["SCHED_NAME","TRIGGER_NAME","TRIGGER_GROUP"], "SFQRTZ_TRIGGERS", ["SCHED_NAME","TRIGGER_NAME","TRIGGER_GROUP"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SCHED_NAME = parse_value(self.schema, column_value_map, "SCHED_NAME")
        self.TRIGGER_NAME = parse_value(self.schema, column_value_map, "TRIGGER_NAME")
        self.TRIGGER_GROUP = parse_value(self.schema, column_value_map, "TRIGGER_GROUP")
        self.BLOB_DATA = parse_value(self.schema, column_value_map, "BLOB_DATA")

class SFCORE_TYPES:
    schema = {
        "TYPE_NAME": "STRING",
        "TYPE_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "TYPE_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TYPE_NAME = parse_value(self.schema, column_value_map, "TYPE_NAME")
        "name of the type"
        self.TYPE_DESC = parse_value(self.schema, column_value_map, "TYPE_DESC")
        "description of the type"
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFFND_OBJECT_CLASSIFICATION:
    schema = {
        "OBJECT_ID": "STRING",
        "OBJECT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "FCF_OBJCLASS_VCH1": "STRING",
        "FCF_OBJCLASS_VCH2": "STRING",
        "FCF_OBJCLASS_VCH3": "STRING",
        "FCF_OBJCLASS_VCH4": "STRING",
        "FCF_OBJCLASS_VCH5": "STRING",
        "FCF_OBJCLASS_VCH6": "STRING",
        "FCF_OBJCLASS_VCH7": "STRING",
        "FCF_OBJCLASS_VCH8": "STRING",
        "FCF_OBJCLASS_VCH9": "STRING",
        "FCF_OBJCLASS_VCH10": "STRING",
        "FCF_OBJCLASS_VCH11": "STRING",
        "FCF_OBJCLASS_VCH12": "STRING",
        "FCF_OBJCLASS_VCH13": "STRING",
        "FCF_OBJCLASS_VCH14": "STRING",
        "FCF_OBJCLASS_VCH15": "STRING",
        "FCF_OBJCLASS_NUM1": "NUMBER",
        "FCF_OBJCLASS_NUM2": "NUMBER",
        "FCF_OBJCLASS_NUM3": "NUMBER",
        "FCF_OBJCLASS_NUM4": "NUMBER",
        "FCF_OBJCLASS_NUM5": "NUMBER",
        "FCF_OBJCLASS_DATE1": "STRING",
        "FCF_OBJCLASS_DATE2": "STRING",
        "FCF_OBJCLASS_DATE3": "STRING",
        "FCF_OBJCLASS_DATE4": "STRING",
        "FCF_OBJCLASS_DATE5": "STRING",
        "FCF_OBJCLASS_FLAG1": "STRING",
        "FCF_OBJCLASS_FLAG2": "STRING",
        "FCF_OBJCLASS_FLAG3": "STRING",
        "FCF_OBJCLASS_FLAG4": "STRING",
        "FCF_OBJCLASS_FLAG5": "STRING",
        "FCF_OBJCLASS_LVCH1": "STRING",
        "FCF_OBJCLASS_LVCH2": "STRING",
        "FCF_OBJCLASS_LVCH3": "STRING",
        "FCF_OBJCLASS_LVCH4": "STRING",
        "FCF_OBJCLASS_LVCH5": "STRING",
        "FCF_OBJCLASS_CLOB1": "STRING",
        "UCF_VCH1": "STRING",
        "UCF_VCH2": "STRING",
        "UCF_VCH3": "STRING",
        "UCF_VCH4": "STRING",
        "UCF_VCH5": "STRING",
        "UCF_VCH6": "STRING",
        "UCF_VCH7": "STRING",
        "UCF_VCH8": "STRING",
        "UCF_VCH9": "STRING",
        "UCF_VCH10": "STRING",
        "UCF_VCH11": "STRING",
        "UCF_VCH12": "STRING",
        "UCF_VCH13": "STRING",
        "UCF_VCH14": "STRING",
        "UCF_VCH15": "STRING",
        "UCF_NUM1": "NUMBER",
        "UCF_NUM2": "NUMBER",
        "UCF_NUM3": "NUMBER",
        "UCF_NUM4": "NUMBER",
        "UCF_NUM5": "NUMBER",
        "UCF_DATE1": "STRING",
        "UCF_DATE2": "STRING",
        "UCF_DATE3": "STRING",
        "UCF_DATE4": "STRING",
        "UCF_DATE5": "STRING",
        "UCF_FLAG1": "STRING",
        "UCF_FLAG2": "STRING",
        "UCF_FLAG3": "STRING",
        "UCF_FLAG4": "STRING",
        "UCF_FLAG5": "STRING",
        "SECURITY_GROUP": "STRING",
        "UCF_VCH255_1": "STRING",
        "UCF_VCH255_2": "STRING",
        "UCF_VCH255_3": "STRING",
        "UCF_VCH4000_1": "STRING",
        "UCF_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_OBJECT_CLASS_FK1", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.FCF_OBJCLASS_VCH1 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH1")
        self.FCF_OBJCLASS_VCH2 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH2")
        self.FCF_OBJCLASS_VCH3 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH3")
        self.FCF_OBJCLASS_VCH4 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH4")
        self.FCF_OBJCLASS_VCH5 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH5")
        self.FCF_OBJCLASS_VCH6 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH6")
        self.FCF_OBJCLASS_VCH7 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH7")
        self.FCF_OBJCLASS_VCH8 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH8")
        self.FCF_OBJCLASS_VCH9 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH9")
        self.FCF_OBJCLASS_VCH10 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH10")
        self.FCF_OBJCLASS_VCH11 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH11")
        self.FCF_OBJCLASS_VCH12 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH12")
        self.FCF_OBJCLASS_VCH13 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH13")
        self.FCF_OBJCLASS_VCH14 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH14")
        self.FCF_OBJCLASS_VCH15 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_VCH15")
        self.FCF_OBJCLASS_NUM1 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_NUM1")
        self.FCF_OBJCLASS_NUM2 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_NUM2")
        self.FCF_OBJCLASS_NUM3 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_NUM3")
        self.FCF_OBJCLASS_NUM4 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_NUM4")
        self.FCF_OBJCLASS_NUM5 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_NUM5")
        self.FCF_OBJCLASS_DATE1 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_DATE1")
        self.FCF_OBJCLASS_DATE2 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_DATE2")
        self.FCF_OBJCLASS_DATE3 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_DATE3")
        self.FCF_OBJCLASS_DATE4 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_DATE4")
        self.FCF_OBJCLASS_DATE5 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_DATE5")
        self.FCF_OBJCLASS_FLAG1 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_FLAG1")
        self.FCF_OBJCLASS_FLAG2 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_FLAG2")
        self.FCF_OBJCLASS_FLAG3 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_FLAG3")
        self.FCF_OBJCLASS_FLAG4 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_FLAG4")
        self.FCF_OBJCLASS_FLAG5 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_FLAG5")
        self.FCF_OBJCLASS_LVCH1 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_LVCH1")
        self.FCF_OBJCLASS_LVCH2 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_LVCH2")
        self.FCF_OBJCLASS_LVCH3 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_LVCH3")
        self.FCF_OBJCLASS_LVCH4 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_LVCH4")
        self.FCF_OBJCLASS_LVCH5 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_LVCH5")
        self.FCF_OBJCLASS_CLOB1 = parse_value(self.schema, column_value_map, "FCF_OBJCLASS_CLOB1")
        self.UCF_VCH1 = parse_value(self.schema, column_value_map, "UCF_VCH1")
        self.UCF_VCH2 = parse_value(self.schema, column_value_map, "UCF_VCH2")
        self.UCF_VCH3 = parse_value(self.schema, column_value_map, "UCF_VCH3")
        self.UCF_VCH4 = parse_value(self.schema, column_value_map, "UCF_VCH4")
        self.UCF_VCH5 = parse_value(self.schema, column_value_map, "UCF_VCH5")
        self.UCF_VCH6 = parse_value(self.schema, column_value_map, "UCF_VCH6")
        self.UCF_VCH7 = parse_value(self.schema, column_value_map, "UCF_VCH7")
        self.UCF_VCH8 = parse_value(self.schema, column_value_map, "UCF_VCH8")
        self.UCF_VCH9 = parse_value(self.schema, column_value_map, "UCF_VCH9")
        self.UCF_VCH10 = parse_value(self.schema, column_value_map, "UCF_VCH10")
        self.UCF_VCH11 = parse_value(self.schema, column_value_map, "UCF_VCH11")
        self.UCF_VCH12 = parse_value(self.schema, column_value_map, "UCF_VCH12")
        self.UCF_VCH13 = parse_value(self.schema, column_value_map, "UCF_VCH13")
        self.UCF_VCH14 = parse_value(self.schema, column_value_map, "UCF_VCH14")
        self.UCF_VCH15 = parse_value(self.schema, column_value_map, "UCF_VCH15")
        self.UCF_NUM1 = parse_value(self.schema, column_value_map, "UCF_NUM1")
        self.UCF_NUM2 = parse_value(self.schema, column_value_map, "UCF_NUM2")
        self.UCF_NUM3 = parse_value(self.schema, column_value_map, "UCF_NUM3")
        self.UCF_NUM4 = parse_value(self.schema, column_value_map, "UCF_NUM4")
        self.UCF_NUM5 = parse_value(self.schema, column_value_map, "UCF_NUM5")
        self.UCF_DATE1 = parse_value(self.schema, column_value_map, "UCF_DATE1")
        self.UCF_DATE2 = parse_value(self.schema, column_value_map, "UCF_DATE2")
        self.UCF_DATE3 = parse_value(self.schema, column_value_map, "UCF_DATE3")
        self.UCF_DATE4 = parse_value(self.schema, column_value_map, "UCF_DATE4")
        self.UCF_DATE5 = parse_value(self.schema, column_value_map, "UCF_DATE5")
        self.UCF_FLAG1 = parse_value(self.schema, column_value_map, "UCF_FLAG1")
        self.UCF_FLAG2 = parse_value(self.schema, column_value_map, "UCF_FLAG2")
        self.UCF_FLAG3 = parse_value(self.schema, column_value_map, "UCF_FLAG3")
        self.UCF_FLAG4 = parse_value(self.schema, column_value_map, "UCF_FLAG4")
        self.UCF_FLAG5 = parse_value(self.schema, column_value_map, "UCF_FLAG5")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.UCF_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."

class SFDB_SUPERCEDES_PARAM_CLASSES:
    schema = {
        "PARAMETER_CLASS": "NUMBER",
        "MEANING": "STRING",
        "WID_MEANING": "STRING",
    }
    primary_key_columns = [
        "PARAMETER_CLASS",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PARAMETER_CLASS = parse_value(self.schema, column_value_map, "PARAMETER_CLASS")
        self.MEANING = parse_value(self.schema, column_value_map, "MEANING")
        self.WID_MEANING = parse_value(self.schema, column_value_map, "WID_MEANING")
        "Meaning of a given class of parameters within work instruction module."

class SFPL_ITEM_HOLD_TYPE_DEF:
    schema = {
        "HOLD_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "HOLD_TYPE_DESC": "STRING",
        "HOLD_CATEGORY": "STRING",
    }
    primary_key_columns = [
        "HOLD_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_ITEM_HOLDS_HOLDTYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.HOLD_TYPE = parse_value(self.schema, column_value_map, "HOLD_TYPE")
        "Type or classification of hold."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.HOLD_TYPE_DESC = parse_value(self.schema, column_value_map, "HOLD_TYPE_DESC")
        "Description of the item hold type."
        self.HOLD_CATEGORY = parse_value(self.schema, column_value_map, "HOLD_CATEGORY")
        self.SFPL_ITEM_HOLDS_HOLDTYPE_FK = []

class SFQA_DISC_NOTIFICATION_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_TAG": "STRING",
        "OBJECT_REV": "STRING",
        "PROPAGATION_ACTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "CURRENT_OBJECT_ID": "STRING",
        "CURRENT_REVISION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.OBJECT_TAG = parse_value(self.schema, column_value_map, "OBJECT_TAG")
        "User provided unique identifier of the multimedia object; can be NULL and can be modified."
        self.OBJECT_REV = parse_value(self.schema, column_value_map, "OBJECT_REV")
        "The system generated revision number of the multimedia object."
        self.PROPAGATION_ACTION = parse_value(self.schema, column_value_map, "PROPAGATION_ACTION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.CURRENT_OBJECT_ID = parse_value(self.schema, column_value_map, "CURRENT_OBJECT_ID")
        "Unique system generated identifier for a given multimedia object tht now has a more recent revision."
        self.CURRENT_REVISION = parse_value(self.schema, column_value_map, "CURRENT_REVISION")

class SFFND_WORK_DEPT_DEF:
    schema = {
        "LOCATION_ID": "STRING",
        "DEPARTMENT_ID": "STRING",
        "WORK_DEPT": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "DEPT_TITLE": "STRING",
        "UCF_WORK_DEPT_VCH1": "STRING",
        "UCF_WORK_DEPT_VCH2": "STRING",
        "UCF_WORK_DEPT_VCH3": "STRING",
        "UCF_WORK_DEPT_VCH4": "STRING",
        "UCF_WORK_DEPT_VCH5": "STRING",
        "UCF_WORK_DEPT_NUM1": "NUMBER",
        "UCF_WORK_DEPT_NUM2": "NUMBER",
        "UCF_WORK_DEPT_NUM3": "NUMBER",
        "UCF_WORK_DEPT_DATE1": "STRING",
        "UCF_WORK_DEPT_DATE2": "STRING",
        "UCF_WORK_DEPT_FLAG1": "STRING",
        "UCF_WORK_DEPT_FLAG2": "STRING",
        "UCF_WORK_DEPT_FLAG3": "STRING",
        "UCF_WORK_DEPT_VCH255_1": "STRING",
        "UCF_WORK_DEPT_VCH255_2": "STRING",
    }
    primary_key_columns = [
        "LOCATION_ID",
        "DEPARTMENT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_WORKDEPT_WORKLOC_FK", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
    ]
    refs = [
        "SFFND_WORK_CNTR_DEF_DEPT_FK",
        "SFWID_ORDER_CYCLES_FK2",
        "SFSQA_AUDIT_PLNPRO_SCHD_FK4",
        "SFWID_OPER_DESC_ALT_FK3",
        "SFWID_OPER_DESC_DEPARTMENT_FK",
        "SFFND_TL_SRL_HOME_DEPT_FK",
        "SFFND_TL_SRL_CALIB_DEPT_FK",
        "SFFND_TL_SRL_ISSUED_DEPT_FK",
        "SFSQA_INSP_ORDER_DESC_FK9",
        "SFPL_OPER_DESC_DEPT_FK",
        "SFWID_OPERATIONS_DEPARTMENT_FK",
        "SFFND_USER_WORK_CENTERS_FK3",
        "SFWID_ORDER_DESC_FK10",
        "SFWID_ORDER_DESC_FK09",
        "SFWID_ORDER_DESC_FK08",
        "SFQA_CA_DESC_FK12",
        "SFQA_DISC_ITEM_FK17",
        "SFQA_DISC_ITEM_REJECT_DEPT_FK",
        "SFSQA_INSP_ORDER_INSP_STEP_FK6",
        "SFSQA_INSP_PLAN_STEP_LOC_FK2",
        "SFFND_USER_DEPT_FK",
        "SFQA_CA_RESP_LDC_FK3",
    ]
    def __init__(self, column_value_map):
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.DEPARTMENT_ID = parse_value(self.schema, column_value_map, "DEPARTMENT_ID")
        "Unique, system-generated identifier of the given Work Department."
        self.WORK_DEPT = parse_value(self.schema, column_value_map, "WORK_DEPT")
        "The identifier of a manufacturing work department at the work location."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.DEPT_TITLE = parse_value(self.schema, column_value_map, "DEPT_TITLE")
        "A descriptive title/name of the manufacturing work department."
        self.UCF_WORK_DEPT_VCH1 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_WORK_DEPT_VCH2 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_VCH2")
        self.UCF_WORK_DEPT_VCH3 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_VCH3")
        self.UCF_WORK_DEPT_VCH4 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_VCH4")
        self.UCF_WORK_DEPT_VCH5 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_VCH5")
        self.UCF_WORK_DEPT_NUM1 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_NUM1")
        self.UCF_WORK_DEPT_NUM2 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_NUM2")
        self.UCF_WORK_DEPT_NUM3 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_NUM3")
        self.UCF_WORK_DEPT_DATE1 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_DATE1")
        self.UCF_WORK_DEPT_DATE2 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_DATE2")
        self.UCF_WORK_DEPT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_FLAG1")
        self.UCF_WORK_DEPT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_FLAG2")
        self.UCF_WORK_DEPT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_FLAG3")
        self.UCF_WORK_DEPT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_VCH255_1")
        self.UCF_WORK_DEPT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_WORK_DEPT_VCH255_2")
        self.SFFND_WORK_CNTR_DEF_DEPT_FK = []
        self.SFWID_ORDER_CYCLES_FK2 = []
        self.SFSQA_AUDIT_PLNPRO_SCHD_FK4 = []
        self.SFWID_OPER_DESC_ALT_FK3 = []
        self.SFWID_OPER_DESC_DEPARTMENT_FK = []
        self.SFFND_TL_SRL_HOME_DEPT_FK = []
        self.SFFND_TL_SRL_CALIB_DEPT_FK = []
        self.SFFND_TL_SRL_ISSUED_DEPT_FK = []
        self.SFSQA_INSP_ORDER_DESC_FK9 = []
        self.SFPL_OPER_DESC_DEPT_FK = []
        self.SFWID_OPERATIONS_DEPARTMENT_FK = []
        self.SFFND_USER_WORK_CENTERS_FK3 = []
        self.SFWID_ORDER_DESC_FK10 = []
        self.SFWID_ORDER_DESC_FK09 = []
        self.SFWID_ORDER_DESC_FK08 = []
        self.SFQA_CA_DESC_FK12 = []
        self.SFQA_DISC_ITEM_FK17 = []
        self.SFQA_DISC_ITEM_REJECT_DEPT_FK = []
        self.SFSQA_INSP_ORDER_INSP_STEP_FK6 = []
        self.SFSQA_INSP_PLAN_STEP_LOC_FK2 = []
        self.SFFND_USER_DEPT_FK = []
        self.SFQA_CA_RESP_LDC_FK3 = []

class SFWID_OPER_TEXT_SUBVAR:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "TEXT_TYPE",
        "TAG",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_TEXT_SV_FK1", ["ORDER_ID","OPER_KEY","STEP_KEY","TEXT_TYPE"], "SFWID_OPER_TEXT", ["ORDER_ID","OPER_KEY","STEP_KEY","TEXT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFFND_LANGUAGE:
    schema = {
        "LANGUAGE_CODE": "STRING",
        "LANGUAGE_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "LANGUAGE_CODE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_TEXT_OBJECT_FK1",
        "SFPL_PLAN_DESC_LANGUAGE_FK",
        "SFCORE_MESSAGES_FK1",
        "SFWID_ORDER_DESC_LANGUAGE_FK",
        "SFFND_LANGUAGE_DATA_FK1",
    ]
    def __init__(self, column_value_map):
        self.LANGUAGE_CODE = parse_value(self.schema, column_value_map, "LANGUAGE_CODE")
        "Language code as per ISO639 standard."
        self.LANGUAGE_NAME = parse_value(self.schema, column_value_map, "LANGUAGE_NAME")
        "Major name of the Language corresponding to the language code."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFFND_TEXT_OBJECT_FK1 = []
        self.SFPL_PLAN_DESC_LANGUAGE_FK = []
        self.SFCORE_MESSAGES_FK1 = []
        self.SFWID_ORDER_DESC_LANGUAGE_FK = []
        self.SFFND_LANGUAGE_DATA_FK1 = []

class SFPL_ENG_BOM:
    schema = {
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "PARENT_PART_NO": "STRING",
        "PARENT_PART_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "FIND_NO": "STRING",
        "QTY": "NUMBER",
        "DATASOURCE": "STRING",
    }
    primary_key_columns = [
        "PART_NO",
        "PART_CHG",
        "PARENT_PART_NO",
        "PARENT_PART_CHG",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_ENG_BOM_PPART_FK", ["PARENT_PART_NO","PARENT_PART_CHG"], "SFPL_ITEM_DESC_MASTER_ALL", ["PART_NO","PART_CHG"]),
    ]
    refs = [
        "SFPL_ENG_BOM_REF_BOM_FK",
    ]
    def __init__(self, column_value_map):
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The engineering part number of a component part that is used to build the parent part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.PARENT_PART_NO = parse_value(self.schema, column_value_map, "PARENT_PART_NO")
        "The part number of the parent part."
        self.PARENT_PART_CHG = parse_value(self.schema, column_value_map, "PARENT_PART_CHG")
        "The change letter of the parent part."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.QTY = parse_value(self.schema, column_value_map, "QTY")
        "The quantity of component item/parts required to fabricate/assemble the parent part."
        self.DATASOURCE = parse_value(self.schema, column_value_map, "DATASOURCE")
        "The source system from which data in this record has been originated."
        self.SFPL_ENG_BOM_REF_BOM_FK = []

class SFPL_MFG_TARGET_BOMS:
    schema = {
        "TARGET_BOM_ID": "STRING",
        "BOM_ID": "STRING",
        "CONNECTION_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "TARGET_BOM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_TARGET_BOMS_FK1", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TARGET_BOM_ID = parse_value(self.schema, column_value_map, "TARGET_BOM_ID")
        "Unique, system-generated ID for Source BOMs."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "BOM_ID of Inserted BOM as Target."
        self.CONNECTION_ID = parse_value(self.schema, column_value_map, "CONNECTION_ID")
        "Connection Id of the User Session."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_MFG_BOM_COMP_CONFIG_ORIG:
    schema = {
        "BOM_ID": "STRING",
        "BOM_COMP_ID": "STRING",
        "CONFIG_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
        "BOM_COMP_ID",
        "CONFIG_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_COMP_CONF_ORG_FK2", ["BOM_ID","BOM_COMP_ID"], "SFPL_MFG_BOM_COMP_ORIG", ["BOM_ID","BOM_COMP_ID"]),
        DbForeignKey("SFPL_MFG_BOM_COMP_CONF_ORG_FK1", ["CONFIG_ID"], "SFFND_CONFIG_DEF", ["CONFIG_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique, system-generated identifier of a given BOM."
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        "Unique, system-generated identifier of a given BOM component."
        self.CONFIG_ID = parse_value(self.schema, column_value_map, "CONFIG_ID")
        "Unique system generated column to identify each configuration value."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_USER_GROUP_JOB_LAST_POS:
    schema = {
        "USERID": "STRING",
        "GROUP_JOB_NO": "STRING",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG_TYPE": "STRING",
        "REF_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "USERID",
        "GROUP_JOB_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_USER_GRP_JOB_LST_POS_FK1", ["GROUP_JOB_NO"], "SFWID_GROUP_JOB", ["GROUP_JOB_NO"]),
        DbForeignKey("SFWID_USER_GRP_JOB_LST_POS_FK2", ["USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "User performing Walk-Through."
        self.GROUP_JOB_NO = parse_value(self.schema, column_value_map, "GROUP_JOB_NO")
        "Unique, system-generated identifier of a given group job."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.TAG_TYPE = parse_value(self.schema, column_value_map, "TAG_TYPE")
        "Tag Type."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_ORDERS:
    schema = {
        "ORDER_NO": "STRING",
        "ORDER_ID": "STRING",
        "ORDER_TYPE": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "PROGRAM": "STRING",
        "ORDER_STATUS": "STRING",
        "ORDER_HOLD_STATUS": "STRING",
        "ORDER_QTY": "NUMBER",
        "ORIG_ORDER_ID": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "ITEM_ID": "STRING",
        "NEEDS_REVIEW_FLAG": "STRING",
        "ORDER_SCRAP_QTY": "NUMBER",
        "ORDER_COMPLETE_QTY": "NUMBER",
        "ORDER_STOP_QTY": "NUMBER",
        "SPLIT_FLAG": "STRING",
        "UNSCRAP_FLAG": "STRING",
        "PARENT_ORDER_ID": "STRING",
        "SUPERCEDED_ORDER_ID": "STRING",
        "SUPERCEDES_ORDER": "STRING",
        "ORDER_CUST_ID": "STRING",
        "SCHED_PRIORITY": "STRING",
        "ALT_ID": "STRING",
        "ALT_STATUS": "STRING",
        "ASGND_WORK_LOC": "STRING",
        "UNIT_TYPE": "STRING",
        "UNIT_NO": "STRING",
        "ORDER_UOM": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "PROJECT": "STRING",
        "PLAN_TYPE": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "SECURITY_GROUP": "STRING",
    }
    primary_key_columns = [
        "ORDER_NO",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        "Unique, user-assigned identifier of a given work order."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.ORDER_TYPE = parse_value(self.schema, column_value_map, "ORDER_TYPE")
        "Type or classification of order."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.ORDER_STATUS = parse_value(self.schema, column_value_map, "ORDER_STATUS")
        "The status of the work order, e.g., ACTIVE, COMPLETE, IN QUEUE, or CANCEL."
        self.ORDER_HOLD_STATUS = parse_value(self.schema, column_value_map, "ORDER_HOLD_STATUS")
        "The on-hold status of the work order, OPEN or CLOSED."
        self.ORDER_QTY = parse_value(self.schema, column_value_map, "ORDER_QTY")
        "The quantity of the part to be made for the given work order. Defaults to PLND_ORDER_QTY but can be changed."
        self.ORIG_ORDER_ID = parse_value(self.schema, column_value_map, "ORIG_ORDER_ID")
        "The identifier of the original work order, which is the initial work order created from work plan release. Used to track splits, rework/dispositions, and supercedes."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which the manufacturing work for the work order is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which the manufacturing work for the work order is scheduled to complete."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised work start date."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised work complete date."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which the work for the manufacturing work order has been started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which the manufacturing work order has been completed."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of the item/part to be made upon the work order."
        self.NEEDS_REVIEW_FLAG = parse_value(self.schema, column_value_map, "NEEDS_REVIEW_FLAG")
        "A flag (Y/N) that indicates whether the associated Corrective Action Diagram requires review."
        self.ORDER_SCRAP_QTY = parse_value(self.schema, column_value_map, "ORDER_SCRAP_QTY")
        "Number of items/component parts that have been scrapped during the process of fulfilling the work order."
        self.ORDER_COMPLETE_QTY = parse_value(self.schema, column_value_map, "ORDER_COMPLETE_QTY")
        "Number of items/component parts that have been completed during the process of fulfilling the given work order."
        self.ORDER_STOP_QTY = parse_value(self.schema, column_value_map, "ORDER_STOP_QTY")
        "Number of items/component parts that have been stopped during the process of fulfilling the given work order."
        self.SPLIT_FLAG = parse_value(self.schema, column_value_map, "SPLIT_FLAG")
        "A flag (Y/N) that indicates whether or not the work order is a split of another work order."
        self.UNSCRAP_FLAG = parse_value(self.schema, column_value_map, "UNSCRAP_FLAG")
        "A flag (Y/N) indicating whether the component/part should be or has been unscrapped."
        self.PARENT_ORDER_ID = parse_value(self.schema, column_value_map, "PARENT_ORDER_ID")
        "The identifier of the parent work order, used to track order splits, and rework/dispositions"
        self.SUPERCEDED_ORDER_ID = parse_value(self.schema, column_value_map, "SUPERCEDED_ORDER_ID")
        "The identifier of the work order superceded by this work order."
        self.SUPERCEDES_ORDER = parse_value(self.schema, column_value_map, "SUPERCEDES_ORDER")
        "The identifier of the work order that supercedes this work order."
        self.ORDER_CUST_ID = parse_value(self.schema, column_value_map, "ORDER_CUST_ID")
        "The customer receiving the completed work, defaulted to PLND_CUST_ID but can be changed."
        self.SCHED_PRIORITY = parse_value(self.schema, column_value_map, "SCHED_PRIORITY")
        "The scheduled priority of the associated work order, e.g., High, Low, Medium."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_STATUS = parse_value(self.schema, column_value_map, "ALT_STATUS")
        "The status of the last alteration on this work order. For example: ORDER_AUTHORING."
        self.ASGND_WORK_LOC = parse_value(self.schema, column_value_map, "ASGND_WORK_LOC")
        "The work location where the manufacturing work order is executed."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.UNIT_NO = parse_value(self.schema, column_value_map, "UNIT_NO")
        "The unit number of the shipping product (e.g. airplane tail #) the work order is related to."
        self.ORDER_UOM = parse_value(self.schema, column_value_map, "ORDER_UOM")
        "The Unit Of Measure associated with PLND_ORDER_QTY and ORDER_QTY."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.PLAN_TYPE = parse_value(self.schema, column_value_map, "PLAN_TYPE")
        "Type or classification of the associated work plan."
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")

class SFFND_HTREF_WID_OPER_TEXT_ALT:
    schema = {
        "HTREF_OPER_TEXT_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "REF_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_TYPE": "STRING",
        "OBJECT_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "HTREF_OPER_TEXT_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_HTREF_WID_OP_TX_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HTREF_OPER_TEXT_ALT = parse_value(self.schema, column_value_map, "HTREF_OPER_TEXT_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "The system generated unique identifier of an object link embedded in a work plan operation text block."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "The unique identifier of a referenced object."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The type/class of the object, CAD drawing, still image, slide, UDV, standard text, audio, or video."
        self.OBJECT_NAME = parse_value(self.schema, column_value_map, "OBJECT_NAME")
        "A descriptive tag or name of the object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "The protocol Id of a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "The host Id of a Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "The file location of a Universal Resource Locator."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."

class SFSQA_PWP_INSP_PLAN_XREF:
    schema = {
        "PWP_ID": "STRING",
        "INSP_PLAN_ID": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PWP_ID",
        "INSP_PLAN_ID",
        "INSP_PLAN_REV",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_PWP_INSP_PLAN_XREF_FK2", ["PWP_ID"], "SFPL_PWP_DESC", ["PWP_ID"]),
        DbForeignKey("SFSQA_PWP_INSP_PLAN_XREF_FK1", ["INSP_PLAN_ID","INSP_PLAN_REV"], "SFSQA_INSP_PLAN_DESC", ["INSP_PLAN_ID","INSP_PLAN_REV"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PWP_ID = parse_value(self.schema, column_value_map, "PWP_ID")
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFWID_OPER_NOTES_MM_OBJECTS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "OBJECT_DAT_COL_ID": "STRING",
        "OBJECT_ID": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "NOTE_ID": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "OBJECT_DAT_COL_ID",
        "NOTE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_NOTES_MM_OBJECTS_F2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_OPER_NOTES_MM_OBJECTS_F1", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.NOTE_ID = parse_value(self.schema, column_value_map, "NOTE_ID")

class SFQA_DISC_CHG_LOG:
    schema = {
        "CHG_LOG_ID": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LOG_ACTION": "STRING",
        "TABLE_NAME": "STRING",
        "KEY_VALUE1": "STRING",
        "KEY_VALUE2": "STRING",
        "KEY_VALUE3": "STRING",
        "KEY_VALUE4": "STRING",
        "KEY_VALUE5": "STRING",
        "COLUMN_NAME": "STRING",
        "OLD_VALUE": "STRING",
        "NEW_VALUE": "STRING",
        "OLD_TEXT": "STRING",
        "NEW_TEXT": "STRING",
        "CHANGE_SEQ": "NUMBER",
    }
    primary_key_columns = [
        "CHG_LOG_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_CHG_LOG_FK1", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CHG_LOG_ID = parse_value(self.schema, column_value_map, "CHG_LOG_ID")
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LOG_ACTION = parse_value(self.schema, column_value_map, "LOG_ACTION")
        self.TABLE_NAME = parse_value(self.schema, column_value_map, "TABLE_NAME")
        self.KEY_VALUE1 = parse_value(self.schema, column_value_map, "KEY_VALUE1")
        self.KEY_VALUE2 = parse_value(self.schema, column_value_map, "KEY_VALUE2")
        self.KEY_VALUE3 = parse_value(self.schema, column_value_map, "KEY_VALUE3")
        self.KEY_VALUE4 = parse_value(self.schema, column_value_map, "KEY_VALUE4")
        self.KEY_VALUE5 = parse_value(self.schema, column_value_map, "KEY_VALUE5")
        self.COLUMN_NAME = parse_value(self.schema, column_value_map, "COLUMN_NAME")
        self.OLD_VALUE = parse_value(self.schema, column_value_map, "OLD_VALUE")
        self.NEW_VALUE = parse_value(self.schema, column_value_map, "NEW_VALUE")
        self.OLD_TEXT = parse_value(self.schema, column_value_map, "OLD_TEXT")
        self.NEW_TEXT = parse_value(self.schema, column_value_map, "NEW_TEXT")
        self.CHANGE_SEQ = parse_value(self.schema, column_value_map, "CHANGE_SEQ")

class MOTT_MATERIAL_BARCODES:
    schema = {
        "BARCODE_ID": "STRING",
        "MATERIAL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UOM": "STRING",
        "TOTAL_ALLOWABLE_OUT_TIME": "NUMBER",
        "EXPIRATION_DATE": "STRING",
        "MATERIAL_NAME": "STRING",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
        "FREEZER_NAME": "STRING",
        "MATERIAL_TYPE_NAME": "STRING",
        "BARCODE_TYPE": "STRING",
    }
    primary_key_columns = [
        "BARCODE_ID",
    ]
    foreign_keys = [
        DbForeignKey("MOTT_MATERIAL_BARCODES_FK1", ["MATERIAL_ID"], "MOTT_TIME_MATERIAL", ["MATERIAL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BARCODE_ID = parse_value(self.schema, column_value_map, "BARCODE_ID")
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")
        "Primary Key For Time sensitive material"
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        self.TOTAL_ALLOWABLE_OUT_TIME = parse_value(self.schema, column_value_map, "TOTAL_ALLOWABLE_OUT_TIME")
        self.EXPIRATION_DATE = parse_value(self.schema, column_value_map, "EXPIRATION_DATE")
        self.MATERIAL_NAME = parse_value(self.schema, column_value_map, "MATERIAL_NAME")
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        self.FREEZER_NAME = parse_value(self.schema, column_value_map, "FREEZER_NAME")
        self.MATERIAL_TYPE_NAME = parse_value(self.schema, column_value_map, "MATERIAL_TYPE_NAME")
        self.BARCODE_TYPE = parse_value(self.schema, column_value_map, "BARCODE_TYPE")

class SFCORE_INILIB_FOLDER_ORG:
    schema = {
        "FOLDER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "FOLDER_TYPE": "STRING",
        "FOLDER_TAG": "STRING",
        "FOLDER_DESC": "STRING",
        "PARENT_FOLDER_ID": "STRING",
        "LOAD_REF": "STRING",
        "PARENT_FOLDER_TYPE": "STRING",
    }
    primary_key_columns = [
        "FOLDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_INIFLDORG_INIFLDORG_FK", ["PARENT_FOLDER_ID"], "SFCORE_INILIB_FOLDER_ORG", ["FOLDER_ID"]),
    ]
    refs = [
        "SFCORE_INIFLDR_FLDRORG_FK",
        "SFCORE_INIFLDORG_INIFLDORG_FK",
    ]
    def __init__(self, column_value_map):
        self.FOLDER_ID = parse_value(self.schema, column_value_map, "FOLDER_ID")
        "Unique, system generated identifier of the folder."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.FOLDER_TYPE = parse_value(self.schema, column_value_map, "FOLDER_TYPE")
        "The purpose/intent of the folder."
        self.FOLDER_TAG = parse_value(self.schema, column_value_map, "FOLDER_TAG")
        "Unique, user provided identifier/name of the folder; can be modified."
        self.FOLDER_DESC = parse_value(self.schema, column_value_map, "FOLDER_DESC")
        "A detailed description of the folder."
        self.PARENT_FOLDER_ID = parse_value(self.schema, column_value_map, "PARENT_FOLDER_ID")
        "Identifier of the folder's parent folder."
        self.LOAD_REF = parse_value(self.schema, column_value_map, "LOAD_REF")
        "Name of the data source when data in the database record has been loaded from another system. Not in use."
        self.PARENT_FOLDER_TYPE = parse_value(self.schema, column_value_map, "PARENT_FOLDER_TYPE")
        "The purpose/intent of the parent folder."
        self.SFCORE_INIFLDR_FLDRORG_FK = []
        self.SFCORE_INIFLDORG_INIFLDORG_FK = []

class SFPL_ITEM_DESC_MASTER_ALL:
    schema = {
        "ITEM_ID": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "PART_TITLE": "STRING",
        "PARENT_ENG_PART_NO": "STRING",
        "PARENT_ENG_PART_CHG": "STRING",
        "UCF_ITEM_VCH1": "STRING",
        "UCF_ITEM_VCH2": "STRING",
        "UCF_ITEM_NUM1": "NUMBER",
        "UCF_ITEM_FLAG1": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "PART_FLAG": "STRING",
        "STANDARD_PART_FLAG": "STRING",
        "UCHART_START_DATE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_ITEM_VCH3": "STRING",
        "UCF_ITEM_VCH4": "STRING",
        "UCF_ITEM_VCH5": "STRING",
        "UCF_ITEM_VCH6": "STRING",
        "UCF_ITEM_VCH7": "STRING",
        "UCF_ITEM_VCH8": "STRING",
        "UCF_ITEM_VCH9": "STRING",
        "UCF_ITEM_VCH10": "STRING",
        "UCF_ITEM_VCH11": "STRING",
        "UCF_ITEM_VCH12": "STRING",
        "UCF_ITEM_VCH13": "STRING",
        "UCF_ITEM_VCH14": "STRING",
        "UCF_ITEM_VCH15": "STRING",
        "UCF_ITEM_NUM2": "NUMBER",
        "UCF_ITEM_NUM3": "NUMBER",
        "UCF_ITEM_NUM4": "NUMBER",
        "UCF_ITEM_NUM5": "NUMBER",
        "UCF_ITEM_DATE1": "STRING",
        "UCF_ITEM_DATE2": "STRING",
        "UCF_ITEM_DATE3": "STRING",
        "UCF_ITEM_DATE4": "STRING",
        "UCF_ITEM_DATE5": "STRING",
        "UCF_ITEM_FLAG2": "STRING",
        "UCF_ITEM_FLAG3": "STRING",
        "UCF_ITEM_FLAG4": "STRING",
        "UCF_ITEM_FLAG5": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "PARTS_LIST_REV": "NUMBER",
        "FLIGHT_SAFETY_FLAG": "STRING",
        "FLIGHT_ESSENTIAL_FLAG": "STRING",
        "SOURCE_INSP_PLAN_ID": "STRING",
        "DEST_INSP_PLAN_ID": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "SECURITY_GROUP": "STRING",
        "ITEM_STATUS": "STRING",
        "PHANTOM_KIT_FLAG": "STRING",
        "MFG_INSP_PLAN_ID": "STRING",
        "SERIAL_NUM_GEN": "STRING",
        "UCF_ITEM_VCH255_1": "STRING",
        "UCF_ITEM_VCH255_2": "STRING",
        "UCF_ITEM_VCH255_3": "STRING",
        "UCF_ITEM_VCH4000_1": "STRING",
        "UCF_ITEM_VCH4000_2": "STRING",
        "BUY_FLAG": "STRING",
        "MAKE_FLAG": "STRING",
        "AVG_PURCHASE_PRICE_PER_UNIT": "NUMBER",
        "AVG_MATERIAL_COST_PER_UNIT": "NUMBER",
        "AVG_LABOR_COST_PER_UNIT": "NUMBER",
        "PRICE_COST_UNIT": "STRING",
        "AVG_ORDER_LEAD_TIME_DAYS": "NUMBER",
        "COMMODITY_JURISDICTION": "STRING",
        "COMMODITY_CLASSIFICATION": "STRING",
        "DATE_CREATED": "DATE",
        "EXTERNAL_INCOMPLETE_FLAG": "STRING",
        "OTT_SENSITIVE": "STRING",
        "BARCODE_FORMAT": "STRING",
        "DESIGN_AUTHORITY": "STRING",
        "MANUFACTURER_CODE_REQD": "STRING",
        "MANUFACTURER_PART_NO_REQD": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_ITEM_DESC_MASTER_ALL_FK1", ["ITEM_TYPE","ITEM_SUBTYPE"], "SFPL_ITEM_TYPE_DEF", ["ITEM_TYPE","ITEM_SUBTYPE"]),
        DbForeignKey("SFPL_ITEM_DESC_MASTER_ALL_FK2", ["SERIAL_NUM_GEN"], "SFFND_AUTO_NUM_GEN_DEF", ["NUM_GEN_NAME"]),
    ]
    refs = [
        "SFPL_MFGBOMREV_ITEMMSTR_FK",
        "SFPL_MFG_BOM_COMP_ITEM_FK",
        "SFPL_ITEM_HOLDS_ITEM_FK",
        "SFPL_ITEM_MANUFACTURER_ITEM_FK",
        "SFPL_MFG_BOM_ALT_TRANSFORM_FK2",
        "SFPL_MBOM_COMP_ALT_XRF_ORG_F2",
        "SFSQA_AUDIT_PROCESS_FK1",
        "SFPL_MFG_BOM_REV_LINE_ORIG_FK2",
        "SFPL_ITEM_MM_OBJ_XREF_FK2",
        "SFPL_PLAN_DESC_ITEM_FK",
        "SFPL_IMPACTED_OBJECTS_FK2",
        "SFSQA_AUDIT_PLNPRO_SCHD_FK2",
        "SFSQA_ITEM_MANDATES_FK2",
        "SFPL_ITEM_CERT_FK2",
        "SFWID_USER_OVER_INSP_EVNT_FK1",
        "SFPL_PLANNED_ACTIONS_FK2",
        "SFOR_SFPL_PLAN_SUBJECT_PART_F1",
        "SFWID_ORDITEMALT_AITEM_FK",
        "SFWID_ORDITEMALT_PITEM_FK",
        "SFSQA_INSP_ORDER_DESC_ITEM_FK",
        "SFPL_MFG_BOM_COMP_ALT_XREF_FK2",
        "SFPL_RESULTING_OBJECTS_FK2",
        "SFWID_OPER_ITEMS_ITEM_FK",
        "SFPL_MFG_BOM_REV_ORIG_FK1",
        "SFSQA_INSP_ORDER_UNITS_FK5",
        "SFPL_PLAN_BOM_LINES_FK2",
        "SFWID_ORDER_ITEM_FK",
        "MOTT_TIME_MATERIAL_FK1",
        "SFWID_HOLDS_ITEM_FK",
        "SFWID_OPER_ITEMS_ALT_FK4",
        "SFPL_MFG_BOM_TOOL_ORIG_FK2",
        "SFPL_STEP_BOM_LINES_FK2",
        "SFPL_MFG_BOM_COMP_ORIG_FK2",
        "SFWID_SRL_OPER_ITEMS_PITEM_FK",
        "SFQA_DISC_ITEM_ITEM_FK",
        "SFPL_RAW_MATERIALS_DEF_FK3",
        "SFWID_SAWB_ITEM_FK",
        "SFPL_ALTITEM_ITEMMSTR2_FK",
        "SFPL_ALTITEM_ITEMMSTR1_FK",
        "SFPL_ENG_BOM_PPART_FK",
        "SFFND_TOOL_TOOLNO_TOOLCHG_FK",
        "SFQA_CA_REQ_AFFECTED_ITEMS_FK1",
        "SFPL_MFG_BOM_TOOL_FK2",
        "SFPL_ITEM_PROG_DETLS_ITEM_FK",
        "SFQA_CA_AFFECTED_ITEMS_FK2",
        "SFPL_MFG_BOM_LINE_STD_ITEM_FK",
        "SFPL_AFFECTED_OBJECTS_FK2",
        "SFPL_STEP_ITEM_FK",
        "SFSQA_ITEM_SUPPLIER_FK2",
        "SFWID_ORDER_DESC_ALT_FK10",
    ]
    def __init__(self, column_value_map):
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of an item/part."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier of the component/part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.PART_TITLE = parse_value(self.schema, column_value_map, "PART_TITLE")
        "A descriptive title or name of the part."
        self.PARENT_ENG_PART_NO = parse_value(self.schema, column_value_map, "PARENT_ENG_PART_NO")
        "The engineering part number of the manufacturing part (identified the combination of PART_NO, PART_CHG ) or an ancestor (may or may not be the direct parent) of the manufacturing part. BOM of the manufacturing part has or will be constructed based on the engineering part BOM."
        self.PARENT_ENG_PART_CHG = parse_value(self.schema, column_value_map, "PARENT_ENG_PART_CHG")
        "The engineering part change letter."
        self.UCF_ITEM_VCH1 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_VCH2 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_NUM1 = parse_value(self.schema, column_value_map, "UCF_ITEM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ITEM_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.PART_FLAG = parse_value(self.schema, column_value_map, "PART_FLAG")
        self.STANDARD_PART_FLAG = parse_value(self.schema, column_value_map, "STANDARD_PART_FLAG")
        self.UCHART_START_DATE = parse_value(self.schema, column_value_map, "UCHART_START_DATE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.UCF_ITEM_VCH3 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH3")
        self.UCF_ITEM_VCH4 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH4")
        self.UCF_ITEM_VCH5 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH5")
        self.UCF_ITEM_VCH6 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH6")
        self.UCF_ITEM_VCH7 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH7")
        self.UCF_ITEM_VCH8 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH8")
        self.UCF_ITEM_VCH9 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH9")
        self.UCF_ITEM_VCH10 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH10")
        self.UCF_ITEM_VCH11 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH11")
        self.UCF_ITEM_VCH12 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH12")
        self.UCF_ITEM_VCH13 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH13")
        self.UCF_ITEM_VCH14 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH14")
        self.UCF_ITEM_VCH15 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH15")
        self.UCF_ITEM_NUM2 = parse_value(self.schema, column_value_map, "UCF_ITEM_NUM2")
        self.UCF_ITEM_NUM3 = parse_value(self.schema, column_value_map, "UCF_ITEM_NUM3")
        self.UCF_ITEM_NUM4 = parse_value(self.schema, column_value_map, "UCF_ITEM_NUM4")
        self.UCF_ITEM_NUM5 = parse_value(self.schema, column_value_map, "UCF_ITEM_NUM5")
        self.UCF_ITEM_DATE1 = parse_value(self.schema, column_value_map, "UCF_ITEM_DATE1")
        self.UCF_ITEM_DATE2 = parse_value(self.schema, column_value_map, "UCF_ITEM_DATE2")
        self.UCF_ITEM_DATE3 = parse_value(self.schema, column_value_map, "UCF_ITEM_DATE3")
        self.UCF_ITEM_DATE4 = parse_value(self.schema, column_value_map, "UCF_ITEM_DATE4")
        self.UCF_ITEM_DATE5 = parse_value(self.schema, column_value_map, "UCF_ITEM_DATE5")
        self.UCF_ITEM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ITEM_FLAG2")
        self.UCF_ITEM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ITEM_FLAG3")
        self.UCF_ITEM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ITEM_FLAG4")
        self.UCF_ITEM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ITEM_FLAG5")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.PARTS_LIST_REV = parse_value(self.schema, column_value_map, "PARTS_LIST_REV")
        self.FLIGHT_SAFETY_FLAG = parse_value(self.schema, column_value_map, "FLIGHT_SAFETY_FLAG")
        self.FLIGHT_ESSENTIAL_FLAG = parse_value(self.schema, column_value_map, "FLIGHT_ESSENTIAL_FLAG")
        self.SOURCE_INSP_PLAN_ID = parse_value(self.schema, column_value_map, "SOURCE_INSP_PLAN_ID")
        self.DEST_INSP_PLAN_ID = parse_value(self.schema, column_value_map, "DEST_INSP_PLAN_ID")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.ITEM_STATUS = parse_value(self.schema, column_value_map, "ITEM_STATUS")
        self.PHANTOM_KIT_FLAG = parse_value(self.schema, column_value_map, "PHANTOM_KIT_FLAG")
        "Determines if the item is phantom or not."
        self.MFG_INSP_PLAN_ID = parse_value(self.schema, column_value_map, "MFG_INSP_PLAN_ID")
        "Used to maintain MFG Inspection Plan ID for a part."
        self.SERIAL_NUM_GEN = parse_value(self.schema, column_value_map, "SERIAL_NUM_GEN")
        "Serial Number Generator assigned to a particular part. This serial number generator can be used to automatically generate serial numbers for this item."
        self.UCF_ITEM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ITEM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.BUY_FLAG = parse_value(self.schema, column_value_map, "BUY_FLAG")
        "Indicates if the part is purchased."
        self.MAKE_FLAG = parse_value(self.schema, column_value_map, "MAKE_FLAG")
        "Indicates if the part is made."
        self.AVG_PURCHASE_PRICE_PER_UNIT = parse_value(self.schema, column_value_map, "AVG_PURCHASE_PRICE_PER_UNIT")
        "Average Purchase Price Per Unit applies to parts with BUY_FLAG = Y."
        self.AVG_MATERIAL_COST_PER_UNIT = parse_value(self.schema, column_value_map, "AVG_MATERIAL_COST_PER_UNIT")
        "Average Purchase Price Per Unit applies to parts with MAKE_FLAG = Y."
        self.AVG_LABOR_COST_PER_UNIT = parse_value(self.schema, column_value_map, "AVG_LABOR_COST_PER_UNIT")
        "Average Purchase Price Per Unit applies to parts with MAKE_FLAG = Y."
        self.PRICE_COST_UNIT = parse_value(self.schema, column_value_map, "PRICE_COST_UNIT")
        "Indicates the currency for the price and cost fields. Typical values = DOLLARS, EUROS."
        self.AVG_ORDER_LEAD_TIME_DAYS = parse_value(self.schema, column_value_map, "AVG_ORDER_LEAD_TIME_DAYS")
        "Number of days for average order lead time."
        self.COMMODITY_JURISDICTION = parse_value(self.schema, column_value_map, "COMMODITY_JURISDICTION")
        "Commodity Jurisdiction of Part."
        self.COMMODITY_CLASSIFICATION = parse_value(self.schema, column_value_map, "COMMODITY_CLASSIFICATION")
        "Commodity Classification of Part."
        self.DATE_CREATED = parse_value(self.schema, column_value_map, "DATE_CREATED")
        "The date and time the record was inserted."
        self.EXTERNAL_INCOMPLETE_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_INCOMPLETE_FLAG")
        "A PART/MM OBJECT with value Y should not be visible at any place in the system. Such PART/MM OBJECT act as place holder until actual request is received from external request."
        self.OTT_SENSITIVE = parse_value(self.schema, column_value_map, "OTT_SENSITIVE")
        self.BARCODE_FORMAT = parse_value(self.schema, column_value_map, "BARCODE_FORMAT")
        self.DESIGN_AUTHORITY = parse_value(self.schema, column_value_map, "DESIGN_AUTHORITY")
        self.MANUFACTURER_CODE_REQD = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE_REQD")
        self.MANUFACTURER_PART_NO_REQD = parse_value(self.schema, column_value_map, "MANUFACTURER_PART_NO_REQD")
        self.SFPL_MFGBOMREV_ITEMMSTR_FK = []
        self.SFPL_MFG_BOM_COMP_ITEM_FK = []
        self.SFPL_ITEM_HOLDS_ITEM_FK = []
        self.SFPL_ITEM_MANUFACTURER_ITEM_FK = []
        self.SFPL_MFG_BOM_ALT_TRANSFORM_FK2 = []
        self.SFPL_MBOM_COMP_ALT_XRF_ORG_F2 = []
        self.SFSQA_AUDIT_PROCESS_FK1 = []
        self.SFPL_MFG_BOM_REV_LINE_ORIG_FK2 = []
        self.SFPL_ITEM_MM_OBJ_XREF_FK2 = []
        self.SFPL_PLAN_DESC_ITEM_FK = []
        self.SFPL_IMPACTED_OBJECTS_FK2 = []
        self.SFSQA_AUDIT_PLNPRO_SCHD_FK2 = []
        self.SFSQA_ITEM_MANDATES_FK2 = []
        self.SFPL_ITEM_CERT_FK2 = []
        self.SFWID_USER_OVER_INSP_EVNT_FK1 = []
        self.SFPL_PLANNED_ACTIONS_FK2 = []
        self.SFOR_SFPL_PLAN_SUBJECT_PART_F1 = []
        self.SFWID_ORDITEMALT_AITEM_FK = []
        self.SFWID_ORDITEMALT_PITEM_FK = []
        self.SFSQA_INSP_ORDER_DESC_ITEM_FK = []
        self.SFPL_MFG_BOM_COMP_ALT_XREF_FK2 = []
        self.SFPL_RESULTING_OBJECTS_FK2 = []
        self.SFWID_OPER_ITEMS_ITEM_FK = []
        self.SFPL_MFG_BOM_REV_ORIG_FK1 = []
        self.SFSQA_INSP_ORDER_UNITS_FK5 = []
        self.SFPL_PLAN_BOM_LINES_FK2 = []
        self.SFWID_ORDER_ITEM_FK = []
        self.MOTT_TIME_MATERIAL_FK1 = []
        self.SFWID_HOLDS_ITEM_FK = []
        self.SFWID_OPER_ITEMS_ALT_FK4 = []
        self.SFPL_MFG_BOM_TOOL_ORIG_FK2 = []
        self.SFPL_STEP_BOM_LINES_FK2 = []
        self.SFPL_MFG_BOM_COMP_ORIG_FK2 = []
        self.SFWID_SRL_OPER_ITEMS_PITEM_FK = []
        self.SFQA_DISC_ITEM_ITEM_FK = []
        self.SFPL_RAW_MATERIALS_DEF_FK3 = []
        self.SFWID_SAWB_ITEM_FK = []
        self.SFPL_ALTITEM_ITEMMSTR2_FK = []
        self.SFPL_ALTITEM_ITEMMSTR1_FK = []
        self.SFPL_ENG_BOM_PPART_FK = []
        self.SFFND_TOOL_TOOLNO_TOOLCHG_FK = []
        self.SFQA_CA_REQ_AFFECTED_ITEMS_FK1 = []
        self.SFPL_MFG_BOM_TOOL_FK2 = []
        self.SFPL_ITEM_PROG_DETLS_ITEM_FK = []
        self.SFQA_CA_AFFECTED_ITEMS_FK2 = []
        self.SFPL_MFG_BOM_LINE_STD_ITEM_FK = []
        self.SFPL_AFFECTED_OBJECTS_FK2 = []
        self.SFPL_STEP_ITEM_FK = []
        self.SFSQA_ITEM_SUPPLIER_FK2 = []
        self.SFWID_ORDER_DESC_ALT_FK10 = []

class SFFND_OBJECT_REVS:
    schema = {
        "OBJECT_TAG": "STRING",
        "OBJECT_REV": "NUMBER",
    }
    primary_key_columns = [
        "OBJECT_TAG",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OBJECT_TAG = parse_value(self.schema, column_value_map, "OBJECT_TAG")
        "User provided unique identifier of the multimedia object; can be NULL and can be modified."
        self.OBJECT_REV = parse_value(self.schema, column_value_map, "OBJECT_REV")
        "The system generated revision number of the multimedia object."

class SFCORE_USER_ROLES:
    schema = {
        "USERID": "STRING",
        "ROLE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "USERID",
        "ROLE",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_USER_ROLES_FK2", ["USERID"], "SFCORE_USER", ["USERID"]),
        DbForeignKey("SFCORE_USER_ROLES_FK1", ["ROLE"], "SFCORE_ROLES", ["ROLE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.ROLE = parse_value(self.schema, column_value_map, "ROLE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")

class SFQA_DISC_COMPONENT_SERIAL:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "PART_DAT_COL_ID": "STRING",
        "PARENT_LOT_NO": "STRING",
        "PARENT_SERIAL_NO": "STRING",
        "UNIT_ID": "STRING",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
        "COMP_UNIT_ID": "STRING",
        "ITEM_ID": "STRING",
        "REF_DES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "AFFECTED_QTY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "UCF_DISC_COMP_SRL_VCH1": "STRING",
        "UCF_DISC_COMP_SRL_VCH2": "STRING",
        "UCF_DISC_COMP_SRL_VCH3": "STRING",
        "UCF_DISC_COMP_SRL_VCH4": "STRING",
        "UCF_DISC_COMP_SRL_VCH5": "STRING",
        "UCF_DISC_COMP_SRL_VCH6": "STRING",
        "UCF_DISC_COMP_SRL_VCH7": "STRING",
        "UCF_DISC_COMP_SRL_VCH8": "STRING",
        "UCF_DISC_COMP_SRL_VCH9": "STRING",
        "UCF_DISC_COMP_SRL_VCH10": "STRING",
        "UCF_DISC_COMP_SRL_VCH11": "STRING",
        "UCF_DISC_COMP_SRL_VCH12": "STRING",
        "UCF_DISC_COMP_SRL_VCH13": "STRING",
        "UCF_DISC_COMP_SRL_VCH14": "STRING",
        "UCF_DISC_COMP_SRL_VCH15": "STRING",
        "UCF_DISC_COMP_SRL_NUM1": "NUMBER",
        "UCF_DISC_COMP_SRL_NUM2": "NUMBER",
        "UCF_DISC_COMP_SRL_NUM3": "NUMBER",
        "UCF_DISC_COMP_SRL_NUM4": "NUMBER",
        "UCF_DISC_COMP_SRL_NUM5": "NUMBER",
        "UCF_DISC_COMP_SRL_DATE1": "STRING",
        "UCF_DISC_COMP_SRL_DATE2": "STRING",
        "UCF_DISC_COMP_SRL_DATE3": "STRING",
        "UCF_DISC_COMP_SRL_DATE4": "STRING",
        "UCF_DISC_COMP_SRL_DATE5": "STRING",
        "UCF_DISC_COMP_SRL_FLAG1": "STRING",
        "UCF_DISC_COMP_SRL_FLAG2": "STRING",
        "UCF_DISC_COMP_SRL_FLAG3": "STRING",
        "UCF_DISC_COMP_SRL_FLAG4": "STRING",
        "UCF_DISC_COMP_SRL_FLAG5": "STRING",
        "UCF_DISC_COMP_SRL_VCH255_1": "STRING",
        "UCF_DISC_COMP_SRL_VCH255_2": "STRING",
        "UCF_DISC_COMP_SRL_VCH255_3": "STRING",
        "UCF_DISC_COMP_SRL_VCH4000_1": "STRING",
        "UCF_DISC_COMP_SRL_VCH4000_2": "STRING",
        "COMP_SAMPLE_NO": "NUMBER",
        "FINAL_COMPONENT_DISP_FLAG": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "PART_DAT_COL_ID",
        "PARENT_LOT_NO",
        "PARENT_SERIAL_NO",
        "UNIT_ID",
        "LOT_NO",
        "SERIAL_NO",
        "COMP_UNIT_ID",
        "ITEM_ID",
        "FINAL_COMPONENT_DISP_FLAG",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_CMP_DSRL_CMP_D_FK", ["DISC_ID","DISC_LINE_NO","PART_DAT_COL_ID","ITEM_ID","FINAL_COMPONENT_DISP_FLAG"], "SFQA_DISC_COMPONENT", ["DISC_ID","DISC_LINE_NO","PART_DAT_COL_ID","ITEM_ID","FINAL_COMPONENT_DISP_FLAG"]),
        DbForeignKey("SFQA_DISC_CMP_DSRL_DPRT_SRL_FK", ["DISC_ID","DISC_LINE_NO","PARENT_LOT_NO","PARENT_SERIAL_NO","UNIT_ID"], "SFQA_DISC_ITEM_SERIAL", ["DISC_ID","DISC_LINE_NO","LOT_NO","SERIAL_NO","UNIT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.PARENT_LOT_NO = parse_value(self.schema, column_value_map, "PARENT_LOT_NO")
        "User-assigned lot number of a given component/part."
        self.PARENT_SERIAL_NO = parse_value(self.schema, column_value_map, "PARENT_SERIAL_NO")
        "User-assigned serial number of the parent component/part."
        self.UNIT_ID = parse_value(self.schema, column_value_map, "UNIT_ID")
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.COMP_UNIT_ID = parse_value(self.schema, column_value_map, "COMP_UNIT_ID")
        "System generated unique id for Component Part Unit."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.AFFECTED_QTY = parse_value(self.schema, column_value_map, "AFFECTED_QTY")
        "Number of components/parts that have been inspected and are found to be affected by the associated discrepancy."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.UCF_DISC_COMP_SRL_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_SRL_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_SRL_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_SRL_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_SRL_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_SRL_VCH6 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH6")
        self.UCF_DISC_COMP_SRL_VCH7 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH7")
        self.UCF_DISC_COMP_SRL_VCH8 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH8")
        self.UCF_DISC_COMP_SRL_VCH9 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH9")
        self.UCF_DISC_COMP_SRL_VCH10 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH10")
        self.UCF_DISC_COMP_SRL_VCH11 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH11")
        self.UCF_DISC_COMP_SRL_VCH12 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH12")
        self.UCF_DISC_COMP_SRL_VCH13 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH13")
        self.UCF_DISC_COMP_SRL_VCH14 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH14")
        self.UCF_DISC_COMP_SRL_VCH15 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH15")
        self.UCF_DISC_COMP_SRL_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_DISC_COMP_SRL_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_NUM2")
        self.UCF_DISC_COMP_SRL_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_NUM3")
        self.UCF_DISC_COMP_SRL_NUM4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_NUM4")
        self.UCF_DISC_COMP_SRL_NUM5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_NUM5")
        self.UCF_DISC_COMP_SRL_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_DISC_COMP_SRL_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_DATE2")
        self.UCF_DISC_COMP_SRL_DATE3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_DATE3")
        self.UCF_DISC_COMP_SRL_DATE4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_DATE4")
        self.UCF_DISC_COMP_SRL_DATE5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_DATE5")
        self.UCF_DISC_COMP_SRL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_DISC_COMP_SRL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_FLAG2")
        self.UCF_DISC_COMP_SRL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_FLAG3")
        self.UCF_DISC_COMP_SRL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_FLAG4")
        self.UCF_DISC_COMP_SRL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_FLAG5")
        self.UCF_DISC_COMP_SRL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH255_1")
        self.UCF_DISC_COMP_SRL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH255_2")
        self.UCF_DISC_COMP_SRL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH255_3")
        self.UCF_DISC_COMP_SRL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH4000_1")
        self.UCF_DISC_COMP_SRL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_SRL_VCH4000_2")
        self.COMP_SAMPLE_NO = parse_value(self.schema, column_value_map, "COMP_SAMPLE_NO")
        "Component Unit Sample Number."
        self.FINAL_COMPONENT_DISP_FLAG = parse_value(self.schema, column_value_map, "FINAL_COMPONENT_DISP_FLAG")
        "A flag (Y/N) indicating whether the component/part was added through Re-Disposition Units of Verify Rework Hold."

class SFWID_SERIAL_OPER_TOOL_DAT_COL:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "ASGND_TOOL_ID": "STRING",
        "TOOL_DAT_COL_ID": "STRING",
        "ASGND_TOOL_NO": "STRING",
        "ASGND_TOOL_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SERIAL_NO": "STRING",
        "EXP_DATE": "STRING",
        "COMMENTS": "STRING",
        "UCF_SRL_OPER_TOOL_VCH1": "STRING",
        "UCF_SRL_OPER_TOOL_VCH2": "STRING",
        "UCF_SRL_OPER_TOOL_VCH3": "STRING",
        "UCF_SRL_OPER_TOOL_FLAG1": "STRING",
        "UCF_SRL_OPER_TOOL_DATE1": "STRING",
        "UCF_SRL_OPER_TOOL_NUM1": "NUMBER",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "UCF_SRL_OPER_TOOL_VCH4": "STRING",
        "UCF_SRL_OPER_TOOL_VCH5": "STRING",
        "UCF_SRL_OPER_TOOL_VCH6": "STRING",
        "UCF_SRL_OPER_TOOL_VCH7": "STRING",
        "UCF_SRL_OPER_TOOL_VCH8": "STRING",
        "UCF_SRL_OPER_TOOL_VCH9": "STRING",
        "UCF_SRL_OPER_TOOL_VCH10": "STRING",
        "UCF_SRL_OPER_TOOL_VCH11": "STRING",
        "UCF_SRL_OPER_TOOL_VCH12": "STRING",
        "UCF_SRL_OPER_TOOL_VCH13": "STRING",
        "UCF_SRL_OPER_TOOL_VCH14": "STRING",
        "UCF_SRL_OPER_TOOL_VCH15": "STRING",
        "UCF_SRL_OPER_TOOL_NUM2": "NUMBER",
        "UCF_SRL_OPER_TOOL_NUM3": "NUMBER",
        "UCF_SRL_OPER_TOOL_NUM4": "NUMBER",
        "UCF_SRL_OPER_TOOL_NUM5": "NUMBER",
        "UCF_SRL_OPER_TOOL_DATE2": "STRING",
        "UCF_SRL_OPER_TOOL_DATE3": "STRING",
        "UCF_SRL_OPER_TOOL_DATE4": "STRING",
        "UCF_SRL_OPER_TOOL_DATE5": "STRING",
        "UCF_SRL_OPER_TOOL_FLAG2": "STRING",
        "UCF_SRL_OPER_TOOL_FLAG3": "STRING",
        "UCF_SRL_OPER_TOOL_FLAG4": "STRING",
        "UCF_SRL_OPER_TOOL_FLAG5": "STRING",
        "UCF_SRL_OPER_TOOL_VCH255_1": "STRING",
        "UCF_SRL_OPER_TOOL_VCH255_2": "STRING",
        "UCF_SRL_OPER_TOOL_VCH255_3": "STRING",
        "UCF_SRL_OPER_TOOL_VCH4000_1": "STRING",
        "UCF_SRL_OPER_TOOL_VCH4000_2": "STRING",
        "QTY": "NUMBER",
        "PLND_TOOL_NO": "STRING",
        "PLND_TOOL_CHG": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "LOT_ID",
        "SERIAL_ID",
        "ASGND_TOOL_ID",
        "TOOL_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_SER_OPR_TL_DC_S_OP_TL_FK", ["ORDER_ID","OPER_KEY","STEP_KEY","LOT_ID","SERIAL_ID","ASGND_TOOL_ID"], "SFWID_SERIAL_OPER_TOOL", ["ORDER_ID","OPER_KEY","STEP_KEY","LOT_ID","SERIAL_ID","ASGND_TOOL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.ASGND_TOOL_ID = parse_value(self.schema, column_value_map, "ASGND_TOOL_ID")
        "Unique, system-generated identifier of the assigned tool."
        self.TOOL_DAT_COL_ID = parse_value(self.schema, column_value_map, "TOOL_DAT_COL_ID")
        "Unique, system-generated identifier of the tool data collection."
        self.ASGND_TOOL_NO = parse_value(self.schema, column_value_map, "ASGND_TOOL_NO")
        "The identifying number of the required tool as actually assigned to the given operation."
        self.ASGND_TOOL_CHG = parse_value(self.schema, column_value_map, "ASGND_TOOL_CHG")
        "The change letter (revision) of the required tool as actually assigned to the given operation."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.EXP_DATE = parse_value(self.schema, column_value_map, "EXP_DATE")
        "The expiration date of the component/part."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Additional comments."
        self.UCF_SRL_OPER_TOOL_VCH1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH1")
        self.UCF_SRL_OPER_TOOL_VCH2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH2")
        self.UCF_SRL_OPER_TOOL_VCH3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH3")
        self.UCF_SRL_OPER_TOOL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_FLAG1")
        self.UCF_SRL_OPER_TOOL_DATE1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_DATE1")
        self.UCF_SRL_OPER_TOOL_NUM1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_NUM1")
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.UCF_SRL_OPER_TOOL_VCH4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH4")
        self.UCF_SRL_OPER_TOOL_VCH5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH5")
        self.UCF_SRL_OPER_TOOL_VCH6 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH6")
        self.UCF_SRL_OPER_TOOL_VCH7 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH7")
        self.UCF_SRL_OPER_TOOL_VCH8 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH8")
        self.UCF_SRL_OPER_TOOL_VCH9 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH9")
        self.UCF_SRL_OPER_TOOL_VCH10 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH10")
        self.UCF_SRL_OPER_TOOL_VCH11 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH11")
        self.UCF_SRL_OPER_TOOL_VCH12 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH12")
        self.UCF_SRL_OPER_TOOL_VCH13 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH13")
        self.UCF_SRL_OPER_TOOL_VCH14 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH14")
        self.UCF_SRL_OPER_TOOL_VCH15 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH15")
        self.UCF_SRL_OPER_TOOL_NUM2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_NUM2")
        self.UCF_SRL_OPER_TOOL_NUM3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_NUM3")
        self.UCF_SRL_OPER_TOOL_NUM4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_NUM4")
        self.UCF_SRL_OPER_TOOL_NUM5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_NUM5")
        self.UCF_SRL_OPER_TOOL_DATE2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_DATE2")
        self.UCF_SRL_OPER_TOOL_DATE3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_DATE3")
        self.UCF_SRL_OPER_TOOL_DATE4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_DATE4")
        self.UCF_SRL_OPER_TOOL_DATE5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_DATE5")
        self.UCF_SRL_OPER_TOOL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_FLAG2")
        self.UCF_SRL_OPER_TOOL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_FLAG3")
        self.UCF_SRL_OPER_TOOL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_FLAG4")
        self.UCF_SRL_OPER_TOOL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_FLAG5")
        self.UCF_SRL_OPER_TOOL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH255_1")
        self.UCF_SRL_OPER_TOOL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH255_2")
        self.UCF_SRL_OPER_TOOL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH255_3")
        self.UCF_SRL_OPER_TOOL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH4000_1")
        self.UCF_SRL_OPER_TOOL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SRL_OPER_TOOL_VCH4000_2")
        self.QTY = parse_value(self.schema, column_value_map, "QTY")
        self.PLND_TOOL_NO = parse_value(self.schema, column_value_map, "PLND_TOOL_NO")
        "The identifying number of the required tool as planned in the given operation."
        self.PLND_TOOL_CHG = parse_value(self.schema, column_value_map, "PLND_TOOL_CHG")
        "The change letter (revision) of the required tool as planned in the given operation."

class SFWID_GROUP_JOB_SEC_GRP:
    schema = {
        "GROUP_JOB_NO": "STRING",
        "SECURITY_GROUP": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "GROUP_JOB_NO",
        "SECURITY_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_GROUP_JOB_SEC_GRP_FK1", ["GROUP_JOB_NO"], "SFWID_GROUP_JOB", ["GROUP_JOB_NO"]),
        DbForeignKey("SFWID_GROUP_JOB_SEC_GRP_FK2", ["SECURITY_GROUP"], "SFFND_SECURITY_GROUP_DEF", ["SECURITY_GROUP"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.GROUP_JOB_NO = parse_value(self.schema, column_value_map, "GROUP_JOB_NO")
        "The unique identifier of a group job."
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        "The unique identifier of a security group."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_WE_RULE_DEF:
    schema = {
        "WE_RULE": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "WE_RULE_DESC": "STRING",
    }
    primary_key_columns = [
        "WE_RULE",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.WE_RULE = parse_value(self.schema, column_value_map, "WE_RULE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.WE_RULE_DESC = parse_value(self.schema, column_value_map, "WE_RULE_DESC")

class SFFND_MMOBJ_TASK:
    schema = {
        "TASK_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "TASK_ID",
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_MMOBJ_TASK_TASK", ["TASK_ID"], "SFFND_TASK", ["TASK_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TASK_ID = parse_value(self.schema, column_value_map, "TASK_ID")
        "The unique identifier of a task."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_ALERT_TYPE_DEF:
    schema = {
        "ALERT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "AGING_AVAILABLE_FLAG": "STRING",
        "DESCRIPTION": "STRING",
        "SUBSCRIPTION_PRIV": "STRING",
        "SUBSCRIPTION_CLASS": "STRING",
        "TEMPLATE_NAME": "STRING",
    }
    primary_key_columns = [
        "ALERT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_ALERT_TYPE_DEF_FK1", ["TEMPLATE_NAME"], "SFCORE_TEMPLATE_DEF", ["TEMPLATE_NAME"]),
    ]
    refs = [
        "SFFND_ALERT_CONDITION_DEF_FK1",
        "SFFND_ALERT_NAME_DEF_FK1",
    ]
    def __init__(self, column_value_map):
        self.ALERT_TYPE = parse_value(self.schema, column_value_map, "ALERT_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.AGING_AVAILABLE_FLAG = parse_value(self.schema, column_value_map, "AGING_AVAILABLE_FLAG")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.SUBSCRIPTION_PRIV = parse_value(self.schema, column_value_map, "SUBSCRIPTION_PRIV")
        "The required privilege to subscribe to the event"
        self.SUBSCRIPTION_CLASS = parse_value(self.schema, column_value_map, "SUBSCRIPTION_CLASS")
        "Alert subscription class"
        self.TEMPLATE_NAME = parse_value(self.schema, column_value_map, "TEMPLATE_NAME")
        self.SFFND_ALERT_CONDITION_DEF_FK1 = []
        self.SFFND_ALERT_NAME_DEF_FK1 = []

class SFFND_PLANNED_ACTIONS_DEF:
    schema = {
        "SOURCE": "STRING",
        "PLANNED_ACTION": "STRING",
        "ACTION_OBJECT_TYPE": "STRING",
        "PLANNED_ACTION_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "SOURCE",
        "PLANNED_ACTION",
        "ACTION_OBJECT_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_PLANNED_ACTIONS_FK13",
    ]
    def __init__(self, column_value_map):
        self.SOURCE = parse_value(self.schema, column_value_map, "SOURCE")
        "Possible Values can be Impacted or Resulting."
        self.PLANNED_ACTION = parse_value(self.schema, column_value_map, "PLANNED_ACTION")
        "Action to be Taken on the selected Impacted, Affected or Resulting Object."
        self.ACTION_OBJECT_TYPE = parse_value(self.schema, column_value_map, "ACTION_OBJECT_TYPE")
        "The Type of Object on which Action is to be taken. It can be Bom, Work Order, Work Plan, Standard Operation, Standard Text, Inspection Plan, Inspection Order, All Types of MM Objects. Based on this field, the other Key ID fields will be populated."
        self.PLANNED_ACTION_DESC = parse_value(self.schema, column_value_map, "PLANNED_ACTION_DESC")
        "Actual Text shown to user for Planned Action."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFPL_PLANNED_ACTIONS_FK13 = []

class SFWID_ORDER_REV:
    schema = {
        "ORDER_ID": "STRING",
        "ORDER_REV": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "REFERENCE_ALT_ID": "STRING",
        "ORDER_IMAGE": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "ORDER_REV",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_REV_FK2", ["REFERENCE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_ORDER_REV_FK1", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.ORDER_REV = parse_value(self.schema, column_value_map, "ORDER_REV")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.REFERENCE_ALT_ID = parse_value(self.schema, column_value_map, "REFERENCE_ALT_ID")
        self.ORDER_IMAGE = parse_value(self.schema, column_value_map, "ORDER_IMAGE")

class SFCORE_ATTACHMENT_OBJECT:
    schema = {
        "OBJECT_ID": "STRING",
        "PARENT_OBJECT_ID": "STRING",
        "PARENT_OBJECT_TYPE": "STRING",
        "ACTION_TYPE": "STRING",
        "OBJECT_TAG": "STRING",
        "OBJECT_REV": "STRING",
        "OBJECT_DESC": "STRING",
        "TEXT_DATA": "STRING",
        "BINARY_DATA": "STRING",
        "THUMBNAIL": "STRING",
        "IMAGE": "STRING",
        "UCF_OBJ_VCH1": "STRING",
        "UCF_OBJ_VCH2": "STRING",
        "UCF_OBJ_VCH3": "STRING",
        "UCF_OBJ_VCH4": "STRING",
        "UCF_OBJ_VCH5": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBJECT_VER": "STRING",
        "DEFAULT_ACTION_FLAG": "STRING",
    }
    primary_key_columns = [
        "OBJECT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_ATTACHMENT_OBJECT_FK2", ["PARENT_OBJECT_TYPE"], "SFCORE_OBJECT_TYPE_DEF", ["OBJECT_TYPE"]),
        DbForeignKey("SFCORE_ATTACHMENT_OBJECT_FK1", ["PARENT_OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of this multimedia attachment object."
        self.PARENT_OBJECT_ID = parse_value(self.schema, column_value_map, "PARENT_OBJECT_ID")
        "MM Object ID for which attachment action is specified."
        self.PARENT_OBJECT_TYPE = parse_value(self.schema, column_value_map, "PARENT_OBJECT_TYPE")
        "The type of multimedia object."
        self.ACTION_TYPE = parse_value(self.schema, column_value_map, "ACTION_TYPE")
        "Action type of the object. E.g., VIEW, EDIT, SRC_EDIT, HIGHLIGHT, ARCHIVE."
        self.OBJECT_TAG = parse_value(self.schema, column_value_map, "OBJECT_TAG")
        "User provided unique identifier of multimedia attachment object."
        self.OBJECT_REV = parse_value(self.schema, column_value_map, "OBJECT_REV")
        "Revision number of multimedia attachment object."
        self.OBJECT_DESC = parse_value(self.schema, column_value_map, "OBJECT_DESC")
        "A detailed description of the multimedia attachment object."
        self.TEXT_DATA = parse_value(self.schema, column_value_map, "TEXT_DATA")
        "Actual textual data of the object. E.g., URL, URI, File path, etc."
        self.BINARY_DATA = parse_value(self.schema, column_value_map, "BINARY_DATA")
        "Actual binary data of the object."
        self.THUMBNAIL = parse_value(self.schema, column_value_map, "THUMBNAIL")
        "A thumbnail representation of this attachment."
        self.IMAGE = parse_value(self.schema, column_value_map, "IMAGE")
        "Snapshot can be stored here."
        self.UCF_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBJECT_VER = parse_value(self.schema, column_value_map, "OBJECT_VER")
        "Store version of objects received from external system. For objects created internally, this will be blank."
        self.DEFAULT_ACTION_FLAG = parse_value(self.schema, column_value_map, "DEFAULT_ACTION_FLAG")
        "Indicates default behavior for object when opened in Solumina."

class SFWID_OPER_SKILL:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "SKILL_CATEGORY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "CREW_QTY": "NUMBER",
        "LABOR_HOURS": "NUMBER",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "MAIN_SKILL_FLAG": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "SKILL_CATEGORY",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_SKILL_SCATG_FK", ["SKILL_CATEGORY"], "SFFND_SKILL_CATEGORY_DEF", ["SKILL_CATEGORY"]),
        DbForeignKey("SFWID_OPER_SKILL_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_SKILL_DESC_FK", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.SKILL_CATEGORY = parse_value(self.schema, column_value_map, "SKILL_CATEGORY")
        "A category to which the required skill belongs."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.CREW_QTY = parse_value(self.schema, column_value_map, "CREW_QTY")
        "Number of workers as resource to perform the manufacturing operation."
        self.LABOR_HOURS = parse_value(self.schema, column_value_map, "LABOR_HOURS")
        "Labor hours required to perform the manufacturing operation."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.MAIN_SKILL_FLAG = parse_value(self.schema, column_value_map, "MAIN_SKILL_FLAG")
        "Value Y means the Skill is Main Skill. Only one Skill can have MAIN_SKILL_FLAG=Y for a particular Operation."

class SFFND_HTREF_ORDER_TEXT_ALT:
    schema = {
        "HTREF_ORDER_TEXT_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "REF_ID": "STRING",
        "ORDER_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_TYPE": "STRING",
        "OBJECT_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ALT_COUNT": "NUMBER",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
        "ALT_ID": "STRING",
    }
    primary_key_columns = [
        "HTREF_ORDER_TEXT_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_HTREF_ORDER_TEXT_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HTREF_ORDER_TEXT_ALT = parse_value(self.schema, column_value_map, "HTREF_ORDER_TEXT_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "The system generated unique identifier of an object link embedded in a work plan operation text block."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "The unique identifier of the object being referenced."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The object type/class which the object belongs to. For example: CAD drawing, still image, slide, UDV, standard text, audio, or video."
        self.OBJECT_NAME = parse_value(self.schema, column_value_map, "OBJECT_NAME")
        "A descriptive tag/name of the object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "The protocol id of a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "The host id of a Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "The file location of a Universal Resource Locator."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."

class SFCORE_INI_LIB:
    schema = {
        "INI_ID": "STRING",
        "INI_ID_DISPL": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "STYPE": "STRING",
        "DESCRIPTION": "STRING",
        "INI_TEXT": "STRING",
        "INI_DATA": "STRING",
        "INI_DATA_KEY": "STRING",
    }
    primary_key_columns = [
        "INI_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFCORE_INIFLDR_INILIB_FK",
    ]
    def __init__(self, column_value_map):
        self.INI_ID = parse_value(self.schema, column_value_map, "INI_ID")
        "Unique identifier, all uppercase, of a Solumina application initialization entry."
        self.INI_ID_DISPL = parse_value(self.schema, column_value_map, "INI_ID_DISPL")
        "Reformatted initialization library entry ID for display."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")
        "Type/class the initialization entry belongs to, indicating the intent/purpose of the entry."
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        "A detailed description of the initialization library entry."
        self.INI_TEXT = parse_value(self.schema, column_value_map, "INI_TEXT")
        "The actual text/content of the initialization entry."
        self.INI_DATA = parse_value(self.schema, column_value_map, "INI_DATA")
        "Binary representation of the given INI_TEXT."
        self.INI_DATA_KEY = parse_value(self.schema, column_value_map, "INI_DATA_KEY")
        "Application generated internal checksum/crc."
        self.SFCORE_INIFLDR_INILIB_FK = []

class SFCORE_CONNECTION_DESC:
    schema = {
        "CONNECTION_ID": "STRING",
        "SESSION_ID": "STRING",
        "USERID": "STRING",
        "SUPPLIER_ID": "STRING",
        "LOGIN_TIME": "STRING",
        "CONNECTION_TYPE": "STRING",
        "IPADDRESS": "STRING",
        "APPINIID": "STRING",
        "APPVER": "STRING",
        "CLIENT_CONTEXT_DATA": "STRING",
        "CLIENT_TZONE": "NUMBER",
        "DB_UNIQUE_ID": "STRING",
        "MT_NODE_ID": "STRING",
        "HEARTBEAT_TIMESTAMP": "DATE",
    }
    primary_key_columns = [
        "CONNECTION_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFCORE_CONN_PARMS_CONN_FK",
        "SFCORE_CONN_DETLS_CONN_FK",
    ]
    def __init__(self, column_value_map):
        self.CONNECTION_ID = parse_value(self.schema, column_value_map, "CONNECTION_ID")
        "Unique system generated identifier for a given application connection."
        self.SESSION_ID = parse_value(self.schema, column_value_map, "SESSION_ID")
        "The unique identifier of a user login session to the Solumina system ."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "System generated unique identifier of the user who made the associated connection."
        self.SUPPLIER_ID = parse_value(self.schema, column_value_map, "SUPPLIER_ID")
        "System generated unique identifier for a given supplier, used for supplier licensing."
        self.LOGIN_TIME = parse_value(self.schema, column_value_map, "LOGIN_TIME")
        "Date and time of the user login session being established."
        self.CONNECTION_TYPE = parse_value(self.schema, column_value_map, "CONNECTION_TYPE")
        "The type of client a user is running/using when making an application connection to the Solumina database."
        self.IPADDRESS = parse_value(self.schema, column_value_map, "IPADDRESS")
        "IP address from which the user is logging in."
        self.APPINIID = parse_value(self.schema, column_value_map, "APPINIID")
        "INI_LIB record when application connection was made."
        self.APPVER = parse_value(self.schema, column_value_map, "APPVER")
        "Version of Solumina client application the user is running."
        self.CLIENT_CONTEXT_DATA = parse_value(self.schema, column_value_map, "CLIENT_CONTEXT_DATA")
        self.CLIENT_TZONE = parse_value(self.schema, column_value_map, "CLIENT_TZONE")
        self.DB_UNIQUE_ID = parse_value(self.schema, column_value_map, "DB_UNIQUE_ID")
        self.MT_NODE_ID = parse_value(self.schema, column_value_map, "MT_NODE_ID")
        "Middle tier node id."
        self.HEARTBEAT_TIMESTAMP = parse_value(self.schema, column_value_map, "HEARTBEAT_TIMESTAMP")
        "HEARTBEAT_TIMESTAMP is to store active session timestamp when client connects to Middle Tier."
        self.SFCORE_CONN_PARMS_CONN_FK = []
        self.SFCORE_CONN_DETLS_CONN_FK = []

class SFPL_CHANGE_REQUEST:
    schema = {
        "CHANGE_REQUEST_ID": "STRING",
        "CHANGE_NO": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "TITLE": "STRING",
        "CHANGE_REQUEST_STATUS": "STRING",
        "PRIORITY": "STRING",
        "CHANGE_TYPE": "STRING",
        "REQUESTED_BY_USERID": "STRING",
        "DOC_TYPE": "STRING",
        "REQUEST_SUBMITTED_DATE": "STRING",
        "DUE_DATE": "STRING",
        "WORK_FLOW": "STRING",
        "CHANGE_CATEGORY": "STRING",
        "RECURRING_COST_TO_IMPLEMENT": "NUMBER",
        "NONRECURRING_COST_TO_IMPLEMENT": "NUMBER",
        "PROPOSED_CHANGE": "STRING",
        "TECHNICAL_RECOMMENDATIONS": "STRING",
        "IMPLEMENTATION_RECOMMENDATIONS": "STRING",
        "COMMENTS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "UNIT_TYPE": "STRING",
        "APPROVAL_DATE": "STRING",
        "UCF_CHANGE_REQUEST_DATE1": "STRING",
        "UCF_CHANGE_REQUEST_DATE2": "STRING",
        "UCF_CHANGE_REQUEST_DATE3": "STRING",
        "UCF_CHANGE_REQUEST_DATE4": "STRING",
        "UCF_CHANGE_REQUEST_DATE5": "STRING",
        "UCF_CHANGE_REQUEST_NUM1": "NUMBER",
        "UCF_CHANGE_REQUEST_NUM2": "NUMBER",
        "UCF_CHANGE_REQUEST_NUM3": "NUMBER",
        "UCF_CHANGE_REQUEST_NUM4": "NUMBER",
        "UCF_CHANGE_REQUEST_NUM5": "NUMBER",
        "UCF_CHANGE_REQUEST_FLAG1": "STRING",
        "UCF_CHANGE_REQUEST_FLAG2": "STRING",
        "UCF_CHANGE_REQUEST_FLAG3": "STRING",
        "UCF_CHANGE_REQUEST_FLAG4": "STRING",
        "UCF_CHANGE_REQUEST_FLAG5": "STRING",
        "UCF_CHANGE_REQUEST_VCH1": "STRING",
        "UCF_CHANGE_REQUEST_VCH2": "STRING",
        "UCF_CHANGE_REQUEST_VCH3": "STRING",
        "UCF_CHANGE_REQUEST_VCH4": "STRING",
        "UCF_CHANGE_REQUEST_VCH5": "STRING",
        "UCF_CHANGE_REQUEST_VCH6": "STRING",
        "UCF_CHANGE_REQUEST_VCH7": "STRING",
        "UCF_CHANGE_REQUEST_VCH8": "STRING",
        "UCF_CHANGE_REQUEST_VCH9": "STRING",
        "UCF_CHANGE_REQUEST_VCH10": "STRING",
        "UCF_CHANGE_REQUEST_VCH11": "STRING",
        "UCF_CHANGE_REQUEST_VCH12": "STRING",
        "UCF_CHANGE_REQUEST_VCH13": "STRING",
        "UCF_CHANGE_REQUEST_VCH14": "STRING",
        "UCF_CHANGE_REQUEST_VCH15": "STRING",
        "UCF_CHANGE_REQUEST_VCH255_1": "STRING",
        "UCF_CHANGE_REQUEST_VCH255_2": "STRING",
        "UCF_CHANGE_REQUEST_VCH255_3": "STRING",
        "UCF_CHANGE_REQUEST_VCH4000_1": "STRING",
        "UCF_CHANGE_REQUEST_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "CHANGE_REQUEST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_CHANGE_REQUEST_FK2", ["DOC_TYPE","CHANGE_TYPE","WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
        DbForeignKey("SFPL_CHANGE_REQUEST_FK3", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFPL_CHANGE_REQUEST_FK1", ["CHANGE_CATEGORY"], "SFFND_CHANGE_CATEGORY_DEF", ["CHANGE_CATEGORY"]),
    ]
    refs = [
        "SFFND_CHANGE_REQUEST_TASK_FK1",
        "SFPL_IMPACTED_OBJECTS_FK1",
        "SFPL_PLANNED_ACTIONS_FK1",
        "SFPL_RESULTING_OBJECTS_FK1",
        "SFPL_CHANGE_MM_OBJECT_XREF_FK1",
        "SFPL_AFFECTED_TO_RESULTING_FK1",
        "SFPL_AFFECTED_OBJECTS_FK1",
    ]
    def __init__(self, column_value_map):
        self.CHANGE_REQUEST_ID = parse_value(self.schema, column_value_map, "CHANGE_REQUEST_ID")
        "A Unique system generated identifier for Change Request and a primary key of this table."
        self.CHANGE_NO = parse_value(self.schema, column_value_map, "CHANGE_NO")
        "A Unique key and Unique Number identified for Change Request."
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        "A Number identifier which identifies that this record comes from Plam Device."
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        "A Number identifier which identifies that this record comes from ERP System."
        self.TITLE = parse_value(self.schema, column_value_map, "TITLE")
        "Tile for Change Request."
        self.CHANGE_REQUEST_STATUS = parse_value(self.schema, column_value_map, "CHANGE_REQUEST_STATUS")
        "Stores Current Status of Change Request."
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        "High, Low, Medium (Lookup)."
        self.CHANGE_TYPE = parse_value(self.schema, column_value_map, "CHANGE_TYPE")
        "This is Document Subtype for Change Request Workflow."
        self.REQUESTED_BY_USERID = parse_value(self.schema, column_value_map, "REQUESTED_BY_USERID")
        "USERID of the user requesting this Change."
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        "Change, will be the value by default for Change Management Workflow."
        self.REQUEST_SUBMITTED_DATE = parse_value(self.schema, column_value_map, "REQUEST_SUBMITTED_DATE")
        "Date on which request is submitted."
        self.DUE_DATE = parse_value(self.schema, column_value_map, "DUE_DATE")
        "Date on which request needs to be implemented."
        self.WORK_FLOW = parse_value(self.schema, column_value_map, "WORK_FLOW")
        "Work Flow Value."
        self.CHANGE_CATEGORY = parse_value(self.schema, column_value_map, "CHANGE_CATEGORY")
        "Lookup value of Change Category."
        self.RECURRING_COST_TO_IMPLEMENT = parse_value(self.schema, column_value_map, "RECURRING_COST_TO_IMPLEMENT")
        "Recurring Cost To implement this Change."
        self.NONRECURRING_COST_TO_IMPLEMENT = parse_value(self.schema, column_value_map, "NONRECURRING_COST_TO_IMPLEMENT")
        "Non-Recurring Cost To implement this Change."
        self.PROPOSED_CHANGE = parse_value(self.schema, column_value_map, "PROPOSED_CHANGE")
        "Proposed Change."
        self.TECHNICAL_RECOMMENDATIONS = parse_value(self.schema, column_value_map, "TECHNICAL_RECOMMENDATIONS")
        "Technical Review and Recommendations."
        self.IMPLEMENTATION_RECOMMENDATIONS = parse_value(self.schema, column_value_map, "IMPLEMENTATION_RECOMMENDATIONS")
        "Implementation Timings and Recommendations."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Additional Comments, if any."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "The upper bound of the effectivity range for a effectivity type other than time period."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "The lower bound of the effectivity range for a effectivity type other than time period."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "The starting date of the time period during which the change request is effective."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "The ending date of the time period during which the change request is effective."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit."
        self.APPROVAL_DATE = parse_value(self.schema, column_value_map, "APPROVAL_DATE")
        "Date on which request is approved."
        self.UCF_CHANGE_REQUEST_DATE1 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CHANGE_REQUEST_DATE2 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CHANGE_REQUEST_DATE3 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_CHANGE_REQUEST_DATE4 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_CHANGE_REQUEST_DATE5 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_CHANGE_REQUEST_NUM1 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CHANGE_REQUEST_NUM2 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_CHANGE_REQUEST_NUM3 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CHANGE_REQUEST_NUM4 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_CHANGE_REQUEST_NUM5 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_CHANGE_REQUEST_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CHANGE_REQUEST_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CHANGE_REQUEST_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CHANGE_REQUEST_FLAG4 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CHANGE_REQUEST_FLAG5 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CHANGE_REQUEST_VCH1 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH2 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH3 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH4 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH5 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH6 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH7 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH8 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH9 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH10 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH11 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH12 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH13 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH14 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH15 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH255_1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH255_2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH255_3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH4000_1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CHANGE_REQUEST_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_CHANGE_REQUEST_VCH4000_2")
        "User-configurable field for VARCHAR data type."
        self.SFFND_CHANGE_REQUEST_TASK_FK1 = []
        self.SFPL_IMPACTED_OBJECTS_FK1 = []
        self.SFPL_PLANNED_ACTIONS_FK1 = []
        self.SFPL_RESULTING_OBJECTS_FK1 = []
        self.SFPL_CHANGE_MM_OBJECT_XREF_FK1 = []
        self.SFPL_AFFECTED_TO_RESULTING_FK1 = []
        self.SFPL_AFFECTED_OBJECTS_FK1 = []

class SFFND_BOM_TASK:
    schema = {
        "TASK_ID": "STRING",
        "BOM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "TASK_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_BOM_TASK_FK2", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFFND_BOM_TASK_FK1", ["TASK_ID"], "SFFND_TASK", ["TASK_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TASK_ID = parse_value(self.schema, column_value_map, "TASK_ID")
        "The unique identifier of a task for work flow control, specifically a task in the work plan authoring process in this case."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique id to identify each BOM revision."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_ORDER_TYPE_DEF:
    schema = {
        "ORDER_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "DEFAULT_DISC_DOC_TYPE": "STRING",
        "DEFAULT_DISC_TYPE": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DEFAULT_DISC_WORK_FLOW": "STRING",
        "PPV_HOLD_STOP_TYPE": "STRING",
        "LIEN_WO_STOP_TYPE": "STRING",
        "LIEN_WO_INHERITED_STOP_TYPE": "STRING",
        "LIEN_DISC_STOP_TYPE": "STRING",
        "LIEN_NUM_GEN_NAME": "STRING",
        "LIEN_DISC_INHERITED_STOP_TYPE": "STRING",
        "LIEN_IO_INHERITED_STOP_TYPE": "STRING",
    }
    primary_key_columns = [
        "ORDER_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_TYPE_DEF_FK2", ["LIEN_NUM_GEN_NAME"], "SFFND_AUTO_NUM_GEN_DEF", ["NUM_GEN_NAME"]),
        DbForeignKey("SFWID_ORDER_TYPE_DEF_FK1", ["DEFAULT_DISC_DOC_TYPE","DEFAULT_DISC_TYPE","DEFAULT_DISC_WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_TYPE = parse_value(self.schema, column_value_map, "ORDER_TYPE")
        "Type or classification of order."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.DEFAULT_DISC_DOC_TYPE = parse_value(self.schema, column_value_map, "DEFAULT_DISC_DOC_TYPE")
        "Type or classification of discrepancy document."
        self.DEFAULT_DISC_TYPE = parse_value(self.schema, column_value_map, "DEFAULT_DISC_TYPE")
        "Type or classification of discrepancy, e.g., SCRAP, REWORK, REPAIR, AS IS, RETURN."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DEFAULT_DISC_WORK_FLOW = parse_value(self.schema, column_value_map, "DEFAULT_DISC_WORK_FLOW")
        "Default Work Flow associated with discrepancy."
        self.PPV_HOLD_STOP_TYPE = parse_value(self.schema, column_value_map, "PPV_HOLD_STOP_TYPE")
        self.LIEN_WO_STOP_TYPE = parse_value(self.schema, column_value_map, "LIEN_WO_STOP_TYPE")
        "Stop Type of Hold for Work Order Lien."
        self.LIEN_WO_INHERITED_STOP_TYPE = parse_value(self.schema, column_value_map, "LIEN_WO_INHERITED_STOP_TYPE")
        "Stop Type of Hold for Work Order Inhetited Lien."
        self.LIEN_DISC_STOP_TYPE = parse_value(self.schema, column_value_map, "LIEN_DISC_STOP_TYPE")
        "Stop Type of Hold for Discrepancy Lien."
        self.LIEN_NUM_GEN_NAME = parse_value(self.schema, column_value_map, "LIEN_NUM_GEN_NAME")
        "Name of Number Generator to create Unique Id."
        self.LIEN_DISC_INHERITED_STOP_TYPE = parse_value(self.schema, column_value_map, "LIEN_DISC_INHERITED_STOP_TYPE")
        "Stop Type of Hold for Inhetited Discrepancy Lien."
        self.LIEN_IO_INHERITED_STOP_TYPE = parse_value(self.schema, column_value_map, "LIEN_IO_INHERITED_STOP_TYPE")
        "Stop Type of hold for Inherited Inspection Order Lien."

class SFQA_DISC_LIENS:
    schema = {
        "LIEN_ID": "STRING",
        "INH_LIEN_ID": "STRING",
        "PART_NO": "STRING",
        "LOT_ID": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "SERIAL_ID": "STRING",
        "LIEN_STATUS": "STRING",
        "LIEN_START_DATE": "STRING",
        "LIEN_END_DATE": "STRING",
        "LIEN_DISC_PERSIST_AUTH_FLAG": "STRING",
        "AUTHORIZATION_NOTES": "STRING",
        "LIEN_PERSIST_UPTO_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SERIAL_NO": "STRING",
        "LOT_NO": "STRING",
    }
    primary_key_columns = [
        "LIEN_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_LIENS_FK2", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
        DbForeignKey("SFQA_DISC_LIENS_FK1", ["PART_NO","LOT_NO","SERIAL_NO"], "SFWID_AS_WORKED_ITEM", ["PART_NO","LOT_NO","SERIAL_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.LIEN_ID = parse_value(self.schema, column_value_map, "LIEN_ID")
        "Unique identifier of the Lien."
        self.INH_LIEN_ID = parse_value(self.schema, column_value_map, "INH_LIEN_ID")
        "The unique identifier of the lien being inherited."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique identifier of the Lot."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "Identifier of the discrepancy, including line number."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "Identifier of the discrepancy, including line number."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique identifier of the Serial."
        self.LIEN_STATUS = parse_value(self.schema, column_value_map, "LIEN_STATUS")
        "Status of the Lien/Inherited lien."
        self.LIEN_START_DATE = parse_value(self.schema, column_value_map, "LIEN_START_DATE")
        "Timestamp on which the discrepancy is created for the unit."
        self.LIEN_END_DATE = parse_value(self.schema, column_value_map, "LIEN_END_DATE")
        "Timestamp on which the lien is closed, or cancelled."
        self.LIEN_DISC_PERSIST_AUTH_FLAG = parse_value(self.schema, column_value_map, "LIEN_DISC_PERSIST_AUTH_FLAG")
        "Indicates whether an authorization for the lien must be persisted."
        self.AUTHORIZATION_NOTES = parse_value(self.schema, column_value_map, "AUTHORIZATION_NOTES")
        "Authorization Notes."
        self.LIEN_PERSIST_UPTO_ITEM_ID = parse_value(self.schema, column_value_map, "LIEN_PERSIST_UPTO_ITEM_ID")
        "Indicates the item id of the higher level unit that must be held when the discrepancy lien is inherited."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."

class SFMOBILE_WIZARD:
    schema = {
        "WIZARD_NAME": "STRING",
        "DESCRIPTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
        "STYPE": "STRING",
    }
    primary_key_columns = [
        "WIZARD_NAME",
    ]
    foreign_keys = [
        DbForeignKey("SFMOBILE_WIZARD_STYPE_FK1", ["STYPE"], "SFCORE_MODULES", ["GROUP_NAME"]),
    ]
    refs = [
        "SFMOBILE_WIZARD_SCENES_WIZ_FK1",
    ]
    def __init__(self, column_value_map):
        self.WIZARD_NAME = parse_value(self.schema, column_value_map, "WIZARD_NAME")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")
        "name of the group"
        self.SFMOBILE_WIZARD_SCENES_WIZ_FK1 = []

class SFQA_CA_REQ_AFFECTED_TEAM_ASGN:
    schema = {
        "CA_REQUEST_ID": "STRING",
        "USERID": "STRING",
        "FIRST_NAME": "STRING",
        "LAST_NAME": "STRING",
        "TEAM_LEAD_FLAG": "STRING",
        "CAN_MODIFY_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "FACILITATOR_FLAG": "STRING",
    }
    primary_key_columns = [
        "CA_REQUEST_ID",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_REQ_AFFECTEDTMASGN_FK1", ["USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFQA_CA_REQ_AFFECTEDTMASGN_FK", ["CA_REQUEST_ID"], "SFQA_CA_REQUEST", ["CA_REQUEST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Unique identifier of the user assigned as a Team Member."
        self.FIRST_NAME = parse_value(self.schema, column_value_map, "FIRST_NAME")
        "First name of the user."
        self.LAST_NAME = parse_value(self.schema, column_value_map, "LAST_NAME")
        "Last name of the user."
        self.TEAM_LEAD_FLAG = parse_value(self.schema, column_value_map, "TEAM_LEAD_FLAG")
        "A flag (Y/N) indicating whether the team member is a Lead or not."
        self.CAN_MODIFY_FLAG = parse_value(self.schema, column_value_map, "CAN_MODIFY_FLAG")
        "A flag (Y/N) indicating whether the team member can modify or not."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.FACILITATOR_FLAG = parse_value(self.schema, column_value_map, "FACILITATOR_FLAG")
        "A flag (Y/N) indicating whether the team member is a Gate Keeper or not."

class SFQA_CA_DEFECT:
    schema = {
        "CA_ID": "STRING",
        "DEFECT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DEFECT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "CA_ID",
        "DEFECT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_DEFECT_CA_DESC_FK", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.DEFECT_TYPE = parse_value(self.schema, column_value_map, "DEFECT_TYPE")
        "Type or classification of defect."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DEFECT_COUNT = parse_value(self.schema, column_value_map, "DEFECT_COUNT")
        "Number of defects associated with a given Corrective Action."

class SFFND_TOOL:
    schema = {
        "UPDT_USERID": "STRING",
        "TOOL_NO": "STRING",
        "TIME_STAMP": "DATE",
        "TOOL_CHG": "STRING",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "TOOL_TITLE": "STRING",
        "OBJECT_ID": "STRING",
        "COMMENTS": "STRING",
        "TOOL_CALIBRATE_DAYS": "STRING",
        "TOOL_CALIBRATE_HOURS": "STRING",
        "TOOL_CALIBRATE_USES": "STRING",
        "TOOL_CALIBRATION_DAYS_FREQ": "NUMBER",
        "TOOL_CALIBRATION_HOURS_FREQ": "NUMBER",
        "TOOL_CALIBRATION_USES_FREQ": "NUMBER",
        "EXTEND_CALIB_DAYS": "NUMBER",
        "EXTEND_CALIB_HOURS": "NUMBER",
        "EXTEND_CALIB_USES": "NUMBER",
        "SECURITY_GROUP": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
    }
    primary_key_columns = [
        "TOOL_NO",
        "TOOL_CHG",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_TOOL_ITYPE_FK", ["ITEM_TYPE","ITEM_SUBTYPE"], "SFPL_ITEM_TYPE_DEF", ["ITEM_TYPE","ITEM_SUBTYPE"]),
        DbForeignKey("SFFND_TOOL_TOOLNO_TOOLCHG_FK", ["TOOL_NO","TOOL_CHG"], "SFPL_ITEM_DESC_MASTER_ALL", ["PART_NO","PART_CHG"]),
    ]
    refs = [
        "SFWID_ORDER_MACH_ALT_XREF_FK3",
        "SFWID_ORDER_MACH_ALT_XREF_FK2",
        "SFPL_STEP_TOOL_TOOL_FK",
        "SFWID_OPER_TOOL_TOOL_FK",
        "SFWID_OPER_TOOL_ALT_FK2",
        "SFQA_CA_AFFECTED_TOOLS_FK2",
        "SFFND_TOOLSERIALS_TOOL_FK",
        "SFQA_CA_REQ_AFFECTED_TOOLS_FK1",
        "SFSQA_INSP_ORDER_ISII_TOOL_FK2",
        "SFSQA_INSP_ITEM_TOOLS_FK1",
        "SFFND_TOOL_MANUFACTURER_T_FK",
        "SFFND_STD_DATCOL_TOOL_FK1",
        "SFWID_ORDER_TOOL_ALT_XREF_FK2",
        "SFWID_ORDER_TOOL_ALT_XREF_FK3",
    ]
    def __init__(self, column_value_map):
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The change number, secondary identifier, of the tool."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.TOOL_TITLE = parse_value(self.schema, column_value_map, "TOOL_TITLE")
        "A description or name of the tool."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Comments about loading of the current product version."
        self.TOOL_CALIBRATE_DAYS = parse_value(self.schema, column_value_map, "TOOL_CALIBRATE_DAYS")
        self.TOOL_CALIBRATE_HOURS = parse_value(self.schema, column_value_map, "TOOL_CALIBRATE_HOURS")
        self.TOOL_CALIBRATE_USES = parse_value(self.schema, column_value_map, "TOOL_CALIBRATE_USES")
        self.TOOL_CALIBRATION_DAYS_FREQ = parse_value(self.schema, column_value_map, "TOOL_CALIBRATION_DAYS_FREQ")
        self.TOOL_CALIBRATION_HOURS_FREQ = parse_value(self.schema, column_value_map, "TOOL_CALIBRATION_HOURS_FREQ")
        self.TOOL_CALIBRATION_USES_FREQ = parse_value(self.schema, column_value_map, "TOOL_CALIBRATION_USES_FREQ")
        self.EXTEND_CALIB_DAYS = parse_value(self.schema, column_value_map, "EXTEND_CALIB_DAYS")
        self.EXTEND_CALIB_HOURS = parse_value(self.schema, column_value_map, "EXTEND_CALIB_HOURS")
        self.EXTEND_CALIB_USES = parse_value(self.schema, column_value_map, "EXTEND_CALIB_USES")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SFWID_ORDER_MACH_ALT_XREF_FK3 = []
        self.SFWID_ORDER_MACH_ALT_XREF_FK2 = []
        self.SFPL_STEP_TOOL_TOOL_FK = []
        self.SFWID_OPER_TOOL_TOOL_FK = []
        self.SFWID_OPER_TOOL_ALT_FK2 = []
        self.SFQA_CA_AFFECTED_TOOLS_FK2 = []
        self.SFFND_TOOLSERIALS_TOOL_FK = []
        self.SFQA_CA_REQ_AFFECTED_TOOLS_FK1 = []
        self.SFSQA_INSP_ORDER_ISII_TOOL_FK2 = []
        self.SFSQA_INSP_ITEM_TOOLS_FK1 = []
        self.SFFND_TOOL_MANUFACTURER_T_FK = []
        self.SFFND_STD_DATCOL_TOOL_FK1 = []
        self.SFWID_ORDER_TOOL_ALT_XREF_FK2 = []
        self.SFWID_ORDER_TOOL_ALT_XREF_FK3 = []

class SFQA_DISC_ITEM_TEXT:
    schema = {
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
        "BLOCK_ID": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "DISC_LINE_NO",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISCITEMTXT_DISCITEM_FK", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
    ]
    refs = [
        "SFFND_HTREF_DISC_ITEM_T_IT_FK",
        "SFQA_DISC_ITEM_TEXT_SUBVAR_FK1",
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        self.SFFND_HTREF_DISC_ITEM_T_IT_FK = []
        self.SFQA_DISC_ITEM_TEXT_SUBVAR_FK1 = []

class SFPL_STEP_BUYOFF:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "BUYOFF_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BUYOFF_TYPE": "STRING",
        "BUYOFF_STATUS": "STRING",
        "BUYOFF_CERT": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "SUSPECT_FLAG": "STRING",
        "UCF_STEP_BUYOFF_VCH1": "STRING",
        "UCF_STEP_BUYOFF_VCH2": "STRING",
        "UCF_STEP_BUYOFF_VCH3": "STRING",
        "UCF_STEP_BUYOFF_VCH4": "STRING",
        "UCF_STEP_BUYOFF_VCH5": "STRING",
        "UCF_STEP_BUYOFF_VCH6": "STRING",
        "UCF_STEP_BUYOFF_VCH7": "STRING",
        "UCF_STEP_BUYOFF_VCH8": "STRING",
        "UCF_STEP_BUYOFF_VCH9": "STRING",
        "UCF_STEP_BUYOFF_VCH10": "STRING",
        "UCF_STEP_BUYOFF_VCH11": "STRING",
        "UCF_STEP_BUYOFF_VCH12": "STRING",
        "UCF_STEP_BUYOFF_VCH13": "STRING",
        "UCF_STEP_BUYOFF_VCH14": "STRING",
        "UCF_STEP_BUYOFF_VCH15": "STRING",
        "UCF_STEP_BUYOFF_NUM1": "NUMBER",
        "UCF_STEP_BUYOFF_NUM2": "NUMBER",
        "UCF_STEP_BUYOFF_NUM3": "NUMBER",
        "UCF_STEP_BUYOFF_NUM4": "NUMBER",
        "UCF_STEP_BUYOFF_NUM5": "NUMBER",
        "UCF_STEP_BUYOFF_DATE1": "STRING",
        "UCF_STEP_BUYOFF_DATE2": "STRING",
        "UCF_STEP_BUYOFF_DATE3": "STRING",
        "UCF_STEP_BUYOFF_DATE4": "STRING",
        "UCF_STEP_BUYOFF_DATE5": "STRING",
        "UCF_STEP_BUYOFF_FLAG1": "STRING",
        "UCF_STEP_BUYOFF_FLAG2": "STRING",
        "UCF_STEP_BUYOFF_FLAG3": "STRING",
        "UCF_STEP_BUYOFF_FLAG4": "STRING",
        "UCF_STEP_BUYOFF_FLAG5": "STRING",
        "UCF_STEP_BUYOFF_VCH255_1": "STRING",
        "UCF_STEP_BUYOFF_VCH255_2": "STRING",
        "UCF_STEP_BUYOFF_VCH255_3": "STRING",
        "UCF_STEP_BUYOFF_VCH4000_1": "STRING",
        "UCF_STEP_BUYOFF_VCH4000_2": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "BUYOFF_TITLE": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "BUYOFF_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEPBUY_STEPDESC_FK", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"], "SFPL_STEP_DESC", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"]),
        DbForeignKey("SFPL_STEP_BUYOFF_CERT_FK", ["BUYOFF_CERT"], "SFFND_CERT_DEF", ["CERT"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.BUYOFF_ID = parse_value(self.schema, column_value_map, "BUYOFF_ID")
        "Unique, system-generated identifier of the buyoff."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BUYOFF_TYPE = parse_value(self.schema, column_value_map, "BUYOFF_TYPE")
        "Type or classification of buyoff, e.g., MFG, MFG2, QA."
        self.BUYOFF_STATUS = parse_value(self.schema, column_value_map, "BUYOFF_STATUS")
        "The status of the buyoff, e.g., ACCEPT, REOPEN, CANCEL, REJECT."
        self.BUYOFF_CERT = parse_value(self.schema, column_value_map, "BUYOFF_CERT")
        "The required certification for the given buyoff."
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.UCF_STEP_BUYOFF_VCH1 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH1")
        self.UCF_STEP_BUYOFF_VCH2 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH2")
        self.UCF_STEP_BUYOFF_VCH3 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH3")
        self.UCF_STEP_BUYOFF_VCH4 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH4")
        self.UCF_STEP_BUYOFF_VCH5 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH5")
        self.UCF_STEP_BUYOFF_VCH6 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH6")
        self.UCF_STEP_BUYOFF_VCH7 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH7")
        self.UCF_STEP_BUYOFF_VCH8 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH8")
        self.UCF_STEP_BUYOFF_VCH9 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH9")
        self.UCF_STEP_BUYOFF_VCH10 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH10")
        self.UCF_STEP_BUYOFF_VCH11 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH11")
        self.UCF_STEP_BUYOFF_VCH12 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH12")
        self.UCF_STEP_BUYOFF_VCH13 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH13")
        self.UCF_STEP_BUYOFF_VCH14 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH14")
        self.UCF_STEP_BUYOFF_VCH15 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH15")
        self.UCF_STEP_BUYOFF_NUM1 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_NUM1")
        self.UCF_STEP_BUYOFF_NUM2 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_NUM2")
        self.UCF_STEP_BUYOFF_NUM3 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_NUM3")
        self.UCF_STEP_BUYOFF_NUM4 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_NUM4")
        self.UCF_STEP_BUYOFF_NUM5 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_NUM5")
        self.UCF_STEP_BUYOFF_DATE1 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_DATE1")
        self.UCF_STEP_BUYOFF_DATE2 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_DATE2")
        self.UCF_STEP_BUYOFF_DATE3 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_DATE3")
        self.UCF_STEP_BUYOFF_DATE4 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_DATE4")
        self.UCF_STEP_BUYOFF_DATE5 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_DATE5")
        self.UCF_STEP_BUYOFF_FLAG1 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_FLAG1")
        self.UCF_STEP_BUYOFF_FLAG2 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_FLAG2")
        self.UCF_STEP_BUYOFF_FLAG3 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_FLAG3")
        self.UCF_STEP_BUYOFF_FLAG4 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_FLAG4")
        self.UCF_STEP_BUYOFF_FLAG5 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_FLAG5")
        self.UCF_STEP_BUYOFF_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH255_1")
        self.UCF_STEP_BUYOFF_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH255_2")
        self.UCF_STEP_BUYOFF_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH255_3")
        self.UCF_STEP_BUYOFF_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH4000_1")
        self.UCF_STEP_BUYOFF_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_STEP_BUYOFF_VCH4000_2")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.BUYOFF_TITLE = parse_value(self.schema, column_value_map, "BUYOFF_TITLE")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Display line number for buyoff authoring."

class SFWID_REJECT_SRLOPER_BUYOFFS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "BUYOFF_ID": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "LOT_ID",
        "SERIAL_ID",
        "BUYOFF_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the associated lot number."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.BUYOFF_ID = parse_value(self.schema, column_value_map, "BUYOFF_ID")
        "Unique, system-generated identifier of the buyoff."

class SFSQA_INSP_DEF_INSP_ITEMS:
    schema = {
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "INSP_ITEM_ID": "STRING",
        "REFERENCE_NO": "STRING",
        "STATUS": "STRING",
        "CLASS": "NUMBER",
        "INSPECTION_METHOD": "STRING",
        "SAMPLE_RULE_ID": "STRING",
        "FREQUENCY": "NUMBER",
        "UPDT_USERID": "STRING",
        "UOM": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "FLIGHT_SAFETY_FLAG": "STRING",
        "VALIDATE_RESULT_FLAG": "STRING",
        "FAI_INSPECTION_FLAG": "STRING",
        "CDC_REQUIRED_FLAG": "STRING",
        "IC_FLAG": "STRING",
        "SUBCOMPONENT_IC_FLAG": "STRING",
        "DEFAULT_EXE_ORDER": "NUMBER",
        "B4_FINAL_ASSEMBLY_FLAG": "STRING",
        "CURRENT_OBS_COUNT": "NUMBER",
        "MASTER_SUB_FLAG": "STRING",
        "AQL": "NUMBER",
        "TARGET_VALUE": "STRING",
        "OBS_DATE": "STRING",
        "OBSOLETE_COUNT": "NUMBER",
        "INSP_ITEM_GROUPING": "NUMBER",
        "MASTER_INSP_ITEM_ID": "STRING",
        "CERT": "STRING",
        "UCF_II_VCH1": "STRING",
        "UCF_II_VCH2": "STRING",
        "UCF_II_VCH3": "STRING",
        "UCF_II_VCH4": "STRING",
        "UCF_II_VCH5": "STRING",
        "UCF_II_VCH6": "STRING",
        "UCF_II_VCH7": "STRING",
        "UCF_II_VCH8": "STRING",
        "UCF_II_VCH9": "STRING",
        "UCF_II_VCH10": "STRING",
        "UCF_II_VCH11": "STRING",
        "UCF_II_VCH12": "STRING",
        "UCF_II_VCH13": "STRING",
        "UCF_II_VCH14": "STRING",
        "UCF_II_VCH15": "STRING",
        "UCF_II_NUM1": "NUMBER",
        "UCF_II_NUM2": "NUMBER",
        "UCF_II_NUM3": "NUMBER",
        "UCF_II_NUM4": "NUMBER",
        "UCF_II_NUM5": "NUMBER",
        "UCF_II_DATE1": "STRING",
        "UCF_II_DATE2": "STRING",
        "UCF_II_DATE3": "STRING",
        "UCF_II_DATE4": "STRING",
        "UCF_II_DATE5": "STRING",
        "UCF_II_FLAG1": "STRING",
        "UCF_II_FLAG2": "STRING",
        "UCF_II_FLAG3": "STRING",
        "UCF_II_FLAG4": "STRING",
        "UCF_II_FLAG5": "STRING",
        "INSP_ITEM_DESC": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "RESULT_ID": "STRING",
        "UCF_II_VCH255_1": "STRING",
        "UCF_II_VCH255_2": "STRING",
        "SLIDE_ID": "STRING",
        "UCF_II_VCH255_3": "STRING",
        "UCF_II_VCH4000_1": "STRING",
        "LOWER_LIMIT": "STRING",
        "UCF_II_VCH4000_2": "STRING",
        "UPPER_LIMIT": "STRING",
        "INSP_ITEM_NAME_ID": "STRING",
        "IS_ALTERNATE_ASSIGNED": "STRING",
        "MASTER_INSP_ITEM_NAME": "STRING",
        "DAT_COL_TYPE": "STRING",
        "DRAWING_NO": "STRING",
        "DRAWING_CHG": "STRING",
        "SHEET_NO": "STRING",
        "DZONE": "STRING",
        "X_COORD": "STRING",
        "TEMPLATE_FILE_ID": "STRING",
        "SKILL_CATEGORY": "STRING",
        "Y_COORD": "STRING",
        "Z_COORD": "STRING",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "OWNER_CODE",
        "INSP_DEF_REV",
        "INSP_ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_ITEMS_FK19", ["TEMPLATE_FILE_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFSQA_INSP_ITEMS_FK17", ["INSP_ITEM_NAME_ID"], "SFSQA_INSP_ITEM_NAME_DEF", ["INSP_ITEM_NAME_ID"]),
        DbForeignKey("SFSQA_INSP_ITEMS_FK2", ["CERT"], "SFFND_CERT_DEF", ["CERT"]),
        DbForeignKey("SFSQA_INSP_ITEMS_FK20", ["SKILL_CATEGORY"], "SFFND_SKILL_CATEGORY_DEF", ["SKILL_CATEGORY"]),
        DbForeignKey("SFSQA_INSP_ITEMS_FK6", ["INSPECTION_METHOD"], "SFSQA_INSP_METHOD_DEF", ["INSPECTION_METHOD"]),
        DbForeignKey("SFSQA_INSP_ITEMS_FK9", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV","MASTER_INSP_ITEM_ID"], "SFSQA_INSP_DEF_INSP_ITEMS", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV","INSP_ITEM_ID"]),
        DbForeignKey("SFSQA_INSP_ITEM_FK5", ["CLASS"], "SFSQA_INSP_ITEM_CLASS_DEF", ["CLASS"]),
        DbForeignKey("SFSQA_INSP_ITEM_ID_FK", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"], "SFSQA_INSP_DEFINITION_REV", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"]),
        DbForeignKey("SFSQA_INSP_ITEMS_FK1", ["SAMPLE_RULE_ID"], "SFSQA_SAMPLING_RULE_DESC", ["SAMPLE_RULE_ID"]),
        DbForeignKey("SFSQA_INSP_ITEMS_FK16", ["RESULT_ID"], "SFSQA_VALID_RESULT_TYPE_DEF", ["RESULT_ID"]),
        DbForeignKey("SFSQA_INSP_ITEMS_FK7", ["UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFSQA_INSP_ITEM_FK13", ["SLIDE_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFSQA_INSP_ITEMS_FK15", ["AQL"], "SFSQA_AQL_DEF", ["AQL"]),
    ]
    refs = [
        "SFSQA_INSP_DEF_DETAILS_FK3",
        "SFSQA_IDII_TOOLS_IDFK",
        "SFSQA_ITEM_OWNER_SUPPLES_FK1",
        "SFSQA_INSP_ITEMS_FK9",
        "SFSQA_INSP_DEF_II_ALT_XREF_FK2",
        "SFSQA_INSP_DEF_II_ALT_XREF_FK1",
    ]
    def __init__(self, column_value_map):
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.REFERENCE_NO = parse_value(self.schema, column_value_map, "REFERENCE_NO")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.CLASS = parse_value(self.schema, column_value_map, "CLASS")
        self.INSPECTION_METHOD = parse_value(self.schema, column_value_map, "INSPECTION_METHOD")
        self.SAMPLE_RULE_ID = parse_value(self.schema, column_value_map, "SAMPLE_RULE_ID")
        self.FREQUENCY = parse_value(self.schema, column_value_map, "FREQUENCY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.FLIGHT_SAFETY_FLAG = parse_value(self.schema, column_value_map, "FLIGHT_SAFETY_FLAG")
        self.VALIDATE_RESULT_FLAG = parse_value(self.schema, column_value_map, "VALIDATE_RESULT_FLAG")
        self.FAI_INSPECTION_FLAG = parse_value(self.schema, column_value_map, "FAI_INSPECTION_FLAG")
        self.CDC_REQUIRED_FLAG = parse_value(self.schema, column_value_map, "CDC_REQUIRED_FLAG")
        self.IC_FLAG = parse_value(self.schema, column_value_map, "IC_FLAG")
        self.SUBCOMPONENT_IC_FLAG = parse_value(self.schema, column_value_map, "SUBCOMPONENT_IC_FLAG")
        self.DEFAULT_EXE_ORDER = parse_value(self.schema, column_value_map, "DEFAULT_EXE_ORDER")
        self.B4_FINAL_ASSEMBLY_FLAG = parse_value(self.schema, column_value_map, "B4_FINAL_ASSEMBLY_FLAG")
        self.CURRENT_OBS_COUNT = parse_value(self.schema, column_value_map, "CURRENT_OBS_COUNT")
        self.MASTER_SUB_FLAG = parse_value(self.schema, column_value_map, "MASTER_SUB_FLAG")
        self.AQL = parse_value(self.schema, column_value_map, "AQL")
        self.TARGET_VALUE = parse_value(self.schema, column_value_map, "TARGET_VALUE")
        self.OBS_DATE = parse_value(self.schema, column_value_map, "OBS_DATE")
        self.OBSOLETE_COUNT = parse_value(self.schema, column_value_map, "OBSOLETE_COUNT")
        self.INSP_ITEM_GROUPING = parse_value(self.schema, column_value_map, "INSP_ITEM_GROUPING")
        self.MASTER_INSP_ITEM_ID = parse_value(self.schema, column_value_map, "MASTER_INSP_ITEM_ID")
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        self.UCF_II_VCH1 = parse_value(self.schema, column_value_map, "UCF_II_VCH1")
        self.UCF_II_VCH2 = parse_value(self.schema, column_value_map, "UCF_II_VCH2")
        self.UCF_II_VCH3 = parse_value(self.schema, column_value_map, "UCF_II_VCH3")
        self.UCF_II_VCH4 = parse_value(self.schema, column_value_map, "UCF_II_VCH4")
        self.UCF_II_VCH5 = parse_value(self.schema, column_value_map, "UCF_II_VCH5")
        self.UCF_II_VCH6 = parse_value(self.schema, column_value_map, "UCF_II_VCH6")
        self.UCF_II_VCH7 = parse_value(self.schema, column_value_map, "UCF_II_VCH7")
        self.UCF_II_VCH8 = parse_value(self.schema, column_value_map, "UCF_II_VCH8")
        self.UCF_II_VCH9 = parse_value(self.schema, column_value_map, "UCF_II_VCH9")
        self.UCF_II_VCH10 = parse_value(self.schema, column_value_map, "UCF_II_VCH10")
        self.UCF_II_VCH11 = parse_value(self.schema, column_value_map, "UCF_II_VCH11")
        self.UCF_II_VCH12 = parse_value(self.schema, column_value_map, "UCF_II_VCH12")
        self.UCF_II_VCH13 = parse_value(self.schema, column_value_map, "UCF_II_VCH13")
        self.UCF_II_VCH14 = parse_value(self.schema, column_value_map, "UCF_II_VCH14")
        self.UCF_II_VCH15 = parse_value(self.schema, column_value_map, "UCF_II_VCH15")
        self.UCF_II_NUM1 = parse_value(self.schema, column_value_map, "UCF_II_NUM1")
        self.UCF_II_NUM2 = parse_value(self.schema, column_value_map, "UCF_II_NUM2")
        self.UCF_II_NUM3 = parse_value(self.schema, column_value_map, "UCF_II_NUM3")
        self.UCF_II_NUM4 = parse_value(self.schema, column_value_map, "UCF_II_NUM4")
        self.UCF_II_NUM5 = parse_value(self.schema, column_value_map, "UCF_II_NUM5")
        self.UCF_II_DATE1 = parse_value(self.schema, column_value_map, "UCF_II_DATE1")
        self.UCF_II_DATE2 = parse_value(self.schema, column_value_map, "UCF_II_DATE2")
        self.UCF_II_DATE3 = parse_value(self.schema, column_value_map, "UCF_II_DATE3")
        self.UCF_II_DATE4 = parse_value(self.schema, column_value_map, "UCF_II_DATE4")
        self.UCF_II_DATE5 = parse_value(self.schema, column_value_map, "UCF_II_DATE5")
        self.UCF_II_FLAG1 = parse_value(self.schema, column_value_map, "UCF_II_FLAG1")
        self.UCF_II_FLAG2 = parse_value(self.schema, column_value_map, "UCF_II_FLAG2")
        self.UCF_II_FLAG3 = parse_value(self.schema, column_value_map, "UCF_II_FLAG3")
        self.UCF_II_FLAG4 = parse_value(self.schema, column_value_map, "UCF_II_FLAG4")
        self.UCF_II_FLAG5 = parse_value(self.schema, column_value_map, "UCF_II_FLAG5")
        self.INSP_ITEM_DESC = parse_value(self.schema, column_value_map, "INSP_ITEM_DESC")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.RESULT_ID = parse_value(self.schema, column_value_map, "RESULT_ID")
        self.UCF_II_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_II_VCH255_1")
        self.UCF_II_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_II_VCH255_2")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.UCF_II_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_II_VCH255_3")
        self.UCF_II_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_II_VCH4000_1")
        self.LOWER_LIMIT = parse_value(self.schema, column_value_map, "LOWER_LIMIT")
        self.UCF_II_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_II_VCH4000_2")
        self.UPPER_LIMIT = parse_value(self.schema, column_value_map, "UPPER_LIMIT")
        self.INSP_ITEM_NAME_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_NAME_ID")
        self.IS_ALTERNATE_ASSIGNED = parse_value(self.schema, column_value_map, "IS_ALTERNATE_ASSIGNED")
        self.MASTER_INSP_ITEM_NAME = parse_value(self.schema, column_value_map, "MASTER_INSP_ITEM_NAME")
        self.DAT_COL_TYPE = parse_value(self.schema, column_value_map, "DAT_COL_TYPE")
        self.DRAWING_NO = parse_value(self.schema, column_value_map, "DRAWING_NO")
        "Inspection Item Attribute: Drawing No."
        self.DRAWING_CHG = parse_value(self.schema, column_value_map, "DRAWING_CHG")
        "Inspection Item Attribute: Drawing Revision."
        self.SHEET_NO = parse_value(self.schema, column_value_map, "SHEET_NO")
        "Inspection Item Attribute: Sheet No."
        self.DZONE = parse_value(self.schema, column_value_map, "DZONE")
        "Inspection Item Attribute: Zone."
        self.X_COORD = parse_value(self.schema, column_value_map, "X_COORD")
        "Inspection Item Attribute: X Co-ordinate."
        self.TEMPLATE_FILE_ID = parse_value(self.schema, column_value_map, "TEMPLATE_FILE_ID")
        "The unique identifier of the object being referenced."
        self.SKILL_CATEGORY = parse_value(self.schema, column_value_map, "SKILL_CATEGORY")
        "A category to which the required skill belongs."
        self.Y_COORD = parse_value(self.schema, column_value_map, "Y_COORD")
        "Inspection Item Attribute: Y Co-ordinate."
        self.Z_COORD = parse_value(self.schema, column_value_map, "Z_COORD")
        "Inspection Item Attribute: Z Co-ordinate."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.SFSQA_INSP_DEF_DETAILS_FK3 = []
        self.SFSQA_IDII_TOOLS_IDFK = []
        self.SFSQA_ITEM_OWNER_SUPPLES_FK1 = []
        self.SFSQA_INSP_ITEMS_FK9 = []
        self.SFSQA_INSP_DEF_II_ALT_XREF_FK2 = []
        self.SFSQA_INSP_DEF_II_ALT_XREF_FK1 = []

class SFCORE_PRINTER_SERVER_XREF:
    schema = {
        "SERVER_ID": "STRING",
        "PRINTER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "SERVER_ID",
        "PRINTER_ID",
    ]
    foreign_keys = [
        DbForeignKey("FWPSXREF_FWPSD_FK", ["SERVER_ID"], "SFCORE_PRINT_SERVER_DEF", ["SERVER_ID"]),
        DbForeignKey("FWPSXREF_FWPDEF_FK", ["PRINTER_ID"], "SFCORE_PRINTER_DEF", ["PRINTER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SERVER_ID = parse_value(self.schema, column_value_map, "SERVER_ID")
        "System generated unique identifier for a given print server."
        self.PRINTER_ID = parse_value(self.schema, column_value_map, "PRINTER_ID")
        "Unique system generated identifier for a given printer."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFPL_PLAN_TEXT_SUBVAR:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_UPDT_NO",
        "TEXT_TYPE",
        "TAG",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLAN_TEXT_SUBVAR_FK1", ["PLAN_ID","PLAN_UPDT_NO","TEXT_TYPE"], "SFPL_PLAN_TEXT", ["PLAN_ID","PLAN_UPDT_NO","TEXT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFPL_PLAN_LINK:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "LINK_ID": "STRING",
        "LINK_TYPE": "STRING",
        "PRED_NODE_ROW": "NUMBER",
        "PRED_NODE_COLUMN": "NUMBER",
        "SUCC_NODE_ROW": "NUMBER",
        "SUCC_NODE_COLUMN": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PRED_NODE_ID": "STRING",
        "SUCC_NODE_ID": "STRING",
        "LINK_TITLE": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_UPDT_NO",
        "LINK_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLAN_LINK_PLAN_DESC_FK", ["PLAN_ID","PLAN_UPDT_NO"], "SFPL_PLAN_DESC", ["PLAN_ID","PLAN_UPDT_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.LINK_ID = parse_value(self.schema, column_value_map, "LINK_ID")
        "The unique system-generated identifier of a link in an Operation Flow Diagram."
        self.LINK_TYPE = parse_value(self.schema, column_value_map, "LINK_TYPE")
        "Type or classification of link in the associated Operation Flow diagram."
        self.PRED_NODE_ROW = parse_value(self.schema, column_value_map, "PRED_NODE_ROW")
        "The number of the grid row containing the predecessor (preceding) node. In combination with PRED_NODE_COLUMN, shows starting position of link."
        self.PRED_NODE_COLUMN = parse_value(self.schema, column_value_map, "PRED_NODE_COLUMN")
        "The number of the grid column containing the predecessor (preceding) node. In combination with PRED_NODE_ROW, shows starting position of link."
        self.SUCC_NODE_ROW = parse_value(self.schema, column_value_map, "SUCC_NODE_ROW")
        "The number of the grid row containing the successor (following) node. In combination with SUCC_NODE_COLUMN, shows ending position of link."
        self.SUCC_NODE_COLUMN = parse_value(self.schema, column_value_map, "SUCC_NODE_COLUMN")
        "The number of the grid column containing the successor (following) node. In combination with SUCC_NODE_ROW, shows ending position of link."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PRED_NODE_ID = parse_value(self.schema, column_value_map, "PRED_NODE_ID")
        "The unique system-generated identifier of the predecessor node in the Operation Flow Diagram."
        self.SUCC_NODE_ID = parse_value(self.schema, column_value_map, "SUCC_NODE_ID")
        "The unique system-generated identifier of the successor node in the Operation Flow Diagram."
        self.LINK_TITLE = parse_value(self.schema, column_value_map, "LINK_TITLE")
        "A name/short description of the link."

class SFWID_OPER_PROCESS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "PROCESS_TYPE": "STRING",
        "OCCUR_COUNT": "NUMBER",
        "OPER_PROC_DNF": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "PROCESS_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_PROCESS_FK2", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_PROCESS_FK1", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        self.OCCUR_COUNT = parse_value(self.schema, column_value_map, "OCCUR_COUNT")
        self.OPER_PROC_DNF = parse_value(self.schema, column_value_map, "OPER_PROC_DNF")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")

class SFWID_OPER_DAT_COL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "DAT_COL_ID": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UPPER_LIMIT": "STRING",
        "LOWER_LIMIT": "STRING",
        "TARGET_VALUE": "STRING",
        "DAT_COL_CERT": "STRING",
        "DAT_COL_TITLE": "STRING",
        "DAT_COL_UOM": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "HIST_ALT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "REF_ID": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "VARIABLE_NAME": "STRING",
        "NUM_DECIMAL_DIGITS": "NUMBER",
        "CALC_DC_FLAG": "STRING",
        "SUSPECT_FLAG": "STRING",
        "UCF_OPER_DC_VCH1": "STRING",
        "UCF_OPER_DC_VCH2": "STRING",
        "UCF_OPER_DC_VCH3": "STRING",
        "UCF_OPER_DC_VCH4": "STRING",
        "UCF_OPER_DC_VCH5": "STRING",
        "UCF_OPER_DC_VCH6": "STRING",
        "UCF_OPER_DC_VCH7": "STRING",
        "UCF_OPER_DC_VCH8": "STRING",
        "UCF_OPER_DC_VCH9": "STRING",
        "UCF_OPER_DC_VCH10": "STRING",
        "UCF_OPER_DC_VCH11": "STRING",
        "UCF_OPER_DC_VCH12": "STRING",
        "UCF_OPER_DC_VCH13": "STRING",
        "UCF_OPER_DC_VCH14": "STRING",
        "UCF_OPER_DC_VCH15": "STRING",
        "UCF_OPER_DC_NUM1": "NUMBER",
        "UCF_OPER_DC_NUM2": "NUMBER",
        "UCF_OPER_DC_NUM3": "NUMBER",
        "UCF_OPER_DC_NUM4": "NUMBER",
        "UCF_OPER_DC_NUM5": "NUMBER",
        "UCF_OPER_DC_DATE1": "STRING",
        "UCF_OPER_DC_DATE2": "STRING",
        "UCF_OPER_DC_DATE3": "STRING",
        "UCF_OPER_DC_DATE4": "STRING",
        "UCF_OPER_DC_DATE5": "STRING",
        "UCF_OPER_DC_FLAG1": "STRING",
        "UCF_OPER_DC_FLAG2": "STRING",
        "UCF_OPER_DC_FLAG3": "STRING",
        "UCF_OPER_DC_FLAG4": "STRING",
        "UCF_OPER_DC_FLAG5": "STRING",
        "UCF_OPER_DC_VCH255_1": "STRING",
        "UCF_OPER_DC_VCH255_2": "STRING",
        "UCF_OPER_DC_VCH255_3": "STRING",
        "UCF_OPER_DC_VCH4000_1": "STRING",
        "UCF_OPER_DC_VCH4000_2": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "VISIBILITY": "STRING",
        "AUDIT_FLAG": "STRING",
        "STD_DATCOL_ID": "STRING",
        "RESULT_ID": "STRING",
        "TEMPLATE_FILE_ID": "STRING",
        "TEMPLATE_UPDT_COUNT": "NUMBER",
        "EXTERNAL_FLAG": "STRING",
        "MACHINE_ID": "STRING",
        "TEMPLATE_NO": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        "Unique, system-generated identifier of the data collection."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UPPER_LIMIT = parse_value(self.schema, column_value_map, "UPPER_LIMIT")
        "The highest allowable data value for the given data collection."
        self.LOWER_LIMIT = parse_value(self.schema, column_value_map, "LOWER_LIMIT")
        "The lowest allowable data value for the given data collection."
        self.TARGET_VALUE = parse_value(self.schema, column_value_map, "TARGET_VALUE")
        "The optimal/expected value for the given data collection."
        self.DAT_COL_CERT = parse_value(self.schema, column_value_map, "DAT_COL_CERT")
        "The required certification for the given data collection."
        self.DAT_COL_TITLE = parse_value(self.schema, column_value_map, "DAT_COL_TITLE")
        "Title/name of the data collection point."
        self.DAT_COL_UOM = parse_value(self.schema, column_value_map, "DAT_COL_UOM")
        "The Unit of Measure associated with the data collection value."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Block type/Block id where object exists within the text. For a full list of BLOCK_IDs see SFFND_HTREF_BLOCKID_DEF for full list. Not currently implemented."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.VARIABLE_NAME = parse_value(self.schema, column_value_map, "VARIABLE_NAME")
        self.NUM_DECIMAL_DIGITS = parse_value(self.schema, column_value_map, "NUM_DECIMAL_DIGITS")
        self.CALC_DC_FLAG = parse_value(self.schema, column_value_map, "CALC_DC_FLAG")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.UCF_OPER_DC_VCH1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH1")
        self.UCF_OPER_DC_VCH2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH2")
        self.UCF_OPER_DC_VCH3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH3")
        self.UCF_OPER_DC_VCH4 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH4")
        self.UCF_OPER_DC_VCH5 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH5")
        self.UCF_OPER_DC_VCH6 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH6")
        self.UCF_OPER_DC_VCH7 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH7")
        self.UCF_OPER_DC_VCH8 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH8")
        self.UCF_OPER_DC_VCH9 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH9")
        self.UCF_OPER_DC_VCH10 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH10")
        self.UCF_OPER_DC_VCH11 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH11")
        self.UCF_OPER_DC_VCH12 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH12")
        self.UCF_OPER_DC_VCH13 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH13")
        self.UCF_OPER_DC_VCH14 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH14")
        self.UCF_OPER_DC_VCH15 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH15")
        self.UCF_OPER_DC_NUM1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM1")
        self.UCF_OPER_DC_NUM2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM2")
        self.UCF_OPER_DC_NUM3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM3")
        self.UCF_OPER_DC_NUM4 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM4")
        self.UCF_OPER_DC_NUM5 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_NUM5")
        self.UCF_OPER_DC_DATE1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE1")
        self.UCF_OPER_DC_DATE2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE2")
        self.UCF_OPER_DC_DATE3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE3")
        self.UCF_OPER_DC_DATE4 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE4")
        self.UCF_OPER_DC_DATE5 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_DATE5")
        self.UCF_OPER_DC_FLAG1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG1")
        self.UCF_OPER_DC_FLAG2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG2")
        self.UCF_OPER_DC_FLAG3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG3")
        self.UCF_OPER_DC_FLAG4 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG4")
        self.UCF_OPER_DC_FLAG5 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_FLAG5")
        self.UCF_OPER_DC_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH255_1")
        self.UCF_OPER_DC_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH255_2")
        self.UCF_OPER_DC_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH255_3")
        self.UCF_OPER_DC_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH4000_1")
        self.UCF_OPER_DC_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_OPER_DC_VCH4000_2")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.VISIBILITY = parse_value(self.schema, column_value_map, "VISIBILITY")
        self.AUDIT_FLAG = parse_value(self.schema, column_value_map, "AUDIT_FLAG")
        "If Y, the user audit process must be executed to see if an over-inspection is required or not."
        self.STD_DATCOL_ID = parse_value(self.schema, column_value_map, "STD_DATCOL_ID")
        self.RESULT_ID = parse_value(self.schema, column_value_map, "RESULT_ID")
        "The unique identifier of the Validation Result Type for given data collection."
        self.TEMPLATE_FILE_ID = parse_value(self.schema, column_value_map, "TEMPLATE_FILE_ID")
        "The unique identifier of the object being referenced."
        self.TEMPLATE_UPDT_COUNT = parse_value(self.schema, column_value_map, "TEMPLATE_UPDT_COUNT")
        "This counter will be used to track no of updates in File for different units and it will be used to save as new files on each update with different units."
        self.EXTERNAL_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_FLAG")
        self.MACHINE_ID = parse_value(self.schema, column_value_map, "MACHINE_ID")
        self.TEMPLATE_NO = parse_value(self.schema, column_value_map, "TEMPLATE_NO")

class SFQA_CA_TEXT:
    schema = {
        "CA_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
        "TEXT_TYPE": "STRING",
        "BLOCK_ID": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_TEXT_CACDESC_FK", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
    ]
    refs = [
        "SFFND_HTREF_CA_TEXT_FK3",
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., ISSUE_DISC."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The block Id where Text is authored."
        self.SFFND_HTREF_CA_TEXT_FK3 = []

class SFFND_COMM_QUEUES:
    schema = {
        "FROM_QUEUE_TYPE": "STRING",
        "TO_QUEUE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "FROM_QUEUE_TYPE",
        "TO_QUEUE_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_COMM_QUEUES_TO_Q_FK", ["TO_QUEUE_TYPE"], "SFFND_QUEUE_TYPE_DEF", ["QUEUE_TYPE"]),
        DbForeignKey("SFFND_COMM_QUEUES_FROM_Q_FK", ["FROM_QUEUE_TYPE"], "SFFND_QUEUE_TYPE_DEF", ["QUEUE_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.FROM_QUEUE_TYPE = parse_value(self.schema, column_value_map, "FROM_QUEUE_TYPE")
        "Type of task queue the triggering task is associated with."
        self.TO_QUEUE_TYPE = parse_value(self.schema, column_value_map, "TO_QUEUE_TYPE")
        "Type of task queue the triggered task is associated with."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFSQA_PLAN_TYPE_DEF:
    schema = {
        "PLAN_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "DEFAULT_DISC_DOC_TYPE": "STRING",
        "DEFAULT_DISC_TYPE": "STRING",
        "TIME_STAMP": "DATE",
        "DEFAULT_DISC_WORK_FLOW": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PLAN_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_PLAN_TYPE_DEF_FK1", ["DEFAULT_DISC_DOC_TYPE","DEFAULT_DISC_TYPE","DEFAULT_DISC_WORK_FLOW"], "SFFND_DOC_TYPE_DEF", ["DOC_TYPE","DOC_SUB_TYPE","WORK_FLOW"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_TYPE = parse_value(self.schema, column_value_map, "PLAN_TYPE")
        "Type or classification of the associated process plan."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.DEFAULT_DISC_DOC_TYPE = parse_value(self.schema, column_value_map, "DEFAULT_DISC_DOC_TYPE")
        "Type or classification of discrepancy document."
        self.DEFAULT_DISC_TYPE = parse_value(self.schema, column_value_map, "DEFAULT_DISC_TYPE")
        "Type or classification of discrepancy, e.g., SCRAP, REWORK, REPAIR, AS IS, RETURN."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.DEFAULT_DISC_WORK_FLOW = parse_value(self.schema, column_value_map, "DEFAULT_DISC_WORK_FLOW")
        "Default Work Flow associated with discrepancy."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_VERSIONS:
    schema = {
        "GENERATION": "STRING",
        "MAJOR": "STRING",
        "MINOR": "STRING",
        "MAINTENANCE": "STRING",
        "BUILD_NUMBER": "STRING",
        "BUILD_QUALIFIER": "STRING",
        "TIME_STAMP": "DATE",
        "PRODUCT": "STRING",
        "UPDT_USERID": "STRING",
        "RECORD_ID": "NUMBER",
        "STATUS_FLAG": "STRING",
        "COMMENTS": "STRING",
        "CHECKSUM": "STRING",
    }
    primary_key_columns = [
        "GENERATION",
        "MAJOR",
        "MINOR",
        "MAINTENANCE",
        "BUILD_NUMBER",
        "BUILD_QUALIFIER",
        "TIME_STAMP",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.GENERATION = parse_value(self.schema, column_value_map, "GENERATION")
        "Part 1 of the Solumina product version number representing the version generation. Encrypted."
        self.MAJOR = parse_value(self.schema, column_value_map, "MAJOR")
        "Part 2 of the Solumina product version number representing a major release within the version. Encrypted."
        self.MINOR = parse_value(self.schema, column_value_map, "MINOR")
        "Part 3 of the Solumina product version number representing a minor release within the version. Encrypted."
        self.MAINTENANCE = parse_value(self.schema, column_value_map, "MAINTENANCE")
        "Part 4 of the Solumina product version number representing the bug fix release within the version. Encrypted."
        self.BUILD_NUMBER = parse_value(self.schema, column_value_map, "BUILD_NUMBER")
        "Build number associated with the currently loaded product version. Encrypted."
        self.BUILD_QUALIFIER = parse_value(self.schema, column_value_map, "BUILD_QUALIFIER")
        "Qualifier indicating the stage of the build, e.g., alpha, beta, internal. Encrypted."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.PRODUCT = parse_value(self.schema, column_value_map, "PRODUCT")
        "The functional subset of the total schema (e.g., Framework, Foundation, or site) to which the version number pertains. Encrypted. Note: This attribute is not an executable file as identified in the SFCORE_PRODUCTS table."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.RECORD_ID = parse_value(self.schema, column_value_map, "RECORD_ID")
        "An alternate key instead of a composite key for this record. Not implemented at this time."
        self.STATUS_FLAG = parse_value(self.schema, column_value_map, "STATUS_FLAG")
        "Indicates whether the loading of the current version was successful (Y = Yes, space = No)."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Comments about loading of the current product version."
        self.CHECKSUM = parse_value(self.schema, column_value_map, "CHECKSUM")
        "Checksum of the currently loaded product version. Encrypted."

class SFWID_PARTS_LOTS_SERIALS:
    schema = {
        "PART_NO": "STRING",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
        "ORDER_ID": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "ITEM_ID": "STRING",
        "SERIAL_STATUS": "STRING",
        "SERIAL_HOLD_STATUS": "STRING",
    }
    primary_key_columns = [
        "PART_NO",
        "LOT_NO",
        "SERIAL_NO",
        "ORDER_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the associated lot number."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of the item/part to be made upon the work order."
        self.SERIAL_STATUS = parse_value(self.schema, column_value_map, "SERIAL_STATUS")
        "Status of the given serial number, e.g., COMPLETE, SCRAP"
        self.SERIAL_HOLD_STATUS = parse_value(self.schema, column_value_map, "SERIAL_HOLD_STATUS")
        "Status of the hold on the given serial number."

class SFWID_OPNREOREJ_SRLOPR_BUYOFFS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "BUYOFF_ID": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "LOT_ID",
        "SERIAL_ID",
        "BUYOFF_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the associated lot number."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.BUYOFF_ID = parse_value(self.schema, column_value_map, "BUYOFF_ID")
        "Unique, system-generated identifier of the buyoff."

class SFFND_PROJ_ACTIV_GROUP_XREF:
    schema = {
        "GROUP_ID": "STRING",
        "GROUP_REV": "NUMBER",
        "PROJECT": "STRING",
        "ACTIVITY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "GROUP_ID",
        "GROUP_REV",
        "PROJECT",
        "ACTIVITY",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_PRJACTGRP_PRJACT_FK", ["PROJECT","ACTIVITY"], "SFFND_PROJECT_ACTIVITY_XREF", ["PROJECT","ACTIVITY"]),
        DbForeignKey("SFFND_PRJACTGRP_GRPREV_FK", ["GROUP_ID","GROUP_REV"], "SFFND_GROUP_REV", ["GROUP_ID","GROUP_REV"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.GROUP_ID = parse_value(self.schema, column_value_map, "GROUP_ID")
        "Unique, system generated identifier of a group."
        self.GROUP_REV = parse_value(self.schema, column_value_map, "GROUP_REV")
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of a project."
        self.ACTIVITY = parse_value(self.schema, column_value_map, "ACTIVITY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_OPER_NOTES_TEXT:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
        "NOTE_ID": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "TEXT_TYPE",
        "NOTE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_NOTES_TEXT_FK1", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
        "SFFND_HTREF_WID_OP_NOTE_TXT_F1",
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to core objects."
        self.NOTE_ID = parse_value(self.schema, column_value_map, "NOTE_ID")
        self.SFFND_HTREF_WID_OP_NOTE_TXT_F1 = []

class SFWID_OPER_EMBEDDED_CONTROLS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG_TYPE": "STRING",
        "SEQ_NO": "NUMBER",
        "REF_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TAG": "STRING",
        "BUYOFF_RANKER": "NUMBER",
        "EXEC_RANKER": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "TEXT_TYPE",
        "TAG_TYPE",
        "SEQ_NO",
        "REF_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        self.TAG_TYPE = parse_value(self.schema, column_value_map, "TAG_TYPE")
        self.SEQ_NO = parse_value(self.schema, column_value_map, "SEQ_NO")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.BUYOFF_RANKER = parse_value(self.schema, column_value_map, "BUYOFF_RANKER")
        self.EXEC_RANKER = parse_value(self.schema, column_value_map, "EXEC_RANKER")

class SFWID_NQ_ACTIVE_OPERATIONS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."

class SFQA_CA_DESC_MM_OBJ_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH1": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH2": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH3": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH4": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH5": "STRING",
        "UCF_CA_DESC_MM_OBJ_NUM1": "NUMBER",
        "UCF_CA_DESC_MM_OBJ_NUM2": "NUMBER",
        "UCF_CA_DESC_MM_OBJ_NUM3": "NUMBER",
        "UCF_CA_DESC_MM_OBJ_DATE1": "STRING",
        "UCF_CA_DESC_MM_OBJ_DATE2": "STRING",
        "UCF_CA_DESC_MM_OBJ_FLAG1": "STRING",
        "UCF_CA_DESC_MM_OBJ_FLAG2": "STRING",
        "UCF_CA_DESC_MM_OBJ_FLAG3": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH255_1": "STRING",
        "UCF_CA_DESC_MM_OBJ_VCH255_2": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "RTF_LINK_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_CA_DESC_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_DESC_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_DESC_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_DESC_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_DESC_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_DESC_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CA_DESC_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_CA_DESC_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CA_DESC_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CA_DESC_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CA_DESC_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_DESC_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_DESC_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_DESC_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_DESC_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CA_DESC_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."

class SFWID_SER_OPER_MTRL_DAT_COL:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "ASGND_MATERIAL_ID": "STRING",
        "MATERIAL_DAT_COL_ID": "STRING",
        "ASGND_MATERIAL_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "SERIAL_NO": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "LOT_NO": "STRING",
        "QUANTITY": "NUMBER",
        "MATERIAL_SERIAL_ID": "STRING",
        "MATERIAL_LOT_ID": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "LOT_ID",
        "SERIAL_ID",
        "ASGND_MATERIAL_ID",
        "MATERIAL_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_SER_OPER_MTRL_DAT_COL_FK1", ["ORDER_ID","OPER_KEY","STEP_KEY","LOT_ID","SERIAL_ID","ASGND_MATERIAL_ID"], "SFWID_SERIAL_OPER_MATERIAL", ["ORDER_ID","OPER_KEY","STEP_KEY","LOT_ID","SERIAL_ID","ASGND_MATERIAL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        self.ASGND_MATERIAL_ID = parse_value(self.schema, column_value_map, "ASGND_MATERIAL_ID")
        self.MATERIAL_DAT_COL_ID = parse_value(self.schema, column_value_map, "MATERIAL_DAT_COL_ID")
        self.ASGND_MATERIAL_NAME = parse_value(self.schema, column_value_map, "ASGND_MATERIAL_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        self.QUANTITY = parse_value(self.schema, column_value_map, "QUANTITY")
        self.MATERIAL_SERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_SERIAL_ID")
        self.MATERIAL_LOT_ID = parse_value(self.schema, column_value_map, "MATERIAL_LOT_ID")

class SFFND_MODES_DEF:
    schema = {
        "DOC_TYPE": "STRING",
        "EDIT_MODE": "STRING",
        "MANDATORY_FLAG": "STRING",
        "READONLY_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "DOC_TYPE",
        "EDIT_MODE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_EDITMODE_STATUS_FK1",
    ]
    def __init__(self, column_value_map):
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        "Name/unique identifier of a Solumina Document Type."
        self.EDIT_MODE = parse_value(self.schema, column_value_map, "EDIT_MODE")
        "Name/unique identifier of a Solumina edit mode, EDITMODES.EDIT_PL, EDITMODES.EDIT_IE, or EDITMODES.EDIT_QA for PLAN/WO. MANDATORY, READ_ONLY, OPTIONAL for DI and CA."
        self.MANDATORY_FLAG = parse_value(self.schema, column_value_map, "MANDATORY_FLAG")
        "A flag (Y/N) that indicates whether the block/tab is mandatory or not for this EDIT_MODE."
        self.READONLY_FLAG = parse_value(self.schema, column_value_map, "READONLY_FLAG")
        "A flag (Y/N) that indicates whether the block/tab is read-only or not for this EDIT_MODE."
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        "A flag (Y/N) that indicates whether the block/tab should be displayed or not for this EDIT_MODE."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFFND_EDITMODE_STATUS_FK1 = []

class SFQA_DISC_COMPONENT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "ITEM_ID": "STRING",
        "REF_DES": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "FIND_NO": "STRING",
        "UOM": "STRING",
        "REF_SUB_DES": "STRING",
        "DEFECT_TYPE": "STRING",
        "AFFECTED_QTY": "NUMBER",
        "DEFECT_COUNT": "NUMBER",
        "COMP_DISP_TYPE": "STRING",
        "NOTES": "STRING",
        "CFLAGS": "NUMBER",
        "LOT_FLAG": "STRING",
        "SERIAL_FLAG": "STRING",
        "UCF_DISC_COMP_VCH1": "STRING",
        "UCF_DISC_COMP_VCH2": "STRING",
        "UCF_DISC_COMP_VCH3": "STRING",
        "UCF_DISC_COMP_VCH4": "STRING",
        "UCF_DISC_COMP_NUM1": "NUMBER",
        "UCF_DISC_COMP_DATE1": "STRING",
        "UCF_DISC_COMP_FLAG1": "STRING",
        "UCF_DISC_COMP_VCH5": "STRING",
        "UCF_DISC_COMP_VCH6": "STRING",
        "UCF_DISC_COMP_VCH7": "STRING",
        "UCF_DISC_COMP_VCH8": "STRING",
        "UCF_DISC_COMP_VCH9": "STRING",
        "UCF_DISC_COMP_VCH10": "STRING",
        "UCF_DISC_COMP_VCH11": "STRING",
        "UCF_DISC_COMP_VCH12": "STRING",
        "UCF_DISC_COMP_VCH13": "STRING",
        "UCF_DISC_COMP_VCH14": "STRING",
        "UCF_DISC_COMP_VCH15": "STRING",
        "UCF_DISC_COMP_NUM2": "NUMBER",
        "UCF_DISC_COMP_NUM3": "NUMBER",
        "UCF_DISC_COMP_NUM4": "NUMBER",
        "UCF_DISC_COMP_NUM5": "NUMBER",
        "UCF_DISC_COMP_DATE2": "STRING",
        "UCF_DISC_COMP_DATE3": "STRING",
        "UCF_DISC_COMP_DATE4": "STRING",
        "UCF_DISC_COMP_DATE5": "STRING",
        "UCF_DISC_COMP_FLAG2": "STRING",
        "UCF_DISC_COMP_FLAG3": "STRING",
        "UCF_DISC_COMP_FLAG4": "STRING",
        "UCF_DISC_COMP_FLAG5": "STRING",
        "UCF_DISC_COMP_VCH255_1": "STRING",
        "UCF_DISC_COMP_VCH255_2": "STRING",
        "UCF_DISC_COMP_VCH255_3": "STRING",
        "UCF_DISC_COMP_VCH4000_1": "STRING",
        "UCF_DISC_COMP_VCH4000_2": "STRING",
        "PART_DAT_COL_ID": "STRING",
        "SPOOL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "OPT_DC1_FLAG": "STRING",
        "OPT_DC2_FLAG": "STRING",
        "OPT_DC3_FLAG": "STRING",
        "OPT_DC4_FLAG": "STRING",
        "SUPPLIER_CODE": "STRING",
        "PO_NUMBER": "STRING",
        "PO_RELEASE": "STRING",
        "PO_LINE_ITEM": "STRING",
        "REPLACEMENT_PART_NO": "STRING",
        "REPLACEMENT_PART_CHG": "STRING",
        "MAIN_COMPONENT_FLAG": "STRING",
        "LIEN_DISC_STOP_ORDERS": "STRING",
        "LIEN_DISC_INH_STOP_ORDERS": "STRING",
        "FINAL_COMPONENT_DISP_FLAG": "STRING",
        "AS_WORKED_BOM": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Unit of Measure for the component/part."
        self.REF_SUB_DES = parse_value(self.schema, column_value_map, "REF_SUB_DES")
        "The specific sector of the associated reference designator."
        self.DEFECT_TYPE = parse_value(self.schema, column_value_map, "DEFECT_TYPE")
        "Type or classification of defect."
        self.AFFECTED_QTY = parse_value(self.schema, column_value_map, "AFFECTED_QTY")
        "Number of components/parts that have been inspected and are found to be affected by the associated discrepancy."
        self.DEFECT_COUNT = parse_value(self.schema, column_value_map, "DEFECT_COUNT")
        "Number of defects associated with a given component/part."
        self.COMP_DISP_TYPE = parse_value(self.schema, column_value_map, "COMP_DISP_TYPE")
        "Type or classification of disposition for a given component/part."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about the component/part."
        self.CFLAGS = parse_value(self.schema, column_value_map, "CFLAGS")
        "Number used to represent up to 50 bitmapped flag values. Currently only bit position 1 (one) is in use as the \"IN BOM\" flag. \"IN BOM\" flag indicates whether this particular discrepancy deals with a part in the BOM (1 = Yes, 0 = No)."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating whether the component/part is or should be tracked by lot number."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating whether the component/part is or should be tracked by serial number."
        self.UCF_DISC_COMP_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_COMP_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_DISC_COMP_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_DISC_COMP_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_DISC_COMP_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH5")
        self.UCF_DISC_COMP_VCH6 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH6")
        self.UCF_DISC_COMP_VCH7 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH7")
        self.UCF_DISC_COMP_VCH8 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH8")
        self.UCF_DISC_COMP_VCH9 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH9")
        self.UCF_DISC_COMP_VCH10 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH10")
        self.UCF_DISC_COMP_VCH11 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH11")
        self.UCF_DISC_COMP_VCH12 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH12")
        self.UCF_DISC_COMP_VCH13 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH13")
        self.UCF_DISC_COMP_VCH14 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH14")
        self.UCF_DISC_COMP_VCH15 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH15")
        self.UCF_DISC_COMP_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_NUM2")
        self.UCF_DISC_COMP_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_NUM3")
        self.UCF_DISC_COMP_NUM4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_NUM4")
        self.UCF_DISC_COMP_NUM5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_NUM5")
        self.UCF_DISC_COMP_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_DATE2")
        self.UCF_DISC_COMP_DATE3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_DATE3")
        self.UCF_DISC_COMP_DATE4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_DATE4")
        self.UCF_DISC_COMP_DATE5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_DATE5")
        self.UCF_DISC_COMP_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_FLAG2")
        self.UCF_DISC_COMP_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_FLAG3")
        self.UCF_DISC_COMP_FLAG4 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_FLAG4")
        self.UCF_DISC_COMP_FLAG5 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_FLAG5")
        self.UCF_DISC_COMP_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH255_1")
        self.UCF_DISC_COMP_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH255_2")
        self.UCF_DISC_COMP_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH255_3")
        self.UCF_DISC_COMP_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH4000_1")
        self.UCF_DISC_COMP_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_DISC_COMP_VCH4000_2")
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.SPOOL_FLAG = parse_value(self.schema, column_value_map, "SPOOL_FLAG")
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        self.OPT_DC1_FLAG = parse_value(self.schema, column_value_map, "OPT_DC1_FLAG")
        self.OPT_DC2_FLAG = parse_value(self.schema, column_value_map, "OPT_DC2_FLAG")
        self.OPT_DC3_FLAG = parse_value(self.schema, column_value_map, "OPT_DC3_FLAG")
        self.OPT_DC4_FLAG = parse_value(self.schema, column_value_map, "OPT_DC4_FLAG")
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.PO_NUMBER = parse_value(self.schema, column_value_map, "PO_NUMBER")
        self.PO_RELEASE = parse_value(self.schema, column_value_map, "PO_RELEASE")
        self.PO_LINE_ITEM = parse_value(self.schema, column_value_map, "PO_LINE_ITEM")
        "The line number that corresponds to the discrepancy component in an associated purchase order."
        self.REPLACEMENT_PART_NO = parse_value(self.schema, column_value_map, "REPLACEMENT_PART_NO")
        "Contains replacement part number."
        self.REPLACEMENT_PART_CHG = parse_value(self.schema, column_value_map, "REPLACEMENT_PART_CHG")
        "Contains replacement part revision."
        self.MAIN_COMPONENT_FLAG = parse_value(self.schema, column_value_map, "MAIN_COMPONENT_FLAG")
        "This Flag (Y/N) is indicating whether the Component Part is Main Component. 'Y' indicates, it is Main Component."
        self.LIEN_DISC_STOP_ORDERS = parse_value(self.schema, column_value_map, "LIEN_DISC_STOP_ORDERS")
        "Determines what orders must be set on hold when a discrepancy is created on a unit."
        self.LIEN_DISC_INH_STOP_ORDERS = parse_value(self.schema, column_value_map, "LIEN_DISC_INH_STOP_ORDERS")
        "Determines what open orders must be set on hold when a discrepancy is inherited from an installed unit."
        self.FINAL_COMPONENT_DISP_FLAG = parse_value(self.schema, column_value_map, "FINAL_COMPONENT_DISP_FLAG")
        "A flag (Y/N) indicating whether the component/part was added through Re-Disposition Units of Verify Rework Hold."
        self.AS_WORKED_BOM = parse_value(self.schema, column_value_map, "AS_WORKED_BOM")
        "As worked BOM."

class SFQA_CA_REQ_AFFECTED_ITEMS:
    schema = {
        "CA_REQUEST_ID": "STRING",
        "ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_REQUEST_ID",
        "ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_REQ_AFFECTED_ITEMS_FK", ["CA_REQUEST_ID"], "SFQA_CA_REQUEST", ["CA_REQUEST_ID"]),
        DbForeignKey("SFQA_CA_REQ_AFFECTED_ITEMS_FK1", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique identifier of an affected Item."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_DISC_LIENS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "LIEN_ID": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "INH_LIEN_ID": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "LIEN_STATUS": "STRING",
        "LIEN_START_DATE": "STRING",
        "LIEN_END_DATE": "STRING",
        "LIEN_DISC_PERSIST_AUTH_FLAG": "STRING",
        "AUTHORIZATION_NOTES": "STRING",
        "LIEN_PERSIST_UPTO_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "PART_NO": "STRING",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.LIEN_ID = parse_value(self.schema, column_value_map, "LIEN_ID")
        "Unique identifier of the Lien."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique identifier of the Lot."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique identifier of the Serial."
        self.INH_LIEN_ID = parse_value(self.schema, column_value_map, "INH_LIEN_ID")
        "The unique identifier of the lien being inherited."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "Identifier of the discrepancy, including line number."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "Identifier of the discrepancy, including line number."
        self.LIEN_STATUS = parse_value(self.schema, column_value_map, "LIEN_STATUS")
        "Status of the Lien/Inherited lien."
        self.LIEN_START_DATE = parse_value(self.schema, column_value_map, "LIEN_START_DATE")
        "Timestamp on which the discrepancy is created for the unit."
        self.LIEN_END_DATE = parse_value(self.schema, column_value_map, "LIEN_END_DATE")
        "Timestamp on which the lien is closed, or cancelled."
        self.LIEN_DISC_PERSIST_AUTH_FLAG = parse_value(self.schema, column_value_map, "LIEN_DISC_PERSIST_AUTH_FLAG")
        "Indicates whether an authorization for the lien must be persisted."
        self.AUTHORIZATION_NOTES = parse_value(self.schema, column_value_map, "AUTHORIZATION_NOTES")
        "Authorization Notes."
        self.LIEN_PERSIST_UPTO_ITEM_ID = parse_value(self.schema, column_value_map, "LIEN_PERSIST_UPTO_ITEM_ID")
        "Indicates the item id of the higher level unit that must be held when the discrepancy lien is inherited."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")

class SFPL_MFG_BOM_TOOL:
    schema = {
        "BOM_ID": "STRING",
        "BOM_COMP_TOOL_ID": "STRING",
        "ITEM_ID": "STRING",
        "QTY": "NUMBER",
        "SERIAL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "DATASOURCE": "STRING",
        "EFF_FROM": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "ITEM_NOTES": "STRING",
        "UCF_MBOM_VCH1": "STRING",
        "LOCATION_ID": "STRING",
        "UCF_MBOM_VCH2": "STRING",
        "UCF_MBOM_VCH3": "STRING",
        "PROGRAM": "STRING",
        "PROJECT": "STRING",
        "UCF_MBOM_VCH4": "STRING",
        "UCF_MBOM_VCH5": "STRING",
        "UCF_MBOM_VCH6": "STRING",
        "UCF_MBOM_VCH7": "STRING",
        "UCF_MBOM_VCH8": "STRING",
        "UCF_MBOM_VCH9": "STRING",
        "UCF_MBOM_VCH10": "STRING",
        "UCF_MBOM_VCH11": "STRING",
        "UCF_MBOM_VCH12": "STRING",
        "UCF_MBOM_VCH13": "STRING",
        "UCF_MBOM_VCH14": "STRING",
        "UCF_MBOM_VCH15": "STRING",
        "UCF_MBOM_NUM1": "NUMBER",
        "UCF_MBOM_NUM2": "NUMBER",
        "UCF_MBOM_NUM3": "NUMBER",
        "UCF_MBOM_NUM4": "NUMBER",
        "UCF_MBOM_NUM5": "NUMBER",
        "UCF_MBOM_DATE1": "STRING",
        "UCF_MBOM_DATE2": "STRING",
        "UCF_MBOM_DATE3": "STRING",
        "UCF_MBOM_DATE4": "STRING",
        "UCF_MBOM_DATE5": "STRING",
        "UCF_MBOM_FLAG1": "STRING",
        "UCF_MBOM_FLAG2": "STRING",
        "UCF_MBOM_FLAG3": "STRING",
        "UCF_MBOM_FLAG4": "STRING",
        "UCF_MBOM_FLAG5": "STRING",
        "UCF_MBOM_VCH255_1": "STRING",
        "UCF_MBOM_VCH255_2": "STRING",
        "UCF_MBOM_VCH255_3": "STRING",
        "UCF_MBOM_VCH4000_1": "STRING",
        "UCF_MBOM_VCH4000_2": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BOM_LINE_ID": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
        "LATEST_EFF_GRP_REV_FLAG": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
        "BOM_COMP_TOOL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_TOOL_FK2", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_FK5", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_FK6", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_FK3", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_FK7", ["BOM_ID","BOM_LINE_ID"], "SFPL_MFG_BOM_REV_LINE_NO", ["BOM_ID","BOM_LINE_ID"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_FK1", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_FK4", ["PROJECT"], "SFFND_PROJECT_DEF", ["PROJECT"]),
        DbForeignKey("SFPL_MFG_BOM_TOOL_FK8", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
    ]
    refs = [
        "SFPL_MFG_BOM_TOOL_CONFIG_FK1",
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique, system-generated ID of the BOM."
        self.BOM_COMP_TOOL_ID = parse_value(self.schema, column_value_map, "BOM_COMP_TOOL_ID")
        "Unique, system-generated ID for the assigned component/tool."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/tool."
        self.QTY = parse_value(self.schema, column_value_map, "QTY")
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/tool is or should be tracked by serial number."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the component/tool is or should be tracked by expiration date."
        self.DATASOURCE = parse_value(self.schema, column_value_map, "DATASOURCE")
        "The source system from which data in this record has been originated."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "The upper bound of the effectivity range for a effectivity type other than time period."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "The lower bound of the effectivity range for a effectivity type other than time period."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "The starting date of the time period during which the BOM revision is effective."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "The ending date of the time period during which the BOM revision is effective."
        self.ITEM_NOTES = parse_value(self.schema, column_value_map, "ITEM_NOTES")
        "Additional information about a given component/tool."
        self.UCF_MBOM_VCH1 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        "The associated location."
        self.UCF_MBOM_VCH2 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH3 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH3")
        "User-configurable field for VARCHAR data type."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated program."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.UCF_MBOM_VCH4 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH5 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH6 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH7 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH8 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH9 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH10 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH11 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH12 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH13 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH14 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_VCH15 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_MBOM_NUM1 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_NUM2 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_NUM3 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_NUM4 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_NUM5 = parse_value(self.schema, column_value_map, "UCF_MBOM_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_MBOM_DATE1 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_DATE2 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_DATE3 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_DATE4 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_DATE5 = parse_value(self.schema, column_value_map, "UCF_MBOM_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_MBOM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_MBOM_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_MBOM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_MBOM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_MBOM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        "A Number identifier which identifies that this record comes from Plam Device."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BOM_LINE_ID = parse_value(self.schema, column_value_map, "BOM_LINE_ID")
        "Reference of BOM Line of the BOM Tool."
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        "EFF Group Id"
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        "Next Higher Assembly given by User"
        self.LATEST_EFF_GRP_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_EFF_GRP_REV_FLAG")
        "Latest Eff Group Rev Flag"
        self.SFPL_MFG_BOM_TOOL_CONFIG_FK1 = []

class SFQA_CA_REQUEST_MM_OBJECTS:
    schema = {
        "CA_REQUEST_ID": "STRING",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH1": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH2": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH3": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH4": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH5": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_NUM1": "NUMBER",
        "UCF_CA_REQUEST_MM_OBJ_NUM2": "NUMBER",
        "UCF_CA_REQUEST_MM_OBJ_NUM3": "NUMBER",
        "UCF_CA_REQUEST_MM_OBJ_DATE1": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_DATE2": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_FLAG1": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_FLAG2": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_FLAG3": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH255_1": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH255_2": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "RTF_LINK_ID": "STRING",
    }
    primary_key_columns = [
        "CA_REQUEST_ID",
        "OBJECT_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_REQUEST_MM_OBJECTS_FK1", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFQA_CA_REQUEST_MM_OBJECTS_FK2", ["CA_REQUEST_ID"], "SFQA_CA_REQUEST", ["CA_REQUEST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action Request."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_CA_REQUEST_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_REQUEST_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."

class SFPL_ITEM_PROGRAM_DETAILS:
    schema = {
        "ITEM_ID": "STRING",
        "BATCH_SIZE": "NUMBER",
        "PROGRAM": "STRING",
        "LOCATION_ID": "STRING",
        "COMP_SERIAL_FLAG": "STRING",
        "COMP_LOT_FLAG": "STRING",
        "STOCK_UOM": "STRING",
        "WO_SERIAL_FLAG": "STRING",
        "WO_LOT_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "SPOOL_FLAG": "STRING",
        "OPT_DC1_FLAG": "STRING",
        "OPT_DC2_FLAG": "STRING",
        "OPT_DC3_FLAG": "STRING",
        "OPT_DC4_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UTILIZATION_RULE": "STRING",
        "TRACKABLE_FLAG": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "UID_ACQUISITION_CODE": "STRING",
        "QTY_ON_HAND": "NUMBER",
        "UID_ENTRY_NAME": "STRING",
        "FLIGHT_HOURS": "NUMBER",
        "FLIGHT_DAYS": "NUMBER",
        "FLIGHT_CYCLES": "NUMBER",
        "STD_COST": "NUMBER",
        "UCF_ITEM_PROG_DETAIL_VCH1": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH2": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH3": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH4": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH5": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH6": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH7": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH9": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH8": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH10": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH11": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH12": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH13": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH14": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH15": "STRING",
        "UCF_ITEM_PROG_DETAIL_NUM1": "NUMBER",
        "UCF_ITEM_PROG_DETAIL_NUM2": "NUMBER",
        "UCF_ITEM_PROG_DETAIL_NUM3": "NUMBER",
        "UCF_ITEM_PROG_DETAIL_NUM4": "NUMBER",
        "UCF_ITEM_PROG_DETAIL_NUM5": "NUMBER",
        "UCF_ITEM_PROG_DETAIL_DATE1": "STRING",
        "UCF_ITEM_PROG_DETAIL_DATE2": "STRING",
        "UCF_ITEM_PROG_DETAIL_DATE3": "STRING",
        "UCF_ITEM_PROG_DETAIL_DATE4": "STRING",
        "UCF_ITEM_PROG_DETAIL_DATE5": "STRING",
        "UCF_ITEM_PROG_DETAIL_FLAG1": "STRING",
        "UCF_ITEM_PROG_DETAIL_FLAG2": "STRING",
        "UCF_ITEM_PROG_DETAIL_FLAG3": "STRING",
        "UCF_ITEM_PROG_DETAIL_FLAG4": "STRING",
        "UCF_ITEM_PROG_DETAIL_FLAG5": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH255_1": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH255_2": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH255_3": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH4000_1": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "PROGRAM",
        "LOCATION_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_ITEM_PROG_DETLS_ITEM_FK", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_ITEM_PROG_DETAILS_FK01", ["UID_ENTRY_NAME"], "SFFND_UID_ENTRY", ["UID_ENTRY_NAME"]),
        DbForeignKey("SFPL_ITEM_PROG_DETLS_PROG_FK", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("SFPL_ITEM_PROG_DETLS_WL_FK", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFPL_ITEMPROGDTLS_UOM_FK", ["STOCK_UOM"], "SFFND_UOM_DEF", ["UOM"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of an item/part."
        self.BATCH_SIZE = parse_value(self.schema, column_value_map, "BATCH_SIZE")
        "Number of parts that are supposed to be manufactured as a batch. When BATCH_SIZE has a value that is greater than 1, the Bill-Of-Material of the part is defined for the batch instead of single instance of the part."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        self.COMP_SERIAL_FLAG = parse_value(self.schema, column_value_map, "COMP_SERIAL_FLAG")
        "Flag indicating whether the item/part is tracked by serial number at the component level. Column in nested table SFFND_ITEM_PROGRAM_NTAB."
        self.COMP_LOT_FLAG = parse_value(self.schema, column_value_map, "COMP_LOT_FLAG")
        "Flag indicating whether the item/part is tracked by lot at the component level. Column in nested table SFFND_ITEM_PROGRAM_NTAB."
        self.STOCK_UOM = parse_value(self.schema, column_value_map, "STOCK_UOM")
        "Unit of measure for the item."
        self.WO_SERIAL_FLAG = parse_value(self.schema, column_value_map, "WO_SERIAL_FLAG")
        "Flag indicating whether the item/part is tracked by serial number at the work order level. Column in nested table SFFND_ITEM_PROGRAM_NTAB."
        self.WO_LOT_FLAG = parse_value(self.schema, column_value_map, "WO_LOT_FLAG")
        "Flag indicating whether the item/part is tracked by lot at the work order level. Column in nested table SFFND_ITEM_PROGRAM_NTAB."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by expiration date."
        self.SPOOL_FLAG = parse_value(self.schema, column_value_map, "SPOOL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by a spool number."
        self.OPT_DC1_FLAG = parse_value(self.schema, column_value_map, "OPT_DC1_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC2_FLAG = parse_value(self.schema, column_value_map, "OPT_DC2_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC3_FLAG = parse_value(self.schema, column_value_map, "OPT_DC3_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC4_FLAG = parse_value(self.schema, column_value_map, "OPT_DC4_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UTILIZATION_RULE = parse_value(self.schema, column_value_map, "UTILIZATION_RULE")
        self.TRACKABLE_FLAG = parse_value(self.schema, column_value_map, "TRACKABLE_FLAG")
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.UID_ACQUISITION_CODE = parse_value(self.schema, column_value_map, "UID_ACQUISITION_CODE")
        self.QTY_ON_HAND = parse_value(self.schema, column_value_map, "QTY_ON_HAND")
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.FLIGHT_HOURS = parse_value(self.schema, column_value_map, "FLIGHT_HOURS")
        self.FLIGHT_DAYS = parse_value(self.schema, column_value_map, "FLIGHT_DAYS")
        self.FLIGHT_CYCLES = parse_value(self.schema, column_value_map, "FLIGHT_CYCLES")
        self.STD_COST = parse_value(self.schema, column_value_map, "STD_COST")
        "Specified cost for the Item at location."
        self.UCF_ITEM_PROG_DETAIL_VCH1 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH2 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH3 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH4 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH5 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH6 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH7 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH9 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH8 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH10 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH11 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH12 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH13 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH14 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH15 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_NUM1 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_PROG_DETAIL_NUM2 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_PROG_DETAIL_NUM3 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_PROG_DETAIL_NUM4 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_PROG_DETAIL_NUM5 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_PROG_DETAIL_DATE1 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_PROG_DETAIL_DATE2 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_PROG_DETAIL_DATE3 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_PROG_DETAIL_DATE4 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_PROG_DETAIL_DATE5 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_PROG_DETAIL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_PROG_DETAIL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_PROG_DETAIL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_PROG_DETAIL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_PROG_DETAIL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_PROG_DETAIL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_PROG_DETAIL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_PROG_DETAIL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_PROG_DETAIL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ITEM_PROG_DETAIL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."

class SFQA_DISC_TEXT:
    schema = {
        "DISC_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
    }
    primary_key_columns = [
        "DISC_ID",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_DISC_TEXT_DISCDESC_FK", ["DISC_ID"], "SFQA_DISC_DESC", ["DISC_ID"]),
    ]
    refs = [
        "SFFND_HTREF_DISC_T_DT_FK",
        "SFQA_DISC_TEXT_SUBVAR_FK1",
    ]
    def __init__(self, column_value_map):
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.SFFND_HTREF_DISC_T_DT_FK = []
        self.SFQA_DISC_TEXT_SUBVAR_FK1 = []

class SFSQA_USER_SUPPLIERS:
    schema = {
        "UPDT_USERID": "STRING",
        "USERID": "STRING",
        "SUPPLIER_CODE": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_USER_SUPPLIER_VCH1": "STRING",
        "UCF_USER_SUPPLIER_VCH2": "STRING",
        "UCF_USER_SUPPLIER_VCH3": "STRING",
        "UCF_USER_SUPPLIER_VCH4": "STRING",
        "UCF_USER_SUPPLIER_VCH5": "STRING",
        "UCF_USER_SUPPLIER_VCH6": "STRING",
        "UCF_USER_SUPPLIER_VCH7": "STRING",
        "UCF_USER_SUPPLIER_VCH8": "STRING",
        "UCF_USER_SUPPLIER_VCH9": "STRING",
        "UCF_USER_SUPPLIER_VCH10": "STRING",
        "UCF_USER_SUPPLIER_VCH11": "STRING",
        "UCF_USER_SUPPLIER_VCH12": "STRING",
        "UCF_USER_SUPPLIER_VCH13": "STRING",
        "UCF_USER_SUPPLIER_VCH14": "STRING",
        "UCF_USER_SUPPLIER_VCH15": "STRING",
        "UCF_USER_SUPPLIER_NUM1": "NUMBER",
        "UCF_USER_SUPPLIER_NUM2": "NUMBER",
        "UCF_USER_SUPPLIER_NUM3": "NUMBER",
        "UCF_USER_SUPPLIER_NUM4": "NUMBER",
        "UCF_USER_SUPPLIER_NUM5": "NUMBER",
        "UCF_USER_SUPPLIER_DATE1": "STRING",
        "UCF_USER_SUPPLIER_DATE2": "STRING",
        "UCF_USER_SUPPLIER_DATE3": "STRING",
        "UCF_USER_SUPPLIER_DATE4": "STRING",
        "UCF_USER_SUPPLIER_DATE5": "STRING",
        "UCF_USER_SUPPLIER_FLAG1": "STRING",
        "UCF_USER_SUPPLIER_FLAG2": "STRING",
        "UCF_USER_SUPPLIER_FLAG3": "STRING",
        "UCF_USER_SUPPLIER_FLAG4": "STRING",
        "UCF_USER_SUPPLIER_FLAG5": "STRING",
        "UCF_USER_SUPPLIER_VCH255_1": "STRING",
        "UCF_USER_SUPPLIER_VCH255_2": "STRING",
        "UCF_USER_SUPPLIER_VCH255_3": "STRING",
        "UCF_USER_SUPPLIER_VCH4000_1": "STRING",
        "UCF_USER_SUPPLIER_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "USERID",
        "SUPPLIER_CODE",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_USER_SUPPLIERS_SUPS_FK", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFSQA_USER_SUPLR_USER_FK", ["USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.UCF_USER_SUPPLIER_VCH1 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH1")
        self.UCF_USER_SUPPLIER_VCH2 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH2")
        self.UCF_USER_SUPPLIER_VCH3 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH3")
        self.UCF_USER_SUPPLIER_VCH4 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH4")
        self.UCF_USER_SUPPLIER_VCH5 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH5")
        self.UCF_USER_SUPPLIER_VCH6 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH6")
        self.UCF_USER_SUPPLIER_VCH7 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH7")
        self.UCF_USER_SUPPLIER_VCH8 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH8")
        self.UCF_USER_SUPPLIER_VCH9 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH9")
        self.UCF_USER_SUPPLIER_VCH10 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH10")
        self.UCF_USER_SUPPLIER_VCH11 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH11")
        self.UCF_USER_SUPPLIER_VCH12 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH12")
        self.UCF_USER_SUPPLIER_VCH13 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH13")
        self.UCF_USER_SUPPLIER_VCH14 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH14")
        self.UCF_USER_SUPPLIER_VCH15 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH15")
        self.UCF_USER_SUPPLIER_NUM1 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_NUM1")
        self.UCF_USER_SUPPLIER_NUM2 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_NUM2")
        self.UCF_USER_SUPPLIER_NUM3 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_NUM3")
        self.UCF_USER_SUPPLIER_NUM4 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_NUM4")
        self.UCF_USER_SUPPLIER_NUM5 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_NUM5")
        self.UCF_USER_SUPPLIER_DATE1 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_DATE1")
        self.UCF_USER_SUPPLIER_DATE2 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_DATE2")
        self.UCF_USER_SUPPLIER_DATE3 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_DATE3")
        self.UCF_USER_SUPPLIER_DATE4 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_DATE4")
        self.UCF_USER_SUPPLIER_DATE5 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_DATE5")
        self.UCF_USER_SUPPLIER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_FLAG1")
        self.UCF_USER_SUPPLIER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_FLAG2")
        self.UCF_USER_SUPPLIER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_FLAG3")
        self.UCF_USER_SUPPLIER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_FLAG4")
        self.UCF_USER_SUPPLIER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_FLAG5")
        self.UCF_USER_SUPPLIER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH255_1")
        self.UCF_USER_SUPPLIER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH255_2")
        self.UCF_USER_SUPPLIER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH255_3")
        self.UCF_USER_SUPPLIER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH4000_1")
        self.UCF_USER_SUPPLIER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_USER_SUPPLIER_VCH4000_2")

class SFWID_EXTERNAL_DAT_COL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "EXTERNAL_DAT_COL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "BIS_TRANS_REF_ID": "STRING",
        "MACHINE_ID": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "SERIAL_NO": "STRING",
        "LOT_NO": "STRING",
        "STATUS": "STRING",
        "DATA_POINT": "STRING",
        "DATA_VALUE": "STRING",
        "DATA_FORMAT": "STRING",
        "DATA_UOM": "STRING",
        "FILE_OBJECT_ID": "STRING",
        "UID_LABEL": "STRING",
        "MACHINE_NO": "STRING",
        "DATA_BINARY_DATA": "STRING",
        "DATA_OBJECT_REFERENCE": "STRING",
        "DATA_FILE_FORMAT": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.EXTERNAL_DAT_COL_ID = parse_value(self.schema, column_value_map, "EXTERNAL_DAT_COL_ID")
        "Generated unique identifier for the record. Primary key of the table."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BIS_TRANS_REF_ID = parse_value(self.schema, column_value_map, "BIS_TRANS_REF_ID")
        "Xref to BIS log tables, SFBIS_LOG_TABLES.TRANSACTION_ID."
        self.MACHINE_ID = parse_value(self.schema, column_value_map, "MACHINE_ID")
        "Machine ID of the machine collected the data."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "Part Number of the unit that data is collected on."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Part Change of the unit that data is collected on."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "Serial identifier of the unit that data is collected on."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "Lot or batch identifier of the unit that data is collected on."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Status of record."
        self.DATA_POINT = parse_value(self.schema, column_value_map, "DATA_POINT")
        "Identifier of the specific data collected. Matches dat col variable name in Solumina."
        self.DATA_VALUE = parse_value(self.schema, column_value_map, "DATA_VALUE")
        "Actual value of the data."
        self.DATA_FORMAT = parse_value(self.schema, column_value_map, "DATA_FORMAT")
        "Data type of the value, such as INTEGER, DATE, STRING, etc."
        self.DATA_UOM = parse_value(self.schema, column_value_map, "DATA_UOM")
        "Unit of measure of data."
        self.FILE_OBJECT_ID = parse_value(self.schema, column_value_map, "FILE_OBJECT_ID")
        "Ref ID for file object in Solumina if incoming data is a file for data collection."
        self.UID_LABEL = parse_value(self.schema, column_value_map, "UID_LABEL")
        "Placeholder for scanned UID that identify unit that data is collected on."
        self.MACHINE_NO = parse_value(self.schema, column_value_map, "MACHINE_NO")
        "Machine number."
        self.DATA_BINARY_DATA = parse_value(self.schema, column_value_map, "DATA_BINARY_DATA")
        "Stores binary data of file received in inbound message."
        self.DATA_OBJECT_REFERENCE = parse_value(self.schema, column_value_map, "DATA_OBJECT_REFERENCE")
        "Stores file name received in inbound message."
        self.DATA_FILE_FORMAT = parse_value(self.schema, column_value_map, "DATA_FILE_FORMAT")
        "Stores format of the file received in inbound message."

class SFPL_PLAN_EFF_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "EFF_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "NOTES": "STRING",
        "EFF_GROUP_ID": "STRING",
        "LATEST_EFF_GRP_REV_FLAG": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.EFF_TYPE = parse_value(self.schema, column_value_map, "EFF_TYPE")
        "A type of work plan version.revision effectivity. For example: time period, or finishing product."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "The upper bound of the effectivity range for a effectivity type other than time period."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "The lower bound of the effectivity range for a effectivity type other than time period."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "The starting date of the time period during which the plan version.revision is effective."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "The ending date of the time period during which the plan version.revision is effective."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about the task."
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        self.LATEST_EFF_GRP_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_EFF_GRP_REV_FLAG")

class SFCORE_3DMODEL_CONV_LOG:
    schema = {
        "OBJECT_ID": "STRING",
        "STATUS": "STRING",
        "LOG_TEXT": "STRING",
        "FORMAT": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "OBJECT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Primary Key of the SFCORE_3DMODEL_CONV_LOG"
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "SUCCESS or FAILED - based on the outcome of the conversion"
        self.LOG_TEXT = parse_value(self.schema, column_value_map, "LOG_TEXT")
        "field to store the log message for conversion  transaction"
        self.FORMAT = parse_value(self.schema, column_value_map, "FORMAT")
        "this is the format of the object before the conversion started"
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "will contain the UserId who inserted the record"
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "when the update completed"
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFCORE_PROCESS_LOG:
    schema = {
        "PROCESSLOG_ID": "NUMBER",
        "PROCESS_NAME": "STRING",
        "USERID": "STRING",
        "STATUS": "STRING",
        "START_TIME": "STRING",
        "END_TIME": "STRING",
        "HOST": "STRING",
        "CALL": "STRING",
        "ERRORID": "NUMBER",
        "REF1": "STRING",
        "REF2": "STRING",
        "REF3": "STRING",
        "REF4": "STRING",
        "REF5": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PROCESSLOG_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_PROCESS_LOG_FK1", ["ERRORID"], "SFCORE_ERROR_LOG", ["ERRORID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PROCESSLOG_ID = parse_value(self.schema, column_value_map, "PROCESSLOG_ID")
        self.PROCESS_NAME = parse_value(self.schema, column_value_map, "PROCESS_NAME")
        "name of the task"
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "process owner user id"
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "process status: IN QUEUE, RUNNING, FINISHED, FAILED"
        self.START_TIME = parse_value(self.schema, column_value_map, "START_TIME")
        self.END_TIME = parse_value(self.schema, column_value_map, "END_TIME")
        self.HOST = parse_value(self.schema, column_value_map, "HOST")
        "running host identification: IP address or host name"
        self.CALL = parse_value(self.schema, column_value_map, "CALL")
        "JSON-style dump of the task entry point call with all parameters"
        self.ERRORID = parse_value(self.schema, column_value_map, "ERRORID")
        self.REF1 = parse_value(self.schema, column_value_map, "REF1")
        "Optional references to a related entity"
        self.REF2 = parse_value(self.schema, column_value_map, "REF2")
        self.REF3 = parse_value(self.schema, column_value_map, "REF3")
        self.REF4 = parse_value(self.schema, column_value_map, "REF4")
        self.REF5 = parse_value(self.schema, column_value_map, "REF5")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFQA_DISC_ITEM_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "ITEM_ID": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "DISC_TYPE": "STRING",
        "ROUTE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "REF_DES": "STRING",
        "DISP_INSTR_TYPE": "STRING",
        "REJECT_COMPONENT_FLAG": "STRING",
        "AFFECTED_QTY": "NUMBER",
        "INSPECTED_QTY": "NUMBER",
        "ORDER_MAKE_ITEM_FLAG": "STRING",
        "CA_FLAG": "STRING",
        "CA_CAUSE_OVERRIDE_FLAG": "STRING",
        "DISC_LINE_TITLE": "STRING",
        "DISC_LINE_STATUS": "STRING",
        "UOM": "STRING",
        "FIND_NO": "STRING",
        "PO_LINE_ITEM": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "DISC_CATEGORY": "STRING",
        "DISP_TYPE": "STRING",
        "DISP_ORDER_ID": "STRING",
        "DISP_DOC_TYPE": "STRING",
        "DISP_DOC_NO": "STRING",
        "DISP_STOP_TYPE": "STRING",
        "CUST_ID": "STRING",
        "CUST_NOTIF_FLAG": "STRING",
        "NOTES": "STRING",
        "ALT_ID": "STRING",
        "CA_ID": "STRING",
        "CA_NOTES": "STRING",
        "UCF_DISC_ITEM_VCH1": "STRING",
        "UCF_DISC_ITEM_VCH2": "STRING",
        "UCF_DISC_ITEM_VCH3": "STRING",
        "UCF_DISC_ITEM_VCH4": "STRING",
        "UCF_DISC_ITEM_VCH5": "STRING",
        "UCF_DISC_ITEM_VCH6": "STRING",
        "UCF_DISC_ITEM_FLAG1": "STRING",
        "UCF_DISC_ITEM_FLAG2": "STRING",
        "UCF_DISC_ITEM_NUM1": "NUMBER",
        "UCF_DISC_ITEM_DATE1": "STRING",
        "PROGRAM": "STRING",
        "LOT_FLAG": "STRING",
        "SERIAL_FLAG": "STRING",
        "APPEND_TO_OPER_KEY": "NUMBER",
        "APPEND_TO_STEP_KEY": "NUMBER",
        "APPEND_TO_OPER_NO": "STRING",
        "UCF_DISC_ITEM_VCH7": "STRING",
        "UCF_DISC_ITEM_VCH8": "STRING",
        "UCF_DISC_ITEM_VCH9": "STRING",
        "UCF_DISC_ITEM_VCH10": "STRING",
        "UCF_DISC_ITEM_VCH11": "STRING",
        "UCF_DISC_ITEM_VCH12": "STRING",
        "UCF_DISC_ITEM_VCH13": "STRING",
        "UCF_DISC_ITEM_VCH14": "STRING",
        "UCF_DISC_ITEM_VCH15": "STRING",
        "UCF_DISC_ITEM_FLAG3": "STRING",
        "UCF_DISC_ITEM_FLAG4": "STRING",
        "UCF_DISC_ITEM_FLAG5": "STRING",
        "UCF_DISC_ITEM_NUM2": "NUMBER",
        "UCF_DISC_ITEM_NUM3": "NUMBER",
        "UCF_DISC_ITEM_NUM4": "NUMBER",
        "UCF_DISC_ITEM_NUM5": "NUMBER",
        "UCF_DISC_ITEM_DATE2": "STRING",
        "UCF_DISC_ITEM_DATE3": "STRING",
        "UCF_DISC_ITEM_DATE4": "STRING",
        "UCF_DISC_ITEM_DATE5": "STRING",
        "UCF_DISC_ITEM_VCH255_1": "STRING",
        "UCF_DISC_ITEM_VCH255_2": "STRING",
        "UCF_DISC_ITEM_VCH255_3": "STRING",
        "UCF_DISC_ITEM_VCH4000_1": "STRING",
        "UCF_DISC_ITEM_VCH4000_2": "STRING",
        "AUTO_UPDATE_TO_IMPLEMENTED": "STRING",
        "ZONE": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "INSP_ITEM_ID": "STRING",
        "INSP_ITEM_COUNT": "NUMBER",
        "CHARGE_CODE": "NUMBER",
        "REJECTED_QTY": "NUMBER",
        "RELATED_INSP_ORDER_ID": "STRING",
        "RESP_SUPPLIER_CODE": "STRING",
        "CUSTOMER_REF_NO": "STRING",
        "SECURITY_GROUP": "STRING",
        "REVISION_ISSUE": "STRING",
        "NOTIFICATION_AGENCY": "STRING",
        "AVAILABL_DATE_REPLACEMENT_PART": "STRING",
        "AVAILABL_DATE_PERFORM_WORK": "STRING",
        "INSERVICE_UNIT_AFFECTED_FLAG": "STRING",
        "OVERMAX_UNDERMIN": "STRING",
        "ASSEMBLY_DWG_NO": "STRING",
        "FINAL_PRODUCT_MANUFACTURER_SN": "STRING",
        "PRODUCT_CATEGORY": "STRING",
        "LIMITATION_FLAG": "STRING",
        "LIMITATION_DESC": "STRING",
        "PART_MARKING": "STRING",
        "ADDITIONAL_COMMENTS": "STRING",
        "DISP_DOC_REV": "STRING",
        "INSP_ITEM_NO": "STRING",
        "ORIG_COMPANY_ID": "STRING",
        "ORIG_COMPANY_NAME": "STRING",
        "LAST_ACTIVITY_TIME_STAMP": "STRING",
        "SUPPLIER_REMARKS": "STRING",
        "APPEND_TO_STEP_NO": "STRING",
        "DOC_TYPE": "STRING",
        "DC_UPDT_USERID": "STRING",
        "DC_USER_LEVEL_ON_COMP_DI": "NUMBER",
        "DC_USER_STATUS_ON_COMP_DI": "STRING",
        "DC_OVER_INSP_HOLD_ID": "STRING",
        "RESP_LOCATION_ID": "STRING",
        "RESP_DEPARTMENT_ID": "STRING",
        "RESP_CENTER_ID": "STRING",
        "REJECT_LOCATION_ID": "STRING",
        "REJECT_DEPARTMENT_ID": "STRING",
        "REJECT_CENTER_ID": "STRING",
        "GROUP_JOB_NO": "STRING",
        "COMMODITY_JURISDICTION": "STRING",
        "COMMODITY_CLASSIFICATION": "STRING",
        "DISC_DESC_UDV_ID": "STRING",
        "ITEM_LOT_SER_UDV_ID": "STRING",
        "COMP_LOT_SER_UDV_ID": "STRING",
        "DEFECT_CLASS_UDV_ID": "STRING",
        "DISP_ACTION_UDV_ID": "STRING",
        "CORR_ACTION_UDV_ID": "STRING",
        "LRU_PART_NO": "STRING",
        "ATA_CHAPTER": "STRING",
        "DISTRIBUTION": "STRING",
        "NEXT_DISC_DESC_UDV_ID": "STRING",
        "NEXT_ITEM_LOT_SER_UDV_ID": "STRING",
        "NEXT_COMP_LOT_SER_UDV_ID": "STRING",
        "NEXT_DEFECT_CLASS_UDV_ID": "STRING",
        "NEXT_DISP_ACTION_UDV_ID": "STRING",
        "NEXT_CORR_ACTION_UDV_ID": "STRING",
        "LIEN_DISC_STOP_ORDERS": "STRING",
        "LIEN_DISC_INH_STOP_ORDERS": "STRING",
        "COPY_FROM_DISC_ID": "STRING",
        "COPY_FROM_DISC_LINE_NO": "NUMBER",
        "SPLIT_FROM_DISC_ID": "STRING",
        "SPLIT_FROM_DISC_LINE_NO": "NUMBER",
        "FINAL_DISP_TYPE": "STRING",
        "FINAL_DISP_DOC_TYPE": "STRING",
        "FINAL_DISP_DOC_NO": "STRING",
        "FINAL_DISP_DOC_REV": "STRING",
        "REQUEST_ID": "STRING",
        "PARENT_DISC_ID": "STRING",
        "PARENT_DISC_LINE_NO": "NUMBER",
        "COMPLETION_DATE": "STRING",
        "CA_RESP_INFO_OVERRIDE_FLAG": "STRING",
        "BUYER": "STRING",
        "MATERIAL_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Unique, system-generated ID of the component/part."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.DISC_TYPE = parse_value(self.schema, column_value_map, "DISC_TYPE")
        "Type or classification of discrepancy, e.g., SCRAP, REWORK, REPAIR, AS IS, RETURN."
        self.ROUTE_TYPE = parse_value(self.schema, column_value_map, "ROUTE_TYPE")
        "The route type associated with a given discrepancy item."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.DISP_INSTR_TYPE = parse_value(self.schema, column_value_map, "DISP_INSTR_TYPE")
        "Type of disposition instructions associated with the discrepancy item."
        self.REJECT_COMPONENT_FLAG = parse_value(self.schema, column_value_map, "REJECT_COMPONENT_FLAG")
        "A flag (Y/N) indicating whether the component/part should be rejected."
        self.AFFECTED_QTY = parse_value(self.schema, column_value_map, "AFFECTED_QTY")
        "Number of components/parts that have been inspected and are found to be affected by the associated discrepancy item."
        self.INSPECTED_QTY = parse_value(self.schema, column_value_map, "INSPECTED_QTY")
        "The number of components/parts that have been inspected."
        self.ORDER_MAKE_ITEM_FLAG = parse_value(self.schema, column_value_map, "ORDER_MAKE_ITEM_FLAG")
        "A flag indicating whether the component is a make part (Y) or a vendor-supplied part (N). Any make part has a work order no."
        self.CA_FLAG = parse_value(self.schema, column_value_map, "CA_FLAG")
        "A flag (Y/N) indicating whether the discrepancy item is associated with a Corrective Action."
        self.CA_CAUSE_OVERRIDE_FLAG = parse_value(self.schema, column_value_map, "CA_CAUSE_OVERRIDE_FLAG")
        "A flag (Y/N) indicating that the original cause of the discrepancy item has been reevaluated and overridden by the cause of the associated Corrective Action."
        self.DISC_LINE_TITLE = parse_value(self.schema, column_value_map, "DISC_LINE_TITLE")
        "Title of the discrepancy item."
        self.DISC_LINE_STATUS = parse_value(self.schema, column_value_map, "DISC_LINE_STATUS")
        "Current status of the discrepancy item."
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Unit of Measure for the component/part."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.PO_LINE_ITEM = parse_value(self.schema, column_value_map, "PO_LINE_ITEM")
        "The line number that corresponds to the discrepancy item in an associated purchase order."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.DISC_CATEGORY = parse_value(self.schema, column_value_map, "DISC_CATEGORY")
        "Customer-assigned discrepancy category used to show severity of problem."
        self.DISP_TYPE = parse_value(self.schema, column_value_map, "DISP_TYPE")
        "Type or classification of disposition/rework."
        self.DISP_ORDER_ID = parse_value(self.schema, column_value_map, "DISP_ORDER_ID")
        "Identifier of the rework order associated with the discrepancy item."
        self.DISP_DOC_TYPE = parse_value(self.schema, column_value_map, "DISP_DOC_TYPE")
        "Type or classification of disposition document, e.g., Work Order."
        self.DISP_DOC_NO = parse_value(self.schema, column_value_map, "DISP_DOC_NO")
        "Number of the disposition document."
        self.DISP_STOP_TYPE = parse_value(self.schema, column_value_map, "DISP_STOP_TYPE")
        "Not in use."
        self.CUST_ID = parse_value(self.schema, column_value_map, "CUST_ID")
        "Unique identifier of the associated customer."
        self.CUST_NOTIF_FLAG = parse_value(self.schema, column_value_map, "CUST_NOTIF_FLAG")
        "A flag (Y/N) indicating whether the customer should be notified."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about the discrepancy item."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.CA_NOTES = parse_value(self.schema, column_value_map, "CA_NOTES")
        "Additional information about the associated Corrective Action."
        self.UCF_DISC_ITEM_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_VCH6 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_DISC_ITEM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_DISC_ITEM_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_DISC_ITEM_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_DATE1")
        "User-configurable field for DATE data type."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating whether the component/part is or should be tracked by lot number."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating whether the component/part is or should be tracked by serial number."
        self.APPEND_TO_OPER_KEY = parse_value(self.schema, column_value_map, "APPEND_TO_OPER_KEY")
        "Operation where disposition/correction of the discrepancy is to occur."
        self.APPEND_TO_STEP_KEY = parse_value(self.schema, column_value_map, "APPEND_TO_STEP_KEY")
        "Step where disposition/correction of the discrepancy is to occur."
        self.APPEND_TO_OPER_NO = parse_value(self.schema, column_value_map, "APPEND_TO_OPER_NO")
        "Operation where disposition/correction of the discrepancy is to occur."
        self.UCF_DISC_ITEM_VCH7 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH7")
        self.UCF_DISC_ITEM_VCH8 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH8")
        self.UCF_DISC_ITEM_VCH9 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH9")
        self.UCF_DISC_ITEM_VCH10 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH10")
        self.UCF_DISC_ITEM_VCH11 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH11")
        self.UCF_DISC_ITEM_VCH12 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH12")
        self.UCF_DISC_ITEM_VCH13 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH13")
        self.UCF_DISC_ITEM_VCH14 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH14")
        self.UCF_DISC_ITEM_VCH15 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH15")
        self.UCF_DISC_ITEM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_FLAG3")
        self.UCF_DISC_ITEM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_FLAG4")
        self.UCF_DISC_ITEM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_FLAG5")
        self.UCF_DISC_ITEM_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_NUM2")
        self.UCF_DISC_ITEM_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_NUM3")
        self.UCF_DISC_ITEM_NUM4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_NUM4")
        self.UCF_DISC_ITEM_NUM5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_NUM5")
        self.UCF_DISC_ITEM_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_DATE2")
        self.UCF_DISC_ITEM_DATE3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_DATE3")
        self.UCF_DISC_ITEM_DATE4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_DATE4")
        self.UCF_DISC_ITEM_DATE5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_DATE5")
        self.UCF_DISC_ITEM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH255_1")
        self.UCF_DISC_ITEM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH255_2")
        self.UCF_DISC_ITEM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH255_3")
        self.UCF_DISC_ITEM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH4000_1")
        self.UCF_DISC_ITEM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_VCH4000_2")
        self.AUTO_UPDATE_TO_IMPLEMENTED = parse_value(self.schema, column_value_map, "AUTO_UPDATE_TO_IMPLEMENTED")
        self.ZONE = parse_value(self.schema, column_value_map, "ZONE")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.INSP_ITEM_COUNT = parse_value(self.schema, column_value_map, "INSP_ITEM_COUNT")
        self.CHARGE_CODE = parse_value(self.schema, column_value_map, "CHARGE_CODE")
        self.REJECTED_QTY = parse_value(self.schema, column_value_map, "REJECTED_QTY")
        self.RELATED_INSP_ORDER_ID = parse_value(self.schema, column_value_map, "RELATED_INSP_ORDER_ID")
        self.RESP_SUPPLIER_CODE = parse_value(self.schema, column_value_map, "RESP_SUPPLIER_CODE")
        self.CUSTOMER_REF_NO = parse_value(self.schema, column_value_map, "CUSTOMER_REF_NO")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.REVISION_ISSUE = parse_value(self.schema, column_value_map, "REVISION_ISSUE")
        self.NOTIFICATION_AGENCY = parse_value(self.schema, column_value_map, "NOTIFICATION_AGENCY")
        self.AVAILABL_DATE_REPLACEMENT_PART = parse_value(self.schema, column_value_map, "AVAILABL_DATE_REPLACEMENT_PART")
        self.AVAILABL_DATE_PERFORM_WORK = parse_value(self.schema, column_value_map, "AVAILABL_DATE_PERFORM_WORK")
        self.INSERVICE_UNIT_AFFECTED_FLAG = parse_value(self.schema, column_value_map, "INSERVICE_UNIT_AFFECTED_FLAG")
        self.OVERMAX_UNDERMIN = parse_value(self.schema, column_value_map, "OVERMAX_UNDERMIN")
        self.ASSEMBLY_DWG_NO = parse_value(self.schema, column_value_map, "ASSEMBLY_DWG_NO")
        self.FINAL_PRODUCT_MANUFACTURER_SN = parse_value(self.schema, column_value_map, "FINAL_PRODUCT_MANUFACTURER_SN")
        self.PRODUCT_CATEGORY = parse_value(self.schema, column_value_map, "PRODUCT_CATEGORY")
        self.LIMITATION_FLAG = parse_value(self.schema, column_value_map, "LIMITATION_FLAG")
        self.LIMITATION_DESC = parse_value(self.schema, column_value_map, "LIMITATION_DESC")
        self.PART_MARKING = parse_value(self.schema, column_value_map, "PART_MARKING")
        self.ADDITIONAL_COMMENTS = parse_value(self.schema, column_value_map, "ADDITIONAL_COMMENTS")
        self.DISP_DOC_REV = parse_value(self.schema, column_value_map, "DISP_DOC_REV")
        self.INSP_ITEM_NO = parse_value(self.schema, column_value_map, "INSP_ITEM_NO")
        self.ORIG_COMPANY_ID = parse_value(self.schema, column_value_map, "ORIG_COMPANY_ID")
        self.ORIG_COMPANY_NAME = parse_value(self.schema, column_value_map, "ORIG_COMPANY_NAME")
        self.LAST_ACTIVITY_TIME_STAMP = parse_value(self.schema, column_value_map, "LAST_ACTIVITY_TIME_STAMP")
        self.SUPPLIER_REMARKS = parse_value(self.schema, column_value_map, "SUPPLIER_REMARKS")
        self.APPEND_TO_STEP_NO = parse_value(self.schema, column_value_map, "APPEND_TO_STEP_NO")
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        self.DC_UPDT_USERID = parse_value(self.schema, column_value_map, "DC_UPDT_USERID")
        "UserID of User who performed DC."
        self.DC_USER_LEVEL_ON_COMP_DI = parse_value(self.schema, column_value_map, "DC_USER_LEVEL_ON_COMP_DI")
        "User level at completion time of Discrepancy Item."
        self.DC_USER_STATUS_ON_COMP_DI = parse_value(self.schema, column_value_map, "DC_USER_STATUS_ON_COMP_DI")
        "User status at completion time of Discrepancy Item."
        self.DC_OVER_INSP_HOLD_ID = parse_value(self.schema, column_value_map, "DC_OVER_INSP_HOLD_ID")
        "Over Inspection Hold Id related to Over Inspected DC."
        self.RESP_LOCATION_ID = parse_value(self.schema, column_value_map, "RESP_LOCATION_ID")
        self.RESP_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "RESP_DEPARTMENT_ID")
        self.RESP_CENTER_ID = parse_value(self.schema, column_value_map, "RESP_CENTER_ID")
        self.REJECT_LOCATION_ID = parse_value(self.schema, column_value_map, "REJECT_LOCATION_ID")
        self.REJECT_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "REJECT_DEPARTMENT_ID")
        self.REJECT_CENTER_ID = parse_value(self.schema, column_value_map, "REJECT_CENTER_ID")
        self.GROUP_JOB_NO = parse_value(self.schema, column_value_map, "GROUP_JOB_NO")
        "Link Discrepancy item to group job to identify DI is created from Group Job."
        self.COMMODITY_JURISDICTION = parse_value(self.schema, column_value_map, "COMMODITY_JURISDICTION")
        "Commodity Jurisdiction of Discrepancy Item."
        self.COMMODITY_CLASSIFICATION = parse_value(self.schema, column_value_map, "COMMODITY_CLASSIFICATION")
        "Commodity Classification of Discrepancy Item."
        self.DISC_DESC_UDV_ID = parse_value(self.schema, column_value_map, "DISC_DESC_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.ITEM_LOT_SER_UDV_ID = parse_value(self.schema, column_value_map, "ITEM_LOT_SER_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.COMP_LOT_SER_UDV_ID = parse_value(self.schema, column_value_map, "COMP_LOT_SER_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.DEFECT_CLASS_UDV_ID = parse_value(self.schema, column_value_map, "DEFECT_CLASS_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.DISP_ACTION_UDV_ID = parse_value(self.schema, column_value_map, "DISP_ACTION_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.CORR_ACTION_UDV_ID = parse_value(self.schema, column_value_map, "CORR_ACTION_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.LRU_PART_NO = parse_value(self.schema, column_value_map, "LRU_PART_NO")
        "Lowest Line Replaceable Unit (LRU) or sub-assembly containing the nonconforming part."
        self.ATA_CHAPTER = parse_value(self.schema, column_value_map, "ATA_CHAPTER")
        "Air Transport Association (ATA) chapter for equipment."
        self.DISTRIBUTION = parse_value(self.schema, column_value_map, "DISTRIBUTION")
        "Actual distribution as per approver/customer instructions."
        self.NEXT_DISC_DESC_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_DISC_DESC_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_ITEM_LOT_SER_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_ITEM_LOT_SER_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_COMP_LOT_SER_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_COMP_LOT_SER_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_DEFECT_CLASS_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_DEFECT_CLASS_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_DISP_ACTION_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_DISP_ACTION_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.NEXT_CORR_ACTION_UDV_ID = parse_value(self.schema, column_value_map, "NEXT_CORR_ACTION_UDV_ID")
        "Unique, system-generated identifier of a given UDV."
        self.LIEN_DISC_STOP_ORDERS = parse_value(self.schema, column_value_map, "LIEN_DISC_STOP_ORDERS")
        "Determines what orders must be set on hold when a discrepancy is created on a unit."
        self.LIEN_DISC_INH_STOP_ORDERS = parse_value(self.schema, column_value_map, "LIEN_DISC_INH_STOP_ORDERS")
        "Determines what open orders must be set on hold when a discrepancy is inherited from an installed unit."
        self.COPY_FROM_DISC_ID = parse_value(self.schema, column_value_map, "COPY_FROM_DISC_ID")
        "From Which Discrepancy ID, current Discrepancy ID is copied."
        self.COPY_FROM_DISC_LINE_NO = parse_value(self.schema, column_value_map, "COPY_FROM_DISC_LINE_NO")
        "From Which Discrepancy Line Number, current DI Line Number is copied."
        self.SPLIT_FROM_DISC_ID = parse_value(self.schema, column_value_map, "SPLIT_FROM_DISC_ID")
        "From Which Discrepancy ID, current Discrepancy ID is split."
        self.SPLIT_FROM_DISC_LINE_NO = parse_value(self.schema, column_value_map, "SPLIT_FROM_DISC_LINE_NO")
        "From Which Discrepancy Line Number, current Line Number is split."
        self.FINAL_DISP_TYPE = parse_value(self.schema, column_value_map, "FINAL_DISP_TYPE")
        "Type or classification of disposition/rework."
        self.FINAL_DISP_DOC_TYPE = parse_value(self.schema, column_value_map, "FINAL_DISP_DOC_TYPE")
        "Type or classification of disposition (rework) document, e.g., Work Order."
        self.FINAL_DISP_DOC_NO = parse_value(self.schema, column_value_map, "FINAL_DISP_DOC_NO")
        "Disposition document number."
        self.FINAL_DISP_DOC_REV = parse_value(self.schema, column_value_map, "FINAL_DISP_DOC_REV")
        "Disposition document revision."
        self.REQUEST_ID = parse_value(self.schema, column_value_map, "REQUEST_ID")
        self.PARENT_DISC_ID = parse_value(self.schema, column_value_map, "PARENT_DISC_ID")
        self.PARENT_DISC_LINE_NO = parse_value(self.schema, column_value_map, "PARENT_DISC_LINE_NO")
        self.COMPLETION_DATE = parse_value(self.schema, column_value_map, "COMPLETION_DATE")
        "Discrepancy Completion Date."
        self.CA_RESP_INFO_OVERRIDE_FLAG = parse_value(self.schema, column_value_map, "CA_RESP_INFO_OVERRIDE_FLAG")
        self.BUYER = parse_value(self.schema, column_value_map, "BUYER")
        self.MATERIAL_ID = parse_value(self.schema, column_value_map, "MATERIAL_ID")

class SFSQA_OWNER_TYPE_DEF:
    schema = {
        "OWNER_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "OWNER_TYPE_DESC": "STRING",
    }
    primary_key_columns = [
        "OWNER_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_SUPPLIER_STYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.OWNER_TYPE = parse_value(self.schema, column_value_map, "OWNER_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.OWNER_TYPE_DESC = parse_value(self.schema, column_value_map, "OWNER_TYPE_DESC")
        self.SFSQA_SUPPLIER_STYPE_FK = []

class SFFND_COMM_LAST_FILTER_CONTEXT:
    schema = {
        "CONTEXT_ID": "STRING",
        "COMM_ID": "STRING",
        "USERID": "STRING",
        "LAST_FILTER": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CONTEXT_ID",
        "COMM_ID",
        "USERID",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_COMM_LAST_FILTER_CONT_F1", ["COMM_ID"], "SFFND_COMM", ["COMM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONTEXT_ID = parse_value(self.schema, column_value_map, "CONTEXT_ID")
        "Value of variable @ContextId. Usually it contains [select source name - select SQL ID]."
        self.COMM_ID = parse_value(self.schema, column_value_map, "COMM_ID")
        "Unique system generated identifier for a given communication record."
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.LAST_FILTER = parse_value(self.schema, column_value_map, "LAST_FILTER")
        "Value of last filter applied on the grid."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_OPER_NOTES_MM_OBJ_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "OBJECT_DAT_COL_ID": "STRING",
        "OBJECT_ID": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "NOTE_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.NOTE_ID = parse_value(self.schema, column_value_map, "NOTE_ID")

class SFQA_CA_AFFECTED_ITEMS:
    schema = {
        "CA_ID": "STRING",
        "ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_AFFECTED_ITEMS_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CA_AFFECTED_ITEMS_FK2", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFSQA_STEP_TYPE_DEF:
    schema = {
        "STEP_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "STEP_TYPE_DESC": "STRING",
    }
    primary_key_columns = [
        "STEP_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_STEP_TYPE_DEF_FK",
    ]
    def __init__(self, column_value_map):
        self.STEP_TYPE = parse_value(self.schema, column_value_map, "STEP_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.STEP_TYPE_DESC = parse_value(self.schema, column_value_map, "STEP_TYPE_DESC")
        self.SFSQA_STEP_TYPE_DEF_FK = []

class SFWID_OPER_DC_FORMULA_VARS:
    schema = {
        "DAT_COL_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "USE_RANGE": "STRING",
        "STEP_KEY": "NUMBER",
        "VARIABLE_NAME": "STRING",
        "VISIBILITY": "STRING",
        "EXECUTION_ORDER": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TEST_VALUE": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "FORMAT": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "DAT_COL_ID",
        "VARIABLE_NAME",
        "VISIBILITY",
        "USE_RANGE",
        "EXECUTION_ORDER",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_DC_EXPRESS_VARS_FK1", ["VARIABLE_NAME","VISIBILITY"], "SFFND_DC_VARIABLE_DEF", ["VARIABLE_NAME","VISIBILITY"]),
        DbForeignKey("SFWID_OPER_DC_EXPRESS_VARS_FK2", ["ORDER_ID","OPER_KEY","STEP_KEY","DAT_COL_ID","USE_RANGE","EXECUTION_ORDER"], "SFWID_OPER_DC_FORMULA_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY","DAT_COL_ID","USE_RANGE","EXECUTION_ORDER"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.USE_RANGE = parse_value(self.schema, column_value_map, "USE_RANGE")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.VARIABLE_NAME = parse_value(self.schema, column_value_map, "VARIABLE_NAME")
        self.VISIBILITY = parse_value(self.schema, column_value_map, "VISIBILITY")
        self.EXECUTION_ORDER = parse_value(self.schema, column_value_map, "EXECUTION_ORDER")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.TEST_VALUE = parse_value(self.schema, column_value_map, "TEST_VALUE")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        self.FORMAT = parse_value(self.schema, column_value_map, "FORMAT")

class SFWID_ORDER_EMBEDDED_CONTROLS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "CONTROL_SEQ_NO": "NUMBER",
        "REF_ID": "STRING",
        "TAG_TYPE": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "BUYOFF_RANKER": "NUMBER",
        "EXEC_RANKER": "NUMBER",
        "STEP_RANKER": "NUMBER",
        "TEXT_TYPE": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "CONTROL_SEQ_NO",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.CONTROL_SEQ_NO = parse_value(self.schema, column_value_map, "CONTROL_SEQ_NO")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.TAG_TYPE = parse_value(self.schema, column_value_map, "TAG_TYPE")
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        self.BUYOFF_RANKER = parse_value(self.schema, column_value_map, "BUYOFF_RANKER")
        self.EXEC_RANKER = parse_value(self.schema, column_value_map, "EXEC_RANKER")
        self.STEP_RANKER = parse_value(self.schema, column_value_map, "STEP_RANKER")
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")

class SFFND_SIGNON_TYPE_DEF:
    schema = {
        "SIGNON_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "SIGNON_TYPE_DESC": "STRING",
    }
    primary_key_columns = [
        "SIGNON_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_USERACTIV_SIGNON_TYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.SIGNON_TYPE = parse_value(self.schema, column_value_map, "SIGNON_TYPE")
        "The type of record, On (sign-on) or OFF (sign-off)."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.SIGNON_TYPE_DESC = parse_value(self.schema, column_value_map, "SIGNON_TYPE_DESC")
        self.SFFND_USERACTIV_SIGNON_TYPE_FK = []

class SFQA_CA_CODE_DEF:
    schema = {
        "CA_CODE_ID": "STRING",
        "CA_CODE": "STRING",
        "CA_CODE_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
    }
    primary_key_columns = [
        "CA_CODE_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_CA_CODE_XREF_FK2",
    ]
    def __init__(self, column_value_map):
        self.CA_CODE_ID = parse_value(self.schema, column_value_map, "CA_CODE_ID")
        self.CA_CODE = parse_value(self.schema, column_value_map, "CA_CODE")
        self.CA_CODE_DESC = parse_value(self.schema, column_value_map, "CA_CODE_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.SFQA_CA_CODE_XREF_FK2 = []

class SFPL_MFG_BOM_REV_LINE_NO:
    schema = {
        "BOM_ID": "STRING",
        "BOM_LINE_ID": "STRING",
        "LINE_NO": "STRING",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
        "TIME_STAMP": "DATE",
        "LINE_DESC": "STRING",
        "STD_ITEM_ID": "STRING",
        "UCF_BOM_LINE_NO_VCH1": "STRING",
        "UCF_BOM_LINE_NO_VCH2": "STRING",
        "UCF_BOM_LINE_NO_VCH3": "STRING",
        "UCF_BOM_LINE_NO_VCH4": "STRING",
        "UCF_BOM_LINE_NO_VCH5": "STRING",
        "UCF_BOM_LINE_NO_VCH6": "STRING",
        "UCF_BOM_LINE_NO_VCH7": "STRING",
        "UCF_BOM_LINE_NO_VCH8": "STRING",
        "UCF_BOM_LINE_NO_VCH9": "STRING",
        "UCF_BOM_LINE_NO_VCH10": "STRING",
        "UCF_BOM_LINE_NO_VCH11": "STRING",
        "UCF_BOM_LINE_NO_VCH12": "STRING",
        "UCF_BOM_LINE_NO_VCH13": "STRING",
        "UCF_BOM_LINE_NO_VCH14": "STRING",
        "UCF_BOM_LINE_NO_VCH15": "STRING",
        "UCF_BOM_LINE_NO_NUM1": "NUMBER",
        "UCF_BOM_LINE_NO_NUM2": "NUMBER",
        "UCF_BOM_LINE_NO_NUM3": "NUMBER",
        "UCF_BOM_LINE_NO_NUM4": "NUMBER",
        "UCF_BOM_LINE_NO_NUM5": "NUMBER",
        "UCF_BOM_LINE_NO_DATE1": "STRING",
        "UCF_BOM_LINE_NO_DATE2": "STRING",
        "UCF_BOM_LINE_NO_DATE3": "STRING",
        "UCF_BOM_LINE_NO_DATE4": "STRING",
        "UCF_BOM_LINE_NO_DATE5": "STRING",
        "UCF_BOM_LINE_NO_FLAG1": "STRING",
        "UCF_BOM_LINE_NO_FLAG2": "STRING",
        "UCF_BOM_LINE_NO_FLAG3": "STRING",
        "UCF_BOM_LINE_NO_FLAG4": "STRING",
        "UCF_BOM_LINE_NO_FLAG5": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
        "BOM_LINE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_LINE_STD_ITEM_FK", ["STD_ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_MFG_BOM_LINE_BOM_REV_FK", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
    ]
    refs = [
        "SFPL_MFG_BOM_COMP_PARENT_FK",
        "SFPL_MFG_BOM_MM_OBJECT_FK3",
        "SFPL_PLAN_BOM_LINES_FK3",
        "SFPL_STEP_BOM_LINES_FK3",
        "SFPL_MFG_BOM_TOOL_FK7",
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Corresponding BOM for which BOM Component is added"
        self.BOM_LINE_ID = parse_value(self.schema, column_value_map, "BOM_LINE_ID")
        "Reference of BOM Line of the BOM Component"
        self.LINE_NO = parse_value(self.schema, column_value_map, "LINE_NO")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LINE_DESC = parse_value(self.schema, column_value_map, "LINE_DESC")
        self.STD_ITEM_ID = parse_value(self.schema, column_value_map, "STD_ITEM_ID")
        "Item Id of standard part associated with BOM Line"
        self.UCF_BOM_LINE_NO_VCH1 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH2 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH3 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH4 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH5 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH6 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH7 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH8 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH9 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH10 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH11 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH12 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH13 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH14 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_VCH15 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_BOM_LINE_NO_NUM1 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_BOM_LINE_NO_NUM2 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_BOM_LINE_NO_NUM3 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_BOM_LINE_NO_NUM4 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_BOM_LINE_NO_NUM5 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_BOM_LINE_NO_DATE1 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_BOM_LINE_NO_DATE2 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_BOM_LINE_NO_DATE3 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_BOM_LINE_NO_DATE4 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_BOM_LINE_NO_DATE5 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_BOM_LINE_NO_FLAG1 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_BOM_LINE_NO_FLAG2 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_BOM_LINE_NO_FLAG3 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_BOM_LINE_NO_FLAG4 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_BOM_LINE_NO_FLAG5 = parse_value(self.schema, column_value_map, "UCF_BOM_LINE_NO_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.SFPL_MFG_BOM_COMP_PARENT_FK = []
        self.SFPL_MFG_BOM_MM_OBJECT_FK3 = []
        self.SFPL_PLAN_BOM_LINES_FK3 = []
        self.SFPL_STEP_BOM_LINES_FK3 = []
        self.SFPL_MFG_BOM_TOOL_FK7 = []

class SFWID_VARIABLES:
    schema = {
        "ITEM_ID": "STRING",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
        "VARIABLES_ID": "STRING",
        "VARIABLE_NAME": "STRING",
        "VISIBILITY": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "DAT_COL_ID": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "CURRENT_VALUE": "STRING",
        "OWP_ID": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "LOT_NO",
        "SERIAL_NO",
        "VARIABLE_NAME",
        "VISIBILITY",
        "ORDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_VARIABLES_FK1", ["VARIABLE_NAME","VISIBILITY"], "SFFND_DC_VARIABLE_DEF", ["VARIABLE_NAME","VISIBILITY"]),
        DbForeignKey("SFWID_VARIABLES_FK2", ["ORDER_ID","OPER_KEY","STEP_KEY","DAT_COL_ID","LOT_ID","SERIAL_ID"], "SFWID_SERIAL_OPER_DAT_COL", ["ORDER_ID","OPER_KEY","STEP_KEY","DAT_COL_ID","LOT_ID","SERIAL_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        self.VARIABLES_ID = parse_value(self.schema, column_value_map, "VARIABLES_ID")
        self.VARIABLE_NAME = parse_value(self.schema, column_value_map, "VARIABLE_NAME")
        self.VISIBILITY = parse_value(self.schema, column_value_map, "VISIBILITY")
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.CURRENT_VALUE = parse_value(self.schema, column_value_map, "CURRENT_VALUE")
        self.OWP_ID = parse_value(self.schema, column_value_map, "OWP_ID")

class SFWID_GROUP_JOB_SERIAL:
    schema = {
        "GROUP_JOB_NO": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "SERIAL_ID": "STRING",
        "LOT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "GROUP_JOB_NO",
        "ORDER_ID",
        "OPER_KEY",
        "STEP_KEY",
        "SERIAL_ID",
        "LOT_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_GROUP_JOB_SERIAL_FK2", ["ORDER_ID","LOT_ID","SERIAL_ID"], "SFWID_SERIAL_DESC", ["ORDER_ID","LOT_ID","SERIAL_ID"]),
        DbForeignKey("SFWID_GROUP_JOB_SERIAL_FK3", ["GROUP_JOB_NO"], "SFWID_GROUP_JOB", ["GROUP_JOB_NO"]),
        DbForeignKey("SFWID_GROUP_JOB_SERIAL_FK1", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.GROUP_JOB_NO = parse_value(self.schema, column_value_map, "GROUP_JOB_NO")
        "Unique number representing the batched standard operation."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, identifier of the associated work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Key column value of associated operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Key column value of associated step."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Key column value of associated serial."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Key column value of associated lot."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_ORDER_OWP_XREF:
    schema = {
        "OWP_ID": "STRING",
        "ORDER_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "OWP_ID",
        "ORDER_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_OWP_XREF_FK1", ["OWP_ID"], "SFWID_OWP_DEF", ["OWP_ID"]),
        DbForeignKey("SFWID_ORDER_OWP_XREF_FK2", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OWP_ID = parse_value(self.schema, column_value_map, "OWP_ID")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFSQA_CHECKLIST_EXECUTE_RULES:
    schema = {
        "INSP_PLAN_ID": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "INSP_STEP_ID": "STRING",
        "INSP_ITEM_ID": "STRING",
        "PO_CLAUSE": "STRING",
        "QUESTION_ACTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "PO_CLAUSE_DESC": "STRING",
    }
    primary_key_columns = [
        "INSP_PLAN_ID",
        "INSP_PLAN_REV",
        "INSP_STEP_ID",
        "INSP_ITEM_ID",
        "PO_CLAUSE",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_CHECKLIST_EXEC_RULES_FK1", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID","INSP_ITEM_ID"], "SFSQA_CHECKLIST_INSP_ITEM", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID","INSP_ITEM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.PO_CLAUSE = parse_value(self.schema, column_value_map, "PO_CLAUSE")
        self.QUESTION_ACTION = parse_value(self.schema, column_value_map, "QUESTION_ACTION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.PO_CLAUSE_DESC = parse_value(self.schema, column_value_map, "PO_CLAUSE_DESC")

class SFQA_DISC_ITEM_MM_OBJ_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH1": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH2": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH3": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH4": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH5": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_NUM1": "NUMBER",
        "UCF_DISC_ITEM_MM_OBJ_NUM2": "NUMBER",
        "UCF_DISC_ITEM_MM_OBJ_NUM3": "NUMBER",
        "UCF_DISC_ITEM_MM_OBJ_DATE1": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_DATE2": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_FLAG1": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_FLAG2": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_FLAG3": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH255_1": "STRING",
        "UCF_DISC_ITEM_MM_OBJ_VCH255_2": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "RTF_LINK_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "Identifier of the discrepancy, including line number."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "Identifier of the discrepancy, including line number."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_DISC_ITEM_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_DISC_ITEM_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_DISC_ITEM_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_DISC_ITEM_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_DISC_ITEM_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_DISC_ITEM_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_DISC_ITEM_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_ITEM_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_ITEM_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_DISC_ITEM_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_DISC_ITEM_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."

class SFPL_MBOM_NOTIFICATION:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "BOM_NO": "STRING",
        "MFG_BOM_CHG": "STRING",
        "PROPAGATION_ACTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "CURRENT_MFG_BOM_CHG": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_VERSION",
        "PLAN_REVISION",
        "PLAN_ALTERATIONS",
        "BOM_NO",
        "MFG_BOM_CHG",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MBOM_NOTIFICATION_FK1", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        self.BOM_NO = parse_value(self.schema, column_value_map, "BOM_NO")
        self.MFG_BOM_CHG = parse_value(self.schema, column_value_map, "MFG_BOM_CHG")
        self.PROPAGATION_ACTION = parse_value(self.schema, column_value_map, "PROPAGATION_ACTION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.CURRENT_MFG_BOM_CHG = parse_value(self.schema, column_value_map, "CURRENT_MFG_BOM_CHG")

class SFWID_CUST_OPER_BUYOFFS:
    schema = {
        "ORDER_ID": "STRING",
        "OPER_NO": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "BUYOFF_ID": "STRING",
        "STEP_NO": "STRING",
        "BUYOFF_TYPE": "STRING",
        "BUYOFF_CERT": "STRING",
        "BUYOFF_TITLE": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "OPER_NO",
        "OPER_KEY",
        "STEP_KEY",
        "BUYOFF_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.BUYOFF_ID = parse_value(self.schema, column_value_map, "BUYOFF_ID")
        "Unique, system-generated identifier of the buyoff."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.BUYOFF_TYPE = parse_value(self.schema, column_value_map, "BUYOFF_TYPE")
        "Type or classification of buyoff, e.g., MFG, MFG2, QA."
        self.BUYOFF_CERT = parse_value(self.schema, column_value_map, "BUYOFF_CERT")
        "The required certification for the given buyoff."
        self.BUYOFF_TITLE = parse_value(self.schema, column_value_map, "BUYOFF_TITLE")

class SFSQA_PO_HDR:
    schema = {
        "PO_ID": "STRING",
        "PO_NUMBER": "STRING",
        "PO_RELEASE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "SUPPLIER_CODE": "STRING",
        "PO_RELEASED_DATE": "STRING",
        "UCF_POHDR_VCH1": "STRING",
        "UCF_POHDR_VCH2": "STRING",
        "UCF_POHDR_VCH3": "STRING",
        "UCF_POHDR_VCH4": "STRING",
        "UCF_POHDR_VCH5": "STRING",
        "UCF_POHDR_VCH6": "STRING",
        "UCF_POHDR_VCH7": "STRING",
        "UCF_POHDR_VCH8": "STRING",
        "UCF_POHDR_VCH9": "STRING",
        "UCF_POHDR_VCH10": "STRING",
        "UCF_POHDR_VCH11": "STRING",
        "UCF_POHDR_VCH12": "STRING",
        "UCF_POHDR_VCH13": "STRING",
        "UCF_POHDR_VCH14": "STRING",
        "UCF_POHDR_VCH15": "STRING",
        "UCF_POHDR_NUM1": "NUMBER",
        "UCF_POHDR_NUM2": "NUMBER",
        "UCF_POHDR_NUM3": "NUMBER",
        "UCF_POHDR_NUM4": "NUMBER",
        "UCF_POHDR_NUM5": "NUMBER",
        "UCF_POHDR_DATE1": "STRING",
        "UCF_POHDR_DATE2": "STRING",
        "UCF_POHDR_DATE3": "STRING",
        "UCF_POHDR_DATE4": "STRING",
        "UCF_POHDR_DATE5": "STRING",
        "UCF_POHDR_FLAG1": "STRING",
        "UCF_POHDR_FLAG2": "STRING",
        "UCF_POHDR_FLAG3": "STRING",
        "UCF_POHDR_FLAG4": "STRING",
        "UCF_POHDR_FLAG5": "STRING",
        "UCF_POHDR_VCH255_1": "STRING",
        "UCF_POHDR_VCH255_2": "STRING",
        "UCF_POHDR_VCH255_3": "STRING",
        "UCF_POHDR_VCH4000_1": "STRING",
        "UCF_POHDR_VCH4000_2": "STRING",
        "PO_REVISION": "STRING",
    }
    primary_key_columns = [
        "PO_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_PO_HDR_FK1", ["SUPPLIER_CODE"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
    ]
    refs = [
        "SFSQA_PO_LINE_FK1",
    ]
    def __init__(self, column_value_map):
        self.PO_ID = parse_value(self.schema, column_value_map, "PO_ID")
        "System generated unique identifier for a given purchase order."
        self.PO_NUMBER = parse_value(self.schema, column_value_map, "PO_NUMBER")
        self.PO_RELEASE = parse_value(self.schema, column_value_map, "PO_RELEASE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        "User definable unique identifier for a given supplier."
        self.PO_RELEASED_DATE = parse_value(self.schema, column_value_map, "PO_RELEASED_DATE")
        self.UCF_POHDR_VCH1 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH1")
        self.UCF_POHDR_VCH2 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH2")
        self.UCF_POHDR_VCH3 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH3")
        self.UCF_POHDR_VCH4 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH4")
        self.UCF_POHDR_VCH5 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH5")
        self.UCF_POHDR_VCH6 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH6")
        self.UCF_POHDR_VCH7 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH7")
        self.UCF_POHDR_VCH8 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH8")
        self.UCF_POHDR_VCH9 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH9")
        self.UCF_POHDR_VCH10 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH10")
        self.UCF_POHDR_VCH11 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH11")
        self.UCF_POHDR_VCH12 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH12")
        self.UCF_POHDR_VCH13 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH13")
        self.UCF_POHDR_VCH14 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH14")
        self.UCF_POHDR_VCH15 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH15")
        self.UCF_POHDR_NUM1 = parse_value(self.schema, column_value_map, "UCF_POHDR_NUM1")
        self.UCF_POHDR_NUM2 = parse_value(self.schema, column_value_map, "UCF_POHDR_NUM2")
        self.UCF_POHDR_NUM3 = parse_value(self.schema, column_value_map, "UCF_POHDR_NUM3")
        self.UCF_POHDR_NUM4 = parse_value(self.schema, column_value_map, "UCF_POHDR_NUM4")
        self.UCF_POHDR_NUM5 = parse_value(self.schema, column_value_map, "UCF_POHDR_NUM5")
        self.UCF_POHDR_DATE1 = parse_value(self.schema, column_value_map, "UCF_POHDR_DATE1")
        self.UCF_POHDR_DATE2 = parse_value(self.schema, column_value_map, "UCF_POHDR_DATE2")
        self.UCF_POHDR_DATE3 = parse_value(self.schema, column_value_map, "UCF_POHDR_DATE3")
        self.UCF_POHDR_DATE4 = parse_value(self.schema, column_value_map, "UCF_POHDR_DATE4")
        self.UCF_POHDR_DATE5 = parse_value(self.schema, column_value_map, "UCF_POHDR_DATE5")
        self.UCF_POHDR_FLAG1 = parse_value(self.schema, column_value_map, "UCF_POHDR_FLAG1")
        self.UCF_POHDR_FLAG2 = parse_value(self.schema, column_value_map, "UCF_POHDR_FLAG2")
        self.UCF_POHDR_FLAG3 = parse_value(self.schema, column_value_map, "UCF_POHDR_FLAG3")
        self.UCF_POHDR_FLAG4 = parse_value(self.schema, column_value_map, "UCF_POHDR_FLAG4")
        self.UCF_POHDR_FLAG5 = parse_value(self.schema, column_value_map, "UCF_POHDR_FLAG5")
        self.UCF_POHDR_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH255_1")
        self.UCF_POHDR_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH255_2")
        self.UCF_POHDR_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH255_3")
        self.UCF_POHDR_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH4000_1")
        self.UCF_POHDR_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_POHDR_VCH4000_2")
        self.PO_REVISION = parse_value(self.schema, column_value_map, "PO_REVISION")
        self.SFSQA_PO_LINE_FK1 = []

class SFFND_LTA_ACCOUNT_DEF:
    schema = {
        "ACCOUNT_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "LTA_SEND_FLAG": "STRING",
        "ACCOUNT_DESC": "STRING",
    }
    primary_key_columns = [
        "ACCOUNT_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_USER_ACTIVITY_ACCT_FK",
    ]
    def __init__(self, column_value_map):
        self.ACCOUNT_NAME = parse_value(self.schema, column_value_map, "ACCOUNT_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.LTA_SEND_FLAG = parse_value(self.schema, column_value_map, "LTA_SEND_FLAG")
        self.ACCOUNT_DESC = parse_value(self.schema, column_value_map, "ACCOUNT_DESC")
        self.SFFND_USER_ACTIVITY_ACCT_FK = []

class SFPL_MFG_BOM_REF_DES_TRANSFORM:
    schema = {
        "REF_DES_TRANSFORMATION_ID": "STRING",
        "BOM_ID": "STRING",
        "IMPORTED_BOM_COMP_ID": "STRING",
        "IMPORTED_REF_DES": "STRING",
        "TRANSFORMED_BOM_COMP_ID": "STRING",
        "TRANSFORMED_REF_DES": "STRING",
        "TRANSFORMATION_STATUS": "STRING",
        "NOTES": "STRING",
        "TRANSFORMED_ON": "STRING",
        "TRANSFORMED_BY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "REF_DES_TRANSFORMATION_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_REF_DES_TRANS_FK1", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_DES_TRANSFORMATION_ID = parse_value(self.schema, column_value_map, "REF_DES_TRANSFORMATION_ID")
        "Unique system generated id for Reference Designator transformation."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        self.IMPORTED_BOM_COMP_ID = parse_value(self.schema, column_value_map, "IMPORTED_BOM_COMP_ID")
        "BOM_COMP_ID of Imported record. NULL in case of Transformation option ADD."
        self.IMPORTED_REF_DES = parse_value(self.schema, column_value_map, "IMPORTED_REF_DES")
        "Reference Designator of Imported record."
        self.TRANSFORMED_BOM_COMP_ID = parse_value(self.schema, column_value_map, "TRANSFORMED_BOM_COMP_ID")
        "BOM_COMP_ID of Transformed record. NULL in case of Transformation option DELETE."
        self.TRANSFORMED_REF_DES = parse_value(self.schema, column_value_map, "TRANSFORMED_REF_DES")
        "Reference Designator of Transformed record."
        self.TRANSFORMATION_STATUS = parse_value(self.schema, column_value_map, "TRANSFORMATION_STATUS")
        "Transformation Status APPROVED or UNAPPROVED."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Notes provided during transformation."
        self.TRANSFORMED_ON = parse_value(self.schema, column_value_map, "TRANSFORMED_ON")
        "The date and time the record was last transformed."
        self.TRANSFORMED_BY = parse_value(self.schema, column_value_map, "TRANSFORMED_BY")
        "Last user who transformed the record."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_LANGUAGE_DATA:
    schema = {
        "LANGUAGE_CODE": "STRING",
        "MO_DATA": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "LANGUAGE_CODE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_LANGUAGE_DATA_FK1", ["LANGUAGE_CODE"], "SFFND_LANGUAGE", ["LANGUAGE_CODE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.LANGUAGE_CODE = parse_value(self.schema, column_value_map, "LANGUAGE_CODE")
        "Language code as per ISO639 standard."
        self.MO_DATA = parse_value(self.schema, column_value_map, "MO_DATA")
        "MO object for each language defined in Solumina."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_SYMPTOM_TYPE_DEF:
    schema = {
        "PROCESS_TYPE": "STRING",
        "SYMPTOM_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "SYMPTOM_DESC": "STRING",
        "UCF_SYMPTOM_TYPE_VCH1": "STRING",
        "UCF_SYMPTOM_TYPE_FLAG1": "STRING",
        "UCF_SYMPTOM_TYPE_FLAG2": "STRING",
        "APPROVED_FLAG": "STRING",
        "UCF_SYMPTOM_TYPE_VCH2": "STRING",
        "UCF_SYMPTOM_TYPE_VCH3": "STRING",
        "UCF_SYMPTOM_TYPE_VCH4": "STRING",
        "UCF_SYMPTOM_TYPE_VCH5": "STRING",
        "UCF_SYMPTOM_TYPE_VCH6": "STRING",
        "UCF_SYMPTOM_TYPE_VCH7": "STRING",
        "UCF_SYMPTOM_TYPE_VCH8": "STRING",
        "UCF_SYMPTOM_TYPE_VCH9": "STRING",
        "UCF_SYMPTOM_TYPE_VCH10": "STRING",
        "UCF_SYMPTOM_TYPE_VCH11": "STRING",
        "UCF_SYMPTOM_TYPE_VCH12": "STRING",
        "UCF_SYMPTOM_TYPE_VCH13": "STRING",
        "UCF_SYMPTOM_TYPE_VCH14": "STRING",
        "UCF_SYMPTOM_TYPE_VCH15": "STRING",
        "UCF_SYMPTOM_TYPE_NUM1": "NUMBER",
        "UCF_SYMPTOM_TYPE_NUM2": "NUMBER",
        "UCF_SYMPTOM_TYPE_NUM3": "NUMBER",
        "UCF_SYMPTOM_TYPE_NUM4": "NUMBER",
        "UCF_SYMPTOM_TYPE_NUM5": "NUMBER",
        "UCF_SYMPTOM_TYPE_DATE1": "STRING",
        "UCF_SYMPTOM_TYPE_DATE2": "STRING",
        "UCF_SYMPTOM_TYPE_DATE3": "STRING",
        "UCF_SYMPTOM_TYPE_DATE4": "STRING",
        "UCF_SYMPTOM_TYPE_DATE5": "STRING",
        "UCF_SYMPTOM_TYPE_FLAG3": "STRING",
        "UCF_SYMPTOM_TYPE_FLAG4": "STRING",
        "UCF_SYMPTOM_TYPE_FLAG5": "STRING",
        "UCF_SYMPTOM_TYPE_VCH255_1": "STRING",
        "UCF_SYMPTOM_TYPE_VCH255_2": "STRING",
        "UCF_SYMPTOM_TYPE_VCH255_3": "STRING",
        "UCF_SYMPTOM_TYPE_VCH4000_1": "STRING",
        "UCF_SYMPTOM_TYPE_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "PROCESS_TYPE",
        "SYMPTOM_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_SYMPTOM_PROCESS_FK", ["PROCESS_TYPE"], "SFFND_PROCESS_TYPE_DEF", ["PROCESS_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        "Type or classification of the associated manufacturing process."
        self.SYMPTOM_TYPE = parse_value(self.schema, column_value_map, "SYMPTOM_TYPE")
        "Type or classification of symptom associated with a discrepancy."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.SYMPTOM_DESC = parse_value(self.schema, column_value_map, "SYMPTOM_DESC")
        "Description of a specific symptom type."
        self.UCF_SYMPTOM_TYPE_VCH1 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SYMPTOM_TYPE_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.APPROVED_FLAG = parse_value(self.schema, column_value_map, "APPROVED_FLAG")
        self.UCF_SYMPTOM_TYPE_VCH2 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_VCH3 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_VCH4 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_VCH5 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_VCH6 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_VCH7 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_VCH8 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_VCH9 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_VCH10 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_VCH11 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_VCH12 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_VCH13 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_VCH14 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_VCH15 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_SYMPTOM_TYPE_NUM1 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_SYMPTOM_TYPE_NUM2 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_SYMPTOM_TYPE_NUM3 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_SYMPTOM_TYPE_NUM4 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_SYMPTOM_TYPE_NUM5 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_SYMPTOM_TYPE_DATE1 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SYMPTOM_TYPE_DATE2 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SYMPTOM_TYPE_DATE3 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_SYMPTOM_TYPE_DATE4 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_SYMPTOM_TYPE_DATE5 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_SYMPTOM_TYPE_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SYMPTOM_TYPE_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SYMPTOM_TYPE_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_SYMPTOM_TYPE_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SYMPTOM_TYPE_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SYMPTOM_TYPE_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SYMPTOM_TYPE_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_SYMPTOM_TYPE_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SYMPTOM_TYPE_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."

class SFQA_DISC_ITEM_ATTACH_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "OBJECT_ID": "STRING",
        "NOTES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of the \"master\" object that contains the embedded/linked objects."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        "Additional information about an attachment."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_CA_AFFECTED_ITEMS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFCORE_CONNECTION_DETAILS:
    schema = {
        "CONNECTION_ID": "STRING",
        "LICENSE_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "CONNECTION_ID",
        "LICENSE_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_CONN_DETLS_LIC_TYPE_FK", ["LICENSE_TYPE"], "SFCORE_LICENSE_TYPE_DEF", ["LICENSE_TYPE"]),
        DbForeignKey("SFCORE_CONN_DETLS_CONN_FK", ["CONNECTION_ID"], "SFCORE_CONNECTION_DESC", ["CONNECTION_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONNECTION_ID = parse_value(self.schema, column_value_map, "CONNECTION_ID")
        "Unique system generated identifier for a given application connection."
        self.LICENSE_TYPE = parse_value(self.schema, column_value_map, "LICENSE_TYPE")
        "The type of license."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class OAUTH2_REGISTERED_CLIENT:
    schema = {
        "ID": "STRING",
        "CLIENT_ID": "STRING",
        "CLIENT_ID_ISSUED_AT": "DATE",
        "CLIENT_SECRET": "STRING",
        "CLIENT_SECRET_EXPIRES_AT": "STRING",
        "CLIENT_NAME": "STRING",
        "CLIENT_AUTHENTICATION_METHODS": "STRING",
        "AUTHORIZATION_GRANT_TYPES": "STRING",
        "REDIRECT_URIS": "STRING",
        "SCOPES": "STRING",
        "CLIENT_SETTINGS": "STRING",
        "TOKEN_SETTINGS": "STRING",
    }
    primary_key_columns = [
        "ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ID = parse_value(self.schema, column_value_map, "ID")
        self.CLIENT_ID = parse_value(self.schema, column_value_map, "CLIENT_ID")
        self.CLIENT_ID_ISSUED_AT = parse_value(self.schema, column_value_map, "CLIENT_ID_ISSUED_AT")
        self.CLIENT_SECRET = parse_value(self.schema, column_value_map, "CLIENT_SECRET")
        self.CLIENT_SECRET_EXPIRES_AT = parse_value(self.schema, column_value_map, "CLIENT_SECRET_EXPIRES_AT")
        self.CLIENT_NAME = parse_value(self.schema, column_value_map, "CLIENT_NAME")
        self.CLIENT_AUTHENTICATION_METHODS = parse_value(self.schema, column_value_map, "CLIENT_AUTHENTICATION_METHODS")
        self.AUTHORIZATION_GRANT_TYPES = parse_value(self.schema, column_value_map, "AUTHORIZATION_GRANT_TYPES")
        self.REDIRECT_URIS = parse_value(self.schema, column_value_map, "REDIRECT_URIS")
        self.SCOPES = parse_value(self.schema, column_value_map, "SCOPES")
        self.CLIENT_SETTINGS = parse_value(self.schema, column_value_map, "CLIENT_SETTINGS")
        self.TOKEN_SETTINGS = parse_value(self.schema, column_value_map, "TOKEN_SETTINGS")

class SFLTA_JOB_TRANS_XREF:
    schema = {
        "JOB_ID": "STRING",
        "TRANSACTION_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ENABLED": "STRING",
    }
    primary_key_columns = [
        "JOB_ID",
        "TRANSACTION_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFLTA_JOB_TRANS_FK", ["JOB_ID"], "SFLTA_JOB_DEF", ["JOB_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.JOB_ID = parse_value(self.schema, column_value_map, "JOB_ID")
        self.TRANSACTION_ID = parse_value(self.schema, column_value_map, "TRANSACTION_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.ENABLED = parse_value(self.schema, column_value_map, "ENABLED")

class SFSQA_INSP_ORDER_LIENS:
    schema = {
        "LIEN_ID": "STRING",
        "INSP_ORDER_ID": "STRING",
        "LIEN_STATUS": "STRING",
        "PART_NO": "STRING",
        "SERIAL_NO": "STRING",
        "LIEN_START_DATE": "DATE",
        "LOT_NO": "STRING",
        "LIEN_END_DATE": "STRING",
        "LIEN_WO_PERSIST_AUTH_FLAG": "STRING",
        "AUTHORIZATION_NOTES": "STRING",
        "LIEN_PERSIST_UPTO_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "LIEN_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_ORDER_LIENS_FK1", ["INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFSQA_INSP_ORDER_LIENS_FK2", ["PART_NO","LOT_NO","SERIAL_NO"], "SFWID_AS_WORKED_ITEM", ["PART_NO","LOT_NO","SERIAL_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.LIEN_ID = parse_value(self.schema, column_value_map, "LIEN_ID")
        "Unique identifier of the Lien."
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        "Unique identifier for inspection order for which lien is created."
        self.LIEN_STATUS = parse_value(self.schema, column_value_map, "LIEN_STATUS")
        "Status of the inspection order lien."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.LIEN_START_DATE = parse_value(self.schema, column_value_map, "LIEN_START_DATE")
        "Timestamp on which the inspection order lien is created for the unit."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.LIEN_END_DATE = parse_value(self.schema, column_value_map, "LIEN_END_DATE")
        "Timestamp on which the inspection order lien is closed, or cancelled."
        self.LIEN_WO_PERSIST_AUTH_FLAG = parse_value(self.schema, column_value_map, "LIEN_WO_PERSIST_AUTH_FLAG")
        "Indicates whether an authorization for the lien must be persisted."
        self.AUTHORIZATION_NOTES = parse_value(self.schema, column_value_map, "AUTHORIZATION_NOTES")
        "Authorization Notes."
        self.LIEN_PERSIST_UPTO_ITEM_ID = parse_value(self.schema, column_value_map, "LIEN_PERSIST_UPTO_ITEM_ID")
        "Indicates the item id of the higher level unit that must be held when the discrepancy lien is inherited."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_CA_RESP_LDC:
    schema = {
        "CA_RESP_LDC_ID": "STRING",
        "CA_ID": "STRING",
        "UPDT_USERID": "STRING",
        "RESP_LOCATION_ID": "STRING",
        "TIME_STAMP": "DATE",
        "RESP_DEPARTMENT_ID": "STRING",
        "RESP_CENTER_ID": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_RESP_LDC_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_RESP_LDC_FK3", ["RESP_LOCATION_ID","RESP_DEPARTMENT_ID"], "SFFND_WORK_DEPT_DEF", ["LOCATION_ID","DEPARTMENT_ID"]),
        DbForeignKey("SFQA_CA_RESP_LDC_FK4", ["RESP_LOCATION_ID","RESP_DEPARTMENT_ID","RESP_CENTER_ID"], "SFFND_WORK_CENTER_DEF", ["LOCATION_ID","DEPARTMENT_ID","CENTER_ID"]),
        DbForeignKey("SFQA_CA_RESP_LDC_FK2", ["RESP_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFQA_CA_RESP_LDC_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_RESP_LDC_ID = parse_value(self.schema, column_value_map, "CA_RESP_LDC_ID")
        "System-generated identifier for Primary Key."
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "Unique identifier of a given Corrective Action."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.RESP_LOCATION_ID = parse_value(self.schema, column_value_map, "RESP_LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.RESP_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "RESP_DEPARTMENT_ID")
        "Unique, system-generated identifier of the given Work Department."
        self.RESP_CENTER_ID = parse_value(self.schema, column_value_map, "RESP_CENTER_ID")
        "Unique, system-generated identifier of the given Work Center."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_RISK_DETECTABLE_RAT_DEF:
    schema = {
        "RISK_DETECTABILITY_RAT_ID": "STRING",
        "RISK_DETECTABILITY_RAT_DESC": "STRING",
        "RISK_DETECTABILITY_RAT_SCORE": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "RISK_DETECTABILITY_RAT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_CA_REQUEST_FK7",
        "SFQA_CA_DESC_RISK_DETECTABL_FK",
    ]
    def __init__(self, column_value_map):
        self.RISK_DETECTABILITY_RAT_ID = parse_value(self.schema, column_value_map, "RISK_DETECTABILITY_RAT_ID")
        self.RISK_DETECTABILITY_RAT_DESC = parse_value(self.schema, column_value_map, "RISK_DETECTABILITY_RAT_DESC")
        self.RISK_DETECTABILITY_RAT_SCORE = parse_value(self.schema, column_value_map, "RISK_DETECTABILITY_RAT_SCORE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFQA_CA_REQUEST_FK7 = []
        self.SFQA_CA_DESC_RISK_DETECTABL_FK = []

class SFWID_PARTS_SERIALS_LOTS:
    schema = {
        "PART_NO": "STRING",
        "SERIAL_NO": "STRING",
        "LOT_NO": "STRING",
        "ORDER_ID": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "ITEM_ID": "STRING",
        "SERIAL_STATUS": "STRING",
        "SERIAL_HOLD_STATUS": "STRING",
    }
    primary_key_columns = [
        "PART_NO",
        "SERIAL_NO",
        "LOT_NO",
        "ORDER_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the associated lot number."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of the item/part to be made upon the work order."
        self.SERIAL_STATUS = parse_value(self.schema, column_value_map, "SERIAL_STATUS")
        "Status of the given serial number, e.g., COMPLETE, SCRAP"
        self.SERIAL_HOLD_STATUS = parse_value(self.schema, column_value_map, "SERIAL_HOLD_STATUS")
        "Status of the hold on the given serial number."

class SFCORE_MM_EXT_OBJECT_TYPES:
    schema = {
        "FILE_EXTENSION": "STRING",
        "OBJECT_TYPE": "STRING",
    }
    primary_key_columns = [
        "FILE_EXTENSION",
        "OBJECT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_MM_EXT_OBJ_TYPES_FK", ["OBJECT_TYPE"], "SFCORE_OBJECT_TYPE_DEF", ["OBJECT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.FILE_EXTENSION = parse_value(self.schema, column_value_map, "FILE_EXTENSION")
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")

class SFCORE_GUI_GRAPHICS:
    schema = {
        "IMAGE_ID": "STRING",
        "IMAGE_ID_DISPL": "STRING",
        "STYPE": "STRING",
        "CLIENT_TYPE": "STRING",
        "SOURCE_FILE_NAME": "STRING",
        "DESCRIPTION": "STRING",
        "IMAGE_FORMAT": "STRING",
        "IMAGE_DATA": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "IMAGE_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_GUI_GRAPHICS_STYPE_FK", ["STYPE"], "SFCORE_MODULES", ["GROUP_NAME"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.IMAGE_ID = parse_value(self.schema, column_value_map, "IMAGE_ID")
        self.IMAGE_ID_DISPL = parse_value(self.schema, column_value_map, "IMAGE_ID_DISPL")
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")
        "name of the group"
        self.CLIENT_TYPE = parse_value(self.schema, column_value_map, "CLIENT_TYPE")
        self.SOURCE_FILE_NAME = parse_value(self.schema, column_value_map, "SOURCE_FILE_NAME")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.IMAGE_FORMAT = parse_value(self.schema, column_value_map, "IMAGE_FORMAT")
        self.IMAGE_DATA = parse_value(self.schema, column_value_map, "IMAGE_DATA")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFPL_AFFECTED_OBJECTS:
    schema = {
        "AFFECTED_OBJECT_ID": "STRING",
        "CHANGE_REQUEST_ID": "STRING",
        "AFFECTED_OBJECT_TYPE": "STRING",
        "ITEM_ID": "STRING",
        "BOM_ID": "STRING",
        "PLAN_ID": "STRING",
        "OBJECT_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "UPDT_USERID": "STRING",
        "INSP_PLAN_ID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "INSP_ITEM_ID": "STRING",
        "DISP_ON_ORDER": "STRING",
        "DISP_WORK_IN_PROCESS": "STRING",
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "DISP_FINISHED": "STRING",
        "REF1": "STRING",
        "REF2": "STRING",
        "REF3": "STRING",
        "REF4": "STRING",
        "REF5": "STRING",
        "REF6": "NUMBER",
    }
    primary_key_columns = [
        "AFFECTED_OBJECT_ID",
        "CHANGE_REQUEST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_AFFECTED_OBJECTS_FK8", ["DISP_ON_ORDER"], "SFPL_ENG_CHANGE_PART_DISP", ["PART_DISP_TYPE"]),
        DbForeignKey("SFPL_AFFECTED_OBJECTS_FK6", ["INSP_PLAN_ID","INSP_PLAN_REV"], "SFSQA_INSP_PLAN_DESC", ["INSP_PLAN_ID","INSP_PLAN_REV"]),
        DbForeignKey("SFPL_AFFECTED_OBJECTS_FK9", ["DISP_WORK_IN_PROCESS"], "SFPL_ENG_CHANGE_PART_DISP", ["PART_DISP_TYPE"]),
        DbForeignKey("SFPL_AFFECTED_OBJECTS_FK1", ["CHANGE_REQUEST_ID"], "SFPL_CHANGE_REQUEST", ["CHANGE_REQUEST_ID"]),
        DbForeignKey("SFPL_AFFECTED_OBJECTS_FK5", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"], "SFPL_PLAN_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS"]),
        DbForeignKey("SFPL_AFFECTED_OBJECTS_FK10", ["DISP_FINISHED"], "SFPL_ENG_CHANGE_PART_DISP", ["PART_DISP_TYPE"]),
        DbForeignKey("SFPL_AFFECTED_OBJECTS_FK2", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_AFFECTED_OBJECTS_FK3", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFPL_AFFECTED_OBJECTS_FK7", ["INSP_ITEM_ID","OWNER_CODE","INSP_DEF_REV"], "SFSQA_INSP_DEFINITION_REV", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV"]),
        DbForeignKey("SFPL_AFFECTED_OBJECTS_FK4", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
        "SFPL_CHANGE_IMPL_TYPE_FK1",
        "SFPL_IMPACTED_OBJECTS_FK8",
        "SFPL_PLANNED_ACTIONS_FK9",
        "SFPL_AFFECTED_TO_RESULTING_FK2",
    ]
    def __init__(self, column_value_map):
        self.AFFECTED_OBJECT_ID = parse_value(self.schema, column_value_map, "AFFECTED_OBJECT_ID")
        "Unique System Generated Identifier of an Affected Object of Change Request."
        self.CHANGE_REQUEST_ID = parse_value(self.schema, column_value_map, "CHANGE_REQUEST_ID")
        "Unique System Generated Identifier of a Change Request."
        self.AFFECTED_OBJECT_TYPE = parse_value(self.schema, column_value_map, "AFFECTED_OBJECT_TYPE")
        "The Type of Object Getting Affected. It can be : Part, Tool, Machine, MBOM, EBOM, PLIST, File, Illustration, Standard Text, Standard Operation, Work Plan, Inspection Plan, Inspection Definition. Based on this field, the other Key ID fields will be populated."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "Key Field for Part, Tool, Machine, etc."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Key Field for MBOM / EBOM / PLIST."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Key Field for Standard Operation, Work Plan."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Key Field for For File, Illustration, Standard Text, Standard Operation."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "Key Field for Standard Operation, Work Plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "Key Field for Standard Operation, Work Plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Key Field for Standard Operation, Work Plan."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        "Key Field for Inspection Plan."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        "Key Field for Inspection Plan."
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        "Key Field for Inspection Definition."
        self.DISP_ON_ORDER = parse_value(self.schema, column_value_map, "DISP_ON_ORDER")
        "Disposition On Order."
        self.DISP_WORK_IN_PROCESS = parse_value(self.schema, column_value_map, "DISP_WORK_IN_PROCESS")
        "Disposition Work-In-Process."
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        "Key Field for Inspection Definition."
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        "Key Field for Inspection Definition."
        self.DISP_FINISHED = parse_value(self.schema, column_value_map, "DISP_FINISHED")
        "Disposition on Finished."
        self.REF1 = parse_value(self.schema, column_value_map, "REF1")
        "Object Number."
        self.REF2 = parse_value(self.schema, column_value_map, "REF2")
        "Object Revision."
        self.REF3 = parse_value(self.schema, column_value_map, "REF3")
        "Work Location of the BOM."
        self.REF4 = parse_value(self.schema, column_value_map, "REF4")
        "Revision date of the BOM."
        self.REF5 = parse_value(self.schema, column_value_map, "REF5")
        self.REF6 = parse_value(self.schema, column_value_map, "REF6")
        self.SFPL_CHANGE_IMPL_TYPE_FK1 = []
        self.SFPL_IMPACTED_OBJECTS_FK8 = []
        self.SFPL_PLANNED_ACTIONS_FK9 = []
        self.SFPL_AFFECTED_TO_RESULTING_FK2 = []

class SFWID_ORDER_LINK_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "LINK_ID": "STRING",
        "LINK_TYPE": "STRING",
        "PRED_NODE_ROW": "NUMBER",
        "PRED_NODE_COLUMN": "NUMBER",
        "SUCC_NODE_ROW": "NUMBER",
        "SUCC_NODE_COLUMN": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "PRED_NODE_ID": "STRING",
        "SUCC_NODE_ID": "STRING",
        "LINK_TITLE": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.LINK_ID = parse_value(self.schema, column_value_map, "LINK_ID")
        "The unique system-generated identifier of a link in an Operation Flow Diagram."
        self.LINK_TYPE = parse_value(self.schema, column_value_map, "LINK_TYPE")
        "Type or classification of link in the associated Operation Flow diagram."
        self.PRED_NODE_ROW = parse_value(self.schema, column_value_map, "PRED_NODE_ROW")
        "The number of the grid row containing the predecessor (preceding) node. In combination with PRED_NODE_COLUMN, shows starting position of link."
        self.PRED_NODE_COLUMN = parse_value(self.schema, column_value_map, "PRED_NODE_COLUMN")
        "The number of the grid column containing the predecessor (preceding) node. In combination with PRED_NODE_ROW, shows starting position of link."
        self.SUCC_NODE_ROW = parse_value(self.schema, column_value_map, "SUCC_NODE_ROW")
        "The number of the grid row containing the successor (following) node. In combination with SUCC_NODE_COLUMN, shows ending position of link."
        self.SUCC_NODE_COLUMN = parse_value(self.schema, column_value_map, "SUCC_NODE_COLUMN")
        "The number of the grid column containing the successor (following) node. In combination with SUCC_NODE_ROW, shows ending position of link."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.PRED_NODE_ID = parse_value(self.schema, column_value_map, "PRED_NODE_ID")
        "The unique system-generated identifier of the predecessor node in the Operation Flow Diagram."
        self.SUCC_NODE_ID = parse_value(self.schema, column_value_map, "SUCC_NODE_ID")
        "The unique system-generated identifier of the successor node in the Operation Flow Diagram."
        self.LINK_TITLE = parse_value(self.schema, column_value_map, "LINK_TITLE")
        "A name/short description of the link."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."

class SFQA_CA_BLOCK_STATUS:
    schema = {
        "CA_ID": "STRING",
        "BLOCK_ID": "STRING",
        "CA_ACTION_ITEM_ID": "STRING",
        "BLOCK_STATUS": "STRING",
        "PARENT_BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "BLOCK_ID",
        "CA_ACTION_ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_BLOCK_STATUS_FK2", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
        DbForeignKey("SFQA_CA_BLOCK_STATUS_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        "The unique, system-generated identifier of a CA."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Name/Unique identifier of Block of CA."
        self.CA_ACTION_ITEM_ID = parse_value(self.schema, column_value_map, "CA_ACTION_ITEM_ID")
        "The unique, system-generated identifier for Action Item, if available, othewise N/A."
        self.BLOCK_STATUS = parse_value(self.schema, column_value_map, "BLOCK_STATUS")
        "Current status of the Block."
        self.PARENT_BLOCK_ID = parse_value(self.schema, column_value_map, "PARENT_BLOCK_ID")
        "Name/Unique identifier of Parent Block, if Block is Sub-Block."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFSQA_PO_DELIVERY_SCHED:
    schema = {
        "PO_ID": "STRING",
        "PO_LINE_ITEM": "STRING",
        "DELIVERY_NO": "STRING",
        "SCHED_DELIVERY_DATE": "DATE",
        "SCHED_QTY": "NUMBER",
        "SHIP_TO_ADDRESS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PO_ID",
        "PO_LINE_ITEM",
        "DELIVERY_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_PO_DELIVERY_SCHED_FK1", ["PO_ID","PO_LINE_ITEM"], "SFSQA_PO_LINE", ["PO_ID","PO_LINE_ITEM"]),
    ]
    refs = [
        "SFSQA_INSP_ORDER_DESC_FK13",
        "SFSQA_INSP_ORD_DELVRY_INFO_FK3",
    ]
    def __init__(self, column_value_map):
        self.PO_ID = parse_value(self.schema, column_value_map, "PO_ID")
        "System generated unique identifier for a given purchase order."
        self.PO_LINE_ITEM = parse_value(self.schema, column_value_map, "PO_LINE_ITEM")
        "PO line Item."
        self.DELIVERY_NO = parse_value(self.schema, column_value_map, "DELIVERY_NO")
        "Delivery Number of a Delivery Schedule."
        self.SCHED_DELIVERY_DATE = parse_value(self.schema, column_value_map, "SCHED_DELIVERY_DATE")
        "Delivery Date of Delivery Schedule."
        self.SCHED_QTY = parse_value(self.schema, column_value_map, "SCHED_QTY")
        "Quantity of Delivery Schedule."
        self.SHIP_TO_ADDRESS = parse_value(self.schema, column_value_map, "SHIP_TO_ADDRESS")
        "Shipping Address of Delivery Schedule."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFSQA_INSP_ORDER_DESC_FK13 = []
        self.SFSQA_INSP_ORD_DELVRY_INFO_FK3 = []

class SFFND_USER_SEC_GRP:
    schema = {
        "USERID": "STRING",
        "SECURITY_GROUP": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DEFAULT_ON_CREATE_FLAG": "STRING",
        "EFFECTIVE_START_DATE": "DATE",
        "EFFECTIVE_END_DATE": "DATE",
    }
    primary_key_columns = [
        "USERID",
        "SECURITY_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_USER_SEC_GROUP_XREF_FK2", ["USERID"], "SFFND_USER", ["USERID"]),
        DbForeignKey("SFFND_USER_SEC_GROUP_XREF_FK1", ["SECURITY_GROUP"], "SFFND_SECURITY_GROUP_DEF", ["SECURITY_GROUP"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.DEFAULT_ON_CREATE_FLAG = parse_value(self.schema, column_value_map, "DEFAULT_ON_CREATE_FLAG")
        self.EFFECTIVE_START_DATE = parse_value(self.schema, column_value_map, "EFFECTIVE_START_DATE")
        self.EFFECTIVE_END_DATE = parse_value(self.schema, column_value_map, "EFFECTIVE_END_DATE")

class SFWID_SERIAL_HOLDS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "HOLD_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "UCF_SRL_HOLD_VCH1": "STRING",
        "UCF_SRL_HOLD_VCH2": "STRING",
        "UCF_SRL_HOLD_VCH3": "STRING",
        "UCF_SRL_HOLD_VCH4": "STRING",
        "UCF_SRL_HOLD_VCH5": "STRING",
        "UCF_SRL_HOLD_VCH6": "STRING",
        "UCF_SRL_HOLD_VCH7": "STRING",
        "UCF_SRL_HOLD_VCH8": "STRING",
        "UCF_SRL_HOLD_VCH9": "STRING",
        "UCF_SRL_HOLD_VCH10": "STRING",
        "UCF_SRL_HOLD_VCH11": "STRING",
        "UCF_SRL_HOLD_VCH12": "STRING",
        "UCF_SRL_HOLD_VCH13": "STRING",
        "UCF_SRL_HOLD_VCH14": "STRING",
        "UCF_SRL_HOLD_VCH15": "STRING",
        "UCF_SRL_HOLD_NUM1": "NUMBER",
        "UCF_SRL_HOLD_NUM2": "NUMBER",
        "UCF_SRL_HOLD_NUM3": "NUMBER",
        "UCF_SRL_HOLD_NUM4": "NUMBER",
        "UCF_SRL_HOLD_NUM5": "NUMBER",
        "UCF_SRL_HOLD_DATE1": "STRING",
        "UCF_SRL_HOLD_DATE2": "STRING",
        "UCF_SRL_HOLD_DATE3": "STRING",
        "UCF_SRL_HOLD_DATE4": "STRING",
        "UCF_SRL_HOLD_DATE5": "STRING",
        "UCF_SRL_HOLD_FLAG1": "STRING",
        "UCF_SRL_HOLD_FLAG2": "STRING",
        "UCF_SRL_HOLD_FLAG3": "STRING",
        "UCF_SRL_HOLD_FLAG4": "STRING",
        "UCF_SRL_HOLD_FLAG5": "STRING",
        "UCF_SRL_HOLD_VCH255_1": "STRING",
        "UCF_SRL_HOLD_VCH255_2": "STRING",
        "UCF_SRL_HOLD_VCH255_3": "STRING",
        "UCF_SRL_HOLD_VCH4000_1": "STRING",
        "UCF_SRL_HOLD_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.HOLD_ID = parse_value(self.schema, column_value_map, "HOLD_ID")
        "Unique, system-generated identifier of the hold."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.UCF_SRL_HOLD_VCH1 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH1")
        self.UCF_SRL_HOLD_VCH2 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH2")
        self.UCF_SRL_HOLD_VCH3 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH3")
        self.UCF_SRL_HOLD_VCH4 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH4")
        self.UCF_SRL_HOLD_VCH5 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH5")
        self.UCF_SRL_HOLD_VCH6 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH6")
        self.UCF_SRL_HOLD_VCH7 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH7")
        self.UCF_SRL_HOLD_VCH8 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH8")
        self.UCF_SRL_HOLD_VCH9 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH9")
        self.UCF_SRL_HOLD_VCH10 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH10")
        self.UCF_SRL_HOLD_VCH11 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH11")
        self.UCF_SRL_HOLD_VCH12 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH12")
        self.UCF_SRL_HOLD_VCH13 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH13")
        self.UCF_SRL_HOLD_VCH14 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH14")
        self.UCF_SRL_HOLD_VCH15 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH15")
        self.UCF_SRL_HOLD_NUM1 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_NUM1")
        self.UCF_SRL_HOLD_NUM2 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_NUM2")
        self.UCF_SRL_HOLD_NUM3 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_NUM3")
        self.UCF_SRL_HOLD_NUM4 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_NUM4")
        self.UCF_SRL_HOLD_NUM5 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_NUM5")
        self.UCF_SRL_HOLD_DATE1 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_DATE1")
        self.UCF_SRL_HOLD_DATE2 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_DATE2")
        self.UCF_SRL_HOLD_DATE3 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_DATE3")
        self.UCF_SRL_HOLD_DATE4 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_DATE4")
        self.UCF_SRL_HOLD_DATE5 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_DATE5")
        self.UCF_SRL_HOLD_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_FLAG1")
        self.UCF_SRL_HOLD_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_FLAG2")
        self.UCF_SRL_HOLD_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_FLAG3")
        self.UCF_SRL_HOLD_FLAG4 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_FLAG4")
        self.UCF_SRL_HOLD_FLAG5 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_FLAG5")
        self.UCF_SRL_HOLD_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH255_1")
        self.UCF_SRL_HOLD_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH255_2")
        self.UCF_SRL_HOLD_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH255_3")
        self.UCF_SRL_HOLD_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH4000_1")
        self.UCF_SRL_HOLD_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_SRL_HOLD_VCH4000_2")

class SFSQA_COMMODITY_DEF:
    schema = {
        "COMMODITY_CODE": "STRING",
        "COMMODITY_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "COMMODITY_CODE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_ITEM_SUPPLIER_FK3",
    ]
    def __init__(self, column_value_map):
        self.COMMODITY_CODE = parse_value(self.schema, column_value_map, "COMMODITY_CODE")
        self.COMMODITY_DESC = parse_value(self.schema, column_value_map, "COMMODITY_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.SFSQA_ITEM_SUPPLIER_FK3 = []

class SFSQA_SEVERITY_RULE_DETAILS:
    schema = {
        "SEVERITY_RULE_ID": "STRING",
        "FROM_SR_TYPE": "STRING",
        "TO_SR_TYPE": "STRING",
        "SWITCH_TO_AQL": "NUMBER",
        "NUM_NONCONFORMITIES": "NUMBER",
        "NUM_PREVIOUS_LOTS": "NUMBER",
        "MAX_MONTHS_TO_SCAN": "NUMBER",
        "RULE_TYPE": "STRING",
    }
    primary_key_columns = [
        "SEVERITY_RULE_ID",
        "FROM_SR_TYPE",
        "TO_SR_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_SR_DETAILS_FK2", ["SWITCH_TO_AQL"], "SFSQA_AQL_DEF", ["AQL"]),
        DbForeignKey("SFSQA_SR_DETAILS_FK3", ["FROM_SR_TYPE"], "SFSQA_SR_TYPE_DEF", ["SR_TYPE"]),
        DbForeignKey("SFSQA_SR_DETAILS_FK4", ["TO_SR_TYPE"], "SFSQA_SR_TYPE_DEF", ["SR_TYPE"]),
        DbForeignKey("SFSQA_SR_DETAILS_FK5", ["SEVERITY_RULE_ID"], "SFSQA_SEVERITY_RULE_DESC", ["SEVERITY_RULE_ID"]),
        DbForeignKey("SFSQA_SR_DETAILS_FK1", ["RULE_TYPE"], "SFSQA_SEVERITY_RULE_TYPE", ["RULE_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SEVERITY_RULE_ID = parse_value(self.schema, column_value_map, "SEVERITY_RULE_ID")
        "System generated unique identifier for a given severity switching rule."
        self.FROM_SR_TYPE = parse_value(self.schema, column_value_map, "FROM_SR_TYPE")
        self.TO_SR_TYPE = parse_value(self.schema, column_value_map, "TO_SR_TYPE")
        self.SWITCH_TO_AQL = parse_value(self.schema, column_value_map, "SWITCH_TO_AQL")
        self.NUM_NONCONFORMITIES = parse_value(self.schema, column_value_map, "NUM_NONCONFORMITIES")
        self.NUM_PREVIOUS_LOTS = parse_value(self.schema, column_value_map, "NUM_PREVIOUS_LOTS")
        self.MAX_MONTHS_TO_SCAN = parse_value(self.schema, column_value_map, "MAX_MONTHS_TO_SCAN")
        self.RULE_TYPE = parse_value(self.schema, column_value_map, "RULE_TYPE")

class SFQA_CA_REQUEST_MM_OBJ_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_REQUEST_ID": "STRING",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH1": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH2": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH3": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH4": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH5": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_NUM1": "NUMBER",
        "UCF_CA_REQUEST_MM_OBJ_NUM2": "NUMBER",
        "UCF_CA_REQUEST_MM_OBJ_NUM3": "NUMBER",
        "UCF_CA_REQUEST_MM_OBJ_DATE1": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_DATE2": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_FLAG1": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_FLAG2": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_FLAG3": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH255_1": "STRING",
        "UCF_CA_REQUEST_MM_OBJ_VCH255_2": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "RTF_LINK_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action Request."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_CA_REQUEST_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_REQUEST_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CA_REQUEST_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CA_REQUEST_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_REQUEST_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_REQUEST_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CA_REQUEST_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."

class SFSQA_INSP_ORDER_ITEMS:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "ITEM_ID": "STRING",
        "ITEM_TYPE_FLAG": "STRING",
        "STATUS": "STRING",
        "ITEM_QTY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_INSP_ORDERITEM_VCH1": "STRING",
        "UCF_INSP_ORDERITEM_VCH2": "STRING",
        "UCF_INSP_ORDERITEM_VCH3": "STRING",
        "UCF_INSP_ORDERITEM_VCH4": "STRING",
        "UCF_INSP_ORDERITEM_VCH5": "STRING",
        "UCF_INSP_ORDERITEM_VCH6": "STRING",
        "UCF_INSP_ORDERITEM_VCH7": "STRING",
        "UCF_INSP_ORDERITEM_VCH8": "STRING",
        "UCF_INSP_ORDERITEM_VCH9": "STRING",
        "UCF_INSP_ORDERITEM_VCH10": "STRING",
        "UCF_INSP_ORDERITEM_VCH11": "STRING",
        "UCF_INSP_ORDERITEM_VCH12": "STRING",
        "UCF_INSP_ORDERITEM_VCH13": "STRING",
        "UCF_INSP_ORDERITEM_VCH14": "STRING",
        "UCF_INSP_ORDERITEM_VCH15": "STRING",
        "UCF_INSP_ORDERITEM_NUM1": "NUMBER",
        "UCF_INSP_ORDERITEM_NUM2": "NUMBER",
        "UCF_INSP_ORDERITEM_NUM3": "NUMBER",
        "UCF_INSP_ORDERITEM_NUM4": "NUMBER",
        "UCF_INSP_ORDERITEM_NUM5": "NUMBER",
        "UCF_INSP_ORDERITEM_DATE1": "STRING",
        "UCF_INSP_ORDERITEM_DATE2": "STRING",
        "UCF_INSP_ORDERITEM_DATE3": "STRING",
        "UCF_INSP_ORDERITEM_DATE4": "STRING",
        "UCF_INSP_ORDERITEM_DATE5": "STRING",
        "UCF_INSP_ORDERITEM_FLAG1": "STRING",
        "UCF_INSP_ORDERITEM_FLAG2": "STRING",
        "UCF_INSP_ORDERITEM_FLAG3": "STRING",
        "UCF_INSP_ORDERITEM_FLAG4": "STRING",
        "UCF_INSP_ORDERITEM_FLAG5": "STRING",
        "INDIVIDUAL_COMP_QTY": "NUMBER",
        "UCF_INSP_ORDERITEM_VCH255_1": "STRING",
        "UCF_INSP_ORDERITEM_VCH255_2": "STRING",
        "UCF_INSP_ORDERITEM_VCH255_3": "STRING",
        "UCF_INSP_ORDERITEM_VCH4000_1": "STRING",
        "UCF_INSP_ORDERITEM_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "INSP_STEP_ID",
        "ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_IDP_ITEMS_PSTATE_FK", ["INSP_ORDER_ID","INSP_STEP_ID"], "SFSQA_INSP_ORDER_INSP_STEPS", ["INSP_ORDER_ID","INSP_STEP_ID"]),
    ]
    refs = [
        "SFSQA_IDP_IC_I_FK",
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.ITEM_TYPE_FLAG = parse_value(self.schema, column_value_map, "ITEM_TYPE_FLAG")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.ITEM_QTY = parse_value(self.schema, column_value_map, "ITEM_QTY")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.UCF_INSP_ORDERITEM_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH1")
        self.UCF_INSP_ORDERITEM_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH2")
        self.UCF_INSP_ORDERITEM_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH3")
        self.UCF_INSP_ORDERITEM_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH4")
        self.UCF_INSP_ORDERITEM_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH5")
        self.UCF_INSP_ORDERITEM_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH6")
        self.UCF_INSP_ORDERITEM_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH7")
        self.UCF_INSP_ORDERITEM_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH8")
        self.UCF_INSP_ORDERITEM_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH9")
        self.UCF_INSP_ORDERITEM_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH10")
        self.UCF_INSP_ORDERITEM_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH11")
        self.UCF_INSP_ORDERITEM_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH12")
        self.UCF_INSP_ORDERITEM_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH13")
        self.UCF_INSP_ORDERITEM_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH14")
        self.UCF_INSP_ORDERITEM_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH15")
        self.UCF_INSP_ORDERITEM_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_NUM1")
        self.UCF_INSP_ORDERITEM_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_NUM2")
        self.UCF_INSP_ORDERITEM_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_NUM3")
        self.UCF_INSP_ORDERITEM_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_NUM4")
        self.UCF_INSP_ORDERITEM_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_NUM5")
        self.UCF_INSP_ORDERITEM_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_DATE1")
        self.UCF_INSP_ORDERITEM_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_DATE2")
        self.UCF_INSP_ORDERITEM_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_DATE3")
        self.UCF_INSP_ORDERITEM_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_DATE4")
        self.UCF_INSP_ORDERITEM_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_DATE5")
        self.UCF_INSP_ORDERITEM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_FLAG1")
        self.UCF_INSP_ORDERITEM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_FLAG2")
        self.UCF_INSP_ORDERITEM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_FLAG3")
        self.UCF_INSP_ORDERITEM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_FLAG4")
        self.UCF_INSP_ORDERITEM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_FLAG5")
        self.INDIVIDUAL_COMP_QTY = parse_value(self.schema, column_value_map, "INDIVIDUAL_COMP_QTY")
        self.UCF_INSP_ORDERITEM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH255_1")
        self.UCF_INSP_ORDERITEM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH255_2")
        self.UCF_INSP_ORDERITEM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH255_3")
        self.UCF_INSP_ORDERITEM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH4000_1")
        self.UCF_INSP_ORDERITEM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERITEM_VCH4000_2")
        self.SFSQA_IDP_IC_I_FK = []

class SFQA_DISP_DOC_TYPE_DEF:
    schema = {
        "DISP_DOC_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "DISP_DOC_DESC": "STRING",
    }
    primary_key_columns = [
        "DISP_DOC_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_DISC_ITEM_DISP_DOC_FK",
        "SFQA_DISC_ITEM_FK36",
    ]
    def __init__(self, column_value_map):
        self.DISP_DOC_TYPE = parse_value(self.schema, column_value_map, "DISP_DOC_TYPE")
        "Type or classification of disposition document, e.g., Work Order."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.DISP_DOC_DESC = parse_value(self.schema, column_value_map, "DISP_DOC_DESC")
        "The name or detail description of the document type."
        self.SFQA_DISC_ITEM_DISP_DOC_FK = []
        self.SFQA_DISC_ITEM_FK36 = []

class SFPL_ITEM_PROGRAM_DETAILS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ITEM_ID": "STRING",
        "PROGRAM": "STRING",
        "STOCK_UOM": "STRING",
        "BATCH_SIZE": "NUMBER",
        "COMP_SERIAL_FLAG": "STRING",
        "COMP_LOT_FLAG": "STRING",
        "WO_SERIAL_FLAG": "STRING",
        "WO_LOT_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "SPOOL_FLAG": "STRING",
        "OPT_DC1_FLAG": "STRING",
        "OPT_DC2_FLAG": "STRING",
        "OPT_DC3_FLAG": "STRING",
        "OPT_DC4_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UTILIZATION_RULE": "STRING",
        "TRACKABLE_FLAG": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "UID_ACQUISITION_CODE": "STRING",
        "QTY_ON_HAND": "NUMBER",
        "FLIGHT_HOURS": "NUMBER",
        "FLIGHT_DAYS": "NUMBER",
        "FLIGHT_CYCLES": "NUMBER",
        "STD_COST": "NUMBER",
        "LOCATION_ID": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH1": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH2": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH3": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH4": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH5": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH6": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH7": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH8": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH9": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH10": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH11": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH12": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH13": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH14": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH15": "STRING",
        "UCF_ITEM_PROG_DETAIL_NUM1": "NUMBER",
        "UCF_ITEM_PROG_DETAIL_NUM2": "NUMBER",
        "UCF_ITEM_PROG_DETAIL_NUM3": "NUMBER",
        "UCF_ITEM_PROG_DETAIL_NUM4": "NUMBER",
        "UCF_ITEM_PROG_DETAIL_NUM5": "NUMBER",
        "UCF_ITEM_PROG_DETAIL_DATE1": "STRING",
        "UCF_ITEM_PROG_DETAIL_DATE2": "STRING",
        "UCF_ITEM_PROG_DETAIL_DATE3": "STRING",
        "UCF_ITEM_PROG_DETAIL_DATE4": "STRING",
        "UCF_ITEM_PROG_DETAIL_DATE5": "STRING",
        "UCF_ITEM_PROG_DETAIL_FLAG1": "STRING",
        "UCF_ITEM_PROG_DETAIL_FLAG2": "STRING",
        "UCF_ITEM_PROG_DETAIL_FLAG3": "STRING",
        "UCF_ITEM_PROG_DETAIL_FLAG4": "STRING",
        "UCF_ITEM_PROG_DETAIL_FLAG5": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH255_1": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH255_2": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH255_3": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH4000_1": "STRING",
        "UCF_ITEM_PROG_DETAIL_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of an item/part."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.STOCK_UOM = parse_value(self.schema, column_value_map, "STOCK_UOM")
        "Unit of measure for a given component/part."
        self.BATCH_SIZE = parse_value(self.schema, column_value_map, "BATCH_SIZE")
        "Number of parts that are supposed to be manufactured as a batch. When BATCH_SIZE has a value that is greater than 1, the Bill-Of-Material of the part is defined for the batch instead of single instance of the part."
        self.COMP_SERIAL_FLAG = parse_value(self.schema, column_value_map, "COMP_SERIAL_FLAG")
        "Flag indicating whether the item/part is tracked by serial number at the component level. Column in nested table SFFND_ITEM_PROGRAM_NTAB."
        self.COMP_LOT_FLAG = parse_value(self.schema, column_value_map, "COMP_LOT_FLAG")
        "Flag indicating whether the item/part is tracked by lot at the component level. Column in nested table SFFND_ITEM_PROGRAM_NTAB."
        self.WO_SERIAL_FLAG = parse_value(self.schema, column_value_map, "WO_SERIAL_FLAG")
        "Flag indicating whether the item/part is tracked by serial number at the work order level. Column in nested table SFFND_ITEM_PROGRAM_NTAB."
        self.WO_LOT_FLAG = parse_value(self.schema, column_value_map, "WO_LOT_FLAG")
        "Flag indicating whether the item/part is tracked by lot at the work order level. Column in nested table SFFND_ITEM_PROGRAM_NTAB."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by expiration date."
        self.SPOOL_FLAG = parse_value(self.schema, column_value_map, "SPOOL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by a spool number."
        self.OPT_DC1_FLAG = parse_value(self.schema, column_value_map, "OPT_DC1_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC2_FLAG = parse_value(self.schema, column_value_map, "OPT_DC2_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC3_FLAG = parse_value(self.schema, column_value_map, "OPT_DC3_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC4_FLAG = parse_value(self.schema, column_value_map, "OPT_DC4_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UTILIZATION_RULE = parse_value(self.schema, column_value_map, "UTILIZATION_RULE")
        self.TRACKABLE_FLAG = parse_value(self.schema, column_value_map, "TRACKABLE_FLAG")
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.UID_ACQUISITION_CODE = parse_value(self.schema, column_value_map, "UID_ACQUISITION_CODE")
        self.QTY_ON_HAND = parse_value(self.schema, column_value_map, "QTY_ON_HAND")
        self.FLIGHT_HOURS = parse_value(self.schema, column_value_map, "FLIGHT_HOURS")
        self.FLIGHT_DAYS = parse_value(self.schema, column_value_map, "FLIGHT_DAYS")
        self.FLIGHT_CYCLES = parse_value(self.schema, column_value_map, "FLIGHT_CYCLES")
        self.STD_COST = parse_value(self.schema, column_value_map, "STD_COST")
        "Specified cost for the Item at location."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        self.UCF_ITEM_PROG_DETAIL_VCH1 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH2 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH3 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH4 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH5 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH6 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH7 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH8 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH9 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH10 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH11 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH12 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH13 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH14 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_VCH15 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_PROG_DETAIL_NUM1 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_PROG_DETAIL_NUM2 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_PROG_DETAIL_NUM3 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_PROG_DETAIL_NUM4 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_PROG_DETAIL_NUM5 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_PROG_DETAIL_DATE1 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_PROG_DETAIL_DATE2 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_PROG_DETAIL_DATE3 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_PROG_DETAIL_DATE4 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_PROG_DETAIL_DATE5 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ITEM_PROG_DETAIL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_PROG_DETAIL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_PROG_DETAIL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_PROG_DETAIL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_PROG_DETAIL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ITEM_PROG_DETAIL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_PROG_DETAIL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_PROG_DETAIL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_PROG_DETAIL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ITEM_PROG_DETAIL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_PROG_DETAIL_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."

class SFCORE_UDV_LIB_HIST:
    schema = {
        "HIST_ID": "STRING",
        "OLD_HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "UDV_ID": "STRING",
        "UDV_TAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "UDV_TYPE": "STRING",
        "UDV_DESC": "STRING",
        "STATE": "STRING",
        "LOAD_REF": "STRING",
        "TOOL_VERSION": "STRING",
        "OBJECT_REV": "STRING",
        "OWNER_GROUP": "STRING",
        "UDV_DEFINITION": "STRING",
        "UDV_DEFINITION_SEARCH": "STRING",
        "STYPE": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.OLD_HIST_ID = parse_value(self.schema, column_value_map, "OLD_HIST_ID")
        "Original numeric system generated unqiue identifier of this historical record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.UDV_ID = parse_value(self.schema, column_value_map, "UDV_ID")
        "The unique system generated identifier of a UDV object."
        self.UDV_TAG = parse_value(self.schema, column_value_map, "UDV_TAG")
        "User provided unique identifier of the UDV; can be modified."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.UDV_TYPE = parse_value(self.schema, column_value_map, "UDV_TYPE")
        "The type of UDV. Display or Input."
        self.UDV_DESC = parse_value(self.schema, column_value_map, "UDV_DESC")
        "A detailed description of the UDV object."
        self.STATE = parse_value(self.schema, column_value_map, "STATE")
        "TBD"
        self.LOAD_REF = parse_value(self.schema, column_value_map, "LOAD_REF")
        "Name of the data source when data in the database record has been loaded from another system. Not in use."
        self.TOOL_VERSION = parse_value(self.schema, column_value_map, "TOOL_VERSION")
        "Version of the UDV editor from which the UDV has been created and saved."
        self.OBJECT_REV = parse_value(self.schema, column_value_map, "OBJECT_REV")
        "The system generated revision number of the multimedia object."
        self.OWNER_GROUP = parse_value(self.schema, column_value_map, "OWNER_GROUP")
        "The functional group whose members can delete or modify the multimedia object."
        self.UDV_DEFINITION = parse_value(self.schema, column_value_map, "UDV_DEFINITION")
        "The actual content/definition of the UDV."
        self.UDV_DEFINITION_SEARCH = parse_value(self.schema, column_value_map, "UDV_DEFINITION_SEARCH")
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")

class SFQA_CA_AFFECTED_SUPPLIER_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "SUPPLIER_CODE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFSQA_INSP_ORDER_TYPE_DEF:
    schema = {
        "INSP_ORDER_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "INSP_ORDER_TYPE_DESC": "STRING",
        "INSP_ORDER_CATEGORY": "STRING",
        "INTERNAL_TYPE": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_IDP_DESC_ITYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_TYPE = parse_value(self.schema, column_value_map, "INSP_ORDER_TYPE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.INSP_ORDER_TYPE_DESC = parse_value(self.schema, column_value_map, "INSP_ORDER_TYPE_DESC")
        self.INSP_ORDER_CATEGORY = parse_value(self.schema, column_value_map, "INSP_ORDER_CATEGORY")
        self.INTERNAL_TYPE = parse_value(self.schema, column_value_map, "INTERNAL_TYPE")
        self.SFSQA_IDP_DESC_ITYPE_FK = []

class SFQA_CA_ACTION_ITEM_DESC_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "CA_ID": "STRING",
        "CA_ACTION_ITEM_ID": "STRING",
        "ACTION_ITEM_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ASSIGNEE": "STRING",
        "PRIORITY": "STRING",
        "ACTION_ITEM_STATUS": "STRING",
        "COMMIT_TARGET_DATE": "STRING",
        "ACTION_ITEM_TITLE": "STRING",
        "ACTION_ITEM_DESC": "STRING",
        "IMPL_VERIF_ASSIGNEE": "STRING",
        "ACCEPTANCE_DATE": "STRING",
        "ACCEPTANCE_STATUS": "STRING",
        "ACCEPTANCE_COMMENTS": "STRING",
        "COMPLETION_COMMENTS": "STRING",
        "COMPLETION_DATE": "STRING",
        "VERIFICATION_COMMENTS": "STRING",
        "VERIFICATION_DATE": "STRING",
        "INCLUDE_IMPL_VERIF_FLAG": "STRING",
        "EXE_ORDER": "NUMBER",
        "ACTION_ITEM_TYPE": "STRING",
        "IMPL_DUE_DATE_CHG_COMMENTS": "STRING",
        "VERIFICATION_DUE_DATE": "STRING",
        "VERIF_DUE_DATE_CHG_COMMENTS": "STRING",
        "UCF_CA_ACTION_ITEM_VCH1": "STRING",
        "UCF_CA_ACTION_ITEM_VCH2": "STRING",
        "UCF_CA_ACTION_ITEM_VCH3": "STRING",
        "UCF_CA_ACTION_ITEM_VCH4": "STRING",
        "UCF_CA_ACTION_ITEM_VCH5": "STRING",
        "UCF_CA_ACTION_ITEM_VCH6": "STRING",
        "UCF_CA_ACTION_ITEM_VCH7": "STRING",
        "UCF_CA_ACTION_ITEM_VCH8": "STRING",
        "UCF_CA_ACTION_ITEM_VCH9": "STRING",
        "UCF_CA_ACTION_ITEM_VCH10": "STRING",
        "UCF_CA_ACTION_ITEM_VCH11": "STRING",
        "UCF_CA_ACTION_ITEM_VCH12": "STRING",
        "UCF_CA_ACTION_ITEM_VCH13": "STRING",
        "UCF_CA_ACTION_ITEM_VCH14": "STRING",
        "UCF_CA_ACTION_ITEM_VCH15": "STRING",
        "UCF_CA_ACTION_ITEM_NUM1": "NUMBER",
        "UCF_CA_ACTION_ITEM_NUM2": "NUMBER",
        "UCF_CA_ACTION_ITEM_NUM3": "NUMBER",
        "UCF_CA_ACTION_ITEM_NUM4": "NUMBER",
        "UCF_CA_ACTION_ITEM_NUM5": "NUMBER",
        "UCF_CA_ACTION_ITEM_DATE1": "STRING",
        "UCF_CA_ACTION_ITEM_DATE2": "STRING",
        "UCF_CA_ACTION_ITEM_DATE3": "STRING",
        "UCF_CA_ACTION_ITEM_DATE4": "STRING",
        "UCF_CA_ACTION_ITEM_DATE5": "STRING",
        "UCF_CA_ACTION_ITEM_FLAG1": "STRING",
        "UCF_CA_ACTION_ITEM_FLAG2": "STRING",
        "UCF_CA_ACTION_ITEM_FLAG3": "STRING",
        "UCF_CA_ACTION_ITEM_FLAG4": "STRING",
        "UCF_CA_ACTION_ITEM_FLAG5": "STRING",
        "UCF_CA_ACTION_ITEM_VCH255_1": "STRING",
        "UCF_CA_ACTION_ITEM_VCH255_2": "STRING",
        "UCF_CA_ACTION_ITEM_VCH255_3": "STRING",
        "UCF_CA_ACTION_ITEM_VCH4000_1": "STRING",
        "UCF_CA_ACTION_ITEM_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.CA_ACTION_ITEM_ID = parse_value(self.schema, column_value_map, "CA_ACTION_ITEM_ID")
        self.ACTION_ITEM_NO = parse_value(self.schema, column_value_map, "ACTION_ITEM_NO")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.ASSIGNEE = parse_value(self.schema, column_value_map, "ASSIGNEE")
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        self.ACTION_ITEM_STATUS = parse_value(self.schema, column_value_map, "ACTION_ITEM_STATUS")
        self.COMMIT_TARGET_DATE = parse_value(self.schema, column_value_map, "COMMIT_TARGET_DATE")
        self.ACTION_ITEM_TITLE = parse_value(self.schema, column_value_map, "ACTION_ITEM_TITLE")
        self.ACTION_ITEM_DESC = parse_value(self.schema, column_value_map, "ACTION_ITEM_DESC")
        self.IMPL_VERIF_ASSIGNEE = parse_value(self.schema, column_value_map, "IMPL_VERIF_ASSIGNEE")
        self.ACCEPTANCE_DATE = parse_value(self.schema, column_value_map, "ACCEPTANCE_DATE")
        self.ACCEPTANCE_STATUS = parse_value(self.schema, column_value_map, "ACCEPTANCE_STATUS")
        self.ACCEPTANCE_COMMENTS = parse_value(self.schema, column_value_map, "ACCEPTANCE_COMMENTS")
        self.COMPLETION_COMMENTS = parse_value(self.schema, column_value_map, "COMPLETION_COMMENTS")
        self.COMPLETION_DATE = parse_value(self.schema, column_value_map, "COMPLETION_DATE")
        self.VERIFICATION_COMMENTS = parse_value(self.schema, column_value_map, "VERIFICATION_COMMENTS")
        self.VERIFICATION_DATE = parse_value(self.schema, column_value_map, "VERIFICATION_DATE")
        self.INCLUDE_IMPL_VERIF_FLAG = parse_value(self.schema, column_value_map, "INCLUDE_IMPL_VERIF_FLAG")
        self.EXE_ORDER = parse_value(self.schema, column_value_map, "EXE_ORDER")
        self.ACTION_ITEM_TYPE = parse_value(self.schema, column_value_map, "ACTION_ITEM_TYPE")
        self.IMPL_DUE_DATE_CHG_COMMENTS = parse_value(self.schema, column_value_map, "IMPL_DUE_DATE_CHG_COMMENTS")
        "Comments on changing the Action Item Implementation due date."
        self.VERIFICATION_DUE_DATE = parse_value(self.schema, column_value_map, "VERIFICATION_DUE_DATE")
        "The date and time when an Action Item Verification is due."
        self.VERIF_DUE_DATE_CHG_COMMENTS = parse_value(self.schema, column_value_map, "VERIF_DUE_DATE_CHG_COMMENTS")
        "Comments on changing the Action Item Verification due date."
        self.UCF_CA_ACTION_ITEM_VCH1 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH2 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH3 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH4 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH5 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH6 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH7 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH8 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH9 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH10 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH11 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH12 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH13 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH14 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_VCH15 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_CA_ACTION_ITEM_NUM1 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_CA_ACTION_ITEM_NUM2 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_CA_ACTION_ITEM_NUM3 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_CA_ACTION_ITEM_NUM4 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_CA_ACTION_ITEM_NUM5 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_CA_ACTION_ITEM_DATE1 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_CA_ACTION_ITEM_DATE2 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_CA_ACTION_ITEM_DATE3 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_CA_ACTION_ITEM_DATE4 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_CA_ACTION_ITEM_DATE5 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_CA_ACTION_ITEM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_ACTION_ITEM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_ACTION_ITEM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_ACTION_ITEM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_ACTION_ITEM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_CA_ACTION_ITEM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_ACTION_ITEM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_ACTION_ITEM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_CA_ACTION_ITEM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_CA_ACTION_ITEM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_CA_ACTION_ITEM_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."

class SFFND_OWNER_GROUP_DEF:
    schema = {
        "OWNER_GROUP_KEY": "NUMBER",
        "OWNER_GROUP_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "GROUP_DESC": "STRING",
    }
    primary_key_columns = [
        "OWNER_GROUP_KEY",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OWNER_GROUP_KEY = parse_value(self.schema, column_value_map, "OWNER_GROUP_KEY")
        self.OWNER_GROUP_NAME = parse_value(self.schema, column_value_map, "OWNER_GROUP_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.GROUP_DESC = parse_value(self.schema, column_value_map, "GROUP_DESC")
        "description of the group"

class SFFND_HTREF_ORDER_TEXT:
    schema = {
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "ORDER_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "OBJECT_TYPE": "STRING",
        "OBJECT_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ALT_COUNT": "NUMBER",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
        "ALT_ID": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "ORDER_ID",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("BLOCKID_FK11", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
        DbForeignKey("SFFND_HTREF_ORDER_TEXT_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFFND_HTREF_ORDERTXT_FK", ["ORDER_ID","TEXT_TYPE"], "SFWID_ORDER_TEXT", ["ORDER_ID","TEXT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "The system generated unique identifier of an object link embedded in a work plan operation text block."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "The unique identifier of the object being referenced."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The object type/class which the object belongs to. For example: CAD drawing, still image, slide, UDV, standard text, audio, or video."
        self.OBJECT_NAME = parse_value(self.schema, column_value_map, "OBJECT_NAME")
        "A descriptive tag/name of the object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "The protocol id of a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "The host id of a Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "The file location of a Universal Resource Locator."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."

class SFWID_ORDER_RETURN_INFO:
    schema = {
        "ORDER_ID": "STRING",
        "RETURN_NODE_ID": "STRING",
        "RETURN_TO_NODE_ID": "STRING",
        "PATH_NODE_ID": "STRING",
        "MERGE_POINT_FLAG": "STRING",
        "ORDER_KEY": "NUMBER",
        "PATH_NODE_NO": "STRING",
        "PATH_OPER_KEY": "NUMBER",
    }
    primary_key_columns = [
        "ORDER_ID",
        "RETURN_NODE_ID",
        "RETURN_TO_NODE_ID",
        "PATH_NODE_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.RETURN_NODE_ID = parse_value(self.schema, column_value_map, "RETURN_NODE_ID")
        self.RETURN_TO_NODE_ID = parse_value(self.schema, column_value_map, "RETURN_TO_NODE_ID")
        self.PATH_NODE_ID = parse_value(self.schema, column_value_map, "PATH_NODE_ID")
        self.MERGE_POINT_FLAG = parse_value(self.schema, column_value_map, "MERGE_POINT_FLAG")
        self.ORDER_KEY = parse_value(self.schema, column_value_map, "ORDER_KEY")
        self.PATH_NODE_NO = parse_value(self.schema, column_value_map, "PATH_NODE_NO")
        self.PATH_OPER_KEY = parse_value(self.schema, column_value_map, "PATH_OPER_KEY")

class SFQA_CA_REQ_AFFECTED_CUSTOMERS:
    schema = {
        "CA_REQUEST_ID": "STRING",
        "CUST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CA_REQUEST_ID",
        "CUST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_REQ_AFFECTED_CUST_FK", ["CA_REQUEST_ID"], "SFQA_CA_REQUEST", ["CA_REQUEST_ID"]),
        DbForeignKey("SFQA_CA_REQ_AFFECTED_CUST_FK1", ["CUST_ID"], "SFFND_CUST_ID_DEF", ["CUST_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.CUST_ID = parse_value(self.schema, column_value_map, "CUST_ID")
        "Unique identifier of an affected Customer."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFCORE_PRINT_SERVER_DEF:
    schema = {
        "SERVER_ID": "STRING",
        "HOST": "STRING",
        "PORT": "NUMBER",
        "RANK": "NUMBER",
        "SERVER_STATUS": "STRING",
        "SERVICE_STATUS": "STRING",
        "SERVER_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "SERVER_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "FWPSXREF_FWPSD_FK",
    ]
    def __init__(self, column_value_map):
        self.SERVER_ID = parse_value(self.schema, column_value_map, "SERVER_ID")
        "System generated unique identifier for a given print server."
        self.HOST = parse_value(self.schema, column_value_map, "HOST")
        "Host associated with the given printer."
        self.PORT = parse_value(self.schema, column_value_map, "PORT")
        "he port the print server will use."
        self.RANK = parse_value(self.schema, column_value_map, "RANK")
        "Is the position/ranking of a serial within a given order across time."
        self.SERVER_STATUS = parse_value(self.schema, column_value_map, "SERVER_STATUS")
        "Status of a given print server."
        self.SERVICE_STATUS = parse_value(self.schema, column_value_map, "SERVICE_STATUS")
        "Status of a given print server."
        self.SERVER_DESC = parse_value(self.schema, column_value_map, "SERVER_DESC")
        "Print server description."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.FWPSXREF_FWPSD_FK = []

class SFSQA_SUPPLIER_CATEGORY_DEF:
    schema = {
        "SUPPLIER_CATEGORY": "STRING",
        "SUPPLIER_CATEGORY_DESC": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "SUPPLIER_CATEGORY",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SUPPLIER_CATEGORY = parse_value(self.schema, column_value_map, "SUPPLIER_CATEGORY")
        self.SUPPLIER_CATEGORY_DESC = parse_value(self.schema, column_value_map, "SUPPLIER_CATEGORY_DESC")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFCORE_ATTACHMENT_ACTION_TYPE:
    schema = {
        "PARENT_OBJECT_TYPE": "STRING",
        "ACTION_TYPE": "STRING",
        "ACTION_TYPE_DESC": "STRING",
        "EXT_ACTION_TYPE": "STRING",
        "CLASSIFICATION": "STRING",
        "DATA_TYPE": "STRING",
        "PLUGIN_VIEWER": "STRING",
        "VIEWER_LOCATION": "STRING",
        "BASE_PATH": "STRING",
        "PATH_DELIMITER": "STRING",
        "FILE_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PARENT_OBJECT_TYPE",
        "ACTION_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_ATTACH_ACTION_TYPE_FK1", ["PARENT_OBJECT_TYPE"], "SFCORE_OBJECT_TYPE_DEF", ["OBJECT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PARENT_OBJECT_TYPE = parse_value(self.schema, column_value_map, "PARENT_OBJECT_TYPE")
        "The type of multimedia object."
        self.ACTION_TYPE = parse_value(self.schema, column_value_map, "ACTION_TYPE")
        "Multimedia attachment action type (e.g., VIEW, EDIT, SRC_EDIT, HIGHLIGHT)."
        self.ACTION_TYPE_DESC = parse_value(self.schema, column_value_map, "ACTION_TYPE_DESC")
        "A detailed description of the action type."
        self.EXT_ACTION_TYPE = parse_value(self.schema, column_value_map, "EXT_ACTION_TYPE")
        "Corresponding action type in the external system (i.e., usage in PLM for this action type)."
        self.CLASSIFICATION = parse_value(self.schema, column_value_map, "CLASSIFICATION")
        "Correlation to slide classification of INI."
        self.DATA_TYPE = parse_value(self.schema, column_value_map, "DATA_TYPE")
        "General data type of this object_type and action_type (e.g., URI, File)."
        self.PLUGIN_VIEWER = parse_value(self.schema, column_value_map, "PLUGIN_VIEWER")
        "Plugin viewer for this type."
        self.VIEWER_LOCATION = parse_value(self.schema, column_value_map, "VIEWER_LOCATION")
        "View invoke location."
        self.BASE_PATH = parse_value(self.schema, column_value_map, "BASE_PATH")
        "Base path for this type (e.g., base url including hostname and port number, root file directory)."
        self.PATH_DELIMITER = parse_value(self.schema, column_value_map, "PATH_DELIMITER")
        "Path delimiter that can be used for parsing."
        self.FILE_FLAG = parse_value(self.schema, column_value_map, "FILE_FLAG")
        "Flag to determine if the objects of this type is file or not."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQRTZ_TRIGGERS:
    schema = {
        "SCHED_NAME": "STRING",
        "TRIGGER_NAME": "STRING",
        "TRIGGER_GROUP": "STRING",
        "JOB_NAME": "STRING",
        "JOB_GROUP": "STRING",
        "DESCRIPTION": "STRING",
        "NEXT_FIRE_TIME": "NUMBER",
        "PREV_FIRE_TIME": "NUMBER",
        "PRIORITY": "NUMBER",
        "TRIGGER_STATE": "STRING",
        "TRIGGER_TYPE": "STRING",
        "START_TIME": "NUMBER",
        "END_TIME": "NUMBER",
        "CALENDAR_NAME": "STRING",
        "MISFIRE_INSTR": "NUMBER",
        "JOB_DATA": "STRING",
    }
    primary_key_columns = [
        "SCHED_NAME",
        "TRIGGER_NAME",
        "TRIGGER_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFQRTZ_TRIGGER_TO_JOBS_FK", ["SCHED_NAME","JOB_NAME","JOB_GROUP"], "SFQRTZ_JOB_DETAILS", ["SCHED_NAME","JOB_NAME","JOB_GROUP"]),
    ]
    refs = [
        "SFQRTZ_CRON_TRIG_TO_TRIG_FK",
        "SFQRTZ_SIMPLE_TRIG_TO_TRIG_FK",
        "SFQRTZ_SIMPROP_TRIG_TO_TRIG_FK",
        "SFQRTZ_BLOB_TRIG_TO_TRIG_FK",
    ]
    def __init__(self, column_value_map):
        self.SCHED_NAME = parse_value(self.schema, column_value_map, "SCHED_NAME")
        self.TRIGGER_NAME = parse_value(self.schema, column_value_map, "TRIGGER_NAME")
        self.TRIGGER_GROUP = parse_value(self.schema, column_value_map, "TRIGGER_GROUP")
        self.JOB_NAME = parse_value(self.schema, column_value_map, "JOB_NAME")
        self.JOB_GROUP = parse_value(self.schema, column_value_map, "JOB_GROUP")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.NEXT_FIRE_TIME = parse_value(self.schema, column_value_map, "NEXT_FIRE_TIME")
        self.PREV_FIRE_TIME = parse_value(self.schema, column_value_map, "PREV_FIRE_TIME")
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        self.TRIGGER_STATE = parse_value(self.schema, column_value_map, "TRIGGER_STATE")
        self.TRIGGER_TYPE = parse_value(self.schema, column_value_map, "TRIGGER_TYPE")
        self.START_TIME = parse_value(self.schema, column_value_map, "START_TIME")
        self.END_TIME = parse_value(self.schema, column_value_map, "END_TIME")
        self.CALENDAR_NAME = parse_value(self.schema, column_value_map, "CALENDAR_NAME")
        self.MISFIRE_INSTR = parse_value(self.schema, column_value_map, "MISFIRE_INSTR")
        self.JOB_DATA = parse_value(self.schema, column_value_map, "JOB_DATA")
        self.SFQRTZ_CRON_TRIG_TO_TRIG_FK = []
        self.SFQRTZ_SIMPLE_TRIG_TO_TRIG_FK = []
        self.SFQRTZ_SIMPROP_TRIG_TO_TRIG_FK = []
        self.SFQRTZ_BLOB_TRIG_TO_TRIG_FK = []

class SFQA_CA_SECTION_ATTACHMENTS:
    schema = {
        "CA_ID": "STRING",
        "OBJECT_ID": "STRING",
        "CA_SECTION": "STRING",
        "PROTECTED": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "NOTES": "STRING",
    }
    primary_key_columns = [
        "CA_ID",
        "OBJECT_ID",
        "CA_SECTION",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_SECTION_ATTACHMENT_FK1", ["CA_ID"], "SFQA_CA_DESC", ["CA_ID"]),
        DbForeignKey("SFQA_CA_SECTION_ATTACHMENT_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CA_ID = parse_value(self.schema, column_value_map, "CA_ID")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.CA_SECTION = parse_value(self.schema, column_value_map, "CA_SECTION")
        self.PROTECTED = parse_value(self.schema, column_value_map, "PROTECTED")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")

class SFWID_ORDER_ITEM_ALT_XREF_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ITEM_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "ASGND_ITEM_ID": "STRING",
        "PLND_ITEM_ID": "STRING",
        "REF_DES": "STRING",
        "FIND_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH1": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH2": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH3": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH4": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH5": "STRING",
        "UCF_ORDER_ITEM_ALT_NUM1": "NUMBER",
        "UCF_ORDER_ITEM_ALT_NUM2": "NUMBER",
        "UCF_ORDER_ITEM_ALT_FLAG1": "STRING",
        "UCF_ORDER_ITEM_ALT_FLAG2": "STRING",
        "UCF_ORDER_ITEM_ALT_DATE1": "STRING",
        "UCF_ORDER_ITEM_ALT_DATE2": "STRING",
        "ASSIGNED_ITEM_FLAG": "STRING",
        "PART_DAT_COL_ID": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH6": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH7": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH8": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH9": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH10": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH11": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH12": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH13": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH14": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH15": "STRING",
        "UCF_ORDER_ITEM_ALT_NUM3": "NUMBER",
        "UCF_ORDER_ITEM_ALT_NUM4": "NUMBER",
        "UCF_ORDER_ITEM_ALT_NUM5": "NUMBER",
        "UCF_ORDER_ITEM_ALT_DATE3": "STRING",
        "UCF_ORDER_ITEM_ALT_DATE4": "STRING",
        "UCF_ORDER_ITEM_ALT_DATE5": "STRING",
        "UCF_ORDER_ITEM_ALT_FLAG3": "STRING",
        "UCF_ORDER_ITEM_ALT_FLAG4": "STRING",
        "UCF_ORDER_ITEM_ALT_FLAG5": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH255_1": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH255_2": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH255_3": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH4000_1": "STRING",
        "UCF_ORDER_ITEM_ALT_VCH4000_2": "STRING",
        "ALT_GROUP": "STRING",
        "PRIORITY": "NUMBER",
        "UNIT_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "BOM_COMP_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ITEM_ALT_ID = parse_value(self.schema, column_value_map, "ORDER_ITEM_ALT_ID")
        "Unique system generated part identiifer that has been used as an alternate."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.ASGND_ITEM_ID = parse_value(self.schema, column_value_map, "ASGND_ITEM_ID")
        "Unique, system-generated ID of the given serialized component/part as used in the operation."
        self.PLND_ITEM_ID = parse_value(self.schema, column_value_map, "PLND_ITEM_ID")
        "Unique, system-generated ID of the given component/part."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_ORDER_ITEM_ALT_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH3")
        self.UCF_ORDER_ITEM_ALT_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH5")
        self.UCF_ORDER_ITEM_ALT_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_ITEM_ALT_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_ITEM_ALT_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_ITEM_ALT_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_ITEM_ALT_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_ITEM_ALT_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_DATE2")
        "User-configurable field for DATE data type."
        self.ASSIGNED_ITEM_FLAG = parse_value(self.schema, column_value_map, "ASSIGNED_ITEM_FLAG")
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.UCF_ORDER_ITEM_ALT_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_ITEM_ALT_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_ITEM_ALT_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_ITEM_ALT_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_ITEM_ALT_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_ITEM_ALT_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_ITEM_ALT_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_ITEM_ALT_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_ITEM_ALT_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_ITEM_ALT_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_ORDER_ITEM_ALT_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_ITEM_ALT_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_ITEM_ALT_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_ITEM_ALT_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ORDER_ITEM_ALT_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_ITEM_ALT_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.ALT_GROUP = parse_value(self.schema, column_value_map, "ALT_GROUP")
        "It indicates Group Name of Component in BOM."
        self.PRIORITY = parse_value(self.schema, column_value_map, "PRIORITY")
        "The priority of the task."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "The upper bound of the effectivity range for effectivity type other than time period."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "The lower bound of the effectivity range for effectivity type other than time period."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "The starting date of the time period for a time period effectivity."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "The ending date of the time period for a time period effectivity."
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        "It indicates bom component Id for the BOM alternates."

class SFWID_OPER_MM_OBJECTS_ALT:
    schema = {
        "OPER_MM_OBJECT_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "ALT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "ALT_COUNT": "NUMBER",
        "LAST_ACTION": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH1": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH2": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH3": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH4": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH5": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_NUM1": "NUMBER",
        "UCF_SFWID_OPER_MM_OBJ_NUM2": "NUMBER",
        "UCF_SFWID_OPER_MM_OBJ_NUM3": "NUMBER",
        "UCF_SFWID_OPER_MM_OBJ_DATE1": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_DATE2": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_FLAG1": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_FLAG2": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_FLAG3": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH255_1": "STRING",
        "UCF_SFWID_OPER_MM_OBJ_VCH255_2": "STRING",
        "SOURCE_ID": "STRING",
        "SOURCE_TYPE": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "ORIG_OBJECT_ID": "STRING",
        "RTF_LINK_ID": "STRING",
        "EFF_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "BOM_LINE_NO": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
    }
    primary_key_columns = [
        "OPER_MM_OBJECT_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_MM_OBJECTS_ALT_FK3", ["ORIG_OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_OPER_MM_OBJECTS_ALT_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFWID_OPER_MM_OBJECTS_ALT_FK4", ["EFF_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFWID_OPER_MM_OBJECTS_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_OPER_MM_OBJECTS_ALT_FK5", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_MM_OBJECT_ALT = parse_value(self.schema, column_value_map, "OPER_MM_OBJECT_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_SFWID_OPER_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFWID_OPER_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_OPER_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_OPER_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_SFWID_OPER_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SFWID_OPER_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SFWID_OPER_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_OPER_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_OPER_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFWID_OPER_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SFWID_OPER_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SFWID_OPER_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.SOURCE_ID = parse_value(self.schema, column_value_map, "SOURCE_ID")
        "Unique identifier for source, when source is BOM then BOM_ID and ITEM_ID for other sources."
        self.SOURCE_TYPE = parse_value(self.schema, column_value_map, "SOURCE_TYPE")
        "Source type where illustration belongs. Like Bom, Component, Part, Tool, Process, Machine etc."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.ORIG_OBJECT_ID = parse_value(self.schema, column_value_map, "ORIG_OBJECT_ID")
        "ID of the object originaly authored from which the current one is created on-the-fly."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."
        self.EFF_TYPE = parse_value(self.schema, column_value_map, "EFF_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        "EFF Group Id"
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        "Next Higher Assembly given by User"

class SFSQA_INSP_ORDER_DELIVERY_INFO:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "LOCATION_ID": "STRING",
        "PO_ID": "STRING",
        "PO_LINE_ITEM": "STRING",
        "DELIVERY_NO": "STRING",
        "SCHEDULE_DELIVERY_DATE": "DATE",
        "ACTUAL_DELIVERY_DATE": "STRING",
        "ACTUAL_QTY": "NUMBER",
        "ALL_UNITS_OBSOLETE_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "RECEIPT_DATE": "DATE",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "LOCATION_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_ORD_DELVRY_INFO_FK3", ["PO_ID","PO_LINE_ITEM","DELIVERY_NO"], "SFSQA_PO_DELIVERY_SCHED", ["PO_ID","PO_LINE_ITEM","DELIVERY_NO"]),
        DbForeignKey("SFSQA_INSP_ORD_DELVRY_INFO_FK1", ["INSP_ORDER_ID"], "SFSQA_INSP_ORDER_DESC", ["INSP_ORDER_ID"]),
        DbForeignKey("SFSQA_INSP_ORD_DELVRY_INFO_FK2", ["LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        "Unique identifier for Inspection Order."
        self.LOCATION_ID = parse_value(self.schema, column_value_map, "LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.PO_ID = parse_value(self.schema, column_value_map, "PO_ID")
        "System generated unique identifier for a given purchase order."
        self.PO_LINE_ITEM = parse_value(self.schema, column_value_map, "PO_LINE_ITEM")
        "PO line Item."
        self.DELIVERY_NO = parse_value(self.schema, column_value_map, "DELIVERY_NO")
        "Auto generated Delivery Number of a Delivery Schedule."
        self.SCHEDULE_DELIVERY_DATE = parse_value(self.schema, column_value_map, "SCHEDULE_DELIVERY_DATE")
        "Delivery Date of Delivery Schedule."
        self.ACTUAL_DELIVERY_DATE = parse_value(self.schema, column_value_map, "ACTUAL_DELIVERY_DATE")
        "Actual Delivery Date of an Inspection Order."
        self.ACTUAL_QTY = parse_value(self.schema, column_value_map, "ACTUAL_QTY")
        "Actual Quantity of an Inspection Order."
        self.ALL_UNITS_OBSOLETE_FLAG = parse_value(self.schema, column_value_map, "ALL_UNITS_OBSOLETE_FLAG")
        "Flag to identify All units in Inspection Order is obsoleted or not."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time when the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.RECEIPT_DATE = parse_value(self.schema, column_value_map, "RECEIPT_DATE")
        "Actual Receipt Date for Receipt Information."

class SFOR_SFWID_OPER_SUBJECT:
    schema = {
        "SUBJECT_NO": "NUMBER",
        "OPER_KEY": "NUMBER",
        "SUBJECT_REV": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "INCLUDED_FLAG": "STRING",
        "ALT_COUNT": "NUMBER",
        "NOTES": "STRING",
        "ALT_ID": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "ORDER_ID": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "SUBJECT_NO",
        "OPER_KEY",
    ]
    foreign_keys = [
        DbForeignKey("SFOR_SFWID_OPER_SUB_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFOR_SFWID_OPER_SUBJECT_FK1", ["DISC_ID","DISC_LINE_NO"], "SFQA_DISC_ITEM", ["DISC_ID","DISC_LINE_NO"]),
        DbForeignKey("SFOR_SFWID_OPER_SUB_ORDSUB_FK", ["ORDER_ID","SUBJECT_NO"], "SFOR_SFWID_ORDER_SUBJECT", ["ORDER_ID","SUBJECT_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SUBJECT_NO = parse_value(self.schema, column_value_map, "SUBJECT_NO")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.SUBJECT_REV = parse_value(self.schema, column_value_map, "SUBJECT_REV")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.INCLUDED_FLAG = parse_value(self.schema, column_value_map, "INCLUDED_FLAG")
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."

class SFFND_TOOL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "TOOL_TITLE": "STRING",
        "OBJECT_ID": "STRING",
        "COMMENTS": "STRING",
        "TOOL_CALIBRATE_DAYS": "STRING",
        "TOOL_CALIBRATE_HOURS": "STRING",
        "TOOL_CALIBRATE_USES": "STRING",
        "TOOL_CALIBRATION_DAYS_FREQ": "NUMBER",
        "TOOL_CALIBRATION_HOURS_FREQ": "NUMBER",
        "TOOL_CALIBRATION_USES_FREQ": "NUMBER",
        "EXTEND_CALIB_DAYS": "NUMBER",
        "EXTEND_CALIB_HOURS": "NUMBER",
        "EXTEND_CALIB_USES": "NUMBER",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "SECURITY_GROUP": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The change number, secondary identifier, of the tool."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.TOOL_TITLE = parse_value(self.schema, column_value_map, "TOOL_TITLE")
        "A description or name of the tool."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Comments about loading of the current product version."
        self.TOOL_CALIBRATE_DAYS = parse_value(self.schema, column_value_map, "TOOL_CALIBRATE_DAYS")
        self.TOOL_CALIBRATE_HOURS = parse_value(self.schema, column_value_map, "TOOL_CALIBRATE_HOURS")
        self.TOOL_CALIBRATE_USES = parse_value(self.schema, column_value_map, "TOOL_CALIBRATE_USES")
        self.TOOL_CALIBRATION_DAYS_FREQ = parse_value(self.schema, column_value_map, "TOOL_CALIBRATION_DAYS_FREQ")
        self.TOOL_CALIBRATION_HOURS_FREQ = parse_value(self.schema, column_value_map, "TOOL_CALIBRATION_HOURS_FREQ")
        self.TOOL_CALIBRATION_USES_FREQ = parse_value(self.schema, column_value_map, "TOOL_CALIBRATION_USES_FREQ")
        self.EXTEND_CALIB_DAYS = parse_value(self.schema, column_value_map, "EXTEND_CALIB_DAYS")
        self.EXTEND_CALIB_HOURS = parse_value(self.schema, column_value_map, "EXTEND_CALIB_HOURS")
        self.EXTEND_CALIB_USES = parse_value(self.schema, column_value_map, "EXTEND_CALIB_USES")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")

class SFFND_HTREF_BLOCKID_DEF:
    schema = {
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DOC_TYPE": "STRING",
        "BLOCK_VALIDATOR_PROC": "STRING",
        "SEQ_NO": "NUMBER",
    }
    primary_key_columns = [
        "BLOCK_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "BLOCKID_FK13",
        "BLOCKID_FK8",
        "BLOCKID_FK9",
        "BLOCKID_FK6",
        "BLOCKID_FK10",
        "SFFND_HTREF_CA_TEXT_FK1",
        "BLOCKID_FK1",
        "BLOCKID_FK14",
        "SFFND_HTREF_WID_OP_NOTE_TXT_F2",
        "SFQA_DISC_ITM_BLCK_STATUS_FK2",
        "SFSQA_INSP_DEF_BLCK_STATUS_FK2",
        "SFQA_CA_BLOCK_STATUS_FK2",
        "BLOCKID_FK11",
        "BLOCKID_FK12",
        "BLOCKID_FK7",
    ]
    def __init__(self, column_value_map):
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Block type/Block id where object exists within the text. For a full list of BLOCK_IDs see SFFND_HTREF_BLOCKID_DEF for full list. Not currently implemented."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        "Name/unique identifier of a Solumina Document Type."
        self.BLOCK_VALIDATOR_PROC = parse_value(self.schema, column_value_map, "BLOCK_VALIDATOR_PROC")
        "Procedure name that need to be executed when block is executed."
        self.SEQ_NO = parse_value(self.schema, column_value_map, "SEQ_NO")
        "Unique Sequence No as per block sequence display in Document."
        self.BLOCKID_FK13 = []
        self.BLOCKID_FK8 = []
        self.BLOCKID_FK9 = []
        self.BLOCKID_FK6 = []
        self.BLOCKID_FK10 = []
        self.SFFND_HTREF_CA_TEXT_FK1 = []
        self.BLOCKID_FK1 = []
        self.BLOCKID_FK14 = []
        self.SFFND_HTREF_WID_OP_NOTE_TXT_F2 = []
        self.SFQA_DISC_ITM_BLCK_STATUS_FK2 = []
        self.SFSQA_INSP_DEF_BLCK_STATUS_FK2 = []
        self.SFQA_CA_BLOCK_STATUS_FK2 = []
        self.BLOCKID_FK11 = []
        self.BLOCKID_FK12 = []
        self.BLOCKID_FK7 = []

class SFCORE_USER_PRIVS:
    schema = {
        "USERID": "STRING",
        "PRIV": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "USERID",
        "PRIV",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_USER_PRIVS_FK1", ["PRIV"], "SFCORE_PRIVS", ["PRIV"]),
        DbForeignKey("SFCORE_USER_PRIVS_FK2", ["USERID"], "SFCORE_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        self.PRIV = parse_value(self.schema, column_value_map, "PRIV")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")

class SFQA_DISC_ITEM_SERIAL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "AFFECTED_QTY": "NUMBER",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "UCF_DISC_ITEM_SRL_VCH1": "STRING",
        "UCF_DISC_ITEM_SRL_VCH2": "STRING",
        "UCF_DISC_ITEM_SRL_VCH3": "STRING",
        "UCF_DISC_ITEM_SRL_VCH4": "STRING",
        "UCF_DISC_ITEM_SRL_VCH5": "STRING",
        "UCF_DISC_ITEM_SRL_VCH6": "STRING",
        "UCF_DISC_ITEM_SRL_VCH7": "STRING",
        "UCF_DISC_ITEM_SRL_VCH8": "STRING",
        "UCF_DISC_ITEM_SRL_VCH9": "STRING",
        "UCF_DISC_ITEM_SRL_VCH10": "STRING",
        "UCF_DISC_ITEM_SRL_VCH11": "STRING",
        "UCF_DISC_ITEM_SRL_VCH12": "STRING",
        "UCF_DISC_ITEM_SRL_VCH13": "STRING",
        "UCF_DISC_ITEM_SRL_VCH14": "STRING",
        "UCF_DISC_ITEM_SRL_VCH15": "STRING",
        "UCF_DISC_ITEM_SRL_FLAG1": "STRING",
        "UCF_DISC_ITEM_SRL_FLAG2": "STRING",
        "UCF_DISC_ITEM_SRL_NUM1": "NUMBER",
        "UCF_DISC_ITEM_SRL_NUM2": "NUMBER",
        "UCF_DISC_ITEM_SRL_NUM3": "NUMBER",
        "UCF_DISC_ITEM_SRL_NUM4": "NUMBER",
        "UCF_DISC_ITEM_SRL_NUM5": "NUMBER",
        "UCF_DISC_ITEM_SRL_DATE1": "STRING",
        "UCF_DISC_ITEM_SRL_DATE2": "STRING",
        "UCF_DISC_ITEM_SRL_DATE3": "STRING",
        "UCF_DISC_ITEM_SRL_DATE4": "STRING",
        "UCF_DISC_ITEM_SRL_DATE5": "STRING",
        "UCF_DISC_ITEM_SRL_FLAG3": "STRING",
        "UCF_DISC_ITEM_SRL_FLAG4": "STRING",
        "UCF_DISC_ITEM_SRL_FLAG5": "STRING",
        "UCF_DISC_ITEM_SRL_VCH255_1": "STRING",
        "UCF_DISC_ITEM_SRL_VCH255_2": "STRING",
        "UCF_DISC_ITEM_SRL_VCH255_3": "STRING",
        "UCF_DISC_ITEM_SRL_VCH4000_1": "STRING",
        "UCF_DISC_ITEM_SRL_VCH4000_2": "STRING",
        "UNIT_ID": "STRING",
        "SAMPLE_NO": "NUMBER",
        "DESIGN_AUTHORITY": "STRING",
        "MANUFACTURER_CODE": "STRING",
        "MANUFACTURER_PART_NO": "STRING",
        "MANUFACTURER_SERIAL_NO": "STRING",
        "MANUFACTURER_LOT_NO": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.AFFECTED_QTY = parse_value(self.schema, column_value_map, "AFFECTED_QTY")
        "Number of components/parts that have been inspected and are found to be affected by the associated discrepancy item."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.UCF_DISC_ITEM_SRL_VCH1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH1")
        self.UCF_DISC_ITEM_SRL_VCH2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH2")
        self.UCF_DISC_ITEM_SRL_VCH3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH3")
        self.UCF_DISC_ITEM_SRL_VCH4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH4")
        self.UCF_DISC_ITEM_SRL_VCH5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH5")
        self.UCF_DISC_ITEM_SRL_VCH6 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH6")
        self.UCF_DISC_ITEM_SRL_VCH7 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH7")
        self.UCF_DISC_ITEM_SRL_VCH8 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH8")
        self.UCF_DISC_ITEM_SRL_VCH9 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH9")
        self.UCF_DISC_ITEM_SRL_VCH10 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH10")
        self.UCF_DISC_ITEM_SRL_VCH11 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH11")
        self.UCF_DISC_ITEM_SRL_VCH12 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH12")
        self.UCF_DISC_ITEM_SRL_VCH13 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH13")
        self.UCF_DISC_ITEM_SRL_VCH14 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH14")
        self.UCF_DISC_ITEM_SRL_VCH15 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH15")
        self.UCF_DISC_ITEM_SRL_FLAG1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_FLAG1")
        self.UCF_DISC_ITEM_SRL_FLAG2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_FLAG2")
        self.UCF_DISC_ITEM_SRL_NUM1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_NUM1")
        self.UCF_DISC_ITEM_SRL_NUM2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_NUM2")
        self.UCF_DISC_ITEM_SRL_NUM3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_NUM3")
        self.UCF_DISC_ITEM_SRL_NUM4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_NUM4")
        self.UCF_DISC_ITEM_SRL_NUM5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_NUM5")
        self.UCF_DISC_ITEM_SRL_DATE1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_DATE1")
        self.UCF_DISC_ITEM_SRL_DATE2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_DATE2")
        self.UCF_DISC_ITEM_SRL_DATE3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_DATE3")
        self.UCF_DISC_ITEM_SRL_DATE4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_DATE4")
        self.UCF_DISC_ITEM_SRL_DATE5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_DATE5")
        self.UCF_DISC_ITEM_SRL_FLAG3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_FLAG3")
        self.UCF_DISC_ITEM_SRL_FLAG4 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_FLAG4")
        self.UCF_DISC_ITEM_SRL_FLAG5 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_FLAG5")
        self.UCF_DISC_ITEM_SRL_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH255_1")
        self.UCF_DISC_ITEM_SRL_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH255_2")
        self.UCF_DISC_ITEM_SRL_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH255_3")
        self.UCF_DISC_ITEM_SRL_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH4000_1")
        self.UCF_DISC_ITEM_SRL_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_DISC_ITEM_SRL_VCH4000_2")
        self.UNIT_ID = parse_value(self.schema, column_value_map, "UNIT_ID")
        self.SAMPLE_NO = parse_value(self.schema, column_value_map, "SAMPLE_NO")
        self.DESIGN_AUTHORITY = parse_value(self.schema, column_value_map, "DESIGN_AUTHORITY")
        self.MANUFACTURER_CODE = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE")
        self.MANUFACTURER_PART_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_PART_NO")
        self.MANUFACTURER_SERIAL_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_SERIAL_NO")
        self.MANUFACTURER_LOT_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_LOT_NO")

class SFWID_OPER_TEXT_SUBVAR_ALT:
    schema = {
        "OPER_TEXT_SUBVAR_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "OPER_TEXT_SUBVAR_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_OPER_TEXT_SUBVAR_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OPER_TEXT_SUBVAR_ALT = parse_value(self.schema, column_value_map, "OPER_TEXT_SUBVAR_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFQA_CA_SUBJECT_TYPE_DEF:
    schema = {
        "SUBJECT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "SUBJECT_TYPE_DESC": "STRING",
        "REF_TABLE": "STRING",
        "REF_COLUMN1": "STRING",
        "REF_COLUMN2": "STRING",
        "REF_COLUMN3": "STRING",
    }
    primary_key_columns = [
        "SUBJECT_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_CA_REQ_SBJ_SBJ_TYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.SUBJECT_TYPE = parse_value(self.schema, column_value_map, "SUBJECT_TYPE")
        "The unique identifier/name of a particular subject matter type/class. Such subject matters may be related to Corrective Action Requests and/or Corrective Items. For instance: Tooling, Part, Drawing, and Process Specification."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.SUBJECT_TYPE_DESC = parse_value(self.schema, column_value_map, "SUBJECT_TYPE_DESC")
        "A description of the Subject Type/class."
        self.REF_TABLE = parse_value(self.schema, column_value_map, "REF_TABLE")
        "The name of the table that contains detailed information concerning the type/class subject_matter. For example: sfpl_item_desc for PART"
        self.REF_COLUMN1 = parse_value(self.schema, column_value_map, "REF_COLUMN1")
        "The name of the first column of the primary key or an alternate key of the table."
        self.REF_COLUMN2 = parse_value(self.schema, column_value_map, "REF_COLUMN2")
        "The name of the second column of the primary key or an alternate key of the table, NULL if the key consists of only one column."
        self.REF_COLUMN3 = parse_value(self.schema, column_value_map, "REF_COLUMN3")
        "The name of the third column of the primary key or an alternate key of the table, NULL if the key consists of less than three columns."
        self.SFQA_CA_REQ_SBJ_SBJ_TYPE_FK = []

class SFFND_USER_CLASS_DEF:
    schema = {
        "USER_CLASS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "USER_CLASS_DESC": "STRING",
    }
    primary_key_columns = [
        "USER_CLASS",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_USER_USER_CLASS_FK",
    ]
    def __init__(self, column_value_map):
        self.USER_CLASS = parse_value(self.schema, column_value_map, "USER_CLASS")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.USER_CLASS_DESC = parse_value(self.schema, column_value_map, "USER_CLASS_DESC")
        self.SFFND_USER_USER_CLASS_FK = []

class SFPL_MFG_BOM_COMP_REF_DES:
    schema = {
        "BOM_ID": "STRING",
        "BOM_COMP_ID": "STRING",
        "REF_DES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "REF_DES_QTY": "NUMBER",
        "REF_DES_PREF_RANK": "NUMBER",
        "REF_DES_DESC": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH1": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH2": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH3": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH4": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH5": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH6": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH7": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH8": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH9": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH10": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH11": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH12": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH13": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH14": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH15": "STRING",
        "UCF_MBOM_COMP_REF_DES_NUM1": "NUMBER",
        "UCF_MBOM_COMP_REF_DES_NUM2": "NUMBER",
        "UCF_MBOM_COMP_REF_DES_NUM3": "NUMBER",
        "UCF_MBOM_COMP_REF_DES_NUM4": "NUMBER",
        "UCF_MBOM_COMP_REF_DES_NUM5": "NUMBER",
        "UCF_MBOM_COMP_REF_DES_DATE1": "STRING",
        "UCF_MBOM_COMP_REF_DES_DATE2": "STRING",
        "UCF_MBOM_COMP_REF_DES_DATE3": "STRING",
        "UCF_MBOM_COMP_REF_DES_DATE4": "STRING",
        "UCF_MBOM_COMP_REF_DES_DATE5": "STRING",
        "UCF_MBOM_COMP_REF_DES_FLAG1": "STRING",
        "UCF_MBOM_COMP_REF_DES_FLAG2": "STRING",
        "UCF_MBOM_COMP_REF_DES_FLAG3": "STRING",
        "UCF_MBOM_COMP_REF_DES_FLAG4": "STRING",
        "UCF_MBOM_COMP_REF_DES_FLAG5": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH255_1": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH255_2": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH255_3": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH4000_1": "STRING",
        "UCF_MBOM_COMP_REF_DES_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
        "BOM_COMP_ID",
        "REF_DES",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_MFG_BOM_REF_DES_FK1", ["BOM_ID","BOM_COMP_ID"], "SFPL_MFG_BOM_COMP", ["BOM_ID","BOM_COMP_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "The identifier of the physical location/position on the parent part where the component part is to be installed."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.REF_DES_QTY = parse_value(self.schema, column_value_map, "REF_DES_QTY")
        "The quantity of component item/parts to be installed at the reference designator location."
        self.REF_DES_PREF_RANK = parse_value(self.schema, column_value_map, "REF_DES_PREF_RANK")
        "Where multiple candidate components are associated with a given reference designator, the rank of a given candidate, where the lowest number shows the highest preference for use."
        self.REF_DES_DESC = parse_value(self.schema, column_value_map, "REF_DES_DESC")
        self.UCF_MBOM_COMP_REF_DES_VCH1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH1")
        self.UCF_MBOM_COMP_REF_DES_VCH2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH2")
        self.UCF_MBOM_COMP_REF_DES_VCH3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH3")
        self.UCF_MBOM_COMP_REF_DES_VCH4 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH4")
        self.UCF_MBOM_COMP_REF_DES_VCH5 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH5")
        self.UCF_MBOM_COMP_REF_DES_VCH6 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH6")
        self.UCF_MBOM_COMP_REF_DES_VCH7 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH7")
        self.UCF_MBOM_COMP_REF_DES_VCH8 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH8")
        self.UCF_MBOM_COMP_REF_DES_VCH9 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH9")
        self.UCF_MBOM_COMP_REF_DES_VCH10 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH10")
        self.UCF_MBOM_COMP_REF_DES_VCH11 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH11")
        self.UCF_MBOM_COMP_REF_DES_VCH12 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH12")
        self.UCF_MBOM_COMP_REF_DES_VCH13 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH13")
        self.UCF_MBOM_COMP_REF_DES_VCH14 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH14")
        self.UCF_MBOM_COMP_REF_DES_VCH15 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH15")
        self.UCF_MBOM_COMP_REF_DES_NUM1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_NUM1")
        self.UCF_MBOM_COMP_REF_DES_NUM2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_NUM2")
        self.UCF_MBOM_COMP_REF_DES_NUM3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_NUM3")
        self.UCF_MBOM_COMP_REF_DES_NUM4 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_NUM4")
        self.UCF_MBOM_COMP_REF_DES_NUM5 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_NUM5")
        self.UCF_MBOM_COMP_REF_DES_DATE1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_DATE1")
        self.UCF_MBOM_COMP_REF_DES_DATE2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_DATE2")
        self.UCF_MBOM_COMP_REF_DES_DATE3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_DATE3")
        self.UCF_MBOM_COMP_REF_DES_DATE4 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_DATE4")
        self.UCF_MBOM_COMP_REF_DES_DATE5 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_DATE5")
        self.UCF_MBOM_COMP_REF_DES_FLAG1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_FLAG1")
        self.UCF_MBOM_COMP_REF_DES_FLAG2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_FLAG2")
        self.UCF_MBOM_COMP_REF_DES_FLAG3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_FLAG3")
        self.UCF_MBOM_COMP_REF_DES_FLAG4 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_FLAG4")
        self.UCF_MBOM_COMP_REF_DES_FLAG5 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_FLAG5")
        self.UCF_MBOM_COMP_REF_DES_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH255_1")
        self.UCF_MBOM_COMP_REF_DES_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH255_2")
        self.UCF_MBOM_COMP_REF_DES_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH255_3")
        self.UCF_MBOM_COMP_REF_DES_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH4000_1")
        self.UCF_MBOM_COMP_REF_DES_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_MBOM_COMP_REF_DES_VCH4000_2")

class SFWID_ORDER_NOTIFICATION:
    schema = {
        "ORDER_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_TAG": "STRING",
        "OBJECT_REV": "STRING",
        "PROPAGATION_ACTION": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OPER_NO": "STRING",
        "STEP_NO": "STRING",
        "CURRENT_OBJECT_ID": "STRING",
        "CURRENT_REVISION": "STRING",
        "IDENTITY_COL": "NUMBER",
    }
    primary_key_columns = [
        "IDENTITY_COL",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_NOTIF_ORDER_FK", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.OBJECT_TAG = parse_value(self.schema, column_value_map, "OBJECT_TAG")
        "User provided unique identifier of the multimedia object; can be NULL and can be modified."
        self.OBJECT_REV = parse_value(self.schema, column_value_map, "OBJECT_REV")
        "The system generated revision number of the multimedia object."
        self.PROPAGATION_ACTION = parse_value(self.schema, column_value_map, "PROPAGATION_ACTION")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.CURRENT_OBJECT_ID = parse_value(self.schema, column_value_map, "CURRENT_OBJECT_ID")
        "Unique system generated identifier for a given multimedia object tht now has a more recent revision."
        self.CURRENT_REVISION = parse_value(self.schema, column_value_map, "CURRENT_REVISION")
        self.IDENTITY_COL = parse_value(self.schema, column_value_map, "IDENTITY_COL")

class SFWID_AS_WORKED_BOM_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "AS_WORKED_BOM_ID": "STRING",
        "ASGND_ITEM_ID": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "PARENT_ITEM_ID": "STRING",
        "LOT_NO": "STRING",
        "SERIAL_NO": "STRING",
        "PARENT_LOT_NO": "STRING",
        "PARENT_SERIAL_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "ORDER_NO": "STRING",
        "OPER_KEY": "NUMBER",
        "OPER_NO": "STRING",
        "REF_DES": "STRING",
        "LOT_ID": "STRING",
        "SERIAL_ID": "STRING",
        "PARENT_SERIAL_ID": "STRING",
        "PARENT_LOT_ID": "STRING",
        "PART_TITLE": "STRING",
        "PART_QTY": "NUMBER",
        "FIND_NO": "STRING",
        "SPOOL_NO": "STRING",
        "EXP_DATE": "STRING",
        "REMOVE_FLAG": "STRING",
        "PART_ACTION": "STRING",
        "PARENT_PART_NO": "STRING",
        "COMMENTS": "STRING",
        "STEP_KEY": "NUMBER",
        "STEP_NO": "STRING",
        "UOM": "STRING",
        "HIST_ALT_ID": "STRING",
        "ALLOC_QTY_FLAG": "STRING",
        "REMOVE_WITHOUT_INSTALL_FLAG": "STRING",
        "OPT_DC1_VALUE": "STRING",
        "OPT_DC2_VALUE": "STRING",
        "OPT_DC3_VALUE": "STRING",
        "OPT_DC4_VALUE": "STRING",
        "OPER_ITERATION": "NUMBER",
        "OPER_EXE_COUNT": "NUMBER",
        "PLND_ITEM_ID": "STRING",
        "UCF_ASWRKD_BOM_VCH1": "STRING",
        "UCF_ASWRKD_BOM_VCH2": "STRING",
        "UCF_ASWRKD_BOM_VCH3": "STRING",
        "UCF_ASWRKD_BOM_VCH4": "STRING",
        "UCF_ASWRKD_BOM_VCH5": "STRING",
        "UCF_ASWRKD_BOM_VCH6": "STRING",
        "UCF_ASWRKD_BOM_VCH7": "STRING",
        "UCF_ASWRKD_BOM_VCH8": "STRING",
        "UCF_ASWRKD_BOM_VCH9": "STRING",
        "UCF_ASWRKD_BOM_VCH10": "STRING",
        "UCF_ASWRKD_BOM_VCH11": "STRING",
        "UCF_ASWRKD_BOM_VCH12": "STRING",
        "UCF_ASWRKD_BOM_VCH13": "STRING",
        "UCF_ASWRKD_BOM_VCH14": "STRING",
        "UCF_ASWRKD_BOM_VCH15": "STRING",
        "UCF_ASWRKD_BOM_NUM1": "NUMBER",
        "UCF_ASWRKD_BOM_NUM2": "NUMBER",
        "UCF_ASWRKD_BOM_NUM3": "NUMBER",
        "UCF_ASWRKD_BOM_NUM4": "NUMBER",
        "UCF_ASWRKD_BOM_NUM5": "NUMBER",
        "UCF_ASWRKD_BOM_DATE1": "STRING",
        "UCF_ASWRKD_BOM_DATE2": "STRING",
        "UCF_ASWRKD_BOM_DATE3": "STRING",
        "UCF_ASWRKD_BOM_DATE4": "STRING",
        "UCF_ASWRKD_BOM_DATE5": "STRING",
        "UCF_ASWRKD_BOM_FLAG1": "STRING",
        "UCF_ASWRKD_BOM_FLAG2": "STRING",
        "UCF_ASWRKD_BOM_FLAG3": "STRING",
        "UCF_ASWRKD_BOM_FLAG4": "STRING",
        "UCF_ASWRKD_BOM_FLAG5": "STRING",
        "UCF_ASWRKD_BOM_VCH255_1": "STRING",
        "UCF_ASWRKD_BOM_VCH255_2": "STRING",
        "UCF_ASWRKD_BOM_VCH255_3": "STRING",
        "UCF_ASWRKD_BOM_VCH4000_1": "STRING",
        "UCF_ASWRKD_BOM_VCH4000_2": "STRING",
        "REPLACEMENT_ACTION": "STRING",
        "NEW_SERIAL_NO": "STRING",
        "REF_DOC": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "UID_COMPOSITE": "STRING",
        "PART_DAT_COL_ID": "STRING",
        "UID_LABEL": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "SECURITY_GROUP": "STRING",
        "REMOVE_FROM_PART": "STRING",
        "REMOVE_FROM_SERIAL_NO": "STRING",
        "REMOVE_FROM_LOT_NO": "STRING",
        "CONSTRUCT_TYPE": "STRING",
        "NEW_LOT_NO": "STRING",
        "INSTALL_IN_PART_NO": "STRING",
        "INSTALL_IN_SERIAL_NO": "STRING",
        "INSTALL_IN_LOT_NO": "STRING",
        "INSTALL_AGAINST_PART_NO": "STRING",
        "INSTALL_AGAINST_SERIAL_NO": "STRING",
        "INSTALL_AGAINST_LOT_NO": "STRING",
        "DESIGN_AUTHORITY": "STRING",
        "MANUFACTURER_CODE": "STRING",
        "MANUFACTURER_PART_NO": "STRING",
        "MANUFACTURER_SERIAL_NO": "STRING",
        "MANUFACTURER_LOT_NO": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.AS_WORKED_BOM_ID = parse_value(self.schema, column_value_map, "AS_WORKED_BOM_ID")
        "System-generated identifier of the as-worked BOM."
        self.ASGND_ITEM_ID = parse_value(self.schema, column_value_map, "ASGND_ITEM_ID")
        "Unique, system-generated ID of the given serialized component/part as used in the operation."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.PARENT_ITEM_ID = parse_value(self.schema, column_value_map, "PARENT_ITEM_ID")
        "Unique, system-generated ID of the parent component/part."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.PARENT_LOT_NO = parse_value(self.schema, column_value_map, "PARENT_LOT_NO")
        "User-assigned lot number of a given component/part."
        self.PARENT_SERIAL_NO = parse_value(self.schema, column_value_map, "PARENT_SERIAL_NO")
        "User-assigned serial number of the parent component/part."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        "Unique, user-assigned identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "Reference Designator: the specific location of the given component/part on the parent physical unit."
        self.LOT_ID = parse_value(self.schema, column_value_map, "LOT_ID")
        "Unique, system-generated identifier of the lot number assigned to a given component/part."
        self.SERIAL_ID = parse_value(self.schema, column_value_map, "SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to a given component/part."
        self.PARENT_SERIAL_ID = parse_value(self.schema, column_value_map, "PARENT_SERIAL_ID")
        "Unique, system-generated identifier of a serial number assigned to the parent component/part."
        self.PARENT_LOT_ID = parse_value(self.schema, column_value_map, "PARENT_LOT_ID")
        "Unique, system-generated identifier of a lot number assigned to the parent component/part."
        self.PART_TITLE = parse_value(self.schema, column_value_map, "PART_TITLE")
        "A descriptive title or name of the part."
        self.PART_QTY = parse_value(self.schema, column_value_map, "PART_QTY")
        "Number of components/parts."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.SPOOL_NO = parse_value(self.schema, column_value_map, "SPOOL_NO")
        "Number of the associated spool."
        self.EXP_DATE = parse_value(self.schema, column_value_map, "EXP_DATE")
        "The expiration date of the component part."
        self.REMOVE_FLAG = parse_value(self.schema, column_value_map, "REMOVE_FLAG")
        "A flag (Y/N) indicating whether a currently used component/part should be or was removed."
        self.PART_ACTION = parse_value(self.schema, column_value_map, "PART_ACTION")
        "The intended action of the component/part, i.e., USE or REMOVE."
        self.PARENT_PART_NO = parse_value(self.schema, column_value_map, "PARENT_PART_NO")
        "The part number of the parent part."
        self.COMMENTS = parse_value(self.schema, column_value_map, "COMMENTS")
        "Additional comments about a given as-worked BOM."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Unit of Measure for the component/part."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ALLOC_QTY_FLAG = parse_value(self.schema, column_value_map, "ALLOC_QTY_FLAG")
        "In the case of a split involving a non-serialized part, a flag (Y/N) indicating whether the component has been allocated to the split order."
        self.REMOVE_WITHOUT_INSTALL_FLAG = parse_value(self.schema, column_value_map, "REMOVE_WITHOUT_INSTALL_FLAG")
        "In the case of a split involving a non-serialized part, a flag (Y/N) indicating whether the component has undergone an unplanned removal."
        self.OPT_DC1_VALUE = parse_value(self.schema, column_value_map, "OPT_DC1_VALUE")
        "For the given item/part, value of user-configured data collection 1."
        self.OPT_DC2_VALUE = parse_value(self.schema, column_value_map, "OPT_DC2_VALUE")
        "For the given item/part, value of user-configured data collection 2."
        self.OPT_DC3_VALUE = parse_value(self.schema, column_value_map, "OPT_DC3_VALUE")
        "For the given item/part, value of user-configured data collection 3."
        self.OPT_DC4_VALUE = parse_value(self.schema, column_value_map, "OPT_DC4_VALUE")
        "For the given item/part, value of user-configured data collection 4."
        self.OPER_ITERATION = parse_value(self.schema, column_value_map, "OPER_ITERATION")
        "When executing a work order with returns (iterative branching) this is the number of iterations the operation has undergone."
        self.OPER_EXE_COUNT = parse_value(self.schema, column_value_map, "OPER_EXE_COUNT")
        "When executing a work order with returns (iterative branching) this is the number of times the operation has been executed."
        self.PLND_ITEM_ID = parse_value(self.schema, column_value_map, "PLND_ITEM_ID")
        "Unique, system-generated ID of the given component/part."
        self.UCF_ASWRKD_BOM_VCH1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH1")
        self.UCF_ASWRKD_BOM_VCH2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH2")
        self.UCF_ASWRKD_BOM_VCH3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH3")
        self.UCF_ASWRKD_BOM_VCH4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH4")
        self.UCF_ASWRKD_BOM_VCH5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH5")
        self.UCF_ASWRKD_BOM_VCH6 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH6")
        self.UCF_ASWRKD_BOM_VCH7 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH7")
        self.UCF_ASWRKD_BOM_VCH8 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH8")
        self.UCF_ASWRKD_BOM_VCH9 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH9")
        self.UCF_ASWRKD_BOM_VCH10 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH10")
        self.UCF_ASWRKD_BOM_VCH11 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH11")
        self.UCF_ASWRKD_BOM_VCH12 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH12")
        self.UCF_ASWRKD_BOM_VCH13 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH13")
        self.UCF_ASWRKD_BOM_VCH14 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH14")
        self.UCF_ASWRKD_BOM_VCH15 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH15")
        self.UCF_ASWRKD_BOM_NUM1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_NUM1")
        self.UCF_ASWRKD_BOM_NUM2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_NUM2")
        self.UCF_ASWRKD_BOM_NUM3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_NUM3")
        self.UCF_ASWRKD_BOM_NUM4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_NUM4")
        self.UCF_ASWRKD_BOM_NUM5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_NUM5")
        self.UCF_ASWRKD_BOM_DATE1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_DATE1")
        self.UCF_ASWRKD_BOM_DATE2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_DATE2")
        self.UCF_ASWRKD_BOM_DATE3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_DATE3")
        self.UCF_ASWRKD_BOM_DATE4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_DATE4")
        self.UCF_ASWRKD_BOM_DATE5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_DATE5")
        self.UCF_ASWRKD_BOM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_FLAG1")
        self.UCF_ASWRKD_BOM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_FLAG2")
        self.UCF_ASWRKD_BOM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_FLAG3")
        self.UCF_ASWRKD_BOM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_FLAG4")
        self.UCF_ASWRKD_BOM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_FLAG5")
        self.UCF_ASWRKD_BOM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH255_1")
        self.UCF_ASWRKD_BOM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH255_2")
        self.UCF_ASWRKD_BOM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH255_3")
        self.UCF_ASWRKD_BOM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH4000_1")
        self.UCF_ASWRKD_BOM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ASWRKD_BOM_VCH4000_2")
        self.REPLACEMENT_ACTION = parse_value(self.schema, column_value_map, "REPLACEMENT_ACTION")
        self.NEW_SERIAL_NO = parse_value(self.schema, column_value_map, "NEW_SERIAL_NO")
        self.REF_DOC = parse_value(self.schema, column_value_map, "REF_DOC")
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.UID_COMPOSITE = parse_value(self.schema, column_value_map, "UID_COMPOSITE")
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.UID_LABEL = parse_value(self.schema, column_value_map, "UID_LABEL")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.REMOVE_FROM_PART = parse_value(self.schema, column_value_map, "REMOVE_FROM_PART")
        self.REMOVE_FROM_SERIAL_NO = parse_value(self.schema, column_value_map, "REMOVE_FROM_SERIAL_NO")
        self.REMOVE_FROM_LOT_NO = parse_value(self.schema, column_value_map, "REMOVE_FROM_LOT_NO")
        self.CONSTRUCT_TYPE = parse_value(self.schema, column_value_map, "CONSTRUCT_TYPE")
        self.NEW_LOT_NO = parse_value(self.schema, column_value_map, "NEW_LOT_NO")
        "New Lot No for Part Replacement Action."
        self.INSTALL_IN_PART_NO = parse_value(self.schema, column_value_map, "INSTALL_IN_PART_NO")
        "this is parent part number where actually this component part is going to be installed."
        self.INSTALL_IN_SERIAL_NO = parse_value(self.schema, column_value_map, "INSTALL_IN_SERIAL_NO")
        "this is parent serial number where actually this component part is going to be installed."
        self.INSTALL_IN_LOT_NO = parse_value(self.schema, column_value_map, "INSTALL_IN_LOT_NO")
        "this is parent lot number where actually this component part is going to be installed."
        self.INSTALL_AGAINST_PART_NO = parse_value(self.schema, column_value_map, "INSTALL_AGAINST_PART_NO")
        "this is component part number which is replaced by current component part number."
        self.INSTALL_AGAINST_SERIAL_NO = parse_value(self.schema, column_value_map, "INSTALL_AGAINST_SERIAL_NO")
        "this is component part serial number which is replaced by current component serial number."
        self.INSTALL_AGAINST_LOT_NO = parse_value(self.schema, column_value_map, "INSTALL_AGAINST_LOT_NO")
        "this is component part lot number which is replaced by current component lot number."
        self.DESIGN_AUTHORITY = parse_value(self.schema, column_value_map, "DESIGN_AUTHORITY")
        self.MANUFACTURER_CODE = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE")
        self.MANUFACTURER_PART_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_PART_NO")
        self.MANUFACTURER_SERIAL_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_SERIAL_NO")
        self.MANUFACTURER_LOT_NO = parse_value(self.schema, column_value_map, "MANUFACTURER_LOT_NO")

class SFDB_INFO:
    schema = {
        "RELEASE": "STRING",
        "VERSION": "NUMBER",
        "RELEASE_TYPE": "STRING",
        "EXE_COUNT": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LONG_FND_VER": "STRING",
        "OOB_RELEASE": "STRING",
    }
    primary_key_columns = [
        "RELEASE",
        "VERSION",
        "RELEASE_TYPE",
        "EXE_COUNT",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.RELEASE = parse_value(self.schema, column_value_map, "RELEASE")
        "Script release identifier."
        self.VERSION = parse_value(self.schema, column_value_map, "VERSION")
        "Script version."
        self.RELEASE_TYPE = parse_value(self.schema, column_value_map, "RELEASE_TYPE")
        "Script type."
        self.EXE_COUNT = parse_value(self.schema, column_value_map, "EXE_COUNT")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LONG_FND_VER = parse_value(self.schema, column_value_map, "LONG_FND_VER")
        self.OOB_RELEASE = parse_value(self.schema, column_value_map, "OOB_RELEASE")
        "To Decide customers add any custom entry or default in SFDB_INFO table."

class SFFND_ARCHIVE_DOCUMENT:
    schema = {
        "ARCH_BATCH_NO": "STRING",
        "ARCH_DOCUMENT_ID": "STRING",
        "ARCH_DOCUMENT_NO": "STRING",
        "ARCH_DOCUMENT_TYPE": "STRING",
        "STATUS": "STRING",
        "ARCH_DOCUMENT_URL": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ARCH_BATCH_NO",
        "ARCH_DOCUMENT_ID",
        "ARCH_DOCUMENT_NO",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_ARCHIVE_DOCUMENT_FK1", ["ARCH_BATCH_NO"], "SFFND_ARCHIVE_BATCH", ["ARCH_BATCH_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ARCH_BATCH_NO = parse_value(self.schema, column_value_map, "ARCH_BATCH_NO")
        "Stores batch no which is provided by user."
        self.ARCH_DOCUMENT_ID = parse_value(self.schema, column_value_map, "ARCH_DOCUMENT_ID")
        "Stores Document Ids like Order Id, Disc Id."
        self.ARCH_DOCUMENT_NO = parse_value(self.schema, column_value_map, "ARCH_DOCUMENT_NO")
        "Stores Document No like Disc Line No."
        self.ARCH_DOCUMENT_TYPE = parse_value(self.schema, column_value_map, "ARCH_DOCUMENT_TYPE")
        "Stores Document Type like WORKORDER, DISCREPANCY etc."
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "Stores document status."
        self.ARCH_DOCUMENT_URL = parse_value(self.schema, column_value_map, "ARCH_DOCUMENT_URL")
        "Stores document URL where document is located on server."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class OAUTH_CLIENT_DETAILS:
    schema = {
        "CLIENT_ID": "STRING",
        "RESOURCE_IDS": "STRING",
        "CLIENT_SECRET": "STRING",
        "SCOPE": "STRING",
        "AUTHORIZED_GRANT_TYPES": "STRING",
        "WEB_SERVER_REDIRECT_URI": "STRING",
        "AUTHORITIES": "STRING",
        "ACCESS_TOKEN_VALIDITY": "NUMBER",
        "REFRESH_TOKEN_VALIDITY": "NUMBER",
        "ADDITIONAL_INFORMATION": "STRING",
        "AUTOAPPROVE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CLIENT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CLIENT_ID = parse_value(self.schema, column_value_map, "CLIENT_ID")
        self.RESOURCE_IDS = parse_value(self.schema, column_value_map, "RESOURCE_IDS")
        self.CLIENT_SECRET = parse_value(self.schema, column_value_map, "CLIENT_SECRET")
        self.SCOPE = parse_value(self.schema, column_value_map, "SCOPE")
        self.AUTHORIZED_GRANT_TYPES = parse_value(self.schema, column_value_map, "AUTHORIZED_GRANT_TYPES")
        self.WEB_SERVER_REDIRECT_URI = parse_value(self.schema, column_value_map, "WEB_SERVER_REDIRECT_URI")
        self.AUTHORITIES = parse_value(self.schema, column_value_map, "AUTHORITIES")
        self.ACCESS_TOKEN_VALIDITY = parse_value(self.schema, column_value_map, "ACCESS_TOKEN_VALIDITY")
        self.REFRESH_TOKEN_VALIDITY = parse_value(self.schema, column_value_map, "REFRESH_TOKEN_VALIDITY")
        self.ADDITIONAL_INFORMATION = parse_value(self.schema, column_value_map, "ADDITIONAL_INFORMATION")
        self.AUTOAPPROVE = parse_value(self.schema, column_value_map, "AUTOAPPROVE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFPL_EFF_GROUP_RANGE:
    schema = {
        "EFF_GROUP_ID": "STRING",
        "EFF_GRP_RANGE_ID": "NUMBER",
        "CONFIG_ID": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "EFF_GRP_RANGE_ID",
        "EFF_GROUP_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_EFF_GROUP_RANGE_FK3", ["CONFIG_ID"], "SFFND_CONFIG_DEF", ["CONFIG_ID"]),
        DbForeignKey("SFPL_EFF_GROUP_RANGE_FK1", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
        DbForeignKey("SFPL_EFF_GROUP_RANGE_FK2", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        self.EFF_GRP_RANGE_ID = parse_value(self.schema, column_value_map, "EFF_GRP_RANGE_ID")
        "Unique, System-generated identifier of given claim."
        self.CONFIG_ID = parse_value(self.schema, column_value_map, "CONFIG_ID")
        "Unique system generated column to identify each configuration value."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "Effectivity From given by User."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "Effectivity Thru given by User."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "Effectivity From Date given by User."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "Effectivity Thru Date given by User."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last Operation (UPDATE, INSERT, COPY, etc.) applied to the record."

class SFWID_ORDER_TEXT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "HIST_ALT_ID": "STRING",
        "ORDER_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ALT_COUNT": "NUMBER",
        "ALT_ID": "STRING",
        "TEXT": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."

class SFSQA_CHARGE_CODE_DEF:
    schema = {
        "CHARGE_CODE": "NUMBER",
        "CHARGE_CODE_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
    }
    primary_key_columns = [
        "CHARGE_CODE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFSQA_DISC_ITEM_FK19",
    ]
    def __init__(self, column_value_map):
        self.CHARGE_CODE = parse_value(self.schema, column_value_map, "CHARGE_CODE")
        "Associated charge code."
        self.CHARGE_CODE_DESC = parse_value(self.schema, column_value_map, "CHARGE_CODE_DESC")
        "Description of the charge code."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.SFSQA_DISC_ITEM_FK19 = []

class SFFND_USER_LOCALE_SETTINGS:
    schema = {
        "USERID": "STRING",
        "PARAMETER_NAME": "STRING",
        "PARAMETER_VALUE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "USERID",
        "PARAMETER_NAME",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_USER_LOCALE_SETTINGS_FK1", ["USERID"], "SFFND_USER", ["USERID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.USERID = parse_value(self.schema, column_value_map, "USERID")
        "Solumina login ID of the user."
        self.PARAMETER_NAME = parse_value(self.schema, column_value_map, "PARAMETER_NAME")
        "parameter name of user related to locale. Eg. ShortDate, LongDate etc."
        self.PARAMETER_VALUE = parse_value(self.schema, column_value_map, "PARAMETER_VALUE")
        "parameter value of user related to locale. Eg. mm/dd/yyyy, month-dd- yy etc."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFFND_WORK_FLOW:
    schema = {
        "FROM_TASK_TYPE": "STRING",
        "FROM_QUEUE_TYPE": "STRING",
        "FROM_STATUS": "STRING",
        "TO_TASK_TYPE": "STRING",
        "TO_QUEUE_TYPE": "STRING",
        "TO_STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "NEW_TASK_ACTION": "STRING",
        "ENDING_TASK_FLAG": "STRING",
        "NEW_TASK_PROC_NAME": "STRING",
        "STARTING_TASK_FLAG": "STRING",
    }
    primary_key_columns = [
        "FROM_TASK_TYPE",
        "FROM_QUEUE_TYPE",
        "FROM_STATUS",
        "TO_TASK_TYPE",
        "TO_QUEUE_TYPE",
        "TO_STATUS",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_WORK_FLOW_FK2", ["TO_QUEUE_TYPE"], "SFFND_QUEUE_TYPE_DEF", ["QUEUE_TYPE"]),
        DbForeignKey("SFFND_WORK_FLOW_FK1", ["FROM_QUEUE_TYPE"], "SFFND_QUEUE_TYPE_DEF", ["QUEUE_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.FROM_TASK_TYPE = parse_value(self.schema, column_value_map, "FROM_TASK_TYPE")
        "Type of the triggering task."
        self.FROM_QUEUE_TYPE = parse_value(self.schema, column_value_map, "FROM_QUEUE_TYPE")
        "Type of task queue the triggering task is associated with."
        self.FROM_STATUS = parse_value(self.schema, column_value_map, "FROM_STATUS")
        "The current status of the triggering task."
        self.TO_TASK_TYPE = parse_value(self.schema, column_value_map, "TO_TASK_TYPE")
        "The task being triggered."
        self.TO_QUEUE_TYPE = parse_value(self.schema, column_value_map, "TO_QUEUE_TYPE")
        "Type of task queue the triggered task is associated with."
        self.TO_STATUS = parse_value(self.schema, column_value_map, "TO_STATUS")
        "The current status of the triggered task."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.NEW_TASK_ACTION = parse_value(self.schema, column_value_map, "NEW_TASK_ACTION")
        "The action (INSERT or REPLACE) that creates the new task, the tasked been triggered by the triggering task."
        self.ENDING_TASK_FLAG = parse_value(self.schema, column_value_map, "ENDING_TASK_FLAG")
        "A flag (Y Yes or space No) indicating whether or not the triggering task is a leaf task in a work flow tree structure. A leaf task doesn't trigger the creation of any other task, therefore, marks the end of a work flow branch."
        self.NEW_TASK_PROC_NAME = parse_value(self.schema, column_value_map, "NEW_TASK_PROC_NAME")
        "The stored procedure to be invoked after the triggered task been created."
        self.STARTING_TASK_FLAG = parse_value(self.schema, column_value_map, "STARTING_TASK_FLAG")
        "A flag (Y Yes or space No) indicating whether or not the triggering task is the root task in a work flow tree structure. A root task marks the beginning of a work flow, and the creation of the root task is not triggered by another task."

class SFCORE_LICENSE:
    schema = {
        "LICENSE_ID": "STRING",
        "LICENSE_TIME_STAMP": "STRING",
        "LICENSE_DATA": "STRING",
        "ENABLE_MI": "STRING",
    }
    primary_key_columns = [
        "LICENSE_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.LICENSE_ID = parse_value(self.schema, column_value_map, "LICENSE_ID")
        "Unique identifier of a Solumina software license."
        self.LICENSE_TIME_STAMP = parse_value(self.schema, column_value_map, "LICENSE_TIME_STAMP")
        "Date and time of the license entry being created."
        self.LICENSE_DATA = parse_value(self.schema, column_value_map, "LICENSE_DATA")
        "Encrypted text to be checked against at user login to verify the validity of the Solumina software license. A user may be granted courtesy login to the system yet have no access to any Solumina functionality because the license is not valid, expired for instance."
        self.ENABLE_MI = parse_value(self.schema, column_value_map, "ENABLE_MI")
        "Encrypted text to be checked against at user login to verify the validity of the Solumina MI license."

class SFWID_ORDER_TEXT:
    schema = {
        "ORDER_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ALT_COUNT": "NUMBER",
        "ALT_ID": "STRING",
        "TEXT": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_TEXT_DESC_FK", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_TEXT_ALT_FK", ["ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
        "SFWID_ORDER_TEXT_SV_FK1",
        "SFFND_HTREF_ORDERTXT_FK",
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.SFWID_ORDER_TEXT_SV_FK1 = []
        self.SFFND_HTREF_ORDERTXT_FK = []

class SFSQA_PO_LINE_CLAUSE:
    schema = {
        "PO_ID": "STRING",
        "PO_LINE_ITEM": "STRING",
        "PO_CLAUSE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "PO_CLAUSE_DESC": "STRING",
    }
    primary_key_columns = [
        "PO_ID",
        "PO_LINE_ITEM",
        "PO_CLAUSE",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_PO_LINE_CLAUSE_FK2", ["PO_ID","PO_LINE_ITEM"], "SFSQA_PO_LINE", ["PO_ID","PO_LINE_ITEM"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PO_ID = parse_value(self.schema, column_value_map, "PO_ID")
        self.PO_LINE_ITEM = parse_value(self.schema, column_value_map, "PO_LINE_ITEM")
        self.PO_CLAUSE = parse_value(self.schema, column_value_map, "PO_CLAUSE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.PO_CLAUSE_DESC = parse_value(self.schema, column_value_map, "PO_CLAUSE_DESC")

class SFSQA_SLOT_GEN_DEF:
    schema = {
        "SLOT_NO": "NUMBER",
    }
    primary_key_columns = [
        "SLOT_NO",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.SLOT_NO = parse_value(self.schema, column_value_map, "SLOT_NO")

class SFQA_CA_REQUEST_TEXT:
    schema = {
        "CA_REQUEST_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
    }
    primary_key_columns = [
        "CA_REQUEST_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFQA_CA_REQ_TXT_REQ_FK", ["CA_REQUEST_ID"], "SFQA_CA_REQUEST", ["CA_REQUEST_ID"]),
    ]
    refs = [
        "SFFND_HTREF_CA_REQ_T_REQ_T_FK",
    ]
    def __init__(self, column_value_map):
        self.CA_REQUEST_ID = parse_value(self.schema, column_value_map, "CA_REQUEST_ID")
        "Unique identifier of a given Corrective Action request."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.SFFND_HTREF_CA_REQ_T_REQ_T_FK = []

class SFPL_ENG_CHANGE_PART_DISP:
    schema = {
        "PART_DISP_TYPE": "STRING",
        "ON_ORDER_FLAG": "STRING",
        "WORK_IN_PROCESS_FLAG": "STRING",
        "FINISHED_FLAG": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "PART_DISP_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_AFFECTED_OBJECTS_FK8",
        "SFPL_AFFECTED_OBJECTS_FK9",
        "SFPL_AFFECTED_OBJECTS_FK10",
    ]
    def __init__(self, column_value_map):
        self.PART_DISP_TYPE = parse_value(self.schema, column_value_map, "PART_DISP_TYPE")
        "Part Disposition Type."
        self.ON_ORDER_FLAG = parse_value(self.schema, column_value_map, "ON_ORDER_FLAG")
        "A flag (Y/N) indicating the Part Disposition Type as On Order."
        self.WORK_IN_PROCESS_FLAG = parse_value(self.schema, column_value_map, "WORK_IN_PROCESS_FLAG")
        "A flag (Y/N) indicating the Part Disposition Type as Work In Process."
        self.FINISHED_FLAG = parse_value(self.schema, column_value_map, "FINISHED_FLAG")
        "A flag (Y/N) indicating the Part Disposition Type as Finished."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFPL_AFFECTED_OBJECTS_FK8 = []
        self.SFPL_AFFECTED_OBJECTS_FK9 = []
        self.SFPL_AFFECTED_OBJECTS_FK10 = []

class SFCORE_REQUEST_PARAMETERS:
    schema = {
        "REQUEST_ID": "STRING",
        "PARAM_NAME": "STRING",
        "PARAM_USE": "STRING",
        "DISPLAYED_NAME": "STRING",
        "PARAM_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "AUTOFILL": "STRING",
        "AUTOPROMPT": "STRING",
        "LOOKUP_SQL_ID": "STRING",
        "DEFAULT_VALUE": "STRING",
    }
    primary_key_columns = [
        "REQUEST_ID",
        "PARAM_NAME",
        "PARAM_USE",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REQUEST_ID = parse_value(self.schema, column_value_map, "REQUEST_ID")
        "System generated unique identifier for a given request."
        self.PARAM_NAME = parse_value(self.schema, column_value_map, "PARAM_NAME")
        "User defineable parameter name."
        self.PARAM_USE = parse_value(self.schema, column_value_map, "PARAM_USE")
        "Description of parameter use/meaning."
        self.DISPLAYED_NAME = parse_value(self.schema, column_value_map, "DISPLAYED_NAME")
        "Name to be displayed."
        self.PARAM_TYPE = parse_value(self.schema, column_value_map, "PARAM_TYPE")
        "Parameter type/classification."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.AUTOFILL = parse_value(self.schema, column_value_map, "AUTOFILL")
        "Flag that indicates if parameters should be automaitcally filled in."
        self.AUTOPROMPT = parse_value(self.schema, column_value_map, "AUTOPROMPT")
        "Flag that indicates if the user should be prompted automaitcally."
        self.LOOKUP_SQL_ID = parse_value(self.schema, column_value_map, "LOOKUP_SQL_ID")
        "The SQL_LIB entry to hanlde lookup parameters for a given print request."
        self.DEFAULT_VALUE = parse_value(self.schema, column_value_map, "DEFAULT_VALUE")
        "A given parameters defined default value."

class SFCORE_SQL_LIB_HIST:
    schema = {
        "HIST_ID": "STRING",
        "OLD_HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "SQL_ID": "STRING",
        "SQL_ID_DISPL": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "READ_ONLY": "NUMBER",
        "DATASOURCE": "STRING",
        "STYPE": "STRING",
        "DESCRIPTION": "STRING",
        "SQL_TEXT": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.OLD_HIST_ID = parse_value(self.schema, column_value_map, "OLD_HIST_ID")
        "Original numeric system generated unqiue identifier of this historical record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.SQL_ID = parse_value(self.schema, column_value_map, "SQL_ID")
        "Unique identifier, all uppercase, of a piece of a SQL script."
        self.SQL_ID_DISPL = parse_value(self.schema, column_value_map, "SQL_ID_DISPL")
        "Reformatted SQL library entry ID for display."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.READ_ONLY = parse_value(self.schema, column_value_map, "READ_ONLY")
        "Flag (1 Yes or 0 No.) indicating whether or not the SQL script entry is for read only."
        self.DATASOURCE = parse_value(self.schema, column_value_map, "DATASOURCE")
        "Not in use."
        self.STYPE = parse_value(self.schema, column_value_map, "STYPE")
        "Script type."
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        "description of column and its definition"
        self.SQL_TEXT = parse_value(self.schema, column_value_map, "SQL_TEXT")
        "The actual SQL code of the script."

class SFFND_UNIT_TYPE_DEF:
    schema = {
        "UNIT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "COMPARISON_RULE": "STRING",
        "UNIT_TYPE_DESC": "STRING",
    }
    primary_key_columns = [
        "UNIT_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_MFG_BOM_COMP_UNIT_FK",
        "SFPL_STEP_TOOL_FK1",
        "SFWID_OWP_DEF_FK4",
        "SFWID_OPER_TOOL_FK02",
        "SFPL_MFG_BOM_MM_OBJECT_ORIG_FK4",
        "SFWID_OPER_MM_OBJECTS_FK4",
        "SFPL_MBOM_COMP_ALT_XRF_ORG_F3",
        "SFWID_ORDER_MM_OBJECTS_ALT_FK4",
        "SFPL_MFG_BOM_REV_EFF_FK2",
        "SFPL_PLANDESC_UNITTYPDEF_FK",
        "SFPL_MFG_BOM_MM_OBJECT_FK4",
        "SFWID_OPER_TOOL_ALT_FK5",
        "SFPL_PLAN_EFF_UNIT_FK",
        "SFWID_ORDITEMALT_XREF_UNIT_FK",
        "SFPL_MFG_BOM_COMP_ALT_XREF_FK3",
        "SFWID_OPER_ITEMS_UNIT_FK",
        "SFPL_STEP_MM_OBJECTS_FK4",
        "SFWID_ORDER_DESC_UNIT_FK",
        "SFPL_MFG_BOM_TOOL_ORIG_FK6",
        "SFPL_MFG_BOM_COMP_ORIG_FK6",
        "SFWID_ORDER_MM_OBJECTS_FK4",
        "SFPL_PWP_DESC_FK2",
        "SFPL_CHANGE_REQUEST_FK3",
        "SFPL_MFG_BOM_TOOL_FK6",
        "SFWID_OPER_MM_OBJECTS_ALT_FK4",
        "SFPL_EFF_GROUP_RANGE_FK2",
        "SFPL_STEP_ITEMS_UNIT_FK",
        "SFPL_PLAN_MM_OBJECTS_FK4",
        "SFPL_STEP_DAT_COL_EFF_UNIT_FK",
    ]
    def __init__(self, column_value_map):
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.COMPARISON_RULE = parse_value(self.schema, column_value_map, "COMPARISON_RULE")
        "A code that indicate how the value of the upper and lower bounds of effectivities of a particular kind/type be compared. L - Left Alignment, R - Right Alignment, N - Numeric (limit to max 38 digits)"
        self.UNIT_TYPE_DESC = parse_value(self.schema, column_value_map, "UNIT_TYPE_DESC")
        "A detail description of the unit type."
        self.SFPL_MFG_BOM_COMP_UNIT_FK = []
        self.SFPL_STEP_TOOL_FK1 = []
        self.SFWID_OWP_DEF_FK4 = []
        self.SFWID_OPER_TOOL_FK02 = []
        self.SFPL_MFG_BOM_MM_OBJECT_ORIG_FK4 = []
        self.SFWID_OPER_MM_OBJECTS_FK4 = []
        self.SFPL_MBOM_COMP_ALT_XRF_ORG_F3 = []
        self.SFWID_ORDER_MM_OBJECTS_ALT_FK4 = []
        self.SFPL_MFG_BOM_REV_EFF_FK2 = []
        self.SFPL_PLANDESC_UNITTYPDEF_FK = []
        self.SFPL_MFG_BOM_MM_OBJECT_FK4 = []
        self.SFWID_OPER_TOOL_ALT_FK5 = []
        self.SFPL_PLAN_EFF_UNIT_FK = []
        self.SFWID_ORDITEMALT_XREF_UNIT_FK = []
        self.SFPL_MFG_BOM_COMP_ALT_XREF_FK3 = []
        self.SFWID_OPER_ITEMS_UNIT_FK = []
        self.SFPL_STEP_MM_OBJECTS_FK4 = []
        self.SFWID_ORDER_DESC_UNIT_FK = []
        self.SFPL_MFG_BOM_TOOL_ORIG_FK6 = []
        self.SFPL_MFG_BOM_COMP_ORIG_FK6 = []
        self.SFWID_ORDER_MM_OBJECTS_FK4 = []
        self.SFPL_PWP_DESC_FK2 = []
        self.SFPL_CHANGE_REQUEST_FK3 = []
        self.SFPL_MFG_BOM_TOOL_FK6 = []
        self.SFWID_OPER_MM_OBJECTS_ALT_FK4 = []
        self.SFPL_EFF_GROUP_RANGE_FK2 = []
        self.SFPL_STEP_ITEMS_UNIT_FK = []
        self.SFPL_PLAN_MM_OBJECTS_FK4 = []
        self.SFPL_STEP_DAT_COL_EFF_UNIT_FK = []

class SFSQA_INSP_ORDER_LIENS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "LIEN_ID": "STRING",
        "INSP_ORDER_ID": "STRING",
        "PART_NO": "STRING",
        "SERIAL_NO": "STRING",
        "LOT_NO": "STRING",
        "LIEN_STATUS": "STRING",
        "LIEN_START_DATE": "STRING",
        "LIEN_END_DATE": "STRING",
        "LIEN_WO_PERSIST_AUTH_FLAG": "STRING",
        "AUTHORIZATION_NOTES": "STRING",
        "LIEN_PERSIST_UPTO_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.LIEN_ID = parse_value(self.schema, column_value_map, "LIEN_ID")
        "Unique identifier of the Lien."
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        "Unique identifier for inspection order for which lien is created."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.SERIAL_NO = parse_value(self.schema, column_value_map, "SERIAL_NO")
        "User-assigned serial number of a given component/part."
        self.LOT_NO = parse_value(self.schema, column_value_map, "LOT_NO")
        "User-assigned lot number of a given component/part."
        self.LIEN_STATUS = parse_value(self.schema, column_value_map, "LIEN_STATUS")
        "Status of the inspection order lien."
        self.LIEN_START_DATE = parse_value(self.schema, column_value_map, "LIEN_START_DATE")
        "Timestamp on which the inspection order lien is created for the unit."
        self.LIEN_END_DATE = parse_value(self.schema, column_value_map, "LIEN_END_DATE")
        "Timestamp on which the inspection order lien is closed, or cancelled."
        self.LIEN_WO_PERSIST_AUTH_FLAG = parse_value(self.schema, column_value_map, "LIEN_WO_PERSIST_AUTH_FLAG")
        "Indicates whether an authorization for the lien must be persisted."
        self.AUTHORIZATION_NOTES = parse_value(self.schema, column_value_map, "AUTHORIZATION_NOTES")
        "Authorization Notes."
        self.LIEN_PERSIST_UPTO_ITEM_ID = parse_value(self.schema, column_value_map, "LIEN_PERSIST_UPTO_ITEM_ID")
        "Indicates the item id of the higher level unit that must be held when the discrepancy lien is inherited."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFSQA_INSP_ORDER_NOTES_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "NOTE_ID": "STRING",
        "NOTE_TYPE": "STRING",
        "NOTE_TEXT": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH1": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH2": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH3": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH4": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH5": "STRING",
        "UCF_INSP_ORDER_NOTE_FLAG1": "STRING",
        "UCF_INSP_ORDER_NOTE_FLAG2": "STRING",
        "UCF_INSP_ORDER_NOTE_FLAG3": "STRING",
        "UCF_INSP_ORDER_NOTE_NUM1": "NUMBER",
        "UCF_INSP_ORDER_NOTE_NUM2": "NUMBER",
        "UCF_INSP_ORDER_NOTE_NUM3": "NUMBER",
        "UCF_INSP_ORDER_NOTE_DATE1": "STRING",
        "UCF_INSP_ORDER_NOTE_DATE2": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH255_1": "STRING",
        "UCF_INSP_ORDER_NOTE_VCH255_2": "STRING",
        "NOTE_TITLE": "STRING",
        "NOTE_NO": "STRING",
        "NOTE_STATUS": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_REFERENCE": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.NOTE_ID = parse_value(self.schema, column_value_map, "NOTE_ID")
        self.NOTE_TYPE = parse_value(self.schema, column_value_map, "NOTE_TYPE")
        self.NOTE_TEXT = parse_value(self.schema, column_value_map, "NOTE_TEXT")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.UCF_INSP_ORDER_NOTE_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH1")
        self.UCF_INSP_ORDER_NOTE_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH2")
        self.UCF_INSP_ORDER_NOTE_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH3")
        self.UCF_INSP_ORDER_NOTE_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH4")
        self.UCF_INSP_ORDER_NOTE_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH5")
        self.UCF_INSP_ORDER_NOTE_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_FLAG1")
        self.UCF_INSP_ORDER_NOTE_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_FLAG2")
        self.UCF_INSP_ORDER_NOTE_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_FLAG3")
        self.UCF_INSP_ORDER_NOTE_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_NUM1")
        self.UCF_INSP_ORDER_NOTE_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_NUM2")
        self.UCF_INSP_ORDER_NOTE_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_NUM3")
        self.UCF_INSP_ORDER_NOTE_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_DATE1")
        self.UCF_INSP_ORDER_NOTE_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_DATE2")
        self.UCF_INSP_ORDER_NOTE_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH255_1")
        self.UCF_INSP_ORDER_NOTE_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDER_NOTE_VCH255_2")
        self.NOTE_TITLE = parse_value(self.schema, column_value_map, "NOTE_TITLE")
        self.NOTE_NO = parse_value(self.schema, column_value_map, "NOTE_NO")
        self.NOTE_STATUS = parse_value(self.schema, column_value_map, "NOTE_STATUS")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        self.OBJECT_REFERENCE = parse_value(self.schema, column_value_map, "OBJECT_REFERENCE")

class SFFND_HTREF_PLAN_TEXT:
    schema = {
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "OBJECT_TYPE": "STRING",
        "TEXT_TYPE": "STRING",
        "OBJECT_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "PLAN_ID",
        "PLAN_UPDT_NO",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("BLOCKID_FK12", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
        DbForeignKey("SFFND_HTREFPLNTXT_PLNTXT_FK", ["PLAN_ID","PLAN_UPDT_NO","TEXT_TYPE"], "SFPL_PLAN_TEXT", ["PLAN_ID","PLAN_UPDT_NO","TEXT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "The system generated unique identifier of an object link embedded in a work plan operation text block."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "The unique identifier of the object being referenced."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The object type/class which the object belongs to. For example: CAD drawing, still image, slide, UDV, standard text, audio, or video."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.OBJECT_NAME = parse_value(self.schema, column_value_map, "OBJECT_NAME")
        "A descriptive tag/name of the object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "The protocol id of a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "The host id of a Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "The file location of a Universal Resource Locator."

class SFCORE_DECODED_GUI_EVENT_DATA:
    schema = {
        "CONNECTION_ID": "STRING",
        "IPADDRESS": "STRING",
        "START_DATE": "STRING",
        "ELAPSED_TIME_TEXT": "STRING",
        "ELAPSED_TIME_MS": "NUMBER",
        "GUI_EVENT_TYPE": "STRING",
        "GUI_EVENT_NAME": "STRING",
        "GUI_EVENT_PARAMS": "STRING",
        "IDENTITY_COL": "NUMBER",
    }
    primary_key_columns = [
        "IDENTITY_COL",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CONNECTION_ID = parse_value(self.schema, column_value_map, "CONNECTION_ID")
        self.IPADDRESS = parse_value(self.schema, column_value_map, "IPADDRESS")
        self.START_DATE = parse_value(self.schema, column_value_map, "START_DATE")
        self.ELAPSED_TIME_TEXT = parse_value(self.schema, column_value_map, "ELAPSED_TIME_TEXT")
        self.ELAPSED_TIME_MS = parse_value(self.schema, column_value_map, "ELAPSED_TIME_MS")
        self.GUI_EVENT_TYPE = parse_value(self.schema, column_value_map, "GUI_EVENT_TYPE")
        self.GUI_EVENT_NAME = parse_value(self.schema, column_value_map, "GUI_EVENT_NAME")
        self.GUI_EVENT_PARAMS = parse_value(self.schema, column_value_map, "GUI_EVENT_PARAMS")
        self.IDENTITY_COL = parse_value(self.schema, column_value_map, "IDENTITY_COL")

class SFFND_ORGANIZATION_DEF:
    schema = {
        "ORGANIZATION_ID": "STRING",
        "ORGANIZATION_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
    }
    primary_key_columns = [
        "ORGANIZATION_ID",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_USER_ACTIVITY_FK2",
    ]
    def __init__(self, column_value_map):
        self.ORGANIZATION_ID = parse_value(self.schema, column_value_map, "ORGANIZATION_ID")
        self.ORGANIZATION_DESC = parse_value(self.schema, column_value_map, "ORGANIZATION_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.SFFND_USER_ACTIVITY_FK2 = []

class SFQA_CA_REQUEST_TYPE_DEF:
    schema = {
        "REQUEST_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "REQUEST_TYPE_DESC": "STRING",
    }
    primary_key_columns = [
        "REQUEST_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_CA_REQ_REQ_TYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.REQUEST_TYPE = parse_value(self.schema, column_value_map, "REQUEST_TYPE")
        "Type or classification of Corrective Action Request."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.REQUEST_TYPE_DESC = parse_value(self.schema, column_value_map, "REQUEST_TYPE_DESC")
        "A description of the Corrective Action Request Type/class."
        self.SFQA_CA_REQ_REQ_TYPE_FK = []

class SFWID_EARNED_VALUE_CLAIM:
    schema = {
        "CLAIM_ID": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "CLAIM_USER_ID": "STRING",
        "CLAIMED_SETUP_PERCENTAGE": "NUMBER",
        "CLAIMED_RUN_PERCENTAGE": "NUMBER",
        "NOTES": "STRING",
        "CLAIM_TYPE": "STRING",
        "UPDT_USER_ID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CLAIM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_EARNED_VALUE_CLAIM_FK01", ["ORDER_ID","OPER_KEY","STEP_KEY"], "SFWID_OPER_DESC", ["ORDER_ID","OPER_KEY","STEP_KEY"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.CLAIM_ID = parse_value(self.schema, column_value_map, "CLAIM_ID")
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        self.CLAIM_USER_ID = parse_value(self.schema, column_value_map, "CLAIM_USER_ID")
        self.CLAIMED_SETUP_PERCENTAGE = parse_value(self.schema, column_value_map, "CLAIMED_SETUP_PERCENTAGE")
        self.CLAIMED_RUN_PERCENTAGE = parse_value(self.schema, column_value_map, "CLAIMED_RUN_PERCENTAGE")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.CLAIM_TYPE = parse_value(self.schema, column_value_map, "CLAIM_TYPE")
        self.UPDT_USER_ID = parse_value(self.schema, column_value_map, "UPDT_USER_ID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFSQA_CHECKLIST_INSP_ITEM:
    schema = {
        "INSP_PLAN_ID": "STRING",
        "INSP_PLAN_REV": "NUMBER",
        "INSP_STEP_ID": "STRING",
        "INSP_ITEM_ID": "STRING",
        "CHECKLIST_ITEM_NAME": "STRING",
        "INSP_ITEM_TYPE": "STRING",
        "EXE_ORDER": "NUMBER",
        "STATUS": "STRING",
        "CDC_REQUIRED_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "INSPECTION_METHOD": "STRING",
        "VALIDATE_RESULT_FLAG": "STRING",
        "MASTER_SUB_FLAG": "STRING",
        "UOM": "STRING",
        "TRUE_SKIP_TO_INSP_ITEM_ID": "STRING",
        "CERT": "STRING",
        "FALSE_SKIP_TO_INSP_ITEM_ID": "STRING",
        "SKIP_TO_INSP_ITEM_ID": "STRING",
        "TARGET_VALUE": "STRING",
        "OBS_DATE": "STRING",
        "OBSOLETE_COUNT": "NUMBER",
        "INSP_ITEM_GROUPING": "NUMBER",
        "MASTER_INSP_ITEM_ID": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "INSP_ITEM_DESC": "STRING",
        "RESULT_ID": "STRING",
        "SLIDE_ID": "STRING",
        "REJECT_VALUE": "STRING",
        "UCF_CHECKLIST_II_VCH1": "STRING",
        "UCF_CHECKLIST_II_VCH2": "STRING",
        "UCF_CHECKLIST_II_VCH3": "STRING",
        "UCF_CHECKLIST_II_VCH4": "STRING",
        "UCF_CHECKLIST_II_VCH5": "STRING",
        "UCF_CHECKLIST_II_VCH6": "STRING",
        "UCF_CHECKLIST_II_VCH7": "STRING",
        "UCF_CHECKLIST_II_VCH8": "STRING",
        "UCF_CHECKLIST_II_VCH9": "STRING",
        "UCF_CHECKLIST_II_VCH10": "STRING",
        "UCF_CHECKLIST_II_VCH11": "STRING",
        "UCF_CHECKLIST_II_VCH12": "STRING",
        "UCF_CHECKLIST_II_VCH13": "STRING",
        "UCF_CHECKLIST_II_VCH14": "STRING",
        "UCF_CHECKLIST_II_VCH15": "STRING",
        "UCF_CHECKLIST_II_DATE1": "STRING",
        "UCF_CHECKLIST_II_DATE2": "STRING",
        "UCF_CHECKLIST_II_DATE3": "STRING",
        "UCF_CHECKLIST_II_DATE4": "STRING",
        "UCF_CHECKLIST_II_DATE5": "STRING",
        "UCF_CHECKLIST_II_FLAG1": "STRING",
        "UCF_CHECKLIST_II_FLAG2": "STRING",
        "UCF_CHECKLIST_II_FLAG3": "STRING",
        "UCF_CHECKLIST_II_FLAG4": "STRING",
        "UCF_CHECKLIST_II_FLAG5": "STRING",
        "UCF_CHECKLIST_II_NUM1": "NUMBER",
        "UCF_CHECKLIST_II_NUM2": "NUMBER",
        "UCF_CHECKLIST_II_NUM3": "NUMBER",
        "UCF_CHECKLIST_II_NUM4": "NUMBER",
        "UCF_CHECKLIST_II_NUM5": "NUMBER",
        "UCF_CHECKLIST_II_VCH255_1": "STRING",
        "UCF_CHECKLIST_II_VCH255_2": "STRING",
        "UCF_CHECKLIST_II_VCH255_3": "STRING",
        "UCF_CHECKLIST_II_VCH4000_1": "STRING",
        "LOWER_LIMIT": "STRING",
        "UCF_CHECKLIST_II_VCH4000_2": "STRING",
        "UPPER_LIMIT": "STRING",
        "DAT_COL_TYPE": "STRING",
        "TEMPLATE_FILE_ID": "STRING",
        "SKILL_CATEGORY": "STRING",
        "PPV_ONLY": "STRING",
    }
    primary_key_columns = [
        "INSP_PLAN_ID",
        "INSP_PLAN_REV",
        "INSP_STEP_ID",
        "INSP_ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_CLIST_IIFK14", ["RESULT_ID"], "SFSQA_VALID_RESULT_TYPE_DEF", ["RESULT_ID"]),
        DbForeignKey("SFSQA_CLIST_II_FK2", ["CERT"], "SFFND_CERT_DEF", ["CERT"]),
        DbForeignKey("SFSQA_CLIST_II_FK7", ["UOM"], "SFFND_UOM_DEF", ["UOM"]),
        DbForeignKey("SFSQA_CLIST_IIID_FK", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID"], "SFSQA_INSP_PLAN_INSP_STEPS", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID"]),
        DbForeignKey("SFSQA_CLIST_II_FK10", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID","SKIP_TO_INSP_ITEM_ID"], "SFSQA_CHECKLIST_INSP_ITEM", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID","INSP_ITEM_ID"]),
        DbForeignKey("SFSQA_CLIST_II_FK11", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID","TRUE_SKIP_TO_INSP_ITEM_ID"], "SFSQA_CHECKLIST_INSP_ITEM", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID","INSP_ITEM_ID"]),
        DbForeignKey("SFSQA_CLIST_II_FK6", ["INSPECTION_METHOD"], "SFSQA_INSP_METHOD_DEF", ["INSPECTION_METHOD"]),
        DbForeignKey("SFSQA_CLIST_II_FK8", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID","FALSE_SKIP_TO_INSP_ITEM_ID"], "SFSQA_CHECKLIST_INSP_ITEM", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID","INSP_ITEM_ID"]),
        DbForeignKey("SFSQA_CLIST_IIFK13", ["SLIDE_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFSQA_CLIST_II_FK9", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID","MASTER_INSP_ITEM_ID"], "SFSQA_CHECKLIST_INSP_ITEM", ["INSP_PLAN_ID","INSP_PLAN_REV","INSP_STEP_ID","INSP_ITEM_ID"]),
        DbForeignKey("SFSQA_CLIST_IIFK12", ["INSP_ITEM_TYPE"], "SFSQA_INSP_ITEM_TYPE_DEF", ["INSP_ITEM_TYPE"]),
        DbForeignKey("SFSQA_CLIST_IIFK15", ["TEMPLATE_FILE_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFSQA_CLIST_IIFK16", ["SKILL_CATEGORY"], "SFFND_SKILL_CATEGORY_DEF", ["SKILL_CATEGORY"]),
    ]
    refs = [
        "SFSQA_CHECKLIST_EXEC_RULES_FK1",
        "SFSQA_CLIST_II_FK10",
        "SFSQA_CLIST_II_FK11",
        "SFSQA_CLIST_II_FK8",
        "SFSQA_CLIST_II_FK9",
    ]
    def __init__(self, column_value_map):
        self.INSP_PLAN_ID = parse_value(self.schema, column_value_map, "INSP_PLAN_ID")
        self.INSP_PLAN_REV = parse_value(self.schema, column_value_map, "INSP_PLAN_REV")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.CHECKLIST_ITEM_NAME = parse_value(self.schema, column_value_map, "CHECKLIST_ITEM_NAME")
        self.INSP_ITEM_TYPE = parse_value(self.schema, column_value_map, "INSP_ITEM_TYPE")
        self.EXE_ORDER = parse_value(self.schema, column_value_map, "EXE_ORDER")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        self.CDC_REQUIRED_FLAG = parse_value(self.schema, column_value_map, "CDC_REQUIRED_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.INSPECTION_METHOD = parse_value(self.schema, column_value_map, "INSPECTION_METHOD")
        self.VALIDATE_RESULT_FLAG = parse_value(self.schema, column_value_map, "VALIDATE_RESULT_FLAG")
        self.MASTER_SUB_FLAG = parse_value(self.schema, column_value_map, "MASTER_SUB_FLAG")
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        self.TRUE_SKIP_TO_INSP_ITEM_ID = parse_value(self.schema, column_value_map, "TRUE_SKIP_TO_INSP_ITEM_ID")
        self.CERT = parse_value(self.schema, column_value_map, "CERT")
        self.FALSE_SKIP_TO_INSP_ITEM_ID = parse_value(self.schema, column_value_map, "FALSE_SKIP_TO_INSP_ITEM_ID")
        self.SKIP_TO_INSP_ITEM_ID = parse_value(self.schema, column_value_map, "SKIP_TO_INSP_ITEM_ID")
        self.TARGET_VALUE = parse_value(self.schema, column_value_map, "TARGET_VALUE")
        self.OBS_DATE = parse_value(self.schema, column_value_map, "OBS_DATE")
        self.OBSOLETE_COUNT = parse_value(self.schema, column_value_map, "OBSOLETE_COUNT")
        self.INSP_ITEM_GROUPING = parse_value(self.schema, column_value_map, "INSP_ITEM_GROUPING")
        self.MASTER_INSP_ITEM_ID = parse_value(self.schema, column_value_map, "MASTER_INSP_ITEM_ID")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.INSP_ITEM_DESC = parse_value(self.schema, column_value_map, "INSP_ITEM_DESC")
        self.RESULT_ID = parse_value(self.schema, column_value_map, "RESULT_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.REJECT_VALUE = parse_value(self.schema, column_value_map, "REJECT_VALUE")
        self.UCF_CHECKLIST_II_VCH1 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH1")
        self.UCF_CHECKLIST_II_VCH2 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH2")
        self.UCF_CHECKLIST_II_VCH3 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH3")
        self.UCF_CHECKLIST_II_VCH4 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH4")
        self.UCF_CHECKLIST_II_VCH5 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH5")
        self.UCF_CHECKLIST_II_VCH6 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH6")
        self.UCF_CHECKLIST_II_VCH7 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH7")
        self.UCF_CHECKLIST_II_VCH8 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH8")
        self.UCF_CHECKLIST_II_VCH9 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH9")
        self.UCF_CHECKLIST_II_VCH10 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH10")
        self.UCF_CHECKLIST_II_VCH11 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH11")
        self.UCF_CHECKLIST_II_VCH12 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH12")
        self.UCF_CHECKLIST_II_VCH13 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH13")
        self.UCF_CHECKLIST_II_VCH14 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH14")
        self.UCF_CHECKLIST_II_VCH15 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH15")
        self.UCF_CHECKLIST_II_DATE1 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_DATE1")
        self.UCF_CHECKLIST_II_DATE2 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_DATE2")
        self.UCF_CHECKLIST_II_DATE3 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_DATE3")
        self.UCF_CHECKLIST_II_DATE4 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_DATE4")
        self.UCF_CHECKLIST_II_DATE5 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_DATE5")
        self.UCF_CHECKLIST_II_FLAG1 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_FLAG1")
        self.UCF_CHECKLIST_II_FLAG2 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_FLAG2")
        self.UCF_CHECKLIST_II_FLAG3 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_FLAG3")
        self.UCF_CHECKLIST_II_FLAG4 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_FLAG4")
        self.UCF_CHECKLIST_II_FLAG5 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_FLAG5")
        self.UCF_CHECKLIST_II_NUM1 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_NUM1")
        self.UCF_CHECKLIST_II_NUM2 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_NUM2")
        self.UCF_CHECKLIST_II_NUM3 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_NUM3")
        self.UCF_CHECKLIST_II_NUM4 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_NUM4")
        self.UCF_CHECKLIST_II_NUM5 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_NUM5")
        self.UCF_CHECKLIST_II_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH255_1")
        self.UCF_CHECKLIST_II_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH255_2")
        self.UCF_CHECKLIST_II_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH255_3")
        self.UCF_CHECKLIST_II_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH4000_1")
        self.LOWER_LIMIT = parse_value(self.schema, column_value_map, "LOWER_LIMIT")
        self.UCF_CHECKLIST_II_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_CHECKLIST_II_VCH4000_2")
        self.UPPER_LIMIT = parse_value(self.schema, column_value_map, "UPPER_LIMIT")
        self.DAT_COL_TYPE = parse_value(self.schema, column_value_map, "DAT_COL_TYPE")
        self.TEMPLATE_FILE_ID = parse_value(self.schema, column_value_map, "TEMPLATE_FILE_ID")
        "The unique identifier of the object being referenced."
        self.SKILL_CATEGORY = parse_value(self.schema, column_value_map, "SKILL_CATEGORY")
        "A category to which the required skill belongs."
        self.PPV_ONLY = parse_value(self.schema, column_value_map, "PPV_ONLY")
        self.SFSQA_CHECKLIST_EXEC_RULES_FK1 = []
        self.SFSQA_CLIST_II_FK10 = []
        self.SFSQA_CLIST_II_FK11 = []
        self.SFSQA_CLIST_II_FK8 = []
        self.SFSQA_CLIST_II_FK9 = []

class SFFND_GLOBAL_CONF_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_TIME_STAMP": "DATE",
        "HIST_USERID": "STRING",
        "HIST_ACTION": "STRING",
        "CONFIG_MODULE_NAME": "STRING",
        "PARAMETER_NAME": "STRING",
        "PARAMETER_VALUE": "STRING",
        "PARAMETER_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.CONFIG_MODULE_NAME = parse_value(self.schema, column_value_map, "CONFIG_MODULE_NAME")
        self.PARAMETER_NAME = parse_value(self.schema, column_value_map, "PARAMETER_NAME")
        self.PARAMETER_VALUE = parse_value(self.schema, column_value_map, "PARAMETER_VALUE")
        self.PARAMETER_DESC = parse_value(self.schema, column_value_map, "PARAMETER_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFPL_STEP_ITEMS:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "PART_DAT_COL_ID": "STRING",
        "ITEM_ID": "STRING",
        "REF_DES": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OVER_CONSUMPTION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "ORIENTATION_FLAG": "STRING",
        "OPTIONAL_FLAG": "STRING",
        "SUSPECT_FLAG": "STRING",
        "TRACKABLE_FLAG": "STRING",
        "ITEM_QTY": "NUMBER",
        "PART_ACTION": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "SPOOL_FLAG": "STRING",
        "EXP_FLAG": "STRING",
        "OPT_DC1_FLAG": "STRING",
        "OPT_DC2_FLAG": "STRING",
        "OPT_DC3_FLAG": "STRING",
        "OPT_DC4_FLAG": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "REF_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UOM": "STRING",
        "REF_DES_PREF_RANK": "NUMBER",
        "FIND_NO": "STRING",
        "ITEM_NOTES": "STRING",
        "ITEM_CATEGORY": "STRING",
        "STORE_LOC": "STRING",
        "UNLOADING_POINT": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "SLIDE_EMBEDDED_REF_ID": "STRING",
        "SLIDE_ID": "STRING",
        "UTILIZATION_RULE": "STRING",
        "REMOVE_ACTION": "STRING",
        "UCF_PLAN_ITEM_VCH1": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "UCF_PLAN_ITEM_VCH2": "STRING",
        "UCF_PLAN_ITEM_VCH3": "STRING",
        "UCF_PLAN_ITEM_VCH4": "STRING",
        "UCF_PLAN_ITEM_VCH5": "STRING",
        "UCF_PLAN_ITEM_VCH6": "STRING",
        "UCF_PLAN_ITEM_VCH7": "STRING",
        "UCF_PLAN_ITEM_VCH8": "STRING",
        "UCF_PLAN_ITEM_VCH9": "STRING",
        "UCF_PLAN_ITEM_VCH10": "STRING",
        "UCF_PLAN_ITEM_VCH11": "STRING",
        "UCF_PLAN_ITEM_VCH12": "STRING",
        "UCF_PLAN_ITEM_VCH13": "STRING",
        "UCF_PLAN_ITEM_VCH14": "STRING",
        "UCF_PLAN_ITEM_VCH15": "STRING",
        "UCF_PLAN_ITEM_NUM1": "NUMBER",
        "UCF_PLAN_ITEM_NUM2": "NUMBER",
        "UCF_PLAN_ITEM_NUM3": "NUMBER",
        "UCF_PLAN_ITEM_NUM4": "NUMBER",
        "UCF_PLAN_ITEM_NUM5": "NUMBER",
        "UCF_PLAN_ITEM_DATE1": "STRING",
        "UCF_PLAN_ITEM_DATE2": "STRING",
        "UCF_PLAN_ITEM_DATE3": "STRING",
        "UCF_PLAN_ITEM_DATE4": "STRING",
        "UCF_PLAN_ITEM_DATE5": "STRING",
        "UCF_PLAN_ITEM_FLAG1": "STRING",
        "UCF_PLAN_ITEM_FLAG2": "STRING",
        "UCF_PLAN_ITEM_FLAG3": "STRING",
        "UCF_PLAN_ITEM_FLAG4": "STRING",
        "UCF_PLAN_ITEM_FLAG5": "STRING",
        "UCF_PLAN_ITEM_VCH255_1": "STRING",
        "UCF_PLAN_ITEM_VCH255_2": "STRING",
        "UCF_PLAN_ITEM_VCH255_3": "STRING",
        "UCF_PLAN_ITEM_VCH4000_1": "STRING",
        "UCF_PLAN_ITEM_VCH4000_2": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "UNIT_TYPE": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "STRING",
        "SECURITY_GROUP": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "PART_TITLE": "STRING",
        "STANDARD_PART_FLAG": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "PART_LINE_NO": "NUMBER",
        "BOM_LINE_NO": "STRING",
        "PHANTOM_KIT_PART_NO": "STRING",
        "REPLACEMENT_PART_NO": "STRING",
        "REPLACEMENT_PART_CHG": "STRING",
        "BOM_COMP_ID": "STRING",
        "AUTHORED_FROM_FLAG": "STRING",
        "BOM_LINE_ID": "STRING",
        "EFF_GROUP_ID": "STRING",
        "NEXT_HIGHER_ASSEMBLY": "STRING",
        "LATEST_EFF_GRP_REV_FLAG": "STRING",
        "REF_DES_DESC": "STRING",
        "RAW_MATERIAL_LENGTH": "NUMBER",
        "RAW_MATERIAL_WIDTH": "NUMBER",
        "NO_OF_PCS": "NUMBER",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "PART_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEP_ITEMS_FK02", ["REMOVE_ACTION"], "SFQA_COMP_DISP_TYPE_DEF", ["COMP_DISP_TYPE"]),
        DbForeignKey("SFPL_STEP_ITEM_FK", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFPL_STEP_ITEMS_UNIT_FK", ["UNIT_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFPL_STEP_ITEMS_FK03", ["EFF_GROUP_ID"], "SFPL_EFF_GROUP_DEF", ["EFF_GROUP_ID"]),
        DbForeignKey("SFPL_STEP_ITEMS_FK01", ["UID_ENTRY_NAME"], "SFFND_UID_ENTRY", ["UID_ENTRY_NAME"]),
        DbForeignKey("SFPL_STEPITEMS_STEPDESC_FK", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"], "SFPL_STEP_DESC", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.PART_DAT_COL_ID = parse_value(self.schema, column_value_map, "PART_DAT_COL_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of a part required for performing the manufacturing work specified by the work plan operation."
        self.REF_DES = parse_value(self.schema, column_value_map, "REF_DES")
        "The identifier of the physical location/position on the parent part where the part is to be installed."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OVER_CONSUMPTION_FLAG = parse_value(self.schema, column_value_map, "OVER_CONSUMPTION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.OPTIONAL_FLAG = parse_value(self.schema, column_value_map, "OPTIONAL_FLAG")
        self.SUSPECT_FLAG = parse_value(self.schema, column_value_map, "SUSPECT_FLAG")
        self.TRACKABLE_FLAG = parse_value(self.schema, column_value_map, "TRACKABLE_FLAG")
        self.ITEM_QTY = parse_value(self.schema, column_value_map, "ITEM_QTY")
        "The quantity associated with a given component/part."
        self.PART_ACTION = parse_value(self.schema, column_value_map, "PART_ACTION")
        "The intended action of the component/part, i.e., USE or REMOVE."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.SPOOL_FLAG = parse_value(self.schema, column_value_map, "SPOOL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by a spool number."
        self.EXP_FLAG = parse_value(self.schema, column_value_map, "EXP_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by expiration date."
        self.OPT_DC1_FLAG = parse_value(self.schema, column_value_map, "OPT_DC1_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC2_FLAG = parse_value(self.schema, column_value_map, "OPT_DC2_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC3_FLAG = parse_value(self.schema, column_value_map, "OPT_DC3_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.OPT_DC4_FLAG = parse_value(self.schema, column_value_map, "OPT_DC4_FLAG")
        "Flag indicating whether the item/part has a user-configured data collection, e.g., Lot/Date."
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Denormalized UOM associated with the given object as derived from the specific plan at the time the record was created."
        self.REF_DES_PREF_RANK = parse_value(self.schema, column_value_map, "REF_DES_PREF_RANK")
        "Where multiple candidate components are associated with a given reference designator, the rank of a given candidate, where the lowest number shows the highest preference for use."
        self.FIND_NO = parse_value(self.schema, column_value_map, "FIND_NO")
        "A number corresponding to an area or general location of a given component/part in a reference document."
        self.ITEM_NOTES = parse_value(self.schema, column_value_map, "ITEM_NOTES")
        "Additional information about a given component/part."
        self.ITEM_CATEGORY = parse_value(self.schema, column_value_map, "ITEM_CATEGORY")
        self.STORE_LOC = parse_value(self.schema, column_value_map, "STORE_LOC")
        self.UNLOADING_POINT = parse_value(self.schema, column_value_map, "UNLOADING_POINT")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.SLIDE_EMBEDDED_REF_ID = parse_value(self.schema, column_value_map, "SLIDE_EMBEDDED_REF_ID")
        self.SLIDE_ID = parse_value(self.schema, column_value_map, "SLIDE_ID")
        self.UTILIZATION_RULE = parse_value(self.schema, column_value_map, "UTILIZATION_RULE")
        self.REMOVE_ACTION = parse_value(self.schema, column_value_map, "REMOVE_ACTION")
        "Type or classification of disposition for a given component/part."
        self.UCF_PLAN_ITEM_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.UCF_PLAN_ITEM_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_ITEM_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH6")
        self.UCF_PLAN_ITEM_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH7")
        self.UCF_PLAN_ITEM_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH8")
        self.UCF_PLAN_ITEM_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH9")
        self.UCF_PLAN_ITEM_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH10")
        self.UCF_PLAN_ITEM_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH11")
        self.UCF_PLAN_ITEM_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH12")
        self.UCF_PLAN_ITEM_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH13")
        self.UCF_PLAN_ITEM_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH14")
        self.UCF_PLAN_ITEM_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH15")
        self.UCF_PLAN_ITEM_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_ITEM_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_ITEM_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM3")
        self.UCF_PLAN_ITEM_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM4")
        self.UCF_PLAN_ITEM_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_NUM5")
        self.UCF_PLAN_ITEM_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE1")
        self.UCF_PLAN_ITEM_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE2")
        self.UCF_PLAN_ITEM_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE3")
        self.UCF_PLAN_ITEM_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE4")
        self.UCF_PLAN_ITEM_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_DATE5")
        self.UCF_PLAN_ITEM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PLAN_ITEM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PLAN_ITEM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG3")
        self.UCF_PLAN_ITEM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG4")
        self.UCF_PLAN_ITEM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_FLAG5")
        self.UCF_PLAN_ITEM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH255_1")
        self.UCF_PLAN_ITEM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH255_2")
        self.UCF_PLAN_ITEM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH255_3")
        self.UCF_PLAN_ITEM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH4000_1")
        self.UCF_PLAN_ITEM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_ITEM_VCH4000_2")
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.PART_TITLE = parse_value(self.schema, column_value_map, "PART_TITLE")
        self.STANDARD_PART_FLAG = parse_value(self.schema, column_value_map, "STANDARD_PART_FLAG")
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        self.PART_LINE_NO = parse_value(self.schema, column_value_map, "PART_LINE_NO")
        "A unique sequential number that is assigned when the component part is authored in the order/plan."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        "A unique sequential number that is assigned to BOM component part."
        self.PHANTOM_KIT_PART_NO = parse_value(self.schema, column_value_map, "PHANTOM_KIT_PART_NO")
        "Parent phantom part no of component part."
        self.REPLACEMENT_PART_NO = parse_value(self.schema, column_value_map, "REPLACEMENT_PART_NO")
        "Contains replacement part number."
        self.REPLACEMENT_PART_CHG = parse_value(self.schema, column_value_map, "REPLACEMENT_PART_CHG")
        "Contains replacement part revision."
        self.BOM_COMP_ID = parse_value(self.schema, column_value_map, "BOM_COMP_ID")
        "Contains BOM Component id if part is authored from BOM."
        self.AUTHORED_FROM_FLAG = parse_value(self.schema, column_value_map, "AUTHORED_FROM_FLAG")
        "Indicates sources from where part is authored viz BOM, Line, Items Library."
        self.BOM_LINE_ID = parse_value(self.schema, column_value_map, "BOM_LINE_ID")
        "Line ID of the BOM Component.In case of phantom components parent components line id is inserted here."
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        self.NEXT_HIGHER_ASSEMBLY = parse_value(self.schema, column_value_map, "NEXT_HIGHER_ASSEMBLY")
        self.LATEST_EFF_GRP_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_EFF_GRP_REV_FLAG")
        self.REF_DES_DESC = parse_value(self.schema, column_value_map, "REF_DES_DESC")
        self.RAW_MATERIAL_LENGTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_LENGTH")
        self.RAW_MATERIAL_WIDTH = parse_value(self.schema, column_value_map, "RAW_MATERIAL_WIDTH")
        self.NO_OF_PCS = parse_value(self.schema, column_value_map, "NO_OF_PCS")

class SFPL_MFG_BOM_REV_SEC_GRP:
    schema = {
        "BOM_ID": "STRING",
        "SECURITY_GROUP": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "BOM_ID",
        "SECURITY_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_BOM_REV_SEC_GRP_XREF_FK1", ["SECURITY_GROUP"], "SFFND_SECURITY_GROUP_DEF", ["SECURITY_GROUP"]),
        DbForeignKey("SFPL_MFG_BOM_REV_SEC_GRP_FK2", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique system generated id for BOM."
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")

class SFFND_QUEUE_CATEGORY_DEF:
    schema = {
        "QUEUE_CATEGORY": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "QUEUE_CATEGORY_DESC": "STRING",
    }
    primary_key_columns = [
        "QUEUE_CATEGORY",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.QUEUE_CATEGORY = parse_value(self.schema, column_value_map, "QUEUE_CATEGORY")
        "High-level classification of queues containing queue types, e.g., CA FACILITATING, CA EFF VERIF ALERT, CA IMPL VERIF ALERT."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.QUEUE_CATEGORY_DESC = parse_value(self.schema, column_value_map, "QUEUE_CATEGORY_DESC")
        "A description of the queue category."

class SFSQA_INSP_ITEM_CLASS_DEF:
    schema = {
        "CLASS": "NUMBER",
        "CLASS_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DEFAULT_AQL": "NUMBER",
        "DEFAULT_SAMPLE_ALLOWED_FLAG": "STRING",
    }
    primary_key_columns = [
        "CLASS",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_CHAR_CLASS_AQL_FK", ["DEFAULT_AQL"], "SFSQA_AQL_DEF", ["AQL"]),
    ]
    refs = [
        "SFSQA_SAMPLING_RULE_DESC_FK4",
        "SFSQA_IDP_IC_CLASS_FK",
        "SFSQA_INSP_ITEM_FK5",
    ]
    def __init__(self, column_value_map):
        self.CLASS = parse_value(self.schema, column_value_map, "CLASS")
        self.CLASS_DESC = parse_value(self.schema, column_value_map, "CLASS_DESC")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.DEFAULT_AQL = parse_value(self.schema, column_value_map, "DEFAULT_AQL")
        self.DEFAULT_SAMPLE_ALLOWED_FLAG = parse_value(self.schema, column_value_map, "DEFAULT_SAMPLE_ALLOWED_FLAG")
        self.SFSQA_SAMPLING_RULE_DESC_FK4 = []
        self.SFSQA_IDP_IC_CLASS_FK = []
        self.SFSQA_INSP_ITEM_FK5 = []

class SFFND_UOM_DEF:
    schema = {
        "UOM": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TRACK_AS_WHOLE_FLAG": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UOM_DESC": "STRING",
        "FORMAT": "STRING",
        "DECIMAL_PLACES": "NUMBER",
    }
    primary_key_columns = [
        "UOM",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_UOM_DEF_FK1", ["FORMAT"], "SFFND_DC_FORMAT_TYPE_DEF", ["FORMAT"]),
    ]
    refs = [
        "SFPL_MFG_BOM_COMP_UOM_FK",
        "SFWID_OPER_DAT_COL_UOM_FK",
        "SFSQA_PO_LINE_FK4",
        "SFPL_PLAN_DESC_UOM_FK",
        "SFQA_DISC_CMP_UOM_FK",
        "SFPL_STEP_DAT_COL_UOM_FK",
        "SFWID_OPER_DAT_COL_ALT_FK5",
        "SFWID_ORDER_DESC_UOM_FK",
        "MOTT_TIME_MATERIAL_FK2",
        "SFFND_STD_DATCOL_TYPE_DEF_FK1",
        "SFPL_MFG_BOM_COMP_ORIG_FK7",
        "SFSQA_IDP_IC_I_FK5",
        "SFQA_DISC_ITEM_UOM_FK",
        "SFSQA_INSP_ITEMS_FK7",
        "SFPL_ITEMPROGDTLS_UOM_FK",
        "SFSQA_CLIST_II_FK7",
        "SFWID_ORDER_DESC_ALT_FK8",
    ]
    def __init__(self, column_value_map):
        self.UOM = parse_value(self.schema, column_value_map, "UOM")
        "Unit of Measure for a component/part."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TRACK_AS_WHOLE_FLAG = parse_value(self.schema, column_value_map, "TRACK_AS_WHOLE_FLAG")
        "A flag (Y/N) that indicates whether or not data collection for the material/part (as BOM of a work order) with this particular type of UOM is going to be recorded per entire quantity used for the work order."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UOM_DESC = parse_value(self.schema, column_value_map, "UOM_DESC")
        "A description or name of the measurement."
        self.FORMAT = parse_value(self.schema, column_value_map, "FORMAT")
        "Format of Data collection."
        self.DECIMAL_PLACES = parse_value(self.schema, column_value_map, "DECIMAL_PLACES")
        "Number of decimal places, only aaplicable if format is numeric."
        self.SFPL_MFG_BOM_COMP_UOM_FK = []
        self.SFWID_OPER_DAT_COL_UOM_FK = []
        self.SFSQA_PO_LINE_FK4 = []
        self.SFPL_PLAN_DESC_UOM_FK = []
        self.SFQA_DISC_CMP_UOM_FK = []
        self.SFPL_STEP_DAT_COL_UOM_FK = []
        self.SFWID_OPER_DAT_COL_ALT_FK5 = []
        self.SFWID_ORDER_DESC_UOM_FK = []
        self.MOTT_TIME_MATERIAL_FK2 = []
        self.SFFND_STD_DATCOL_TYPE_DEF_FK1 = []
        self.SFPL_MFG_BOM_COMP_ORIG_FK7 = []
        self.SFSQA_IDP_IC_I_FK5 = []
        self.SFQA_DISC_ITEM_UOM_FK = []
        self.SFSQA_INSP_ITEMS_FK7 = []
        self.SFPL_ITEMPROGDTLS_UOM_FK = []
        self.SFSQA_CLIST_II_FK7 = []
        self.SFWID_ORDER_DESC_ALT_FK8 = []

class SFFND_CHANGE_CATEGORY_DEF:
    schema = {
        "CHANGE_CATEGORY": "STRING",
        "CHANGE_CATEGORY_DESC": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "CHANGE_CATEGORY",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFPL_CHANGE_REQUEST_FK1",
    ]
    def __init__(self, column_value_map):
        self.CHANGE_CATEGORY = parse_value(self.schema, column_value_map, "CHANGE_CATEGORY")
        "Values may be like (Cost Reduction, Reliability, Customer Request, Supplier, Regulatory, Documentation Correction, Ease of Manufacturing, etc)."
        self.CHANGE_CATEGORY_DESC = parse_value(self.schema, column_value_map, "CHANGE_CATEGORY_DESC")
        "Detailed Description for Change Category."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.SFPL_CHANGE_REQUEST_FK1 = []

class SFFND_TOOL_SRL_DEF_CALIB_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
        "TOOL_SERIAL_NO": "STRING",
        "LAST_CALIB_DATE": "STRING",
        "TOOL_SERIAL_CALIBRATE_DAYS": "STRING",
        "TOOL_SERIAL_CALIBRATE_HOURS": "STRING",
        "TOOL_SERIAL_CALIBRATE_USES": "STRING",
        "TOOL_SERIAL_CALIB_DAYS_FREQ": "NUMBER",
        "TOOL_SERIAL_CALIB_HOURS_FREQ": "NUMBER",
        "TOOL_SERIAL_CALIB_USES_FREQ": "NUMBER",
        "MAX_NUMBER_OF_USES": "NUMBER",
        "MAX_NUMBER_OF_HOURS": "NUMBER",
        "MAX_NUMBER_OF_DAYS": "NUMBER",
        "EXPIRATION_DATE": "STRING",
        "CALIB_PROC": "STRING",
        "CERTIFICATE_NO": "STRING",
        "STATUS": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "TOTAL_HOURS": "NUMBER",
        "TOTAL_USES": "NUMBER",
        "CALIB_LOCATION_ID": "STRING",
        "CALIB_DEPARTMENT_ID": "STRING",
        "CALIB_CENTER_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The change number, secondary identifier, of the tool."
        self.TOOL_SERIAL_NO = parse_value(self.schema, column_value_map, "TOOL_SERIAL_NO")
        self.LAST_CALIB_DATE = parse_value(self.schema, column_value_map, "LAST_CALIB_DATE")
        self.TOOL_SERIAL_CALIBRATE_DAYS = parse_value(self.schema, column_value_map, "TOOL_SERIAL_CALIBRATE_DAYS")
        self.TOOL_SERIAL_CALIBRATE_HOURS = parse_value(self.schema, column_value_map, "TOOL_SERIAL_CALIBRATE_HOURS")
        self.TOOL_SERIAL_CALIBRATE_USES = parse_value(self.schema, column_value_map, "TOOL_SERIAL_CALIBRATE_USES")
        self.TOOL_SERIAL_CALIB_DAYS_FREQ = parse_value(self.schema, column_value_map, "TOOL_SERIAL_CALIB_DAYS_FREQ")
        self.TOOL_SERIAL_CALIB_HOURS_FREQ = parse_value(self.schema, column_value_map, "TOOL_SERIAL_CALIB_HOURS_FREQ")
        self.TOOL_SERIAL_CALIB_USES_FREQ = parse_value(self.schema, column_value_map, "TOOL_SERIAL_CALIB_USES_FREQ")
        self.MAX_NUMBER_OF_USES = parse_value(self.schema, column_value_map, "MAX_NUMBER_OF_USES")
        self.MAX_NUMBER_OF_HOURS = parse_value(self.schema, column_value_map, "MAX_NUMBER_OF_HOURS")
        self.MAX_NUMBER_OF_DAYS = parse_value(self.schema, column_value_map, "MAX_NUMBER_OF_DAYS")
        self.EXPIRATION_DATE = parse_value(self.schema, column_value_map, "EXPIRATION_DATE")
        self.CALIB_PROC = parse_value(self.schema, column_value_map, "CALIB_PROC")
        self.CERTIFICATE_NO = parse_value(self.schema, column_value_map, "CERTIFICATE_NO")
        self.STATUS = parse_value(self.schema, column_value_map, "STATUS")
        "The status of the disposition/rework task. For example: IN PROCESS, DISPOSITIONED, or COMPLETE."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TOTAL_HOURS = parse_value(self.schema, column_value_map, "TOTAL_HOURS")
        "Total number of hours the machine is used for. Incremented when calibration is HOURS."
        self.TOTAL_USES = parse_value(self.schema, column_value_map, "TOTAL_USES")
        "Total number of uses for the machine. Incremented when calibration is USES."
        self.CALIB_LOCATION_ID = parse_value(self.schema, column_value_map, "CALIB_LOCATION_ID")
        self.CALIB_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "CALIB_DEPARTMENT_ID")
        self.CALIB_CENTER_ID = parse_value(self.schema, column_value_map, "CALIB_CENTER_ID")

class SFFND_LABOR_TYPE_DEF:
    schema = {
        "LABOR_TYPE": "STRING",
        "LTA_SEND_FLAG": "STRING",
        "REQUIRE_CLOCK_FLAG": "STRING",
        "THRESHOLD_AUTO_CLOCK_FLAG": "STRING",
        "USER_ACTIVITY_THRESHOLD": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "LABOR_TYPE_DESC": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "ALLOW_MULTI_ORDER_SIGNON_FLAG": "STRING",
    }
    primary_key_columns = [
        "LABOR_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFFND_USER_LABOR_TYPE_FK",
    ]
    def __init__(self, column_value_map):
        self.LABOR_TYPE = parse_value(self.schema, column_value_map, "LABOR_TYPE")
        "Labor Type Identifier."
        self.LTA_SEND_FLAG = parse_value(self.schema, column_value_map, "LTA_SEND_FLAG")
        "When enabled will trigger the sending of labor events to the defined LTA system."
        self.REQUIRE_CLOCK_FLAG = parse_value(self.schema, column_value_map, "REQUIRE_CLOCK_FLAG")
        "When enabled will require the user to clock in prior to allowing signing on to a work order, account or project activity."
        self.THRESHOLD_AUTO_CLOCK_FLAG = parse_value(self.schema, column_value_map, "THRESHOLD_AUTO_CLOCK_FLAG")
        "When enabled will trigger the threshold auto clock out process. Requires REQUIRE_CLOCK be enabled."
        self.USER_ACTIVITY_THRESHOLD = parse_value(self.schema, column_value_map, "USER_ACTIVITY_THRESHOLD")
        "The threshold for system_force_signoff. Used by Work Order/Operation system and the LTA system."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.LABOR_TYPE_DESC = parse_value(self.schema, column_value_map, "LABOR_TYPE_DESC")
        "A description of the LABOR TYPE."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.ALLOW_MULTI_ORDER_SIGNON_FLAG = parse_value(self.schema, column_value_map, "ALLOW_MULTI_ORDER_SIGNON_FLAG")
        self.SFFND_USER_LABOR_TYPE_FK = []

class SFQA_DISC_ITEM_TEXT_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "TEXT": "STRING",
        "BLOCK_ID": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        "The unique, system-generated identifier of a discrepancy."
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        "A system generated sequence number that uniquely identifies a line item of the discrepancy."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")

class SFCORE_MM_OBJECT_SEC_GRP:
    schema = {
        "OBJECT_TYPE": "STRING",
        "OBJECT_TAG": "STRING",
        "OBJECT_REV": "STRING",
        "SECURITY_GROUP": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "OBJECT_ID": "STRING",
    }
    primary_key_columns = [
        "OBJECT_TYPE",
        "OBJECT_TAG",
        "OBJECT_REV",
        "SECURITY_GROUP",
    ]
    foreign_keys = [
        DbForeignKey("SFCORE_MM_OBJECT_SEC_GRP_FK2", ["SECURITY_GROUP"], "SFFND_SECURITY_GROUP_DEF", ["SECURITY_GROUP"]),
        DbForeignKey("SFCORE_MM_OBJECT_SEC_GRP_FK1", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        self.OBJECT_TAG = parse_value(self.schema, column_value_map, "OBJECT_TAG")
        self.OBJECT_REV = parse_value(self.schema, column_value_map, "OBJECT_REV")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")

class SFCORE_MM_OBJECT_3DMODEL:
    schema = {
        "OBJECT_ID": "STRING",
        "FORMAT": "STRING",
        "THUMBNAIL": "STRING",
        "BINARY_DATA": "STRING",
        "TIME_STAMP": "DATE",
        "ORIGINAL_USERID": "STRING",
        "UPDT_USERID": "STRING",
    }
    primary_key_columns = [
        "OBJECT_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Primary Key of the SFCORE_MM_OBJECT_3DMODEL"
        self.FORMAT = parse_value(self.schema, column_value_map, "FORMAT")
        "This is the original format of the object before the conversion started"
        self.THUMBNAIL = parse_value(self.schema, column_value_map, "THUMBNAIL")
        "In case the original CAD had a thumbnail"
        self.BINARY_DATA = parse_value(self.schema, column_value_map, "BINARY_DATA")
        "BINARY_DATA - will be updated to store the original CAD model"
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "will contain the time stamp for the last update on the record"
        self.ORIGINAL_USERID = parse_value(self.schema, column_value_map, "ORIGINAL_USERID")
        "will contain the UserId who inserted the record"
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "will contain the UserId for the last updated action user"

class SFBIS_SERVICE_DEF:
    schema = {
        "SERVICE_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "DIRECTION_INDICATOR": "STRING",
        "ENABLED_FLAG": "STRING",
        "REPLY_ENABLED_FLAG": "STRING",
        "LOGGING_FLAG": "STRING",
        "QUEUE_NAME": "STRING",
        "REPLY_QUEUE_NAME": "STRING",
        "LOG_TABLE_NAME": "STRING",
        "REPLY_LOG_TABLE_NAME": "STRING",
        "CONCURRENT_CONSUMERS": "NUMBER",
        "SOLUMINA_REF_TABLE_NAME": "STRING",
        "SELECT_SQL_LOG": "STRING",
        "DESCRIPTION": "STRING",
        "PRE_API_URL": "STRING",
        "POST_API_URL": "STRING",
    }
    primary_key_columns = [
        "SERVICE_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFBIS_FAILOVER_FK1",
        "SFBIS_SERVICE_DEST_DEF_FK1",
    ]
    def __init__(self, column_value_map):
        self.SERVICE_NAME = parse_value(self.schema, column_value_map, "SERVICE_NAME")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.DIRECTION_INDICATOR = parse_value(self.schema, column_value_map, "DIRECTION_INDICATOR")
        self.ENABLED_FLAG = parse_value(self.schema, column_value_map, "ENABLED_FLAG")
        self.REPLY_ENABLED_FLAG = parse_value(self.schema, column_value_map, "REPLY_ENABLED_FLAG")
        self.LOGGING_FLAG = parse_value(self.schema, column_value_map, "LOGGING_FLAG")
        self.QUEUE_NAME = parse_value(self.schema, column_value_map, "QUEUE_NAME")
        self.REPLY_QUEUE_NAME = parse_value(self.schema, column_value_map, "REPLY_QUEUE_NAME")
        self.LOG_TABLE_NAME = parse_value(self.schema, column_value_map, "LOG_TABLE_NAME")
        self.REPLY_LOG_TABLE_NAME = parse_value(self.schema, column_value_map, "REPLY_LOG_TABLE_NAME")
        self.CONCURRENT_CONSUMERS = parse_value(self.schema, column_value_map, "CONCURRENT_CONSUMERS")
        self.SOLUMINA_REF_TABLE_NAME = parse_value(self.schema, column_value_map, "SOLUMINA_REF_TABLE_NAME")
        self.SELECT_SQL_LOG = parse_value(self.schema, column_value_map, "SELECT_SQL_LOG")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.PRE_API_URL = parse_value(self.schema, column_value_map, "PRE_API_URL")
        self.POST_API_URL = parse_value(self.schema, column_value_map, "POST_API_URL")
        self.SFBIS_FAILOVER_FK1 = []
        self.SFBIS_SERVICE_DEST_DEF_FK1 = []

class SFFND_PROCESS_TYPE_DEF:
    schema = {
        "PROCESS_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "PROCESS_DESC": "STRING",
        "UCF_PROCESS_TYPE_VCH1": "STRING",
        "UCF_PROCESS_TYPE_NUM1": "NUMBER",
        "UCF_PROCESS_TYPE_FLAG1": "STRING",
        "PROCESS_DNF": "NUMBER",
        "UCF_PROCESS_TYPE_VCH2": "STRING",
        "UCF_PROCESS_TYPE_VCH3": "STRING",
        "UCF_PROCESS_TYPE_VCH4": "STRING",
        "UCF_PROCESS_TYPE_VCH5": "STRING",
        "UCF_PROCESS_TYPE_VCH6": "STRING",
        "UCF_PROCESS_TYPE_VCH7": "STRING",
        "UCF_PROCESS_TYPE_VCH8": "STRING",
        "UCF_PROCESS_TYPE_VCH9": "STRING",
        "UCF_PROCESS_TYPE_VCH10": "STRING",
        "UCF_PROCESS_TYPE_VCH11": "STRING",
        "UCF_PROCESS_TYPE_VCH12": "STRING",
        "UCF_PROCESS_TYPE_VCH13": "STRING",
        "UCF_PROCESS_TYPE_VCH14": "STRING",
        "UCF_PROCESS_TYPE_VCH15": "STRING",
        "UCF_PROCESS_TYPE_NUM2": "NUMBER",
        "UCF_PROCESS_TYPE_NUM3": "NUMBER",
        "UCF_PROCESS_TYPE_NUM4": "NUMBER",
        "UCF_PROCESS_TYPE_NUM5": "NUMBER",
        "UCF_PROCESS_TYPE_DATE1": "STRING",
        "UCF_PROCESS_TYPE_DATE2": "STRING",
        "UCF_PROCESS_TYPE_DATE3": "STRING",
        "UCF_PROCESS_TYPE_DATE4": "STRING",
        "UCF_PROCESS_TYPE_DATE5": "STRING",
        "UCF_PROCESS_TYPE_FLAG2": "STRING",
        "UCF_PROCESS_TYPE_FLAG3": "STRING",
        "UCF_PROCESS_TYPE_FLAG4": "STRING",
        "UCF_PROCESS_TYPE_FLAG5": "STRING",
        "UCF_PROCESS_TYPE_VCH255_1": "STRING",
        "UCF_PROCESS_TYPE_VCH255_2": "STRING",
        "UCF_PROCESS_TYPE_VCH255_3": "STRING",
        "UCF_PROCESS_TYPE_VCH4000_1": "STRING",
        "UCF_PROCESS_TYPE_VCH4000_2": "STRING",
    }
    primary_key_columns = [
        "PROCESS_TYPE",
    ]
    foreign_keys = [
    ]
    refs = [
        "SFQA_DI_PROCLDTWCS_FK2",
        "SFQA_CADESC_PROCLOCDEPTWCS_FK2",
        "SFQA_DEFECT_PROCESS_FK",
        "SFQA_DISC_DEFECT_FK1",
        "SFQA_CAUSE_PROCESS_FK",
        "SFQA_SYMPTOM_PROCESS_FK",
    ]
    def __init__(self, column_value_map):
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        "Type or classification of manufacturing process."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.PROCESS_DESC = parse_value(self.schema, column_value_map, "PROCESS_DESC")
        "A description or name of the manufacturing process class/type."
        self.UCF_PROCESS_TYPE_VCH1 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_NUM1 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PROCESS_TYPE_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.PROCESS_DNF = parse_value(self.schema, column_value_map, "PROCESS_DNF")
        "Defect normalization factor that reflects the acceptable defect tolerance for a given process. Used to normalize defect statistics."
        self.UCF_PROCESS_TYPE_VCH2 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_VCH3 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_VCH4 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_VCH5 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_VCH6 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_VCH7 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_VCH8 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_VCH9 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_VCH10 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_VCH11 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_VCH12 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_VCH13 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_VCH14 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_VCH15 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_PROCESS_TYPE_NUM2 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_PROCESS_TYPE_NUM3 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_PROCESS_TYPE_NUM4 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_PROCESS_TYPE_NUM5 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_PROCESS_TYPE_DATE1 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_PROCESS_TYPE_DATE2 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_PROCESS_TYPE_DATE3 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_PROCESS_TYPE_DATE4 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_PROCESS_TYPE_DATE5 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_PROCESS_TYPE_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_FLAG2")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PROCESS_TYPE_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_FLAG3")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PROCESS_TYPE_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_FLAG4")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PROCESS_TYPE_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_FLAG5")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.UCF_PROCESS_TYPE_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PROCESS_TYPE_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PROCESS_TYPE_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PROCESS_TYPE_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_PROCESS_TYPE_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PROCESS_TYPE_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.SFQA_DI_PROCLDTWCS_FK2 = []
        self.SFQA_CADESC_PROCLOCDEPTWCS_FK2 = []
        self.SFQA_DEFECT_PROCESS_FK = []
        self.SFQA_DISC_DEFECT_FK1 = []
        self.SFQA_CAUSE_PROCESS_FK = []
        self.SFQA_SYMPTOM_PROCESS_FK = []

class SFPL_PLAN_MM_OBJECTS:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "TEXT_TYPE": "STRING",
        "OBJECT_DAT_COL_ID": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "BLOCK_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "UCF_SFPL_PLAN_MM_OBJ_VCH1": "STRING",
        "UCF_SFPL_PLAN_MM_OBJ_VCH2": "STRING",
        "UCF_SFPL_PLAN_MM_OBJ_VCH3": "STRING",
        "UCF_SFPL_PLAN_MM_OBJ_VCH4": "STRING",
        "UCF_SFPL_PLAN_MM_OBJ_VCH5": "STRING",
        "UCF_SFPL_PLAN_MM_OBJ_NUM1": "NUMBER",
        "UCF_SFPL_PLAN_MM_OBJ_NUM2": "NUMBER",
        "UCF_SFPL_PLAN_MM_OBJ_NUM3": "NUMBER",
        "UCF_SFPL_PLAN_MM_OBJ_DATE1": "STRING",
        "UCF_SFPL_PLAN_MM_OBJ_DATE2": "STRING",
        "UCF_SFPL_PLAN_MM_OBJ_FLAG1": "STRING",
        "UCF_SFPL_PLAN_MM_OBJ_FLAG2": "STRING",
        "UCF_SFPL_PLAN_MM_OBJ_FLAG3": "STRING",
        "UCF_SFPL_PLAN_MM_OBJ_VCH255_1": "STRING",
        "UCF_SFPL_PLAN_MM_OBJ_VCH255_2": "STRING",
        "LATEST_REV_FLAG": "STRING",
        "SOURCE_ID": "STRING",
        "SOURCE_TYPE": "STRING",
        "BOM_LINE_NO": "STRING",
        "DISPLAY_LINE_NO": "NUMBER",
        "ORIG_OBJECT_ID": "STRING",
        "RTF_LINK_ID": "STRING",
        "EFF_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "DATE",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_UPDT_NO",
        "TEXT_TYPE",
        "OBJECT_DAT_COL_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_PLAN_MM_OBJECTS_FK3", ["ORIG_OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFPL_PLAN_MM_OBJECTS_FK2", ["OBJECT_ID"], "SFCORE_MM_OBJECT", ["OBJECT_ID"]),
        DbForeignKey("SFPL_PLAN_MM_OBJECTS_FK1", ["PLAN_ID","PLAN_UPDT_NO"], "SFPL_PLAN_DESC", ["PLAN_ID","PLAN_UPDT_NO"]),
        DbForeignKey("SFPL_PLAN_MM_OBJECTS_FK4", ["EFF_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.OBJECT_DAT_COL_ID = parse_value(self.schema, column_value_map, "OBJECT_DAT_COL_ID")
        "Unique, system-generated identifier of the object."
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "The work instruction text block type of the referencing text block. For example: PlanOperText or PlanStepText."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.UCF_SFPL_PLAN_MM_OBJ_VCH1 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFPL_PLAN_MM_OBJ_VCH2 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFPL_PLAN_MM_OBJ_VCH3 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFPL_PLAN_MM_OBJ_VCH4 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFPL_PLAN_MM_OBJ_VCH5 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_SFPL_PLAN_MM_OBJ_NUM1 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_NUM1")
        "User-configurable field for NUMBER data type."
        self.UCF_SFPL_PLAN_MM_OBJ_NUM2 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_NUM2")
        "User-configurable field for NUMBER data type."
        self.UCF_SFPL_PLAN_MM_OBJ_NUM3 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_NUM3")
        "User-configurable field for NUMBER data type."
        self.UCF_SFPL_PLAN_MM_OBJ_DATE1 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_SFPL_PLAN_MM_OBJ_DATE2 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_SFPL_PLAN_MM_OBJ_FLAG1 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFPL_PLAN_MM_OBJ_FLAG2 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFPL_PLAN_MM_OBJ_FLAG3 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_SFPL_PLAN_MM_OBJ_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_SFPL_PLAN_MM_OBJ_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_SFPL_PLAN_MM_OBJ_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.LATEST_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_REV_FLAG")
        "Flag indicating if authored object is of latest revision or not."
        self.SOURCE_ID = parse_value(self.schema, column_value_map, "SOURCE_ID")
        "Unique identifier for source, when source is BOM then BOM_ID and ITEM_ID for other sources."
        self.SOURCE_TYPE = parse_value(self.schema, column_value_map, "SOURCE_TYPE")
        "Source type where illustration belongs. Like Bom, Component, Part, Tool, Process, Machine etc."
        self.BOM_LINE_NO = parse_value(self.schema, column_value_map, "BOM_LINE_NO")
        "Corresponding Line No from which document is authored."
        self.DISPLAY_LINE_NO = parse_value(self.schema, column_value_map, "DISPLAY_LINE_NO")
        "Used for getting Sequence no in Multimedia object for internal drag and drop functionality."
        self.ORIG_OBJECT_ID = parse_value(self.schema, column_value_map, "ORIG_OBJECT_ID")
        "ID of the object originaly authored from which the current one is created on-the-fly."
        self.RTF_LINK_ID = parse_value(self.schema, column_value_map, "RTF_LINK_ID")
        "LINK_ID of multimedia authored inside an RTF."
        self.EFF_TYPE = parse_value(self.schema, column_value_map, "EFF_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")

class SFWID_ORDER_TEXT_SV_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "TAG": "STRING",
        "SVVALUE": "STRING",
        "REF_ID": "STRING",
        "OBJECT_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.TAG = parse_value(self.schema, column_value_map, "TAG")
        self.SVVALUE = parse_value(self.schema, column_value_map, "SVVALUE")
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFSQA_ITEM_OWNER:
    schema = {
        "ITEM_ID": "STRING",
        "OWNER_CODE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "AUDIT_QUALIFIED_FLAG": "STRING",
        "DR_DI_NC_FLAG": "STRING",
        "FAILURES_ALLOWED": "NUMBER",
        "NUM_RESET": "NUMBER",
        "MONTHS_2_CHECK": "NUMBER",
        "UCF_ITEM_OWNER_VCH1": "STRING",
        "UCF_ITEM_OWNER_VCH2": "STRING",
        "UCF_ITEM_OWNER_VCH3": "STRING",
        "UCF_ITEM_OWNER_VCH4": "STRING",
        "UCF_ITEM_OWNER_VCH5": "STRING",
        "UCF_ITEM_OWNER_VCH6": "STRING",
        "UCF_ITEM_OWNER_VCH7": "STRING",
        "UCF_ITEM_OWNER_VCH8": "STRING",
        "UCF_ITEM_OWNER_VCH9": "STRING",
        "UCF_ITEM_OWNER_VCH10": "STRING",
        "UCF_ITEM_OWNER_VCH11": "STRING",
        "UCF_ITEM_OWNER_VCH12": "STRING",
        "UCF_ITEM_OWNER_VCH13": "STRING",
        "UCF_ITEM_OWNER_VCH14": "STRING",
        "UCF_ITEM_OWNER_VCH15": "STRING",
        "UCF_ITEM_OWNER_NUM1": "NUMBER",
        "UCF_ITEM_OWNER_NUM2": "NUMBER",
        "UCF_ITEM_OWNER_NUM3": "NUMBER",
        "UCF_ITEM_OWNER_NUM4": "NUMBER",
        "UCF_ITEM_OWNER_NUM5": "NUMBER",
        "UCF_ITEM_OWNER_DATE1": "STRING",
        "UCF_ITEM_OWNER_DATE2": "STRING",
        "UCF_ITEM_OWNER_DATE3": "STRING",
        "UCF_ITEM_OWNER_DATE4": "STRING",
        "UCF_ITEM_OWNER_DATE5": "STRING",
        "UCF_ITEM_OWNER_FLAG1": "STRING",
        "UCF_ITEM_OWNER_FLAG2": "STRING",
        "UCF_ITEM_OWNER_FLAG3": "STRING",
        "UCF_ITEM_OWNER_FLAG4": "STRING",
        "UCF_ITEM_OWNER_FLAG5": "STRING",
        "COMMODITY_CODE": "STRING",
        "ITEM_OWNER_STATUS": "STRING",
        "ITEM_OWNER_STATUS_DATE": "STRING",
        "SUPP_PART_NO": "STRING",
        "SUPP_PART_CHG": "STRING",
        "UCF_ITEM_OWNER_VCH255_1": "STRING",
        "UCF_ITEM_OWNER_VCH255_2": "STRING",
        "UCF_ITEM_OWNER_VCH255_3": "STRING",
        "UCF_ITEM_OWNER_VCH4000_1": "STRING",
        "UCF_ITEM_OWNER_VCH4000_2": "STRING",
        "IS_SUPPLIER_LOCATION_FLAG": "STRING",
        "PPV_REQ_FLAG": "STRING",
        "PPV_QTY": "NUMBER",
        "PPV_TYPE": "STRING",
        "PPV_PENDING_QTY": "NUMBER",
        "PPV_INPROCESS_QTY": "NUMBER",
        "PPV_COMPLETE_QTY": "NUMBER",
        "LAST_PPV_COMPLETE_DATE": "STRING",
        "BARCODE_FORMAT": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "OWNER_CODE",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_ITEM_SUPPLIER_FK2", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFSQA_ITEM_SUPPLIER_FK3", ["COMMODITY_CODE"], "SFSQA_COMMODITY_DEF", ["COMMODITY_CODE"]),
    ]
    refs = [
        "SFSQA_PO_LINE_FK3",
        "SFSQA_INSP_ORD_STEP_INCL_FK1",
        "SFSQA_INSP_DEFINITION_REV_FK1",
        "SFSQA_ITEM_OWNER_SUPPLES_FK2",
        "SFSQA_IO_ATTACHS_FK2",
    ]
    def __init__(self, column_value_map):
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.AUDIT_QUALIFIED_FLAG = parse_value(self.schema, column_value_map, "AUDIT_QUALIFIED_FLAG")
        self.DR_DI_NC_FLAG = parse_value(self.schema, column_value_map, "DR_DI_NC_FLAG")
        self.FAILURES_ALLOWED = parse_value(self.schema, column_value_map, "FAILURES_ALLOWED")
        self.NUM_RESET = parse_value(self.schema, column_value_map, "NUM_RESET")
        self.MONTHS_2_CHECK = parse_value(self.schema, column_value_map, "MONTHS_2_CHECK")
        self.UCF_ITEM_OWNER_VCH1 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH1")
        self.UCF_ITEM_OWNER_VCH2 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH2")
        self.UCF_ITEM_OWNER_VCH3 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH3")
        self.UCF_ITEM_OWNER_VCH4 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH4")
        self.UCF_ITEM_OWNER_VCH5 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH5")
        self.UCF_ITEM_OWNER_VCH6 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH6")
        self.UCF_ITEM_OWNER_VCH7 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH7")
        self.UCF_ITEM_OWNER_VCH8 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH8")
        self.UCF_ITEM_OWNER_VCH9 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH9")
        self.UCF_ITEM_OWNER_VCH10 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH10")
        self.UCF_ITEM_OWNER_VCH11 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH11")
        self.UCF_ITEM_OWNER_VCH12 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH12")
        self.UCF_ITEM_OWNER_VCH13 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH13")
        self.UCF_ITEM_OWNER_VCH14 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH14")
        self.UCF_ITEM_OWNER_VCH15 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH15")
        self.UCF_ITEM_OWNER_NUM1 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_NUM1")
        self.UCF_ITEM_OWNER_NUM2 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_NUM2")
        self.UCF_ITEM_OWNER_NUM3 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_NUM3")
        self.UCF_ITEM_OWNER_NUM4 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_NUM4")
        self.UCF_ITEM_OWNER_NUM5 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_NUM5")
        self.UCF_ITEM_OWNER_DATE1 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_DATE1")
        self.UCF_ITEM_OWNER_DATE2 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_DATE2")
        self.UCF_ITEM_OWNER_DATE3 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_DATE3")
        self.UCF_ITEM_OWNER_DATE4 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_DATE4")
        self.UCF_ITEM_OWNER_DATE5 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_DATE5")
        self.UCF_ITEM_OWNER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_FLAG1")
        self.UCF_ITEM_OWNER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_FLAG2")
        self.UCF_ITEM_OWNER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_FLAG3")
        self.UCF_ITEM_OWNER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_FLAG4")
        self.UCF_ITEM_OWNER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_FLAG5")
        self.COMMODITY_CODE = parse_value(self.schema, column_value_map, "COMMODITY_CODE")
        self.ITEM_OWNER_STATUS = parse_value(self.schema, column_value_map, "ITEM_OWNER_STATUS")
        self.ITEM_OWNER_STATUS_DATE = parse_value(self.schema, column_value_map, "ITEM_OWNER_STATUS_DATE")
        self.SUPP_PART_NO = parse_value(self.schema, column_value_map, "SUPP_PART_NO")
        self.SUPP_PART_CHG = parse_value(self.schema, column_value_map, "SUPP_PART_CHG")
        self.UCF_ITEM_OWNER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH255_1")
        self.UCF_ITEM_OWNER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH255_2")
        self.UCF_ITEM_OWNER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH255_3")
        self.UCF_ITEM_OWNER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH4000_1")
        self.UCF_ITEM_OWNER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_OWNER_VCH4000_2")
        self.IS_SUPPLIER_LOCATION_FLAG = parse_value(self.schema, column_value_map, "IS_SUPPLIER_LOCATION_FLAG")
        "Flag to indiacate if record is supplier specific or not."
        self.PPV_REQ_FLAG = parse_value(self.schema, column_value_map, "PPV_REQ_FLAG")
        self.PPV_QTY = parse_value(self.schema, column_value_map, "PPV_QTY")
        self.PPV_TYPE = parse_value(self.schema, column_value_map, "PPV_TYPE")
        self.PPV_PENDING_QTY = parse_value(self.schema, column_value_map, "PPV_PENDING_QTY")
        self.PPV_INPROCESS_QTY = parse_value(self.schema, column_value_map, "PPV_INPROCESS_QTY")
        self.PPV_COMPLETE_QTY = parse_value(self.schema, column_value_map, "PPV_COMPLETE_QTY")
        self.LAST_PPV_COMPLETE_DATE = parse_value(self.schema, column_value_map, "LAST_PPV_COMPLETE_DATE")
        self.BARCODE_FORMAT = parse_value(self.schema, column_value_map, "BARCODE_FORMAT")
        self.SFSQA_PO_LINE_FK3 = []
        self.SFSQA_INSP_ORD_STEP_INCL_FK1 = []
        self.SFSQA_INSP_DEFINITION_REV_FK1 = []
        self.SFSQA_ITEM_OWNER_SUPPLES_FK2 = []
        self.SFSQA_IO_ATTACHS_FK2 = []

class SFDB_REPORT_ALERT_DEF:
    schema = {
        "ALERT": "STRING",
        "ALERT_DESC": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
    }
    primary_key_columns = [
        "ALERT",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ALERT = parse_value(self.schema, column_value_map, "ALERT")
        "User defined unique identifier of an alert to be to be used when generating reports or copy requests within the printer/report server application."
        self.ALERT_DESC = parse_value(self.schema, column_value_map, "ALERT_DESC")
        "Description of the alert."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."

class SFSQA_INSP_ORDER_ISII_TOOL_DCS:
    schema = {
        "INSP_ORDER_ID": "STRING",
        "INSP_STEP_ID": "STRING",
        "ITEM_ID": "STRING",
        "INSP_ITEM_ID": "STRING",
        "INSP_ITEM_COUNT": "NUMBER",
        "TOOL_COUNT": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "TOOL_TAG": "STRING",
        "TOOL_CAL_DATE": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH1": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH2": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH3": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH4": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH5": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH6": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH7": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH8": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH9": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH10": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH11": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH12": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH13": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH14": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_VCH15": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_NUM1": "NUMBER",
        "UCF_INSP_ORDERIIITOOLDCS_NUM2": "NUMBER",
        "UCF_INSP_ORDERIIITOOLDCS_NUM3": "NUMBER",
        "UCF_INSP_ORDERIIITOOLDCS_NUM4": "NUMBER",
        "UCF_INSP_ORDERIIITOOLDCS_NUM5": "NUMBER",
        "UCF_INSP_ORDERIIITOOLDCS_DATE1": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_DATE2": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_DATE3": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_DATE4": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_DATE5": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_FLAG1": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_FLAG2": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_FLAG3": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_FLAG4": "STRING",
        "UCF_INSP_ORDERIIITOOLDCS_FLAG5": "STRING",
        "NOTES": "STRING",
        "UCF_INSP_ORDERIIITDC_VCH255_1": "STRING",
        "UCF_INSP_ORDERIIITDC_VCH255_2": "STRING",
        "UCF_INSP_ORDERIIITDC_VCH255_3": "STRING",
        "UCF_INSP_ORDERIIITDC_VCH4000_1": "STRING",
        "UCF_INSP_ORDERIIITDC_VCH4000_2": "STRING",
        "TOOL_NO": "STRING",
        "TOOL_CHG": "STRING",
    }
    primary_key_columns = [
        "INSP_ORDER_ID",
        "INSP_STEP_ID",
        "ITEM_ID",
        "INSP_ITEM_ID",
        "INSP_ITEM_COUNT",
        "TOOL_NO",
        "TOOL_CHG",
        "TOOL_COUNT",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_IDP_IC_TOOL_DCS_FK1", ["INSP_ORDER_ID","INSP_STEP_ID","ITEM_ID","INSP_ITEM_ID","INSP_ITEM_COUNT","TOOL_NO","TOOL_CHG"], "SFSQA_INSP_ORDER_ISII_TOOLS", ["INSP_ORDER_ID","INSP_STEP_ID","ITEM_ID","INSP_ITEM_ID","INSP_ITEM_COUNT","TOOL_NO","TOOL_CHG"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        self.INSP_STEP_ID = parse_value(self.schema, column_value_map, "INSP_STEP_ID")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.INSP_ITEM_COUNT = parse_value(self.schema, column_value_map, "INSP_ITEM_COUNT")
        self.TOOL_COUNT = parse_value(self.schema, column_value_map, "TOOL_COUNT")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.TOOL_TAG = parse_value(self.schema, column_value_map, "TOOL_TAG")
        self.TOOL_CAL_DATE = parse_value(self.schema, column_value_map, "TOOL_CAL_DATE")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH1")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH2")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH3")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH4")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH5")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH6 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH6")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH7 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH7")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH8 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH8")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH9 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH9")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH10 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH10")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH11 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH11")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH12 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH12")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH13 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH13")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH14 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH14")
        self.UCF_INSP_ORDERIIITOOLDCS_VCH15 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_VCH15")
        self.UCF_INSP_ORDERIIITOOLDCS_NUM1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_NUM1")
        self.UCF_INSP_ORDERIIITOOLDCS_NUM2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_NUM2")
        self.UCF_INSP_ORDERIIITOOLDCS_NUM3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_NUM3")
        self.UCF_INSP_ORDERIIITOOLDCS_NUM4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_NUM4")
        self.UCF_INSP_ORDERIIITOOLDCS_NUM5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_NUM5")
        self.UCF_INSP_ORDERIIITOOLDCS_DATE1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_DATE1")
        self.UCF_INSP_ORDERIIITOOLDCS_DATE2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_DATE2")
        self.UCF_INSP_ORDERIIITOOLDCS_DATE3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_DATE3")
        self.UCF_INSP_ORDERIIITOOLDCS_DATE4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_DATE4")
        self.UCF_INSP_ORDERIIITOOLDCS_DATE5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_DATE5")
        self.UCF_INSP_ORDERIIITOOLDCS_FLAG1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_FLAG1")
        self.UCF_INSP_ORDERIIITOOLDCS_FLAG2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_FLAG2")
        self.UCF_INSP_ORDERIIITOOLDCS_FLAG3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_FLAG3")
        self.UCF_INSP_ORDERIIITOOLDCS_FLAG4 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_FLAG4")
        self.UCF_INSP_ORDERIIITOOLDCS_FLAG5 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITOOLDCS_FLAG5")
        self.NOTES = parse_value(self.schema, column_value_map, "NOTES")
        self.UCF_INSP_ORDERIIITDC_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITDC_VCH255_1")
        self.UCF_INSP_ORDERIIITDC_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITDC_VCH255_2")
        self.UCF_INSP_ORDERIIITDC_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITDC_VCH255_3")
        self.UCF_INSP_ORDERIIITDC_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITDC_VCH4000_1")
        self.UCF_INSP_ORDERIIITDC_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_INSP_ORDERIIITDC_VCH4000_2")
        self.TOOL_NO = parse_value(self.schema, column_value_map, "TOOL_NO")
        "The primary identifier of a particular line of manufacturing tool."
        self.TOOL_CHG = parse_value(self.schema, column_value_map, "TOOL_CHG")
        "The change number, secondary identifier, of the tool."

class SFFND_HTREF_COMM_TEXT:
    schema = {
        "REF_ID": "STRING",
        "COMM_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "OBJECT_ID": "STRING",
        "OBJECT_TYPE": "STRING",
        "OBJECT_NAME": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "BLOCK_ID": "STRING",
        "URL_PREFIX": "STRING",
        "URL_PARAMS": "STRING",
        "URL_SUFFIX": "STRING",
    }
    primary_key_columns = [
        "REF_ID",
        "COMM_ID",
        "TEXT_TYPE",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_HTREF_COMM_TEXT_COMM_FK", ["COMM_ID"], "SFFND_COMM", ["COMM_ID"]),
        DbForeignKey("BLOCKID_FK7", ["BLOCK_ID"], "SFFND_HTREF_BLOCKID_DEF", ["BLOCK_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.REF_ID = parse_value(self.schema, column_value_map, "REF_ID")
        "Unique identifier of embedded multimedia object or control."
        self.COMM_ID = parse_value(self.schema, column_value_map, "COMM_ID")
        "Unique system generated identifier for a given communication record."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.OBJECT_ID = parse_value(self.schema, column_value_map, "OBJECT_ID")
        "Unique identifier of a multimedia object."
        self.OBJECT_TYPE = parse_value(self.schema, column_value_map, "OBJECT_TYPE")
        "The type of multimedia object."
        self.OBJECT_NAME = parse_value(self.schema, column_value_map, "OBJECT_NAME")
        "A descriptive tag/name of the object."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.BLOCK_ID = parse_value(self.schema, column_value_map, "BLOCK_ID")
        "Block type/Block id where object exists within the text. For a full list of BLOCK_IDs see SFFND_HTREF_BLOCKID_DEF for full list. Not currently implemented."
        self.URL_PREFIX = parse_value(self.schema, column_value_map, "URL_PREFIX")
        "Protocol ID in a Universal Resource Locator."
        self.URL_PARAMS = parse_value(self.schema, column_value_map, "URL_PARAMS")
        "Host ID in the Universal Resource Locator."
        self.URL_SUFFIX = parse_value(self.schema, column_value_map, "URL_SUFFIX")
        "File location in a Universal Resource Locator."

class SFWID_OPER_DESC_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "AUTO_EXCLUDE_FLAG": "STRING",
        "ALTER_FLAG": "STRING",
        "OPER_OPT_FLAG": "STRING",
        "OPER_NO": "STRING",
        "OPER_UPDT_NO": "NUMBER",
        "STEP_NO": "STRING",
        "STEP_UPDT_NO": "NUMBER",
        "PLND_MACHINE_NO": "STRING",
        "ASGND_MACHINE_ID": "STRING",
        "OPER_STATUS": "STRING",
        "OPER_HOLD_STATUS": "STRING",
        "OPER_TYPE": "STRING",
        "TITLE": "STRING",
        "ALTER_TYPE": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
        "STATUS_CHG_NOTES": "STRING",
        "OSP_FLAG": "STRING",
        "REWORK_FLAG": "STRING",
        "AUTO_COMPLETE_FLAG": "STRING",
        "AUTO_START_FLAG": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "REVISED_CREW_QTY_SETUP": "NUMBER",
        "REVISED_CREW_QTY": "NUMBER",
        "ACTUAL_CREW_QTY_SETUP": "NUMBER",
        "ACTUAL_CREW_QTY": "NUMBER",
        "SCHED_LABOR_HOURS_SETUP": "NUMBER",
        "SCHED_DUR_HOURS_SETUP": "NUMBER",
        "SCHED_LABOR_HOURS_INSPECT": "NUMBER",
        "SCHED_DUR_HOURS_INSPECT": "NUMBER",
        "SCHED_LABOR_HOURS_PER_UNIT": "NUMBER",
        "SCHED_DUR_HOURS_PER_UNIT": "NUMBER",
        "SCHED_CREW_QTY_SETUP": "NUMBER",
        "SCHED_CREW_QTY": "NUMBER",
        "SCHED_MACHINE_HOURS_PER_UNIT": "NUMBER",
        "SCHED_UNITS_PER_RUN": "NUMBER",
        "SCHED_SETUP_TYPE": "STRING",
        "SCHED_MACHINE_HOURS_SETUP": "NUMBER",
        "SCHED_ENG_STD_FLAG": "STRING",
        "SCHED_MOVE_HOURS": "NUMBER",
        "OCCUR_RATE": "NUMBER",
        "SUPPLIER_CODE": "STRING",
        "OSP_DAYS": "NUMBER",
        "OSP_COST_PER_UNIT": "NUMBER",
        "UCF_PLAN_OPER_VCH1": "STRING",
        "UCF_PLAN_OPER_VCH2": "STRING",
        "UCF_PLAN_OPER_VCH3": "STRING",
        "UCF_PLAN_OPER_VCH4": "STRING",
        "UCF_PLAN_OPER_VCH5": "STRING",
        "UCF_PLAN_OPER_NUM1": "NUMBER",
        "UCF_PLAN_OPER_NUM2": "NUMBER",
        "UCF_PLAN_OPER_FLAG1": "STRING",
        "UCF_PLAN_OPER_FLAG2": "STRING",
        "UCF_ORDER_OPER_VCH1": "STRING",
        "UCF_ORDER_OPER_VCH2": "STRING",
        "UCF_ORDER_OPER_NUM1": "NUMBER",
        "UCF_ORDER_OPER_NUM2": "NUMBER",
        "UCF_ORDER_OPER_FLAG1": "STRING",
        "UCF_ORDER_OPER_DATE1": "STRING",
        "HIST_ALT_ID": "STRING",
        "STATUS_CHG_REASON": "STRING",
        "STDOPER_OBJECT_ID": "STRING",
        "OOC_CAUSE_FLAG": "STRING",
        "OOC_REASON": "STRING",
        "OOC_REASON_NUM": "NUMBER",
        "UCHART_UBAR_VALUE": "NUMBER",
        "UCHART_UCL_VALUE": "NUMBER",
        "UCHART_LCL_VALUE": "NUMBER",
        "TEST_TYPE": "STRING",
        "OUTLIER_FLAG": "STRING",
        "ALT_STATUS": "STRING",
        "LAST_OPER_HDR_CHG_ALT_ID": "STRING",
        "UCF_PLAN_OPER_VCH6": "STRING",
        "UCF_PLAN_OPER_VCH7": "STRING",
        "UCF_PLAN_OPER_VCH8": "STRING",
        "UCF_PLAN_OPER_VCH9": "STRING",
        "UCF_PLAN_OPER_VCH10": "STRING",
        "UCF_PLAN_OPER_VCH11": "STRING",
        "UCF_PLAN_OPER_VCH12": "STRING",
        "UCF_PLAN_OPER_VCH13": "STRING",
        "UCF_PLAN_OPER_VCH14": "STRING",
        "UCF_PLAN_OPER_VCH15": "STRING",
        "UCF_PLAN_OPER_NUM3": "NUMBER",
        "UCF_PLAN_OPER_NUM4": "NUMBER",
        "UCF_PLAN_OPER_NUM5": "NUMBER",
        "UCF_PLAN_OPER_DATE1": "STRING",
        "UCF_PLAN_OPER_DATE2": "STRING",
        "UCF_PLAN_OPER_DATE3": "STRING",
        "UCF_PLAN_OPER_DATE4": "STRING",
        "UCF_PLAN_OPER_DATE5": "STRING",
        "UCF_PLAN_OPER_FLAG3": "STRING",
        "UCF_PLAN_OPER_FLAG4": "STRING",
        "UCF_PLAN_OPER_FLAG5": "STRING",
        "UCF_PLAN_OPER_VCH255_1": "STRING",
        "UCF_PLAN_OPER_VCH255_2": "STRING",
        "UCF_PLAN_OPER_VCH255_3": "STRING",
        "UCF_PLAN_OPER_VCH4000_1": "STRING",
        "UCF_PLAN_OPER_VCH4000_2": "STRING",
        "UCF_ORDER_OPER_VCH3": "STRING",
        "UCF_ORDER_OPER_VCH4": "STRING",
        "UCF_ORDER_OPER_VCH5": "STRING",
        "UCF_ORDER_OPER_VCH6": "STRING",
        "UCF_ORDER_OPER_VCH7": "STRING",
        "UCF_ORDER_OPER_VCH8": "STRING",
        "UCF_ORDER_OPER_VCH9": "STRING",
        "UCF_ORDER_OPER_VCH10": "STRING",
        "UCF_ORDER_OPER_VCH11": "STRING",
        "UCF_ORDER_OPER_VCH12": "STRING",
        "UCF_ORDER_OPER_VCH13": "STRING",
        "UCF_ORDER_OPER_VCH14": "STRING",
        "UCF_ORDER_OPER_VCH15": "STRING",
        "UCF_ORDER_OPER_NUM3": "NUMBER",
        "UCF_ORDER_OPER_NUM4": "NUMBER",
        "UCF_ORDER_OPER_NUM5": "NUMBER",
        "UCF_ORDER_OPER_DATE2": "STRING",
        "UCF_ORDER_OPER_DATE3": "STRING",
        "UCF_ORDER_OPER_DATE4": "STRING",
        "UCF_ORDER_OPER_DATE5": "STRING",
        "UCF_ORDER_OPER_FLAG2": "STRING",
        "UCF_ORDER_OPER_FLAG3": "STRING",
        "UCF_ORDER_OPER_FLAG4": "STRING",
        "UCF_ORDER_OPER_FLAG5": "STRING",
        "UCF_ORDER_OPER_VCH255_1": "STRING",
        "UCF_ORDER_OPER_VCH255_2": "STRING",
        "UCF_ORDER_OPER_VCH255_3": "STRING",
        "UCF_ORDER_OPER_VCH4000_1": "STRING",
        "UCF_ORDER_OPER_VCH4000_2": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "SEQ_STEPS_FLAG": "STRING",
        "EXE_ORDER": "NUMBER",
        "INCLUDED": "STRING",
        "STANDARD_FLAG": "STRING",
        "OPER_CHANGE_LEVEL": "STRING",
        "PERCENT_COMPLETE": "NUMBER",
        "PERCENT_COMPLETE_COMMENTS": "STRING",
        "ORIENTATION_FLAG": "STRING",
        "CROSS_ORDER_FLAG": "STRING",
        "MUST_ISSUE_PARTS_FLAG": "STRING",
        "ACTIVITY": "STRING",
        "ACCOUNT_LABOR": "STRING",
        "COMPLETE_QTY": "NUMBER",
        "SCRAP_QTY": "NUMBER",
        "MISSING_QTY": "NUMBER",
        "UNITS_PER_CYCLE": "NUMBER",
        "AUTO_CYCLE_FLAG": "STRING",
        "PRINT_LABEL": "STRING",
        "NUMBER_OF_LABELS": "NUMBER",
        "RECONCILE_SCRAP": "STRING",
        "UNIT_PROCESSING": "STRING",
        "UNITS_PER_CYCLE_ACTUAL": "NUMBER",
        "ACTUAL_MACHINE_NO": "STRING",
        "AVAILABLE_QTY": "NUMBER",
        "ACTUAL_MACHINE_ID": "STRING",
        "COMPLETE_CYCLE_QTY": "NUMBER",
        "REPORT_ID": "STRING",
        "ASGND_LOCATION_ID": "STRING",
        "ASGND_DEPARTMENT_ID": "STRING",
        "ASGND_CENTER_ID": "STRING",
        "BATCH_FLAG": "STRING",
        "ACTUAL_INQUEUE_DATE": "STRING",
        "LOCK_FLAG": "STRING",
        "LOAD_EMB_CONTROL_FLAG": "STRING",
        "TOTAL_COMPLETE_SETUP_PERCENT": "NUMBER",
        "TOTAL_COMPLETE_RUN_PERCENT": "NUMBER",
        "ITEM_LOC": "STRING",
        "ARRIVED_DATE": "STRING",
        "DISC_ID": "STRING",
        "DISC_LINE_NO": "NUMBER",
        "STDOPER_TAG": "STRING",
        "STDOPER_REV": "NUMBER",
        "EFF_GROUP_ID": "STRING",
        "LATEST_EFF_GRP_REV_FLAG": "STRING",
        "PLND_MACHINE_REV": "STRING",
        "ACTUAL_MACHINE_REV": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.AUTO_EXCLUDE_FLAG = parse_value(self.schema, column_value_map, "AUTO_EXCLUDE_FLAG")
        "A flag (Y/N) indicating that the given operation is part of an alternate (unchosen) branch following a decision node and is therefore excluded from the manufacturing process."
        self.ALTER_FLAG = parse_value(self.schema, column_value_map, "ALTER_FLAG")
        "A flag (Y/N) that indicates whether the operation is currently in alteration mode."
        self.OPER_OPT_FLAG = parse_value(self.schema, column_value_map, "OPER_OPT_FLAG")
        "A flag (Y/N) that indicates whether a given operation is optional."
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        "User-changeable identifier of a given operation."
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given operation description."
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        "User-changeable identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.PLND_MACHINE_NO = parse_value(self.schema, column_value_map, "PLND_MACHINE_NO")
        "The planned machine category for a given operation."
        self.ASGND_MACHINE_ID = parse_value(self.schema, column_value_map, "ASGND_MACHINE_ID")
        "The ID of the machine assigned to the given operation."
        self.OPER_STATUS = parse_value(self.schema, column_value_map, "OPER_STATUS")
        "Status of the operation, e.g., IN QUEUE, ACTIVE, COMPLETE, HOLD, CANCEL."
        self.OPER_HOLD_STATUS = parse_value(self.schema, column_value_map, "OPER_HOLD_STATUS")
        "Status of the hold on the operation, e.g., OPEN, CLOSED."
        self.OPER_TYPE = parse_value(self.schema, column_value_map, "OPER_TYPE")
        "Type or class of operation, e.g., MFG."
        self.TITLE = parse_value(self.schema, column_value_map, "TITLE")
        "Title or name of the given operation."
        self.ALTER_TYPE = parse_value(self.schema, column_value_map, "ALTER_TYPE")
        "Type or classification of the last alteration on the associated work order."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the record has been affected by a work order alteration."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated operation."
        self.OSP_FLAG = parse_value(self.schema, column_value_map, "OSP_FLAG")
        "A flag (Y/N) that indicates whether the operation process is performed by an outside vendor or center."
        self.REWORK_FLAG = parse_value(self.schema, column_value_map, "REWORK_FLAG")
        "A flag (Y/N) that indicates whether the given operation is rework."
        self.AUTO_COMPLETE_FLAG = parse_value(self.schema, column_value_map, "AUTO_COMPLETE_FLAG")
        "Indicates (Y/N) whether the status of the given operation is automatically set to COMPLETE on startup of the following operation."
        self.AUTO_START_FLAG = parse_value(self.schema, column_value_map, "AUTO_START_FLAG")
        "Indicates (Y/N) whether the given operation is automatically started on completion of the previous operation."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which work for the operation is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which work for the operation is scheduled to complete."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised start date for the given operation."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised end date for the given operation."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which work for the operation was actually started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which work for the operation was actually completed."
        self.REVISED_CREW_QTY_SETUP = parse_value(self.schema, column_value_map, "REVISED_CREW_QTY_SETUP")
        "The revised number of people in the setup crew for the given operation."
        self.REVISED_CREW_QTY = parse_value(self.schema, column_value_map, "REVISED_CREW_QTY")
        "The revised number of people in the crew for the given operation"
        self.ACTUAL_CREW_QTY_SETUP = parse_value(self.schema, column_value_map, "ACTUAL_CREW_QTY_SETUP")
        "The actual number of people in the setup crew for the given operation."
        self.ACTUAL_CREW_QTY = parse_value(self.schema, column_value_map, "ACTUAL_CREW_QTY")
        "The actual number of people in the crew for the given operation"
        self.SCHED_LABOR_HOURS_SETUP = parse_value(self.schema, column_value_map, "SCHED_LABOR_HOURS_SETUP")
        "The scheduled number of hours for labor setup of a given operation."
        self.SCHED_DUR_HOURS_SETUP = parse_value(self.schema, column_value_map, "SCHED_DUR_HOURS_SETUP")
        "The scheduled number of hours for all types of setup for a given operation."
        self.SCHED_LABOR_HOURS_INSPECT = parse_value(self.schema, column_value_map, "SCHED_LABOR_HOURS_INSPECT")
        "The scheduled number of labor hours for inspection of a given operation."
        self.SCHED_DUR_HOURS_INSPECT = parse_value(self.schema, column_value_map, "SCHED_DUR_HOURS_INSPECT")
        "The scheduled number of duration hours for inspection of a given operation."
        self.SCHED_LABOR_HOURS_PER_UNIT = parse_value(self.schema, column_value_map, "SCHED_LABOR_HOURS_PER_UNIT")
        "The scheduled number of labor hours per unit for a given operation."
        self.SCHED_DUR_HOURS_PER_UNIT = parse_value(self.schema, column_value_map, "SCHED_DUR_HOURS_PER_UNIT")
        "The scheduled number of duration hours per unit for a given operation."
        self.SCHED_CREW_QTY_SETUP = parse_value(self.schema, column_value_map, "SCHED_CREW_QTY_SETUP")
        "The scheduled number of people in the setup crew for the given operation."
        self.SCHED_CREW_QTY = parse_value(self.schema, column_value_map, "SCHED_CREW_QTY")
        "The scheduled number of people in the crew for the given operation."
        self.SCHED_MACHINE_HOURS_PER_UNIT = parse_value(self.schema, column_value_map, "SCHED_MACHINE_HOURS_PER_UNIT")
        "The number of machine hours per unit."
        self.SCHED_UNITS_PER_RUN = parse_value(self.schema, column_value_map, "SCHED_UNITS_PER_RUN")
        "The number of units per production run."
        self.SCHED_SETUP_TYPE = parse_value(self.schema, column_value_map, "SCHED_SETUP_TYPE")
        "The type of setup."
        self.SCHED_MACHINE_HOURS_SETUP = parse_value(self.schema, column_value_map, "SCHED_MACHINE_HOURS_SETUP")
        "The number hours required for machine setup."
        self.SCHED_ENG_STD_FLAG = parse_value(self.schema, column_value_map, "SCHED_ENG_STD_FLAG")
        "A flag (Y/N) that indicates whether engineering standards must be set up for a given operation.."
        self.SCHED_MOVE_HOURS = parse_value(self.schema, column_value_map, "SCHED_MOVE_HOURS")
        "The number of hours required to move the setup."
        self.OCCUR_RATE = parse_value(self.schema, column_value_map, "OCCUR_RATE")
        "The probability of a given operation occurring in a work order, where a value of 1 = 100%. A value < 1 indicates that the operation follows a decision node and will occur at the assigned rate."
        self.SUPPLIER_CODE = parse_value(self.schema, column_value_map, "SUPPLIER_CODE")
        self.OSP_DAYS = parse_value(self.schema, column_value_map, "OSP_DAYS")
        "The number of days the operation is expected to take at a given outside vendor."
        self.OSP_COST_PER_UNIT = parse_value(self.schema, column_value_map, "OSP_COST_PER_UNIT")
        "The cost per unit at a given outside vendor."
        self.UCF_PLAN_OPER_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_OPER_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_OPER_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_OPER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_OPER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_OPER_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_OPER_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_OPER_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_OPER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_OPER_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE1")
        "User-configurable field for DATE data type."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.STATUS_CHG_REASON = parse_value(self.schema, column_value_map, "STATUS_CHG_REASON")
        "Reason for a change in status."
        self.STDOPER_OBJECT_ID = parse_value(self.schema, column_value_map, "STDOPER_OBJECT_ID")
        self.OOC_CAUSE_FLAG = parse_value(self.schema, column_value_map, "OOC_CAUSE_FLAG")
        self.OOC_REASON = parse_value(self.schema, column_value_map, "OOC_REASON")
        self.OOC_REASON_NUM = parse_value(self.schema, column_value_map, "OOC_REASON_NUM")
        self.UCHART_UBAR_VALUE = parse_value(self.schema, column_value_map, "UCHART_UBAR_VALUE")
        self.UCHART_UCL_VALUE = parse_value(self.schema, column_value_map, "UCHART_UCL_VALUE")
        self.UCHART_LCL_VALUE = parse_value(self.schema, column_value_map, "UCHART_LCL_VALUE")
        self.TEST_TYPE = parse_value(self.schema, column_value_map, "TEST_TYPE")
        self.OUTLIER_FLAG = parse_value(self.schema, column_value_map, "OUTLIER_FLAG")
        self.ALT_STATUS = parse_value(self.schema, column_value_map, "ALT_STATUS")
        self.LAST_OPER_HDR_CHG_ALT_ID = parse_value(self.schema, column_value_map, "LAST_OPER_HDR_CHG_ALT_ID")
        self.UCF_PLAN_OPER_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH6")
        self.UCF_PLAN_OPER_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH7")
        self.UCF_PLAN_OPER_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH8")
        self.UCF_PLAN_OPER_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH9")
        self.UCF_PLAN_OPER_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH10")
        self.UCF_PLAN_OPER_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH11")
        self.UCF_PLAN_OPER_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH12")
        self.UCF_PLAN_OPER_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH13")
        self.UCF_PLAN_OPER_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH14")
        self.UCF_PLAN_OPER_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH15")
        self.UCF_PLAN_OPER_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM3")
        self.UCF_PLAN_OPER_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM4")
        self.UCF_PLAN_OPER_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_NUM5")
        self.UCF_PLAN_OPER_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE1")
        self.UCF_PLAN_OPER_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE2")
        self.UCF_PLAN_OPER_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE3")
        self.UCF_PLAN_OPER_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE4")
        self.UCF_PLAN_OPER_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_DATE5")
        self.UCF_PLAN_OPER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG3")
        self.UCF_PLAN_OPER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG4")
        self.UCF_PLAN_OPER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_FLAG5")
        self.UCF_PLAN_OPER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH255_1")
        self.UCF_PLAN_OPER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH255_2")
        self.UCF_PLAN_OPER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH255_3")
        self.UCF_PLAN_OPER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH4000_1")
        self.UCF_PLAN_OPER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_OPER_VCH4000_2")
        self.UCF_ORDER_OPER_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH3")
        self.UCF_ORDER_OPER_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH4")
        self.UCF_ORDER_OPER_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH5")
        self.UCF_ORDER_OPER_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH6")
        self.UCF_ORDER_OPER_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH7")
        self.UCF_ORDER_OPER_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH8")
        self.UCF_ORDER_OPER_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH9")
        self.UCF_ORDER_OPER_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH10")
        self.UCF_ORDER_OPER_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH11")
        self.UCF_ORDER_OPER_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH12")
        self.UCF_ORDER_OPER_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH13")
        self.UCF_ORDER_OPER_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH14")
        self.UCF_ORDER_OPER_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH15")
        self.UCF_ORDER_OPER_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM3")
        self.UCF_ORDER_OPER_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM4")
        self.UCF_ORDER_OPER_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_NUM5")
        self.UCF_ORDER_OPER_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE2")
        self.UCF_ORDER_OPER_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE3")
        self.UCF_ORDER_OPER_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE4")
        self.UCF_ORDER_OPER_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_DATE5")
        self.UCF_ORDER_OPER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG2")
        self.UCF_ORDER_OPER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG3")
        self.UCF_ORDER_OPER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG4")
        self.UCF_ORDER_OPER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_FLAG5")
        self.UCF_ORDER_OPER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH255_1")
        self.UCF_ORDER_OPER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH255_2")
        self.UCF_ORDER_OPER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH255_3")
        self.UCF_ORDER_OPER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH4000_1")
        self.UCF_ORDER_OPER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_OPER_VCH4000_2")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.SEQ_STEPS_FLAG = parse_value(self.schema, column_value_map, "SEQ_STEPS_FLAG")
        self.EXE_ORDER = parse_value(self.schema, column_value_map, "EXE_ORDER")
        self.INCLUDED = parse_value(self.schema, column_value_map, "INCLUDED")
        self.STANDARD_FLAG = parse_value(self.schema, column_value_map, "STANDARD_FLAG")
        self.OPER_CHANGE_LEVEL = parse_value(self.schema, column_value_map, "OPER_CHANGE_LEVEL")
        self.PERCENT_COMPLETE = parse_value(self.schema, column_value_map, "PERCENT_COMPLETE")
        self.PERCENT_COMPLETE_COMMENTS = parse_value(self.schema, column_value_map, "PERCENT_COMPLETE_COMMENTS")
        self.ORIENTATION_FLAG = parse_value(self.schema, column_value_map, "ORIENTATION_FLAG")
        self.CROSS_ORDER_FLAG = parse_value(self.schema, column_value_map, "CROSS_ORDER_FLAG")
        self.MUST_ISSUE_PARTS_FLAG = parse_value(self.schema, column_value_map, "MUST_ISSUE_PARTS_FLAG")
        self.ACTIVITY = parse_value(self.schema, column_value_map, "ACTIVITY")
        self.ACCOUNT_LABOR = parse_value(self.schema, column_value_map, "ACCOUNT_LABOR")
        self.COMPLETE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_QTY")
        "Total Number of Units completed at an operation. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.SCRAP_QTY = parse_value(self.schema, column_value_map, "SCRAP_QTY")
        "Total Number of Units scrapped at an operation. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.MISSING_QTY = parse_value(self.schema, column_value_map, "MISSING_QTY")
        "Total Number of Units missing to be completed at an operation. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.UNITS_PER_CYCLE = parse_value(self.schema, column_value_map, "UNITS_PER_CYCLE")
        "This is the Number of units to be process per cycle. Not Applicable during Work order execution. Only used for planning purpose. This value can be different than units_per_cycle_actual."
        self.AUTO_CYCLE_FLAG = parse_value(self.schema, column_value_map, "AUTO_CYCLE_FLAG")
        "This flag can only be 'Y' when material_handling = CYCLE. 'Y' means user can process cycles through external process."
        self.PRINT_LABEL = parse_value(self.schema, column_value_map, "PRINT_LABEL")
        "Action on which the Labels are generated. Possible actions are OFF, CYCLE COMPLETE and OPERATION COMPLETE."
        self.NUMBER_OF_LABELS = parse_value(self.schema, column_value_map, "NUMBER_OF_LABELS")
        "Number of Labels to be generated after each print_label action."
        self.RECONCILE_SCRAP = parse_value(self.schema, column_value_map, "RECONCILE_SCRAP")
        "Possible values are OFF, AUTO and PROMPT. If value is AUTO at the operation, the available units will be scrapped without a prompt. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.UNIT_PROCESSING = parse_value(self.schema, column_value_map, "UNIT_PROCESSING")
        "Defines how does units get processed. Possible values are NORMAL, CYCLE and LOW TOUCH. CYCLE value is only applicable when continuous_flow_flag is 'Y' at order level."
        self.UNITS_PER_CYCLE_ACTUAL = parse_value(self.schema, column_value_map, "UNITS_PER_CYCLE_ACTUAL")
        "Number of units to be processed per cycle. Applicable during Work order execution. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.ACTUAL_MACHINE_NO = parse_value(self.schema, column_value_map, "ACTUAL_MACHINE_NO")
        "The identifying number of the required Machine as actually assigned to the given operation."
        self.AVAILABLE_QTY = parse_value(self.schema, column_value_map, "AVAILABLE_QTY")
        "Total Number of Units available for processing at an operation. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.ACTUAL_MACHINE_ID = parse_value(self.schema, column_value_map, "ACTUAL_MACHINE_ID")
        "The Machine ID related to required Machine No as actually assigned to the given operation."
        self.COMPLETE_CYCLE_QTY = parse_value(self.schema, column_value_map, "COMPLETE_CYCLE_QTY")
        "Total Units arrived at an operation through cycles. Only applicable when continuous_flow_flag is 'Y' at order level."
        self.REPORT_ID = parse_value(self.schema, column_value_map, "REPORT_ID")
        "OBJECT_ID of the Report to be invoked, i.e. the Labels to be generated after each print_label action."
        self.ASGND_LOCATION_ID = parse_value(self.schema, column_value_map, "ASGND_LOCATION_ID")
        self.ASGND_DEPARTMENT_ID = parse_value(self.schema, column_value_map, "ASGND_DEPARTMENT_ID")
        self.ASGND_CENTER_ID = parse_value(self.schema, column_value_map, "ASGND_CENTER_ID")
        self.BATCH_FLAG = parse_value(self.schema, column_value_map, "BATCH_FLAG")
        self.ACTUAL_INQUEUE_DATE = parse_value(self.schema, column_value_map, "ACTUAL_INQUEUE_DATE")
        "The actual time on which the status of the operation is set to IN QUEUE."
        self.LOCK_FLAG = parse_value(self.schema, column_value_map, "LOCK_FLAG")
        "A flag (Y/N) that indicates whether the operation is locked or not."
        self.LOAD_EMB_CONTROL_FLAG = parse_value(self.schema, column_value_map, "LOAD_EMB_CONTROL_FLAG")
        "Reload Order Embedded Control records for this operation when this flag is 'Y'."
        self.TOTAL_COMPLETE_SETUP_PERCENT = parse_value(self.schema, column_value_map, "TOTAL_COMPLETE_SETUP_PERCENT")
        self.TOTAL_COMPLETE_RUN_PERCENT = parse_value(self.schema, column_value_map, "TOTAL_COMPLETE_RUN_PERCENT")
        self.ITEM_LOC = parse_value(self.schema, column_value_map, "ITEM_LOC")
        "Item location of unit."
        self.ARRIVED_DATE = parse_value(self.schema, column_value_map, "ARRIVED_DATE")
        self.DISC_ID = parse_value(self.schema, column_value_map, "DISC_ID")
        self.DISC_LINE_NO = parse_value(self.schema, column_value_map, "DISC_LINE_NO")
        self.STDOPER_TAG = parse_value(self.schema, column_value_map, "STDOPER_TAG")
        self.STDOPER_REV = parse_value(self.schema, column_value_map, "STDOPER_REV")
        self.EFF_GROUP_ID = parse_value(self.schema, column_value_map, "EFF_GROUP_ID")
        self.LATEST_EFF_GRP_REV_FLAG = parse_value(self.schema, column_value_map, "LATEST_EFF_GRP_REV_FLAG")
        self.PLND_MACHINE_REV = parse_value(self.schema, column_value_map, "PLND_MACHINE_REV")
        self.ACTUAL_MACHINE_REV = parse_value(self.schema, column_value_map, "ACTUAL_MACHINE_REV")

class SFWID_OPER_PROCESS_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ORDER_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "PROCESS_TYPE": "STRING",
        "OCCUR_COUNT": "NUMBER",
        "OPER_PROC_DNF": "NUMBER",
        "UPDT_USERID": "STRING",
        "LAST_ACTION": "STRING",
        "TIME_STAMP": "STRING",
        "HIST_ALT_ID": "STRING",
        "ALT_ID": "STRING",
        "ALT_COUNT": "NUMBER",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.PROCESS_TYPE = parse_value(self.schema, column_value_map, "PROCESS_TYPE")
        "Type or classification of the associated manufacturing process."
        self.OCCUR_COUNT = parse_value(self.schema, column_value_map, "OCCUR_COUNT")
        "The number of times that the OPER_PROCESS occurs per unit in a given operation"
        self.OPER_PROC_DNF = parse_value(self.schema, column_value_map, "OPER_PROC_DNF")
        "Defect normalization factor that reflects the acceptable defect tolerance for a given operation process. Used to normalize defect statistics."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.HIST_ALT_ID = parse_value(self.schema, column_value_map, "HIST_ALT_ID")
        "System-generated identifier of the alteration. Used in the event that the master record has been deleted."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")

class SFPL_ITEM_DESC_MASTER_ALL_HIST:
    schema = {
        "HIST_ID": "NUMBER",
        "BARCODE_FORMATE": "STRING",
        "HIST_USERID": "STRING",
        "HIST_TIME_STAMP": "DATE",
        "HIST_ACTION": "STRING",
        "ITEM_ID": "STRING",
        "PART_NO": "STRING",
        "PART_CHG": "STRING",
        "PART_TITLE": "STRING",
        "PARENT_ENG_PART_NO": "STRING",
        "PARENT_ENG_PART_CHG": "STRING",
        "UCF_ITEM_VCH1": "STRING",
        "UCF_ITEM_VCH2": "STRING",
        "UCF_ITEM_NUM1": "NUMBER",
        "UCF_ITEM_FLAG1": "STRING",
        "OBSOLETE_RECORD_FLAG": "STRING",
        "PART_FLAG": "STRING",
        "STANDARD_PART_FLAG": "STRING",
        "UCHART_START_DATE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "UCF_ITEM_VCH3": "STRING",
        "UCF_ITEM_VCH4": "STRING",
        "UCF_ITEM_VCH5": "STRING",
        "UCF_ITEM_VCH6": "STRING",
        "UCF_ITEM_VCH7": "STRING",
        "UCF_ITEM_VCH8": "STRING",
        "UCF_ITEM_VCH9": "STRING",
        "UCF_ITEM_VCH10": "STRING",
        "UCF_ITEM_VCH11": "STRING",
        "UCF_ITEM_VCH12": "STRING",
        "UCF_ITEM_VCH13": "STRING",
        "UCF_ITEM_VCH14": "STRING",
        "UCF_ITEM_VCH15": "STRING",
        "UCF_ITEM_NUM2": "NUMBER",
        "UCF_ITEM_NUM3": "NUMBER",
        "UCF_ITEM_NUM4": "NUMBER",
        "UCF_ITEM_NUM5": "NUMBER",
        "UCF_ITEM_DATE1": "STRING",
        "UCF_ITEM_DATE2": "STRING",
        "UCF_ITEM_DATE3": "STRING",
        "UCF_ITEM_DATE4": "STRING",
        "UCF_ITEM_DATE5": "STRING",
        "UCF_ITEM_FLAG2": "STRING",
        "UCF_ITEM_FLAG3": "STRING",
        "UCF_ITEM_FLAG4": "STRING",
        "UCF_ITEM_FLAG5": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "PARTS_LIST_REV": "NUMBER",
        "FLIGHT_SAFETY_FLAG": "STRING",
        "FLIGHT_ESSENTIAL_FLAG": "STRING",
        "SOURCE_INSP_PLAN_ID": "STRING",
        "DEST_INSP_PLAN_ID": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "SECURITY_GROUP": "STRING",
        "ITEM_STATUS": "STRING",
        "PHANTOM_KIT_FLAG": "STRING",
        "MFG_INSP_PLAN_ID": "STRING",
        "SERIAL_NUM_GEN": "STRING",
        "UCF_ITEM_VCH255_1": "STRING",
        "UCF_ITEM_VCH255_2": "STRING",
        "UCF_ITEM_VCH255_3": "STRING",
        "UCF_ITEM_VCH4000_1": "STRING",
        "UCF_ITEM_VCH4000_2": "STRING",
        "BUY_FLAG": "STRING",
        "MAKE_FLAG": "STRING",
        "AVG_PURCHASE_PRICE_PER_UNIT": "NUMBER",
        "AVG_MATERIAL_COST_PER_UNIT": "NUMBER",
        "AVG_LABOR_COST_PER_UNIT": "NUMBER",
        "PRICE_COST_UNIT": "STRING",
        "AVG_ORDER_LEAD_TIME_DAYS": "NUMBER",
        "COMMODITY_JURISDICTION": "STRING",
        "COMMODITY_CLASSIFICATION": "STRING",
        "DATE_CREATED": "STRING",
        "EXTERNAL_INCOMPLETE_FLAG": "STRING",
        "DESIGN_AUTHORITY": "STRING",
        "OTT_SENSITIVE": "STRING",
        "MANUFACTURER_CODE_REQD": "STRING",
        "MANUFACTURER_PART_NO_REQD": "STRING",
    }
    primary_key_columns = [
        "HIST_ID",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.HIST_ID = parse_value(self.schema, column_value_map, "HIST_ID")
        "Unique, system-generated ID of the obsolete (history) record."
        self.BARCODE_FORMATE = parse_value(self.schema, column_value_map, "BARCODE_FORMATE")
        self.HIST_USERID = parse_value(self.schema, column_value_map, "HIST_USERID")
        "Solumina login ID of the user who moved the record to obsolete status."
        self.HIST_TIME_STAMP = parse_value(self.schema, column_value_map, "HIST_TIME_STAMP")
        "Date and time the record was moved to obsolete status."
        self.HIST_ACTION = parse_value(self.schema, column_value_map, "HIST_ACTION")
        "The action that caused the record to be moved to obsolete status."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of an item/part."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier of the component/part."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.PART_TITLE = parse_value(self.schema, column_value_map, "PART_TITLE")
        "A descriptive title or name of the part."
        self.PARENT_ENG_PART_NO = parse_value(self.schema, column_value_map, "PARENT_ENG_PART_NO")
        "The engineering part number of the manufacturing part (identified the combination of PART_NO, PART_CHG ) or an ancestor (may or may not be the direct parent) of the manufacturing part. BOM of the manufacturing part has or will be constructed based on the engineering part BOM."
        self.PARENT_ENG_PART_CHG = parse_value(self.schema, column_value_map, "PARENT_ENG_PART_CHG")
        "The engineering part change letter."
        self.UCF_ITEM_VCH1 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_VCH2 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ITEM_NUM1 = parse_value(self.schema, column_value_map, "UCF_ITEM_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ITEM_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ITEM_FLAG1")
        "User-configurable field for CHAR(1)/VARCHAR(1) data type serving as flag."
        self.OBSOLETE_RECORD_FLAG = parse_value(self.schema, column_value_map, "OBSOLETE_RECORD_FLAG")
        "A flag (Y/N) that indicates whether the record is obsolete. An obsolete record is filtered when displaying data to a user."
        self.PART_FLAG = parse_value(self.schema, column_value_map, "PART_FLAG")
        self.STANDARD_PART_FLAG = parse_value(self.schema, column_value_map, "STANDARD_PART_FLAG")
        self.UCHART_START_DATE = parse_value(self.schema, column_value_map, "UCHART_START_DATE")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.UCF_ITEM_VCH3 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH3")
        self.UCF_ITEM_VCH4 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH4")
        self.UCF_ITEM_VCH5 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH5")
        self.UCF_ITEM_VCH6 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH6")
        self.UCF_ITEM_VCH7 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH7")
        self.UCF_ITEM_VCH8 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH8")
        self.UCF_ITEM_VCH9 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH9")
        self.UCF_ITEM_VCH10 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH10")
        self.UCF_ITEM_VCH11 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH11")
        self.UCF_ITEM_VCH12 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH12")
        self.UCF_ITEM_VCH13 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH13")
        self.UCF_ITEM_VCH14 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH14")
        self.UCF_ITEM_VCH15 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH15")
        self.UCF_ITEM_NUM2 = parse_value(self.schema, column_value_map, "UCF_ITEM_NUM2")
        self.UCF_ITEM_NUM3 = parse_value(self.schema, column_value_map, "UCF_ITEM_NUM3")
        self.UCF_ITEM_NUM4 = parse_value(self.schema, column_value_map, "UCF_ITEM_NUM4")
        self.UCF_ITEM_NUM5 = parse_value(self.schema, column_value_map, "UCF_ITEM_NUM5")
        self.UCF_ITEM_DATE1 = parse_value(self.schema, column_value_map, "UCF_ITEM_DATE1")
        self.UCF_ITEM_DATE2 = parse_value(self.schema, column_value_map, "UCF_ITEM_DATE2")
        self.UCF_ITEM_DATE3 = parse_value(self.schema, column_value_map, "UCF_ITEM_DATE3")
        self.UCF_ITEM_DATE4 = parse_value(self.schema, column_value_map, "UCF_ITEM_DATE4")
        self.UCF_ITEM_DATE5 = parse_value(self.schema, column_value_map, "UCF_ITEM_DATE5")
        self.UCF_ITEM_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ITEM_FLAG2")
        self.UCF_ITEM_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ITEM_FLAG3")
        self.UCF_ITEM_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ITEM_FLAG4")
        self.UCF_ITEM_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ITEM_FLAG5")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.PARTS_LIST_REV = parse_value(self.schema, column_value_map, "PARTS_LIST_REV")
        self.FLIGHT_SAFETY_FLAG = parse_value(self.schema, column_value_map, "FLIGHT_SAFETY_FLAG")
        self.FLIGHT_ESSENTIAL_FLAG = parse_value(self.schema, column_value_map, "FLIGHT_ESSENTIAL_FLAG")
        self.SOURCE_INSP_PLAN_ID = parse_value(self.schema, column_value_map, "SOURCE_INSP_PLAN_ID")
        self.DEST_INSP_PLAN_ID = parse_value(self.schema, column_value_map, "DEST_INSP_PLAN_ID")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        self.ITEM_STATUS = parse_value(self.schema, column_value_map, "ITEM_STATUS")
        self.PHANTOM_KIT_FLAG = parse_value(self.schema, column_value_map, "PHANTOM_KIT_FLAG")
        "Determines if the item is phantom or not."
        self.MFG_INSP_PLAN_ID = parse_value(self.schema, column_value_map, "MFG_INSP_PLAN_ID")
        "Used to maintain MFG Inspection Plan ID for a part."
        self.SERIAL_NUM_GEN = parse_value(self.schema, column_value_map, "SERIAL_NUM_GEN")
        "Serial Number Generator assigned to a particular part. This serial number generator can be used to automatically generate serial numbers for this item."
        self.UCF_ITEM_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ITEM_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ITEM_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ITEM_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.BUY_FLAG = parse_value(self.schema, column_value_map, "BUY_FLAG")
        "Indicates if the part is purchased."
        self.MAKE_FLAG = parse_value(self.schema, column_value_map, "MAKE_FLAG")
        "Indicates if the part is made."
        self.AVG_PURCHASE_PRICE_PER_UNIT = parse_value(self.schema, column_value_map, "AVG_PURCHASE_PRICE_PER_UNIT")
        "Average Purchase Price Per Unit applies to parts with BUY_FLAG = Y."
        self.AVG_MATERIAL_COST_PER_UNIT = parse_value(self.schema, column_value_map, "AVG_MATERIAL_COST_PER_UNIT")
        "Average Purchase Price Per Unit applies to parts with MAKE_FLAG = Y."
        self.AVG_LABOR_COST_PER_UNIT = parse_value(self.schema, column_value_map, "AVG_LABOR_COST_PER_UNIT")
        "Average Purchase Price Per Unit applies to parts with MAKE_FLAG = Y."
        self.PRICE_COST_UNIT = parse_value(self.schema, column_value_map, "PRICE_COST_UNIT")
        "Indicates the currency for the price and cost fields. Typical values = DOLLARS, EUROS."
        self.AVG_ORDER_LEAD_TIME_DAYS = parse_value(self.schema, column_value_map, "AVG_ORDER_LEAD_TIME_DAYS")
        "Number of days for average order lead time."
        self.COMMODITY_JURISDICTION = parse_value(self.schema, column_value_map, "COMMODITY_JURISDICTION")
        "Commodity Jurisdiction of Part."
        self.COMMODITY_CLASSIFICATION = parse_value(self.schema, column_value_map, "COMMODITY_CLASSIFICATION")
        "Commodity Classification of Part."
        self.DATE_CREATED = parse_value(self.schema, column_value_map, "DATE_CREATED")
        "The date and time the record was inserted."
        self.EXTERNAL_INCOMPLETE_FLAG = parse_value(self.schema, column_value_map, "EXTERNAL_INCOMPLETE_FLAG")
        "A PART/MM OBJECT with value Y should not be visible at any place in the system. Such PART/MM OBJECT act as place holder until actual request is received from external request."
        self.DESIGN_AUTHORITY = parse_value(self.schema, column_value_map, "DESIGN_AUTHORITY")
        self.OTT_SENSITIVE = parse_value(self.schema, column_value_map, "OTT_SENSITIVE")
        self.MANUFACTURER_CODE_REQD = parse_value(self.schema, column_value_map, "MANUFACTURER_CODE_REQD")
        self.MANUFACTURER_PART_NO_REQD = parse_value(self.schema, column_value_map, "MANUFACTURER_PART_NO_REQD")

class SFFND_ALERT_CONDTN_VALUE:
    schema = {
        "ALERT_ID": "STRING",
        "ALERT_CONDITION": "STRING",
        "CONDITION_VALUE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ALERT_ID",
        "ALERT_CONDITION",
    ]
    foreign_keys = [
        DbForeignKey("SFFND_ALERT_CONDTN_VALUE_FK1", ["ALERT_ID"], "SFFND_ALERT_NAME_DEF", ["ALERT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ALERT_ID = parse_value(self.schema, column_value_map, "ALERT_ID")
        "The unique identifier of the alert being referenced."
        self.ALERT_CONDITION = parse_value(self.schema, column_value_map, "ALERT_CONDITION")
        "Condition on which email alert can be generated."
        self.CONDITION_VALUE = parse_value(self.schema, column_value_map, "CONDITION_VALUE")
        "Value of Alert Condition."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_ORDER_CONFIG:
    schema = {
        "ORDER_ID": "STRING",
        "CONFIG_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
    }
    primary_key_columns = [
        "ORDER_ID",
        "CONFIG_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_CONFIG_ORDER_FK", ["ORDER_ID"], "SFWID_ORDER_DESC", ["ORDER_ID"]),
        DbForeignKey("SFWID_ORDER_CONFIG_CONFIG_FK", ["CONFIG_ID"], "SFFND_CONFIG_DEF", ["CONFIG_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.CONFIG_ID = parse_value(self.schema, column_value_map, "CONFIG_ID")
        "Unique system generated column to identify each configuration value."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."

class SFWID_ORDER_TEXT_ALT:
    schema = {
        "ORDER_TEXT_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "TEXT_TYPE": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ALT_COUNT": "NUMBER",
        "ALT_ID": "STRING",
        "TEXT": "STRING",
    }
    primary_key_columns = [
        "ORDER_TEXT_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_TEXT_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_TEXT_ALT = parse_value(self.schema, column_value_map, "ORDER_TEXT_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.TEXT_TYPE = parse_value(self.schema, column_value_map, "TEXT_TYPE")
        "The type of referencing text block, e.g., PLANNING or QA."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.TEXT = parse_value(self.schema, column_value_map, "TEXT")
        "The text/content of the text block. Note that a text block may contain links to Solumina core objects."

class SFPL_STEP_REV:
    schema = {
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "REV_LOCK_STATE": "STRING",
        "PLAN_UPDT_NO": "NUMBER",
        "OPER_NO": "STRING",
        "OPER_UPDT_NO": "NUMBER",
        "STEP_NO": "STRING",
        "STDOPER_FLAG": "STRING",
        "STDOPER_PLAN_FLAG": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "HIDE_STEP_WITHOUT_PART_FLAG": "STRING",
    }
    primary_key_columns = [
        "PLAN_ID",
        "PLAN_VERSION",
        "PLAN_REVISION",
        "PLAN_ALTERATIONS",
        "OPER_KEY",
        "STEP_KEY",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEPREV_STEPDESC_FK", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"], "SFPL_STEP_DESC", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO"]),
        DbForeignKey("SFPL_STEPREV_OPERREV_FK", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS","OPER_KEY"], "SFPL_OPERATION_REV", ["PLAN_ID","PLAN_VERSION","PLAN_REVISION","PLAN_ALTERATIONS","OPER_KEY"]),
    ]
    refs = [
        "SFPL_PLAN_INSP_STEP_LINK_FK1",
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.REV_LOCK_STATE = parse_value(self.schema, column_value_map, "REV_LOCK_STATE")
        "The work Plan Revision lock state. Used for creating multilevel user locks, GroupWare concept. Not in use."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        self.OPER_NO = parse_value(self.schema, column_value_map, "OPER_NO")
        self.OPER_UPDT_NO = parse_value(self.schema, column_value_map, "OPER_UPDT_NO")
        self.STEP_NO = parse_value(self.schema, column_value_map, "STEP_NO")
        self.STDOPER_FLAG = parse_value(self.schema, column_value_map, "STDOPER_FLAG")
        self.STDOPER_PLAN_FLAG = parse_value(self.schema, column_value_map, "STDOPER_PLAN_FLAG")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        self.HIDE_STEP_WITHOUT_PART_FLAG = parse_value(self.schema, column_value_map, "HIDE_STEP_WITHOUT_PART_FLAG")
        "Flag indicating to hide or show the step based on if there are any part data collections at given step."
        self.SFPL_PLAN_INSP_STEP_LINK_FK1 = []

class SFWID_ORDER_DESC_ALT:
    schema = {
        "ORDER_DESC_ALT": "STRING",
        "COMPLETE_ALT_ID": "STRING",
        "COMPLETE_ALT_REV": "NUMBER",
        "ORDER_ID": "STRING",
        "ORDER_NO": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "STRING",
        "LAST_ACTION": "STRING",
        "ORDER_SCRAP_QTY": "NUMBER",
        "ORDER_COMPLETE_QTY": "NUMBER",
        "ORDER_STOP_QTY": "NUMBER",
        "NEEDS_REVIEW_FLAG": "STRING",
        "ALT_COUNT": "NUMBER",
        "PLAN_ID": "STRING",
        "PLAN_VERSION": "NUMBER",
        "PLAN_REVISION": "NUMBER",
        "PLAN_ALTERATIONS": "NUMBER",
        "PLAN_UPDT_NO": "NUMBER",
        "ORDER_STATUS": "STRING",
        "ORDER_HOLD_STATUS": "STRING",
        "ORDER_CUST_ID": "STRING",
        "ORDER_QTY": "NUMBER",
        "SCHED_PRIORITY": "STRING",
        "INITIAL_STORES": "STRING",
        "FINAL_STORES": "STRING",
        "CONTRACT_NO": "STRING",
        "PARENT_ORDER_ID": "STRING",
        "ORIG_ORDER_ID": "STRING",
        "SUPERCEDED_ORDER_ID": "STRING",
        "SUPERCEDES_ORDER": "STRING",
        "SPLIT_FLAG": "STRING",
        "SERIAL_FLAG": "STRING",
        "LOT_FLAG": "STRING",
        "SCHED_START_DATE": "STRING",
        "SCHED_END_DATE": "STRING",
        "REVISED_START_DATE": "STRING",
        "REVISED_END_DATE": "STRING",
        "ACTUAL_START_DATE": "STRING",
        "ACTUAL_END_DATE": "STRING",
        "UNIT_NO": "STRING",
        "CUSTOMER_ORDER_NO": "STRING",
        "PLAN_TYPE": "STRING",
        "ALTER_TYPE": "STRING",
        "ORDER_TYPE": "STRING",
        "STATUS_CHG_NOTES": "STRING",
        "PART_NO": "STRING",
        "ITEM_ID": "STRING",
        "PART_CHG": "STRING",
        "MFG_BOM_CHG": "STRING",
        "PROGRAM": "STRING",
        "PLAN_TITLE": "STRING",
        "UNIT_TYPE": "STRING",
        "ALT_ID": "STRING",
        "MODEL": "STRING",
        "ALT_STATUS": "STRING",
        "ORDER_UOM": "STRING",
        "ENG_PART_NO": "STRING",
        "ENG_PART_CHG": "STRING",
        "ENG_GROUP": "STRING",
        "PROJECT": "STRING",
        "MFG_INDEX_NO": "STRING",
        "PLG_GROUP": "STRING",
        "STATUS_CHG_REASON": "STRING",
        "UCF_PLAN_VCH1": "STRING",
        "UCF_PLAN_VCH2": "STRING",
        "UCF_PLAN_VCH3": "STRING",
        "UCF_PLAN_VCH4": "STRING",
        "UCF_PLAN_VCH5": "STRING",
        "UCF_PLAN_VCH6": "STRING",
        "UCF_PLAN_VCH7": "STRING",
        "UCF_PLAN_VCH8": "STRING",
        "UCF_PLAN_FLAG1": "STRING",
        "UCF_PLAN_FLAG2": "STRING",
        "UCF_ORDER_VCH1": "STRING",
        "UCF_ORDER_VCH2": "STRING",
        "UCF_ORDER_VCH3": "STRING",
        "UCF_ORDER_VCH4": "STRING",
        "UCF_ORDER_VCH5": "STRING",
        "UCF_ORDER_NUM1": "NUMBER",
        "UCF_ORDER_NUM2": "NUMBER",
        "UCF_ORDER_FLAG1": "STRING",
        "OPER_SEQ_FLAG": "STRING",
        "UCF_PLAN_NUM1": "NUMBER",
        "UCF_PLAN_NUM2": "NUMBER",
        "UNSCRAP_FLAG": "STRING",
        "LTA_SEND_FLAG": "STRING",
        "LAST_ORDER_HDR_CHG_ALT_ID": "STRING",
        "UCF_PLAN_VCH9": "STRING",
        "UCF_PLAN_VCH10": "STRING",
        "UCF_PLAN_VCH11": "STRING",
        "UCF_PLAN_VCH12": "STRING",
        "UCF_PLAN_VCH13": "STRING",
        "UCF_PLAN_VCH14": "STRING",
        "UCF_PLAN_VCH15": "STRING",
        "UCF_PLAN_NUM3": "NUMBER",
        "UCF_PLAN_NUM4": "NUMBER",
        "UCF_PLAN_NUM5": "NUMBER",
        "UCF_PLAN_DATE1": "STRING",
        "UCF_PLAN_DATE2": "STRING",
        "UCF_PLAN_DATE3": "STRING",
        "UCF_PLAN_DATE4": "STRING",
        "UCF_PLAN_DATE5": "STRING",
        "UCF_PLAN_FLAG3": "STRING",
        "UCF_PLAN_FLAG4": "STRING",
        "UCF_PLAN_FLAG5": "STRING",
        "UCF_PLAN_VCH255_1": "STRING",
        "UCF_PLAN_VCH255_2": "STRING",
        "UCF_PLAN_VCH255_3": "STRING",
        "UCF_PLAN_VCH4000_1": "STRING",
        "UCF_PLAN_VCH4000_2": "STRING",
        "UCF_ORDER_VCH6": "STRING",
        "UCF_ORDER_VCH7": "STRING",
        "UCF_ORDER_VCH8": "STRING",
        "UCF_ORDER_VCH9": "STRING",
        "UCF_ORDER_VCH10": "STRING",
        "UCF_ORDER_VCH11": "STRING",
        "UCF_ORDER_VCH12": "STRING",
        "UCF_ORDER_VCH13": "STRING",
        "UCF_ORDER_VCH14": "STRING",
        "UCF_ORDER_VCH15": "STRING",
        "UCF_ORDER_NUM3": "NUMBER",
        "UCF_ORDER_NUM4": "NUMBER",
        "UCF_ORDER_NUM5": "NUMBER",
        "UCF_ORDER_DATE1": "STRING",
        "UCF_ORDER_DATE2": "STRING",
        "UCF_ORDER_DATE3": "STRING",
        "UCF_ORDER_DATE4": "STRING",
        "UCF_ORDER_DATE5": "STRING",
        "UCF_ORDER_FLAG2": "STRING",
        "UCF_ORDER_FLAG3": "STRING",
        "UCF_ORDER_FLAG4": "STRING",
        "UCF_ORDER_FLAG5": "STRING",
        "UCF_ORDER_VCH255_1": "STRING",
        "UCF_ORDER_VCH255_2": "STRING",
        "UCF_ORDER_VCH255_3": "STRING",
        "UCF_ORDER_VCH4000_1": "STRING",
        "UCF_ORDER_VCH4000_2": "STRING",
        "ORDER_LOCKED": "STRING",
        "EXTERNAL_PLM_NO": "STRING",
        "EXTERNAL_ERP_NO": "STRING",
        "UID_ITEM_FLAG": "STRING",
        "ITEM_TYPE": "STRING",
        "ITEM_SUBTYPE": "STRING",
        "BOM_NO": "STRING",
        "FAI_OPER_REQD": "STRING",
        "SECURITY_GROUP": "STRING",
        "UID_ENTRY_NAME": "STRING",
        "PLAN_NO": "STRING",
        "DISPLAY_SEQUENCE": "STRING",
        "CONDITION": "STRING",
        "DOC_TYPE": "STRING",
        "INVENTORY_STOCK_LOC": "STRING",
        "ACCOUNT_LABOR": "STRING",
        "ACCOUNT_MATERIAL": "STRING",
        "ORDER_ISSUE_STATUS": "STRING",
        "INSTRUCTIONS_TYPE": "STRING",
        "OPERATION_OVERLAP_FLAG": "STRING",
        "SPLIT_FROM_ORDER_ID": "STRING",
        "ALIAS_PART_NO": "STRING",
        "ALIAS_PART_CHG": "STRING",
        "INSP_ORDER_ID": "STRING",
        "DECLARED_LANGUAGE_CODE": "STRING",
        "EXPLICIT_BOM_LINK_FLAG": "STRING",
        "ASGND_LOCATION_ID": "STRING",
        "BOM_ID": "STRING",
    }
    primary_key_columns = [
        "ORDER_DESC_ALT",
    ]
    foreign_keys = [
        DbForeignKey("SFWID_ORDER_DESC_ALT_FK9", ["ASGND_LOCATION_ID"], "SFFND_WORK_LOC_DEF", ["LOCATION_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_ALT_FK1", ["COMPLETE_ALT_ID"], "SFWID_ALTERATION_DESC", ["ALT_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_ALT_FK5", ["MODEL"], "SFFND_MODEL_DEF", ["MODEL"]),
        DbForeignKey("SFWID_ORDER_DESC_ALT_FK4", ["CONDITION"], "SFFND_CONDITION_DEF", ["CONDITION"]),
        DbForeignKey("SFWID_ORDER_DESC_ALT_FK6", ["PROGRAM"], "SFFND_PROGRAM_DEF", ["PROGRAM"]),
        DbForeignKey("SFWID_ORDER_DESC_ALT_FK10", ["ITEM_ID"], "SFPL_ITEM_DESC_MASTER_ALL", ["ITEM_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_ALT_FK2", ["BOM_ID"], "SFPL_MFG_BOM_REV", ["BOM_ID"]),
        DbForeignKey("SFWID_ORDER_DESC_ALT_FK3", ["UID_ENTRY_NAME"], "SFFND_UID_ENTRY", ["UID_ENTRY_NAME"]),
        DbForeignKey("SFWID_ORDER_DESC_ALT_FK7", ["PROJECT"], "SFFND_PROJECT_DEF", ["PROJECT"]),
        DbForeignKey("SFWID_ORDER_DESC_ALT_FK8", ["ORDER_UOM"], "SFFND_UOM_DEF", ["UOM"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.ORDER_DESC_ALT = parse_value(self.schema, column_value_map, "ORDER_DESC_ALT")
        "Unique, system-generated identifier."
        self.COMPLETE_ALT_ID = parse_value(self.schema, column_value_map, "COMPLETE_ALT_ID")
        "Unique, system-generated identifier of Order alteration."
        self.COMPLETE_ALT_REV = parse_value(self.schema, column_value_map, "COMPLETE_ALT_REV")
        "Max Revision of Order alteration after alteration completion."
        self.ORDER_ID = parse_value(self.schema, column_value_map, "ORDER_ID")
        "Unique, system-generated identifier of a given work order."
        self.ORDER_NO = parse_value(self.schema, column_value_map, "ORDER_NO")
        "Unique, user-assigned identifier of a given work order."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.ORDER_SCRAP_QTY = parse_value(self.schema, column_value_map, "ORDER_SCRAP_QTY")
        "Number of items/component parts that have been scrapped during the process of fulfilling the work order."
        self.ORDER_COMPLETE_QTY = parse_value(self.schema, column_value_map, "ORDER_COMPLETE_QTY")
        "Number of items/component parts that have been completed during the process of fulfilling the given work order."
        self.ORDER_STOP_QTY = parse_value(self.schema, column_value_map, "ORDER_STOP_QTY")
        "Number of items/component parts that have been stopped during the process of fulfilling the given work order."
        self.NEEDS_REVIEW_FLAG = parse_value(self.schema, column_value_map, "NEEDS_REVIEW_FLAG")
        "A flag (Y/N) that indicates whether the associated Corrective Action Diagram requires review."
        self.ALT_COUNT = parse_value(self.schema, column_value_map, "ALT_COUNT")
        "Number of times the data record has been affected by work order alterations."
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.PLAN_VERSION = parse_value(self.schema, column_value_map, "PLAN_VERSION")
        "The version number of the work plan."
        self.PLAN_REVISION = parse_value(self.schema, column_value_map, "PLAN_REVISION")
        "The revision number of the work plan."
        self.PLAN_ALTERATIONS = parse_value(self.schema, column_value_map, "PLAN_ALTERATIONS")
        "Alteration number of a given work plan version.revision. Not in use."
        self.PLAN_UPDT_NO = parse_value(self.schema, column_value_map, "PLAN_UPDT_NO")
        "Unique, system-generated sequence number identifying a specific version/revision/alteration of a given plan as it goes through authoring changes."
        self.ORDER_STATUS = parse_value(self.schema, column_value_map, "ORDER_STATUS")
        "The status of the work order, e.g., ACTIVE, COMPLETE, IN QUEUE, or CANCEL."
        self.ORDER_HOLD_STATUS = parse_value(self.schema, column_value_map, "ORDER_HOLD_STATUS")
        "The on-hold status of the work order, OPEN or CLOSED."
        self.ORDER_CUST_ID = parse_value(self.schema, column_value_map, "ORDER_CUST_ID")
        "The customer receiving the completed work, defaulted to PLND_CUST_ID but can be changed."
        self.ORDER_QTY = parse_value(self.schema, column_value_map, "ORDER_QTY")
        "The quantity of the part to be made for the given work order. Defaults to PLND_ORDER_QTY but can be changed."
        self.SCHED_PRIORITY = parse_value(self.schema, column_value_map, "SCHED_PRIORITY")
        "The scheduled priority of the associated work order, e.g., High, Low, Medium."
        self.INITIAL_STORES = parse_value(self.schema, column_value_map, "INITIAL_STORES")
        "Storage or process location associated with the initial phases of the given work plan or work order."
        self.FINAL_STORES = parse_value(self.schema, column_value_map, "FINAL_STORES")
        "Storage or process location associated with the final phases of the given work plan or work order."
        self.CONTRACT_NO = parse_value(self.schema, column_value_map, "CONTRACT_NO")
        "The contract number the work order is related to."
        self.PARENT_ORDER_ID = parse_value(self.schema, column_value_map, "PARENT_ORDER_ID")
        "The identifier of the parent work order, used to track order splits, and rework/dispositions"
        self.ORIG_ORDER_ID = parse_value(self.schema, column_value_map, "ORIG_ORDER_ID")
        "The identifier of the original work order, which is the initial work order created from work plan release. Used to track splits, rework/dispositions, and supercedes."
        self.SUPERCEDED_ORDER_ID = parse_value(self.schema, column_value_map, "SUPERCEDED_ORDER_ID")
        "The identifier of the work order superceded by this work order."
        self.SUPERCEDES_ORDER = parse_value(self.schema, column_value_map, "SUPERCEDES_ORDER")
        "The identifier of the work order that supercedes this work order."
        self.SPLIT_FLAG = parse_value(self.schema, column_value_map, "SPLIT_FLAG")
        "A flag (Y/N) that indicates whether or not the work order is a split of another work order."
        self.SERIAL_FLAG = parse_value(self.schema, column_value_map, "SERIAL_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by serial number."
        self.LOT_FLAG = parse_value(self.schema, column_value_map, "LOT_FLAG")
        "Flag (Y/N) indicating that the component/part is or should be tracked by lot number."
        self.SCHED_START_DATE = parse_value(self.schema, column_value_map, "SCHED_START_DATE")
        "The date on which the manufacturing work for the work order is scheduled to start."
        self.SCHED_END_DATE = parse_value(self.schema, column_value_map, "SCHED_END_DATE")
        "The date on which the manufacturing work for the work order is scheduled to complete."
        self.REVISED_START_DATE = parse_value(self.schema, column_value_map, "REVISED_START_DATE")
        "The revised work start date."
        self.REVISED_END_DATE = parse_value(self.schema, column_value_map, "REVISED_END_DATE")
        "The revised work complete date."
        self.ACTUAL_START_DATE = parse_value(self.schema, column_value_map, "ACTUAL_START_DATE")
        "The date on which the work for the manufacturing work order has been started."
        self.ACTUAL_END_DATE = parse_value(self.schema, column_value_map, "ACTUAL_END_DATE")
        "The date on which the manufacturing work order has been completed."
        self.UNIT_NO = parse_value(self.schema, column_value_map, "UNIT_NO")
        "The unit number of the shipping product (e.g. airplane tail #) the work order is related to."
        self.CUSTOMER_ORDER_NO = parse_value(self.schema, column_value_map, "CUSTOMER_ORDER_NO")
        "The customer purchase order number associated with the order."
        self.PLAN_TYPE = parse_value(self.schema, column_value_map, "PLAN_TYPE")
        "Type or classification of the associated work plan."
        self.ALTER_TYPE = parse_value(self.schema, column_value_map, "ALTER_TYPE")
        "Type or classification of the last alteration on the associated work order."
        self.ORDER_TYPE = parse_value(self.schema, column_value_map, "ORDER_TYPE")
        "Type or classification of order."
        self.STATUS_CHG_NOTES = parse_value(self.schema, column_value_map, "STATUS_CHG_NOTES")
        "Additional comments about a status change for the associated work order."
        self.PART_NO = parse_value(self.schema, column_value_map, "PART_NO")
        "The primary identifier, part number, of the part."
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")
        "The unique identifier of the item/part to be made upon the work order."
        self.PART_CHG = parse_value(self.schema, column_value_map, "PART_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given component/part. Null for disposition/rework plans/orders."
        self.MFG_BOM_CHG = parse_value(self.schema, column_value_map, "MFG_BOM_CHG")
        "Secondary number or letter identifier indicating the change (revision) level of a given BOM."
        self.PROGRAM = parse_value(self.schema, column_value_map, "PROGRAM")
        "The associated project or program."
        self.PLAN_TITLE = parse_value(self.schema, column_value_map, "PLAN_TITLE")
        "A descriptive title or name of the work plan."
        self.UNIT_TYPE = parse_value(self.schema, column_value_map, "UNIT_TYPE")
        "The type or classification of the unit to be manufactured. For end-unit type effectivities, a type or classification of end unit."
        self.ALT_ID = parse_value(self.schema, column_value_map, "ALT_ID")
        "The unique identifier of the last work order alteration that has affected the data record."
        self.MODEL = parse_value(self.schema, column_value_map, "MODEL")
        "Unique identifier of the associated model/product line."
        self.ALT_STATUS = parse_value(self.schema, column_value_map, "ALT_STATUS")
        "The status of the last alteration on this work order. For example: ORDER_AUTHORING."
        self.ORDER_UOM = parse_value(self.schema, column_value_map, "ORDER_UOM")
        "The Unit Of Measure associated with PLND_ORDER_QTY and ORDER_QTY."
        self.ENG_PART_NO = parse_value(self.schema, column_value_map, "ENG_PART_NO")
        "The part number of the product to be made, mapped to engineering BOM, provided by Engineering."
        self.ENG_PART_CHG = parse_value(self.schema, column_value_map, "ENG_PART_CHG")
        "The change letter associated with the engineering part number."
        self.ENG_GROUP = parse_value(self.schema, column_value_map, "ENG_GROUP")
        "The unique identifier of the associated engineering group."
        self.PROJECT = parse_value(self.schema, column_value_map, "PROJECT")
        "Unique identifier of the associated project."
        self.MFG_INDEX_NO = parse_value(self.schema, column_value_map, "MFG_INDEX_NO")
        "The associated manufacturing index number, usually used in Engineering to identify a specific stage in the manufacturing process."
        self.PLG_GROUP = parse_value(self.schema, column_value_map, "PLG_GROUP")
        "Unique identifier of the associated process planning group."
        self.STATUS_CHG_REASON = parse_value(self.schema, column_value_map, "STATUS_CHG_REASON")
        "Reason for a change in status."
        self.UCF_PLAN_VCH1 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH2 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH3 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH4 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH5 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH6 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH7 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH8 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_FLAG1 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_FLAG2 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_VCH1 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH1")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH2 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH2")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH3 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH3")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH4 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH4")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH5 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH5")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NUM1 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NUM2 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM2")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_FLAG1 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG1")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.OPER_SEQ_FLAG = parse_value(self.schema, column_value_map, "OPER_SEQ_FLAG")
        "A flag (Y/N) indicating whether the operations of the given must be executed in sequence. Obsolete; used only for legacy migration purposes."
        self.UCF_PLAN_NUM1 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM1")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_NUM2 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM2")
        "User-configurable field for NUM data type."
        self.UNSCRAP_FLAG = parse_value(self.schema, column_value_map, "UNSCRAP_FLAG")
        "A flag (Y/N) indicating whether the component/part should be or has been unscrapped."
        self.LTA_SEND_FLAG = parse_value(self.schema, column_value_map, "LTA_SEND_FLAG")
        "If set to Y, Sign ON/OFF be notified to LTA system."
        self.LAST_ORDER_HDR_CHG_ALT_ID = parse_value(self.schema, column_value_map, "LAST_ORDER_HDR_CHG_ALT_ID")
        self.UCF_PLAN_VCH9 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH10 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH11 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH12 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH13 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH14 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_VCH15 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_PLAN_NUM3 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_NUM4 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_NUM5 = parse_value(self.schema, column_value_map, "UCF_PLAN_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_PLAN_DATE1 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_DATE2 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_DATE3 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_DATE4 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_DATE5 = parse_value(self.schema, column_value_map, "UCF_PLAN_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_PLAN_FLAG3 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_FLAG4 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG4")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_FLAG5 = parse_value(self.schema, column_value_map, "UCF_PLAN_FLAG5")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_PLAN_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PLAN_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PLAN_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_PLAN_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_PLAN_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_PLAN_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ORDER_VCH6 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH6")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH7 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH7")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH8 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH8")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH9 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH9")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH10 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH10")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH11 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH11")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH12 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH12")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH13 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH13")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH14 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH14")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_VCH15 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH15")
        "User-configurable field for VARCHAR data type."
        self.UCF_ORDER_NUM3 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM3")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NUM4 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM4")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_NUM5 = parse_value(self.schema, column_value_map, "UCF_ORDER_NUM5")
        "User-configurable field for NUM data type."
        self.UCF_ORDER_DATE1 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE1")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_DATE2 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE2")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_DATE3 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE3")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_DATE4 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE4")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_DATE5 = parse_value(self.schema, column_value_map, "UCF_ORDER_DATE5")
        "User-configurable field for DATE data type."
        self.UCF_ORDER_FLAG2 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG2")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_FLAG3 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG3")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_FLAG4 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG4")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_FLAG5 = parse_value(self.schema, column_value_map, "UCF_ORDER_FLAG5")
        "User-configurable field for CHAR(1) data type serving as flag."
        self.UCF_ORDER_VCH255_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH255_1")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_VCH255_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH255_2")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_VCH255_3 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH255_3")
        "User-configurable field for VARCHAR data type of size 255."
        self.UCF_ORDER_VCH4000_1 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH4000_1")
        "User-configurable field for VARCHAR data type of size 4000."
        self.UCF_ORDER_VCH4000_2 = parse_value(self.schema, column_value_map, "UCF_ORDER_VCH4000_2")
        "User-configurable field for VARCHAR data type of size 4000."
        self.ORDER_LOCKED = parse_value(self.schema, column_value_map, "ORDER_LOCKED")
        self.EXTERNAL_PLM_NO = parse_value(self.schema, column_value_map, "EXTERNAL_PLM_NO")
        "A Number identifier which identifies that this record comes from Plam Device."
        self.EXTERNAL_ERP_NO = parse_value(self.schema, column_value_map, "EXTERNAL_ERP_NO")
        "A Number identifier which identifies that this record comes from ERP System"
        self.UID_ITEM_FLAG = parse_value(self.schema, column_value_map, "UID_ITEM_FLAG")
        self.ITEM_TYPE = parse_value(self.schema, column_value_map, "ITEM_TYPE")
        self.ITEM_SUBTYPE = parse_value(self.schema, column_value_map, "ITEM_SUBTYPE")
        self.BOM_NO = parse_value(self.schema, column_value_map, "BOM_NO")
        "Bill Of Material Number."
        self.FAI_OPER_REQD = parse_value(self.schema, column_value_map, "FAI_OPER_REQD")
        self.SECURITY_GROUP = parse_value(self.schema, column_value_map, "SECURITY_GROUP")
        "Security group assigned."
        self.UID_ENTRY_NAME = parse_value(self.schema, column_value_map, "UID_ENTRY_NAME")
        self.PLAN_NO = parse_value(self.schema, column_value_map, "PLAN_NO")
        self.DISPLAY_SEQUENCE = parse_value(self.schema, column_value_map, "DISPLAY_SEQUENCE")
        self.CONDITION = parse_value(self.schema, column_value_map, "CONDITION")
        self.DOC_TYPE = parse_value(self.schema, column_value_map, "DOC_TYPE")
        "Stored Document type for the corresponding work order."
        self.INVENTORY_STOCK_LOC = parse_value(self.schema, column_value_map, "INVENTORY_STOCK_LOC")
        self.ACCOUNT_LABOR = parse_value(self.schema, column_value_map, "ACCOUNT_LABOR")
        self.ACCOUNT_MATERIAL = parse_value(self.schema, column_value_map, "ACCOUNT_MATERIAL")
        self.ORDER_ISSUE_STATUS = parse_value(self.schema, column_value_map, "ORDER_ISSUE_STATUS")
        "Determines if the Work Order is requested for Part Issue or not."
        self.INSTRUCTIONS_TYPE = parse_value(self.schema, column_value_map, "INSTRUCTIONS_TYPE")
        "Instructions type associated to the given work order."
        self.OPERATION_OVERLAP_FLAG = parse_value(self.schema, column_value_map, "OPERATION_OVERLAP_FLAG")
        "Operation Overlap flag, used to allow partial lot completions and a lot to be spread out over many operations."
        self.SPLIT_FROM_ORDER_ID = parse_value(self.schema, column_value_map, "SPLIT_FROM_ORDER_ID")
        "Contains the original ORDER_ID from which a given order was split."
        self.ALIAS_PART_NO = parse_value(self.schema, column_value_map, "ALIAS_PART_NO")
        "Part No of alias/Starting Part."
        self.ALIAS_PART_CHG = parse_value(self.schema, column_value_map, "ALIAS_PART_CHG")
        "Part Chagne of alias/Starting Part."
        self.INSP_ORDER_ID = parse_value(self.schema, column_value_map, "INSP_ORDER_ID")
        "Unique system generated identifier of Inspection Order."
        self.DECLARED_LANGUAGE_CODE = parse_value(self.schema, column_value_map, "DECLARED_LANGUAGE_CODE")
        "Language code as per ISO639 standard."
        self.EXPLICIT_BOM_LINK_FLAG = parse_value(self.schema, column_value_map, "EXPLICIT_BOM_LINK_FLAG")
        "Indicates if specific BOM Revision will be explicitly linked to Plan/Order."
        self.ASGND_LOCATION_ID = parse_value(self.schema, column_value_map, "ASGND_LOCATION_ID")
        "Unique, system-generated identifier of the given Work Location."
        self.BOM_ID = parse_value(self.schema, column_value_map, "BOM_ID")
        "Unique system generated identifier for BOM."

class SFQA_CHG_LOG_TABLE_DESC:
    schema = {
        "TABLE_NAME": "STRING",
        "DESCRIPTION": "STRING",
        "KEY_COLUMN1": "STRING",
        "KEY_COLUMN2": "STRING",
        "KEY_COLUMN3": "STRING",
        "KEY_COLUMN4": "STRING",
        "KEY_COLUMN5": "STRING",
    }
    primary_key_columns = [
        "TABLE_NAME",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.TABLE_NAME = parse_value(self.schema, column_value_map, "TABLE_NAME")
        self.DESCRIPTION = parse_value(self.schema, column_value_map, "DESCRIPTION")
        self.KEY_COLUMN1 = parse_value(self.schema, column_value_map, "KEY_COLUMN1")
        self.KEY_COLUMN2 = parse_value(self.schema, column_value_map, "KEY_COLUMN2")
        self.KEY_COLUMN3 = parse_value(self.schema, column_value_map, "KEY_COLUMN3")
        self.KEY_COLUMN4 = parse_value(self.schema, column_value_map, "KEY_COLUMN4")
        self.KEY_COLUMN5 = parse_value(self.schema, column_value_map, "KEY_COLUMN5")

class SFFND_DOC:
    schema = {
        "THEBLOB": "STRING",
        "THECLOB": "STRING",
        "IDENTITY_COL": "NUMBER",
    }
    primary_key_columns = [
        "IDENTITY_COL",
    ]
    foreign_keys = [
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.THEBLOB = parse_value(self.schema, column_value_map, "THEBLOB")
        self.THECLOB = parse_value(self.schema, column_value_map, "THECLOB")
        self.IDENTITY_COL = parse_value(self.schema, column_value_map, "IDENTITY_COL")

class SFPL_STEP_DAT_COL_EFF:
    schema = {
        "PLAN_ID": "STRING",
        "OPER_KEY": "NUMBER",
        "STEP_KEY": "NUMBER",
        "STEP_UPDT_NO": "NUMBER",
        "DAT_COL_ID": "STRING",
        "DAT_COL_LIMIT_ID": "STRING",
        "EFF_TYPE": "STRING",
        "EFF_FROM": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "EFF_THRU": "STRING",
        "EFF_FROM_DATE": "STRING",
        "EFF_THRU_DATE": "DATE",
    }
    primary_key_columns = [
        "PLAN_ID",
        "OPER_KEY",
        "STEP_KEY",
        "STEP_UPDT_NO",
        "DAT_COL_ID",
        "DAT_COL_LIMIT_ID",
        "EFF_TYPE",
        "EFF_FROM",
    ]
    foreign_keys = [
        DbForeignKey("SFPL_STEP_DAT_COL_EFF_UNIT_FK", ["EFF_TYPE"], "SFFND_UNIT_TYPE_DEF", ["UNIT_TYPE"]),
        DbForeignKey("SFPL_STPDTCL_EFF_STPDTCLLMT_FK", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO","DAT_COL_ID","DAT_COL_LIMIT_ID"], "SFPL_STEP_DAT_COL_LIMIT", ["PLAN_ID","OPER_KEY","STEP_KEY","STEP_UPDT_NO","DAT_COL_ID","DAT_COL_LIMIT_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.PLAN_ID = parse_value(self.schema, column_value_map, "PLAN_ID")
        "Unique, system-generated identifier of a work plan."
        self.OPER_KEY = parse_value(self.schema, column_value_map, "OPER_KEY")
        "Unique, system-generated identifier of a given operation."
        self.STEP_KEY = parse_value(self.schema, column_value_map, "STEP_KEY")
        "Unique, system-generated identifier of a given step."
        self.STEP_UPDT_NO = parse_value(self.schema, column_value_map, "STEP_UPDT_NO")
        "Sequential, system-generated number identifying a version or stage of a given step as it undergoes authoring changes."
        self.DAT_COL_ID = parse_value(self.schema, column_value_map, "DAT_COL_ID")
        "Unique, system-generated identifier of the data collection."
        self.DAT_COL_LIMIT_ID = parse_value(self.schema, column_value_map, "DAT_COL_LIMIT_ID")
        "The unique identifier/sequence of a particular data collection value domain definition associated with the data collection point."
        self.EFF_TYPE = parse_value(self.schema, column_value_map, "EFF_TYPE")
        "A type of effectivity of data collection value domain definitions. For example: time period, or finishing product."
        self.EFF_FROM = parse_value(self.schema, column_value_map, "EFF_FROM")
        "The upper bound of the effectivity range for a effectivity type other than time period."
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        "Solumina login ID of the last user to manipulate the record."
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        "The date and time the record was last manipulated."
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        "The last operation (update, insert, copy, etc.) applied to the record."
        self.EFF_THRU = parse_value(self.schema, column_value_map, "EFF_THRU")
        "The lower bound of the effectivity range for a effectivity type other than time period."
        self.EFF_FROM_DATE = parse_value(self.schema, column_value_map, "EFF_FROM_DATE")
        "The starting date of the time period during which the data collection value domain definition is effective."
        self.EFF_THRU_DATE = parse_value(self.schema, column_value_map, "EFF_THRU_DATE")
        "The ending date of the time period during which the data collection value domain definition is effective."

class SFSQA_INSP_DEF_II_ALT_XREF:
    schema = {
        "OWNER_CODE": "STRING",
        "INSP_DEF_REV": "NUMBER",
        "INSP_ITEM_ID": "STRING",
        "ALT_INSP_ITEM_ID": "STRING",
        "UPDT_USERID": "STRING",
        "TIME_STAMP": "DATE",
        "LAST_ACTION": "STRING",
        "ITEM_ID": "STRING",
    }
    primary_key_columns = [
        "ITEM_ID",
        "OWNER_CODE",
        "INSP_DEF_REV",
        "INSP_ITEM_ID",
        "ALT_INSP_ITEM_ID",
    ]
    foreign_keys = [
        DbForeignKey("SFSQA_INSP_DEF_II_ALT_XREF_FK2", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV","ALT_INSP_ITEM_ID"], "SFSQA_INSP_DEF_INSP_ITEMS", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV","INSP_ITEM_ID"]),
        DbForeignKey("SFSQA_INSP_DEF_II_ALT_XREF_FK1", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV","INSP_ITEM_ID"], "SFSQA_INSP_DEF_INSP_ITEMS", ["ITEM_ID","OWNER_CODE","INSP_DEF_REV","INSP_ITEM_ID"]),
    ]
    refs = [
    ]
    def __init__(self, column_value_map):
        self.OWNER_CODE = parse_value(self.schema, column_value_map, "OWNER_CODE")
        self.INSP_DEF_REV = parse_value(self.schema, column_value_map, "INSP_DEF_REV")
        self.INSP_ITEM_ID = parse_value(self.schema, column_value_map, "INSP_ITEM_ID")
        self.ALT_INSP_ITEM_ID = parse_value(self.schema, column_value_map, "ALT_INSP_ITEM_ID")
        self.UPDT_USERID = parse_value(self.schema, column_value_map, "UPDT_USERID")
        self.TIME_STAMP = parse_value(self.schema, column_value_map, "TIME_STAMP")
        self.LAST_ACTION = parse_value(self.schema, column_value_map, "LAST_ACTION")
        self.ITEM_ID = parse_value(self.schema, column_value_map, "ITEM_ID")

